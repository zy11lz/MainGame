module Pro
{
    /**
    * 界面说明： 超凡段位赛-个人战绩界面
    * @author jason.xu
    */
    export class DanExploitsMediator extends BaseMediator implements IMediator
    {
        public UIPanel: ProUI.Dan.DanExploitsUI;

        /** 当前翻页赛季数(1开始) */
        private _curPageNum = 1;

        /** 需要自动加载的资源列表(如果资源没有单独加载，可忽略) */
        public autoLoadAtlas(): Array<any>
        {
            return null;
            // return [UrlMgr.getAtlas("temp")];
        }

        public openUI(): void
        {
            this.showPanel(ProUI.Dan.DanExploitsUI, 1, BaseAddLayer.CenterUI, true, 1);
        }

        /** 模块初始化函数（可以理解为模块的构造函数）， 只会在面板初始化的时候调用一次，其他任何时候都不会调用， */
        public initialization(): void
        {
            this.UIPanel.tabGrp.onClick(this, this.onClickTabGroup,
                [new component.UITabData("dan_msg13"), new component.UITabData("dan_msg14")],
                [new component.UITabStyle("#f13b54"), new component.UITabStyle("#fffced")]
            );
        }

        /**
         * 初始化面板ui
         */
        public initUI(): void
        {
            this.UIPanel.tabGrp.setSelectTab(0);
            this.refreshUI();
        }


        /** 模块被【添加到舞台】时由 模块管理类 内部自动调用, 无需自己调用, */
        public addEvent(): void
        {
            this.UIPanel.btnLeft.onClick(this, this.onClickLeft);
            this.UIPanel.btnRight.onClick(this, this.onClickRight);

            // 	 总战绩查询返回
            this.addEventMgr(CmdEvent.Dan_TotalResultAck, this, this.onTotalResultAck)
            // 	 赛季战绩返回
            this.addEventMgr(CmdEvent.Dan_SeasonResultAck, this, this.onSeasonResultAck)
        }

        /** 模块被【移出舞台】时由 模块管理类 内部自动调用, 无需自己调用, */
        public removeEvent(): void
        {
        }

        /** 点击主分页 */
        private onClickTabGroup(tab: component.UITab, tabIndex: number, oldTabIndex: number): void
        {
            if (tabIndex == 0)
            { //总战绩查询
                this.UIPanel.btnLeft.visible = false;
                this.UIPanel.btnRight.visible = false;
                DanSend.totalResultAsk();
            }
            else
            {
                this.setPageCount(DanDataMgr.seasonNumber);
            }
        }

        /** 点击左翻页 */
        private onClickLeft(): void
        {
            this.setPageCount(this._curPageNum - 1);
        }

        /** 点击右翻页 */
        private onClickRight(): void
        {
            this.setPageCount(this._curPageNum + 1);
        }

        /** 设置赛季战绩分页下的翻页 */
        private setPageCount(index: number)
        {
            this._curPageNum = index;
            this.UIPanel.btnLeft.visible = index > 1;
            this.UIPanel.btnRight.visible = index < DanDataMgr.seasonNumber;

            DanSend.seasonResultAsk(this._curPageNum);
        }

        /** 刷新UI视图， 当有子界面回退到此界面时，会自动调用 */
        public refreshUI()
        {

        }


		/*****
		 * 	 总战绩查询返回
		 * @param 
		 */
        private onTotalResultAck(value: Pb_God.PBPlayerDanResult): void
        {
            //当前不在总战绩的分页
            if (this.UIPanel.tabGrp.tabIndex > 0) return;

            this.resetExploitsData(value);
        }

		/*****
		 * 	 赛季战绩返回
         * @param
		 */
        private onSeasonResultAck(value: Pb_God.PBPlayerDanResult): void
        {
            //当前不在单赛季战绩的分页
            if (this.UIPanel.tabGrp.tabIndex != 1) return;
            if (this._curPageNum != value.seasonid) return;

            this.resetExploitsData(value);
        }

        private resetExploitsData(value: Pb_God.PBPlayerDanResult): void
        {
            this.UIPanel.txtSeason.text = Global.getLangStr("dan_msg2", value.seasonid);

            this.UIPanel.txtCurDan.text = cfg.DanUpgradeCfgData.getDanNameByDanID(value.curdanid);
            this.UIPanel.txtMaxDan.text = cfg.DanUpgradeCfgData.getDanNameByDanID(value.maxdanid);
            this.UIPanel.txtNormalWinCount.text = value.normalsuccount + "";
            this.UIPanel.txtNormalWinPercent.text = Global.parsePercentNum(value.normalsuccount / value.normaltotalcount, 0);
            this.UIPanel.txtKingWinCount.text = value.kingsuccount + "";
            this.UIPanel.txtKingWinPercent.text = Global.parsePercentNum(value.kingtotalcount ? value.kingsuccount / value.kingtotalcount : 0, 0);
            this.UIPanel.txtMaxHit.text = value.maxdamage + "";
            this.UIPanel.txtCurScore.text = value.score + "";
            this.UIPanel.txtMaxScore.text = value.maxscore + "";
            this.UIPanel.txtMaxSeriesWin.text = value.maxcontinuewin + "";
            //mvp次数最多英雄
            let skinId = value.mvpmaxpet;
            if (skinId)
                this.UIPanel.norItemHero.setPetUI(skinId, 0);
            else
                this.UIPanel.norItemHero.setEmptyInfo();
            this.UIPanel.txtHeroName.text = cfg.PetSkinCfgData.getFileNameById(skinId);
            //最强对手信息
            let target = value.maxenemy;
            if (target)
            {
                this.UIPanel.playerIconTar.setPlayerDisplayInfo(target.display, false, true);
                this.UIPanel.txtTarFightValue1.text = target.fightpower1 + "";
                //  this.UIPanel.txtTarFightValue2.text = target.fightpower2 + "";
                this.UIPanel.txtTarNickname.text = `[S${ target.display.worldid }]` + target.display.playername;
            } else
            {
                this.UIPanel.playerIconTar.setPlayerDisplayInfo(null);
                this.UIPanel.txtTarFightValue1.text = 0 + "";
                // this.UIPanel.txtTarFightValue2.text = 0 + "";
                this.UIPanel.txtTarNickname.text = "";
            }
        }

    }
}
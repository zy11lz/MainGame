package Pb_God;// 帐号标志
message PBAccountFlag
{
	optional string accountname			= 1;				// 账号名
	optional uint32 accountid			= 2;				// 帐号ID
	optional uint32 acountmark			= 3;				// 帐号标示码	_emAccountMark
	optional uint64 loginsn				= 4;				// 登录流水号
}

// 帐号
message PBAccount
{
	optional PBAccountFlag	accountflag	= 1;				// 帐号标志
	optional uint32 plattype			= 2;				// 平台类型 _emPlatformType
	optional uint32 createTime			= 3;				// 创建时间
	optional uint32 loginTime			= 4;				// 登录时间
	optional string ip					= 5;				// 字符串IP
	optional uint64 netip				= 6;				// 网络字节IP
	optional string passwd				= 7;				// 账号密码
	optional uint32	worldID				= 8;				// 世界ID
	optional uint32 curPlayerID			= 9;				// 当前角色ID
	optional bool 	isgmlogin			= 10;				// 是否是GM登陆
	optional bool 	isregister			= 11;				// 是否是注册
	optional bool 	isIDCardBind		= 12;				// 是否实名绑定
	optional uint32 loginOutTime		= 13;				// 登出时间
	optional uint32 onlineTime			= 14;				// 在线时间
	optional uint32 dailyOnlineTime		= 15;				// 每日在线时间
}



//-------------------------------------------------------------
//------------------------------ 成就相关
enum _emResultAchieve_18
{
	R_ResultAchieve_Succeed				= 0; //成功
	R_ResultAchieve_Fail				= 1; //失败
	R_ResultAchieve_NeedCondition		= 2; //条件未达成
	R_ResultAchieve_HavePrize			= 3; //已经领取过
	R_ResultAchieve_NeedItem			= 4; //道具不足
	R_ResultAchieve_NeedMain			= 5; //需要主线类型
	R_ResultAchieve_NeedLevel			= 6; //等级不足
	R_ResultAchieve_NeedPrivilege		= 7; //需要权限
};

//----成就模块
enum _emC2S_Achieve_Protocol
{
	C2S_Achieve_LivenessComplete			= 1 ; 	// 活跃完成		PBU32
	C2S_Achieve_LivenessPrize				= 2 ; 	// 活跃领奖		PBU32
	C2S_Achieve_MainComplete				= 3 ; 	// 主线完成		PBU32
	C2S_Achieve_TrainComplete				= 4 ; 	// 历练完成		PBU32
	C2S_Achieve_ActivityLivenessComplete	= 5 ; 	// 活动活跃完成	PBU32
	C2S_Achieve_ActivityLivenessPrize		= 6 ; 	// 活动活跃领奖	PBU32
	C2S_Achieve_WeekLivenessComplete		= 7 ; 	// 周活跃完成	PBU32
	C2S_Achieve_WeekLivenessPrize			= 8 ; 	// 周活跃领奖	PBU32
	C2S_Achieve_WarOrderComplete			= 9 ; 	// 战令完成		PBU32
	C2S_Achieve_WarOrderPrize				= 10 ; 	// 战令奖励(等级，是否进阶奖励0/1)		PBU32U32
	C2S_Achieve_WarOrderPrizeOneKey			= 11 ; 	// 战令一键奖励
	C2S_Achieve_IllustrationComplete		= 12 ; 	// 图鉴完成		PBU32
	C2S_Achieve_IllustrationPowerComplete	= 13 ; 	// 图鉴战力完成		PBU32
	C2S_Achieve_AchieveRoadComplete			= 14 ; 	// 成就之路完成		PBU32
}
//----成就模块
enum _emS2C_Achieve_Protocol
{
	S2C_Achieve_Common						= 0 ;	// 通用错误返回
	S2C_Achieve_LivenessComplete			= 1 ;	// 活跃完成 			PBU32
	S2C_Achieve_LivenessPrize				= 2 ;	// 活跃领奖 			PBU32
	S2C_Achieve_MainComplete				= 3 ;	// 主线完成				PBU32
	S2C_Achieve_MainAdd						= 4 ;	// 新增主线				PBPlayerOneAchieve
	S2C_Achieve_Update						= 5 ;	// 更新成就				PBG2CAchieve_Update
	S2C_Achieve_TrainComplete				= 6 ;	// 历练完成				PBU32
	S2C_Achieve_SynDailyLiveness			= 7 ;	// 更新日活跃			PBU32
	S2C_Achieve_ActivityLivenessComplete	= 8 ;	// 活动活跃完成 		PBU32
	S2C_Achieve_ActivityLivenessPrize		= 9 ;	// 活动活跃领奖 		PBU32
	S2C_Achieve_SynActivityLiveness			= 10;	// 更新活动活跃			PBU32
	S2C_Achieve_WeekLivenessComplete		= 11;	// 周活跃完成 			PBU32
	S2C_Achieve_WeekLivenessPrize			= 12;	// 周活跃领奖 			PBU32
	S2C_Achieve_SynWeeklyLiveness			= 13;	// 更新周活跃			PBU32
	S2C_Achieve_WarOrderComplete			= 14 ; 	// 战令完成				PBU32
	S2C_Achieve_WarOrderPrize				= 15 ; 	// 战令奖励(等级，是否进阶奖励0/1)				PBU32U32
	S2C_Achieve_SyncWarOrderLevel			= 16 ; 	// 同步战令等级(level, exp) PBU32U32
	S2C_Achieve_WarOrderPrizeOneKey			= 17 ; 	// 战令一键奖励			PBG2CWarOrderOneKey
	S2C_Achieve_IllustrationComplete		= 18 ; 	// 图鉴完成				PBU32
	S2C_Achieve_IllustrationPowerComplete	= 19 ; 	// 图鉴战力完成		PBU32
	S2C_Achieve_AchieveRoadComplete			= 20 ; 	// 成就之路完成		PBU32
}
//更新成就
message PBG2CAchieve_Update
{
	optional uint32 				bigtype = 1;	//成就大类型_emAchieveBigType
	optional PBPlayerOneAchieve 	achieve = 2;	//成就数据
}
//战令一键奖励
message PBG2CWarOrderOneKey
{
	repeated PBU32U32	prize = 1; // 奖励的领取状态(等级，普通 1 进阶 2 both 3)(改变了的)
}


//-------------------------------------------------------------
//------------------------------ 活动相关
//----活动的返回
enum _emResultActivity_33
{
	R_Activity_Succeed			= 0; // 成功
	R_Activity_Fail				= 1; // 失败
    R_Activity_Acquired         = 2; // 已经领取
    R_Activity_Requirement      = 3; // 没达到要求
    R_Activity_Num              = 4; // 奖品数量不足
    R_Activity_Time             = 5; // 当前时间不能领取
    R_Activity_Brought          = 6; // 还没有购买
    R_Activity_Expired          = 7; // 过期了
    R_Activity_VIP              = 8; // vip等级不足
    R_Activity_Level            = 9; // 等级不足
    R_Activity_Day              = 10; // 未达到天数
    R_Activity_NeedItem         = 11; // 道具不足
    R_Activity_NotPet           = 12; // 消耗精灵无效
    R_Activity_RemovePet        = 13; // 精灵消耗失败
    R_Activity_PetNumNotEnough  = 14; // 精灵消耗数据不足
    R_Activity_WeekDay_Error    = 15; //周末福蛋，领取日期错误
    R_Activity_CustomGift_Index_Error = 16; //定制礼包，所选礼包重复
    R_Activity_CustomGift_Count       = 17; //定制礼包，购买次数不足
    R_Activity_CustomGift_No_Free     = 18; //定制礼包，非免费领取
};

//----活动模块
enum _emC2S_Activity_Protocol
{
	C2S_Activity_DrawReward	        = 1; 	// 领奖品 PBG2CActivityDrawReward
    C2S_Activity_GetStartTime       = 2;    // 获取当前活动的开始时间 PBC2GActivityStartTime
    C2S_Activity_GetRewardNum       = 3;    // 获取活动奖励物品的剩余数量(全区共用的奖励数量),活动ID PBU32
    C2S_Activity_DrawRewardEx       = 4;    // 领奖品 PBG2CActivityDrawRewardEx 
    C2S_Activity_DrawRewardOneKey   = 5;    // 一键领奖 PBG2CActivityDrawRewardOneKey  
    C2S_Activity_CustomGiftOrder    = 6;    // 定制礼包预选商品 PBC2GActivityCustomGiftOrder  
}

//----活动模块
enum _emS2C_Activity_Protocol
{
	S2C_Activity_Common_ACK			= 1; 	// 通用返回
    S2C_Activity_DrawReward         = 2;    // 领取奖品返回             PBG2CActivityDrawReward
    S2C_Activity_Open               = 3;    // 活动开始通知，活动ID     PBU32
    S2C_Activity_Close              = 4;    // 活动关闭通知，活动ID     PBU32
    S2C_Activity_Refresh            = 5;    // 活动数据重置，活动ID     PBU32
    S2C_Activity_GetStartTime       = 6;    // 返回当前活动的开始时间       PBG2CActivityStartTime
    S2C_Activity_GetRewardNum       = 7;    // 返回奖励物品的剩余数量   PBG2CActivityRewardNum
    S2C_Activity_Data               = 8;    // 同步数据                 PBPlayerActivityData
    S2C_Activity_CustomGiftOrder    = 9;    // 定制礼包预选商品         PBG2CActivityCustomGiftOrder 
}

//----活动模块
enum _emActivitySwitch
{
	ActivitySwitch_AchievementLevel	= 1; 	// 7日目标活动开放等级
}

// 兑换类型
enum _emActivityExchangeType
{
    ActivityExchangeType_Item = 1;    // 道具
    ActivityExchangeType_Pet  = 2;    // 精灵
}

// 领取奖品信息
message PBG2CActivityDrawReward
{
    optional uint32 id              = 1; //活动ID
    optional uint32 index           = 2; //索引，对应活动配置表里的索引
    optional uint32 num             = 3; //领取数量
}

// 领取奖品信息加强版
message PBG2CActivityDrawRewardEx
{
    optional uint32 id              = 1; //活动ID
    optional uint32 index           = 2; //索引，对应活动配置表里的索引
    optional uint32 count           = 3; //兑换数量
    repeated uint64 data            = 4; //精灵SN/。。。
}

// 一键领取奖品
message PBG2CActivityDrawRewardOneKey
{
    optional uint32 id              = 1; //活动ID
    optional uint32 index           = 2; //索引，对应活动配置表里的索引
}

//开启了的活动信息
message PBC2GActivityStartTime
{
    repeated uint32 id = 1; // 活动的ID,如果为空(没有指定活动)，返回所有的活动，否则只返回请求id的开始时间
}

//开启了的活动信息
message PBG2CActivityStartTime
{
    repeated uint32 id          = 1; // 活动的ID
    repeated uint32 starttime   = 2; // 活动的开启时间
}

//奖励物品的剩余数量
message PBG2CActivityRewardNum
{
    optional uint32 id              = 1; //活动ID
    repeated PBU32U32 reward        = 2; //key是index，value 是num
}

//保存数值Key
enum _emActivityDataKey
{
	Activity_Key_ChargeAmount	            = 1;	// 充值累计金额
    Activity_Key_ChargeDays	                = 2;	// 充值累计天数
    Activity_Key_ChargeLastTime	            = 3;	// 上次充值的时间
    Activity_Key_CompleteNum                = 4;    // 计次活动完成数目
    Activity_Key_ExchageNum                 = 5;    // 兑换数量
    Activity_Key_BuyCount                   = 6;    // 购买数量
    Activity_Key_FirstChargeLastTime        = 7;    // 首充上次领取的时间
    Activity_Key_FirstChargeDay             = 8;    // 首充已经领取的天数
    Activity_Key_BoughtFundTime             = 9;    // 购买基金的时间
    Activity_Key_LoginDays                  = 10;   // 登陆天数
    Activity_Key_LastLoginTime              = 11;   // 上次登陆时间
    Activity_Key_TriggerGiftTime            = 12;   // 触发短期礼包的时间
    Activity_Key_DailyFirstChargeAcquired   = 13;   // 每日首充是否领取了
    Activity_Key_AchievementOpenTime        = 14;   // 7日目标触发时间
    Activity_Key_TriggerGiftNum             = 15;   // 触发短期礼包的数量
    Activity_Key_TriggerMaxGiftNum          = 16;   // 触发短期礼包的最大数量
    Activity_Key_BuyTime                    = 17;   // 购买时间
    Activity_Key_RankValue                  = 18;   // 排行榜值
	Activity_Key_CrossRankBeginValue        = 19;   // 跨服排行榜开始时的初始值
	Activity_Key_CrossRankValue             = 20;   // 跨服排行榜值
    Activity_Key_War_Order_Buy              = 21;   // 战令进阶购买
    Activity_Key_LuckyEgg_CountDown         = 22;   //周末福蛋开启倒计时 福蛋使用
    Activity_Key_LuckyEgg_Index_Status      = 23;   //周末福蛋奖励状态  
    Activity_Key_LuckyEgg_CountDown_End     = 24;   //领取福蛋倒计时结束时间
    Activity_Key_CustomGift_Count           = 25;   //定制礼包购买次数
	Activity_Key_LifeTime_LastTime          = 26;   //基金终生卡最后奖励领取的时间
}

//周末福蛋状态
enum _emLuckyEggStatus
{
    LuckyEgg_Status_Can_Not_Get     = 0; //不可领取
    LuckyEgg_Status_Can_Get         = 1; //可领
    LuckyEgg_Status_Already_Get     = 2; //已领取
    LuckyEgg_Status_Miss_Time       = 3; //错过领取时间
}

//战令奖励保存数值Key， mapIndexVal
enum _emWarOrderRewardKey
{
	War_Order_Reward_Key_General	            = 1;	// 普通奖励
    War_Order_Reward_Key_Special	            = 2;	// 特殊奖励
}

//战令奖励领奖状态
enum _emWarOrderRewardFlag
{
	War_Order_Reward_Flag_None	            = 0;	// 未领奖
    War_Order_Reward_Flag_Get	            = 1;	// 已领奖
}

//world服保存数值Key
enum _emActivityWorldDataKey
{
	Activity_WorldKey_RewardNum	            = 1;	// 奖品剩余数量
    Activity_WorldKey_AcquiredPlayers	    = 2;	// 已经领取的玩家
}

//定制礼包预选商品
message PBC2GActivityCustomGiftOrder
{
    optional uint32 ActivityID = 1; //活动ID
    optional uint32 index      = 2; //GiftIndex 奖励索引
    repeated uint32 GiftPoolIndex = 3; //GiftPoolIndex 奖励池Index
}

//定制礼包预选商品
message PBG2CActivityCustomGiftOrder
{
}

//-------------------------------------------------------------
//------------------------------ 活动boss
//----活动boss的返回
enum _emResultActivityBoss_53
{
	R_ActivityBoss_Succeed			        = 0; // 成功
	R_ActivityBoss_Fail				    = 1; // 失败
	R_ActivityBoss_NeedItem				= 2; // 消耗不足
	R_ActivityBoss_BuyCount				= 3; // 购买次数不足
	R_ActivityBoss_Sweep					= 4; // 挑战后才能扫荡
};

//----活动boss请求
enum _emC2S_ActivityBoss_Protocol
{
	C2S_ActivityBoss_BuyCount	    = 1; 	// 购买次数
    C2S_ActivityBoss_Sweep	        = 2; 	// 扫荡
}

//----活动boss返回
enum _emS2C_ActivityBoss_Protocol
{
	S2C_ActivityBoss_InfoChg	    = 1; 	// 信息改变 PBActivityBossData
}

//-------------------------------------------------------------
//------------------------------ 神器相关
enum _emResultArtifact_15
{
	R_ResultArtifact_Succeed			= 0; // 成功
	R_ResultArtifact_Fail				= 1; // 失败
	R_ResultArtifact_NeedItem			= 2; //扣除的道具不足
	R_ResultArtifact_HaveActive			= 3; //已经激活过
	R_ResultArtifact_NoActive			= 4; //未激活此神器
	R_ResultArtifact_MaxUpgradeLevel	= 5; //达到最大等级
	R_ResultArtifact_NeedGold			= 6; //金币不足
	R_ResultArtifact_NeedLevel			= 7; //神器等级不足
	R_ResultArtifact_StoneMaxCount		= 8; //刻印石最大个数
	R_ResultArtifact_NeedCondition		= 9; //条件未满足
	R_ResultArtifact_StoneCount			= 10; //刻印石个数
	R_ResultArtifact_AlreadyAwake		= 11; //已经完成觉醒任务
	R_ResultArtifact_AlreadyGotPrize	= 12; //已经得到奖励
	R_ResultArtifact_AwakeDay			= 13; //需要先完成前一天的任务
	R_ResultArtifact_UnlockTask			= 14; //解锁任务未完成
	R_ResultArtifact_AlreadyUnLock		= 15; //已经解锁
};
//----神器模块
enum _emC2S_Artifact_Protocol
{
	C2S_Artifact_Active				= 1 ; 	// 激活			PBCAGArtifactActive
	C2S_Artifact_Upgrade			= 2 ; 	// 升级			
	C2S_Artifact_Skill				= 3 ; 	// 技能升级		PBU32
	C2S_Artifact_UseStone			= 4 ; 	// 刻印石头		PBU32
	C2S_Artifact_Reset				= 5 ; 	// 重置			PBU32
	C2S_Artifact_Shape				= 6 ; 	// 幻化			PBCAGArtifactShape
	C2S_Artifact_Awake				= 7 ;	// 觉醒(index)	PBU32
	C2S_Artifact_AwakePrize			= 8 ;	// 觉醒奖励		PBU32
	C2S_Artifact_Unlock				= 9 ;	// 解锁			PBU32
}
//----神器模块
enum _emS2C_Artifact_Protocol
{
	S2C_Artifact_Common					= 0 ;	// 通用错误返回
	S2C_Artifact_Active					= 1 ;	// 激活返回 		PBCAGArtifactActive
	S2C_Artifact_AddNew					= 2 ;	// 新增神器 		PBPlayerArtifactInfo
	S2C_Artifact_Upgrade				= 3 ; 	// 升级返回			PBG2CArtifactUpgrade
	S2C_Artifact_Skill					= 4 ; 	// 技能升级返回		PBG2CArtifactSkill
	S2C_Artifact_UseStone				= 5 ; 	// 刻印石头返回		PBU32
	S2C_Artifact_Syn					= 6 ;	// 同步信息 		PBPlayerArtifactInfo
	S2C_Artifact_Shape					= 7 ; 	// 幻化返回			PBCAGArtifactShape
	S2C_Artifact_Awake					= 8 ;	// 觉醒				PBU32
	S2C_Artifact_AwakePrize				= 9 ;	// 觉醒奖励			PBU32
	S2C_Artifact_FazhenAwake			= 10 ;	// 法阵觉醒推送		PBU32
}
// 激活
message PBCAGArtifactShape
{
	optional uint32	 					id					= 1;	// 神器ID
	optional uint32	 					shapeid				= 2;	// 幻化的ID
}
// 激活
message PBCAGArtifactActive
{
	optional uint32	 					id					= 1;	// 神器ID
	optional uint32	 					stage				= 2;	// 进度ID
}
// 升级
message PBG2CArtifactUpgrade
{
	optional uint32	 					level				= 2;	// 等级
	optional uint32	 					exp					= 3;	// 经验
}
// 技能升级
message PBG2CArtifactSkill
{
	optional uint32	 					id					= 1;	// 神器ID
	optional uint32	 					skilllevel			= 2;	// 技能等级
}
// 刻印石头
message PBCAGArtifactUseStone
{
	optional PBItemInfo	 				stone				= 2;	// 刻印石数量
}
//------------------------------ 
enum _emResultFight_5
{
	R_ResultFight_Succeed			= 0; // 成功
	R_ResultFight_Fail				= 1; // 失败
	R_ResultFight_NoFight			= 2; // 无此战斗
	R_ResultFight_RepeatedPet		= 3; // 重复上阵伙伴
	R_ResultFight_SupportMore		= 4; // 出场支援英雄数量超过限制
	R_ResultFight_NoSupport			= 5; // 战斗类型不支持支援
	R_ResultFight_Zhenfa			= 6; // 阵型错误
	R_ResultFight_AutoResultErr		= 7; // 自动战斗错误（赛季第一场） 
	
};
//----战斗模块
enum _emC2S_Fight_Protocol
{
	C2S_Fight_NormalBegin			= 1	;//普通战斗			PBC2GFightNormalBegin
	C2S_Fight_NormalResult			= 2	;//普通战斗结果		PBC2GFightNormalResult
	C2S_Fight_EndlessContinue		= 3	;//无尽继续战斗		PBC2GFightBeginBase		
	C2S_Fight_Exit					= 4	;//退出战斗			PBC2GFightBeginBase
	C2S_Fight_HeavenGiveup			= 5 ;//天界副本放弃战斗	PBC2GFightBeginBase
};
//----战斗模块
enum _emS2C_Fight_Protocol
{
	S2C_Fight_Common_Ack			= 0 ;//通用失败返回
	S2C_Fight_NormalBegin_Ack		= 1	;//普通战斗返回			PBFightBase
	S2C_Fight_NormalResult_Ack		= 2	;//普通战斗结果			PBFightResult
	S2C_Fight_LoadIng				= 3	;//加载正在进行的战斗	PBFightResult
	S2C_Fight_EndlessContinue_Ack	= 4	;//无尽继续返回			PBFightResult
};
//战斗结束请求
message PBC2GFightNormalResult
{
	optional uint64			battlesn			= 1;	//流水ID
	optional uint32			result				= 2;	//战斗结果
	optional bool			isuseclient			= 3;	//是否用客户端结果
}
//普通战斗
message PBC2GFightBeginBase
{
	optional uint32				battletype			= 1;	//战斗类型	_emBattleType
	optional uint32				id					= 2;	//挑战ID
}
//战斗开始请求
message PBC2GFightNormalBegin
{
	optional uint32				battletype			= 1;	//战斗类型	_emBattleType
	optional uint32 			id					= 2;	//挑战ID
	optional uint32 			param				= 3;	//参数
	optional uint32 			zhenfaid			= 4;	//阵法ID
	repeated PBPlayerZhenfaPos	posdata				= 5;	//位置伙伴 key:位置 value:伙伴sn
	optional uint32 			artifactid			= 6;	//神器ID
	optional bool 				autoresult			= 7;	//是否自动跳过
	optional string				clientparam			= 8;	//客户端参数
}
//玩家出战对象
message PBPlayerBattleInfo
{
	optional PBPlayerDisplay		playerdisplay		= 1;	//玩家外显
	optional PBBattlePet 			battlepet			= 2;	//战斗伙伴
	optional uint32					index				= 3;	//第几队伍，从1开始
}
//竞技场战斗结果
message PBFightChallengeResult
{
	optional uint32					friendscore		= 1;	//友方最新积分
	optional int32					friendaddscore	= 2;	//友方改变积分
	optional uint32					enermyscore		= 3;	//敌方最新积分
	optional int32					enermyaddscore	= 4;	//敌方改变积分
	optional uint32					friendrank		= 5;	//友方名次
	optional int32					enermyrank		= 6;	//敌方名次
}
//超凡段位赛结果
message PBFightDanResult
{
	optional uint32	 					danid			= 1;	// 当前段位
	optional int32	 					score			= 2;	// 当前积分
	optional int32						exp				= 3;	// 当前经验
	optional int32						cacheexp		= 4;	// 当前的缓冲经验
	optional int32	 					addexp			= 5;	// 增加积分(负数减)
	repeated uint32	 					promoteresult	= 6;	// 晋级赛结果
	optional bool						kingbattlefin	= 7;	// 王者赛1场是否结束（车轮战,有1场多次战斗）
}
//跨服天梯结果
message PBFightLadderResult
{
	optional uint32 					entercount		= 1;	// 进入次数
	optional uint32 					maxrank			= 2;	// 最大名次
	optional string 					factionname		= 3;	// 公会名
}
//天界副本的结果
message PBFightHeavenResult
{
	repeated uint32		star		= 1;	// 得到的星星(星星的索引，从0开始)
	optional bool		fin			= 2;	// 战斗完毕
}

//跨服竞技场的结果
message PBFightCrossChallengeResult
{
	optional uint32					friendscore		= 1;	//友方最新积分
	optional int32					friendaddscore	= 2;	//友方改变积分
	optional uint32					enermyscore		= 3;	//敌方最新积分
	optional int32					enermyaddscore	= 4;	//敌方改变积分
	optional uint32					friendrank		= 5;	//友方名次
	optional int32					enermyrank		= 6;	//敌方名次
	repeated uint32					index 			= 7; 	//奖品index
	optional PBPlayerDisplay		selfdisplay		= 8;	//自己外显
	optional PBPlayerDisplay		enermydisplay	= 9;	//敌人外显
}

///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////战斗回放相关//////////////////////////////////////

// 关于state： 包括所有英雄单位，所有单位一直都在，hp为0表示死亡
// unit id : MAKE_UINT32((uint16)pbBattlePet.camptype(), (uint16)pbBattlePet.pos());
// 神器的unit id: MAKE_UINT32((uint16)camptype, (uint16)BattlePos_Artifact);

// 一个unit的actions大概结构：

// 回合一开始时，回调造成增减buff，buff伤害等
// FightAction_HP 	buff掉血
// FightAction_HP 	buff加血
// FightAction_Buff 加buff
// FightAction_Buff 减buff
// ... ...
// FightAction_Skill 某人使用技能攻击
// FightAction_Attack   攻击效果
// FightAction_HP		掉血
// FightAction_Buff		加buff
// FightAction_Attack	攻击效果，未命中
// FightAction_Attack	攻击效果
// FightAction_HP		掉血
// FightAction_HP		掉血 有可能分担伤害其他人也掉血
// FightAction_HP		掉血 有可能攻击触发buff造成掉血，buff的skillindex可能是其他的技能
// FightAction_SkillEnd 
// ... ...
// FightAction_Skill  某人使用技能加buff
// FightAction_Buff	加buff
// FightAction_Buff	加buff
// FightAction_SkillEnd 
// ... ...
// FightAction_Skill  某人使用技能加血
// FightAction_HP	回血
// FightAction_SkillEnd 
// ... ...
// FightAction_Skill  有触发被动技能的话，技能可能嵌套
// FightAction_Skill 
// ... ...
// FightAction_SkillEnd  skill end对应离得最近的skill
// FightAction_SkillEnd 
// ... ...

//动作类型
enum _emFightAction
{
	FightAction_Skill		= 1; // 使用技能 	对应 PBFightActionSkill
	FightAction_SkillEnd	= 2; // 技能结束标识 无
	FightAction_Attack		= 3; // 技能攻击 	对应 PBFightActionAttack
	FightAction_HP 			= 4; // hp变化 		对应 PBFightActionHP
	FightAction_Buff 		= 5; // 加buff 		对应 PBFightActionBuff
	FightAction_BuffFx 		= 6; // buff效果 	对应 PBFightActionBuffFx
}

//战斗buff状态
message PBFightBuffState
{
	optional uint32 buffid 	= 	1; 	// buff id
	optional uint32 round 	=	2;	// 持续回合数
	optional uint32 layer 	= 	3;	// 叠加层数
}

//战斗单位状态
message PBFightUnitState
{
	optional uint32 			unitid	= 1; // uint id
	optional uint64 			maxhp	= 2; // 当前最大hp
	optional uint64 			hp 		= 3; // 当前hp
	repeated PBFightBuffState 	buff 	= 4; // 当前身上的buff(id, round)
}

//战斗使用技能
message PBFightActionSkill
{
	optional uint32 src			= 1; // 源 unit id
	repeated uint32 dst 		= 2; // 目标 unit id
	optional uint32 skillindex  = 3; // 相关技能的index
}

//战斗攻击
message PBFightActionAttack
{
	optional uint32 src			= 1; // 源 unit id
	optional uint32 dst 		= 2; // 目标 unit id
	optional uint32 skillindex  = 3; // 相关技能的index
	optional bool	hit			= 4; // 是否命中,未命中即为躲闪
	optional bool	physical	= 6; // 是否物理攻击，否则是魔法攻击
}

//buff效果类型
enum _emFightBuffFxType
{
	FightBuffFx_Immune		= 1; //免疫控制
	FightBuffFx_Shield		= 2; //护盾 参数：护盾抵消值
}

//buff效果
message PBFightActionBuffFx
{
	optional uint32 src			= 1; // 源 unit id
	optional uint32 type		= 2; // 类型 _emFightBuffFxType
	optional uint32 param		= 3; // 参数
}

//战斗hp变化
message PBFightActionHP
{
	optional uint32 src			= 1; // 源 unit id
	optional uint32 dst 		= 2; // 目标 unit id
	optional uint32 skillindex  = 3; // 相关技能的index
	optional uint32 reason		= 4; // DoingType_Skill 或者 DoingType_Buff
	optional uint64 hp 			= 5; // 变化之后的hp
	optional int64 	hpchanged 	= 6; // hp变化值,负掉血，正回血
	optional bool 	critical	= 7; // 是否暴击
	optional bool 	race		= 8; // 是否有种族克制加成
}

//战斗buff变化
message PBFightActionBuff
{
	optional uint32 src 		= 1; // 源 unit id
	optional uint32 dst 		= 2; // 目标 unit id
	optional uint32 skillindex  = 3; // 相关技能的index,一直是加buff的skill
	optional bool 	add 		= 4; // 是否是加buff，否则是减buff
	optional uint32 buffid		= 5; // buff id
}

//战斗动作
message PBFightAction
{
	optional uint32 				type  			= 1; // 动作类型 _emFightAction
	optional PBFightActionSkill 	actionskill		= 2; // type为FightAction_Skill时有效
	optional PBFightActionAttack 	actionattack	= 3; // type为FightAction_Attack时有效
	optional PBFightActionHP 		actionhp		= 4; // type为FightAction_HP时有效
	optional PBFightActionBuff 		actionbuff		= 5; // type为FightAction_Buff时有效
	optional PBFightActionBuffFx	actionbufffx 	= 6; // type为FightAction_BuffFx时有效
}

// 每个单位的行动
message PBFightUnitAct
{
	optional uint32 			id			= 1; // 行动的单位 unit id (0表示回合触发的buff，神器等)
	repeated PBFightAction 		actions 	= 2; // 动作
}

//战斗回合
message PBFightRound
{
	optional uint32 			round 		= 1; // 回合数
	repeated PBFightUnitState 	states 		= 2; // 回合开始时的状态
	repeated PBFightUnitAct 	unitacts 	= 3; // 单位行动
}

//战斗回放
message PBFightPlayback
{
	repeated PBFightRound rounds = 1;//战斗回合
}

///////////////////////////////////////////////////////////////////////////////////

// 战斗基础公用
message PBFightBase
{
	optional uint64					battlesn		= 1;	//流水ID
	optional uint32					battletype		= 2;	//战斗类型	_emBattleType
	optional uint32					id				= 3;	//挑战ID
	optional uint32					param			= 4;	//参数
	optional uint32 				randid			= 5;	//随机种子
	optional uint32					begintime		= 6;	//开始时间
	optional uint32					maxround		= 7;	//最大回合
	optional PBPlayerBattleInfo 	friend			= 8;	//伙伴
	optional PBPlayerBattleInfo 	energy			= 9;	//敌方
	optional PBFightPlayback		playback		= 10;	//战斗回放
	optional uint32					num				= 11;	//同一对手的第几次战斗
	optional string					clientparam		= 12;	//客户端参数	
	repeated uint32					serverparam		= 13;	//服务器参数	
}
// 副本pve战斗结果返回
message PBFightResult
{
	optional PBFightBase			base					= 1;	//战斗公共
	optional uint32 				round					= 2;	//回合数
	optional uint32					result 					= 3;	//战斗结果 _emBattleResult
	optional uint32 				endtime					= 4;	//战斗结束时间
	repeated PBPetFightStateInfo 	friendstate				= 5;	//友方状态
	repeated PBPetFightStateInfo 	energystate				= 6;	//敌方状态
	repeated PBItemInfo 			prize					= 7;	//战斗奖励
	repeated PBU32U32 				achieve					= 8;	//成就数据(服务器用)
	optional PBFightChallengeResult challengeresult			= 9;	//竞技场战斗结果
	optional PBFightDanResult 		danresult				= 10;	//超凡段位赛结果
	optional PBFightLadderResult 	ladderresult			= 11;	//跨服天梯结果
	optional PBPetFightStateInfo	friendartifactstate 	= 12;	//我发神器状态
	optional PBPetFightStateInfo	enemyartifactstate		= 13;	//敌方神器状态
	optional PBFightHeavenResult	heavenresult			= 14;	//天界副本结果
	optional PBFightCrossChallengeResult crosschallengeresult			= 15;	//跨服竞技场战斗结果
}
// 系统录像详细
message PBVideoDetail
{
	optional PBFightResult			detail			= 1;	//战斗详情
	optional uint32					likecount		= 2;	//点赞次数
	optional uint32					playcount		= 3;	//播放次数
	optional uint32					sharecount		= 4;	//分享次数
	optional uint32					mark			= 5;	//掩码
}
// 系统录像
message PBWorldSystemVideo
{
	optional uint32					videotype		= 1;	//	类型_emVideoType
	optional uint32					param			= 2;	//	参数
	repeated PBVideoDetail 			info			= 3;	//录像详细
	optional uint32					index			= 4;	// index
}
// 关卡录像详细
message PBVideoStageDetail
{
	optional PBFightResult			fast			= 1;	//最快战斗详情
	optional PBFightResult			fightpower		= 2;	//最低战力战斗详情
	optional PBFightResult			lately			= 3;	//最近战斗详情
}
// 关卡录像
message PBWorldStageVideo
{
	optional uint32					videotype		= 1;	//	类型_emVideoType
	optional uint32					param			= 2;	//	参数
	optional PBVideoStageDetail 	info			= 3;	// 录像详细
	optional uint32					index 			= 4;	//index
}
// 关卡录像存库
message PBWorldStageVideoSave
{
	repeated PBWorldStageVideo 		info			= 1;	//录像详细
}

//切磋请求
message PBFightEachOther
{
	optional uint32				srcworldid 		= 1;	// 切磋发起人worldid
	optional uint32				srcplayerid 	= 2;	// 切磋发起人playerid
	optional uint32				dstworldid 		= 3;	// 切磋目标 worldid
	optional uint32				dstplayerid 	= 4;	// 切磋目标 playerid
	optional PBFightBase 		fight 			= 5;	// 战斗数据
}
//查询玩家录像记录返回
message PBG2CVideoPlayerRecordAck
{
	optional uint32 				battletype		= 1;	//战斗类型
	repeated PBFightResult			detail			= 2;	//战斗详情
	optional uint32					index 			= 3;	//index
}

// 跨服录像
message PBBWVideoData
{
	optional uint32 			groupid 	= 1;//group id
	repeated PBFightResult 		videos 		= 2;//录像
}

//-------------------------------------------------------------
//------------------------------公告类型
enum _emBroadcast_Notice
{
	BroadcastNotice_System					= 1;//系统
	BroadcastNotice_Parade					= 2;//炫耀
	BroadcastNotice_Horn					= 3;//喇叭
	BroadcastNotice_GM						= 4;//GM
}
//----广播系统
enum _emS2C_Broadcast_Protocol
{
	S2C_BroadCast_GM							= 1	;	// GM测试			PBBroadcasStringU32	
	S2C_BroadCast_VipLevelUp					= 2	;	// 更新vip等级		PBBroadcasStringU32
	S2C_BroadCast_FactionRecruit				= 3	;	// 公会招募			PBBroadcasFactionRecruit
	S2C_BroadCast_FactionCopymapNotice			= 4	;	// 公会副本集结		PBBroadcasFactionCopymapNotice
	S2C_BroadCast_Challenge						= 5	;	// 竞技场x连胜(名字，多少场)		PBBroadcasStringU32	
	S2C_BroadCast_Champion						= 6	;	// 冠军赛提醒(开始时间)		PBU32
	S2C_BroadCast_CrossChallenge				= 7	;	// 跨服竞技场x连胜(名字，多少场)	PBBroadcasStringU32
	S2C_BroadCast_Dan							= 8	;	// 段位赛x连胜(名字，多少场)	PBBroadcasStringU32
	S2C_BroadCast_Treasure						= 9	;	// 探宝获得x品质以上道具	PBBroadcastTreasure
	S2C_BroadCast_Hero6Star						= 10 ;	// 合成6星英雄（名字,pet id）	PBBroadcastHeroStar
	S2C_BroadCast_Hero9Star						= 11 ;	// 9星以上英雄升星		PBBroadcastHeroStar
	S2C_BroadCast_Faction						= 12 ;	// 建立工会		PBBroadcasFactionCreate
	S2C_BroadCast_MonthCard						= 13 ;	// 激活月卡	(玩家名字，月卡类型)	PBBroadcasStringU32
	S2C_BroadCast_AdvCall5Star					= 14 ;  // 高级召唤获得5星英雄(玩家名字, pet id)	PBBroadcasStringU32
	S2C_BroadCast_FirstCharge					= 15 ;  // 首冲奖励			PBBroadcastItems
	S2C_BroadCast_7DayLogin						= 16 ;  // 七日登陆			PBBroadcastItems
	S2C_BroadCast_HookStage						= 17 ;  // 主线通关			PBBroadcastHookStage
	S2C_BroadCast_OracleCall					= 18 ;  // 先知召唤(玩家名字, pet id)	PBBroadcasStringU32
	S2C_BroadCast_Tower							= 19 ;	// 通关试炼塔		PBBroadcastTower
	S2C_BroadCast_Artifact						= 20 ;	// 元灵解锁(名字，元灵ID)		PBBroadcasStringU32	
	S2C_BroadCast_OracleCallItem				= 21 ;	// 先知召唤物品		PBBroadcastItem	
	S2C_BroadCast_MainTop1						= 22 ;	// 主线第一名(名字, stageid)	PBBroadcasStringU32	
	S2C_BroadCast_Tower1Top1					= 23 ;	// 试炼塔1第一名(名字, 层数)		PBBroadcasStringU32	
	S2C_BroadCast_ChallengeTop1					= 24 ;	// 竞技场第一名(名字)			PBBroadcasString	
	S2C_BroadCast_PowerTop1						= 25 ;	// 战斗力第一名(名字)			PBBroadcasString	
	S2C_BroadCast_AdvCall6Star					= 26 ;	// 高级召唤获得6星英雄(玩家名字, pet id)			PBBroadcasStringU32
	S2C_BroadCast_ChargeFund					= 27 ;	// 充值基金(玩家名字, 商品 id)			PBBroadcasStringU32
	S2C_BroadCast_ChargeGift					= 28 ;	// 充值礼包(玩家名字, 商品 id)			PBBroadcasStringU32
	S2C_BroadCast_ChargeNB						= 29 ;	// 充值牛逼礼包(玩家名字, 商品 id)			PBBroadcasStringU32	
	S2C_BroadCast_FactionBoss					= 30 ;	// 公会boss结算(boss名字,章节 id)			PBBroadcasStringU32	
	S2C_BroadCast_Tower2						= 31 ;	// 通关试炼塔2		PBBroadcastTower
	S2C_BroadCast_Tower2Top1					= 32 ;	// 试炼塔2第一名(名字, 层数)		PBBroadcasStringU32	
}
//String
message PBBroadcasString
{
	optional string	 					msg					= 1;	//字符串
}
// StringU32
message PBBroadcasStringU32
{
	optional string	 					msg					= 1;	//字符串
	optional uint32	 					value				= 2;	//值
}
// StringU32
message PBBroadcasMultiString
{
	repeated string	 					msg					= 1;	//字符串
}
// 公会招募
message PBBroadcasFactionRecruit
{
	optional uint32	 					factionlevel		= 1;	//等级
	optional string	 					factionname			= 2;	//名称
	optional uint32	 					factionid			= 3;	//公会ID
	optional uint32	 					applylevel			= 4;	//申请等级
	optional PBPlayerDisplay	 		display				= 5;	//发起者
}
// 公会建立
message PBBroadcasFactionCreate
{
	optional string	 					playername			= 1;	//玩家名字
	optional string	 					factionname			= 2;	//公会名称
	optional uint32	 					factionid			= 3;	//公会ID
}
// 公会副本集结
message PBBroadcasFactionCopymapNotice
{
	optional uint32	 					factionjob			= 1;	//职位
	optional string	 					playername			= 2;	//名称
}

// 探宝
message PBBroadcastTreasure
{
	optional string	name	= 1;	//玩家名字
	optional uint32	itemid	= 2;	//物品id
	optional uint32	num		= 3;	//个数
}

// 英雄升星
message PBBroadcastHeroStar
{
	optional string	name	= 1;	//玩家名字
	optional uint32	hero	= 2;	//英雄ID，换成皮肤id
	optional uint32	star	= 3;	//星级
}

// 道具
message PBBroadcastItems
{
	optional string		name  = 1; //玩家名字
	repeated PBItemInfo items = 2; //道具们
}

// 主线通关
message PBBroadcastHookStage
{
	optional string		name  = 1; //玩家名字
	optional uint32 	stage = 2; //关卡
	repeated PBItemInfo items = 3; //道具们
}

// 试炼塔通关
message PBBroadcastTower
{
	optional string		name  = 1; //玩家名字
	optional uint32 	stage = 2; //关卡
	repeated PBItemInfo items = 3; //道具们
}

// 道具
message PBBroadcastItem
{
	optional string		name  	= 1; //玩家名字
	optional PBItemInfo item 	= 2; //道具
}

// 登录请求 内容serverid=%d&plattype=%d&Uname=%s&Pwd=%s&playerid=%d
message PBLoginAsk
{
	optional string login 	= 1;		// 登录信息(用户名&密码)
}
// 登录返回
message PBLoginAck
{
	optional PBAccount	account			= 1;// 玩家账号信息
	optional int64		worldCreateTime	= 2;// 开服时间
	optional int64		worldMergeTime	= 3;// 合服时间
}	

// 登录请求
message PBC2GLoginAsk
{
 	optional uint32 playerID	= 1; // 角色ID
 	optional int64 loginSN		= 2; // 登录流水号
	optional bool bReconnet		= 3; // 是否断线重连
}

// 登录返回
message PBG2CLoginAck
{
	optional uint32 curtime	= 1; // 当前时间
}	

// 登录返回玩家角色列表
message PBAccountLoadAck
{
	optional uint32				accountid		= 1;// 账号ID
	repeated PBPlayerDisplay	displayer		= 2;// 玩家信息
}	

// 检查名字
message PBCheckPlayerNameAsk
{
	optional string name 	=	1; // 玩家名字 
}
// 检测名字返回
message PBPlayerNameAck
{
	optional uint32			ret				= 1;  // _emNetResult
	optional string 		name			= 2;  
}

// 角色创建请求
message PBCreatePlayerAsk
{
	optional PBPlayerDisplay playerdisplay	= 1;// 玩家头
}
// 角色创建返回
message PBCreatePlayerAck
{
	optional PBPlayerDisplay 	displayer		= 1;// 玩家信息
	optional uint32 			createtime		= 2;// 创建时间
}

// 角色选择请求
message PBSelectPlayerAsk
{
	optional uint32 playerID 			= 1;// 玩家ID
}
// 角色选择返回
message PBSelectPlayerAck
{
	optional uint32 playerID 			= 1;// 玩家ID
	optional string host				= 2;// host
	optional uint32 port				= 3;// 网络字节端口
	optional int64 loginsn				= 4;// 登录SN
	optional bool	invite				= 5;// 是否可以填邀请码（账户的第一个角色）
}

// 防沉迷检测
message PBPlayerWallowData
{
	optional uint32			onlineTime				= 1;  // 账号在线时间
	optional uint32			dailyOnlineTime			= 2;  // 账号今天在线时间
	optional bool	 		isIDBlind				= 3;	//id绑定
	optional bool			isAdult					= 4;	//是否成年
}

// 关服消息
message PBCloseServerData
{	
	optional uint64 closeTime  = 1; //关服倒计时
	optional string closeStr   = 2; //关服通告
}
//#############################################################
//############################## 客户端到服务器
//#############################################################
//------------------------------ 
enum _emPC2S_Protocol
{
	P_C2S_Protocol_Player			= 0; //玩家操作请求	_emC2S_Player_Protocol
	P_C2S_Protocol_Common			= 1; //通用功能模块 _emC2S_Common_Protocol
	P_C2S_Protocol_Copymap			= 2; //副本模块 _emC2S_Copymap_Protocol
	P_C2S_Protocol_Pet				= 3; //伙伴模块 _emC2S_Pet_Protocol
	P_C2S_Protocol_Item				= 4; //道具模块 _emC2S_Item_Protocol
	P_C2S_Protocol_Fight			= 5; //战斗模块 _emC2S_Fight_Protocol
	P_C2S_Protocol_Task				= 6; //任务模块 _emC2S_Task_Protocol
	P_C2S_Protocol_Mail				= 7; //邮件系统 _emC2S_Mail_Protocol
	P_C2S_Protocol_TopList			= 8; //排行榜系统 _emC2S_TopList_Protocol
	P_C2S_Protocol_Challenge		= 9; //竞技场	_emC2S_Challenge_Protocol
	P_C2S_Protocol_Faction			= 10; //帮派相关操作 _emC2S_Faction_Protocol
	P_C2S_Protocol_Team				= 11; //帮派相关操作 _emC2S_Team_Protocol
	P_C2S_Protocol_Call				= 12; //召唤系统 _emC2S_Call_Protocol
	P_C2S_Protocol_Sail				= 13; //远航系统 _emC2S_Sail_Protocol
	P_C2S_Protocol_Hook				= 14; //挂机系统 _emC2S_Hook_Protocol
	P_C2S_Protocol_Artifact			= 15; //神器系统 _emC2S_Artifact_Protocol
	P_C2S_Protocol_Shop				= 16; //商店系统 _emC2S_Shop_Protocol
	P_C2S_Protocol_Train			= 17; //试炼系统 _emC2S_Train_Protocol
	P_C2S_Protocol_Achieve			= 18; //成就系统 _emC2S_Achieve_Protocol
	P_C2S_Protocol_Expedition		= 19; //远征系统 _emC2S_Expedition_Protocol
	P_C2S_Protocol_Shape			= 20; //外显系统 _emC2S_Shape_Protocol
	P_C2S_Protocol_Temple			= 21; //神殿系统 _emC2S_Temple_Protocol
	P_C2S_Protocol_Friend			= 22; //好友系统 _emC2S_Friend_Protocol
	P_C2S_Protocol_Element			= 23; //元素系统 _emC2S_Element_Protocol
	P_C2S_Protocol_Risk				= 24; //冒险系统 _emC2S_Risk_Protocol
	P_C2S_Protocol_Dan				= 25; //超凡段位系统 _emC2S_Dan_Protocol
	P_C2S_Protocol_Ladder			= 26; //跨服天梯系统 _emC2S_Ladder_Protocol
	P_C2S_Protocol_Champion			= 27; //冠军赛系统 _emC2S_Champion_Protocol
	P_C2S_Protocol_Holy				= 28; //圣物系统 _emC2S_Holy_Protocol
	P_C2S_Protocol_Video			= 29; //录像系统 _emC2S_Video_Protocol
	P_C2S_Protocol_Privilege		= 30; //特权系统 _emC2S_Privilege_Protocol
	P_C2S_Protocol_Weal				= 31; //福利系统 _emC2S_Weal_Protocol
	P_C2S_Protocol_Activity			= 32; //活动系统 _emC2S_Activity_Protocol
	P_C2S_Protocol_Platform			= 33; //平台系统 _emC2S_Platform_Protocol
	P_C2S_Protocol_Talk				= 34; //聊天系统 _emC2S_Talk_Protocol
	P_C2S_Protocol_Treasure			= 35; //探宝系统 _emC2S_Treasure_Protocol
	P_C2S_Protocol_HeavenDungeon	= 36; //天界副本系统 _emC2S_HeavenDungeon_Protocol
	P_C2S_Protocol_CrossChallenge	= 37; //跨服竞技场 _emC2S_CrossChallenge_Protocol
	P_C2S_Protocol_Tablet			= 38; //晶碑 _emC2S_Tablet_Protocol
	P_C2S_Protocol_WeekChampion		= 39; //周冠军赛 _emC2S_WeekChampion_Protocol
	P_C2S_Protocol_TeamCampaign		= 40; //组队征战 _emC2S_TeamCampaign_Protocol
	P_C2S_Protocol_DragonBall		= 41; //龙珠 _emC2S_DragonBall_Protocol
	P_C2S_Protocol_Convenant		= 42; //契约 _emC2S_Convenant_Protocol
	P_C2S_Protocol_Lottery			= 43; //抽奖		_emC2S_Lottery_Protocol		
	P_C2S_Protocol_Illustration		= 44; //图鉴收集 _emC2S_Illustration_Protocol
	P_C2S_Protocol_RedEnvelope		= 45; //红包 _emC2S_RedEnvelope_Protocol
	P_C2S_Protocol_JoyousLinkup		= 46; //连连看 _emC2S_JoyousLinkup_Protocol
	P_C2S_Protocol_Guess			= 47; //猜猜猜 _emC2S_Guess_Protocol	
	P_C2S_Protocol_Defend			= 48; //守护 _emC2S_Defend_Protocol	
	P_C2S_Protocol_Resonance		= 49; //共鸣 _emC2S_Resonance_Protocol	
	P_C2S_Protocol_IncubateEgg		= 50; //孵化屋 _emC2S_IncubateEgg_Protocol
	P_C2S_Protocol_ActivityBoss		= 51; //活动限时boss _emC2S_ActivityBoss_Protocol
	P_C2S_Protocol_Order			= 52; //订单管理 _emC2S_Order_Protocol
	P_C2S_Protocol_GodDeploy		= 53; //大神搭配 _emC2S_GodDeploy_Protocol
	P_C2S_Protocol_Operate			= 255; //网络层相关操作 _emC2S_Operate_Protocol
}
//----网络层操作请求子协议
enum _emC2S_Operate_Protocol
{
	C2S_Operate_Verify_Ask	= 0	; //验证请求 	VerifyAsk
	C2S_Operate_Ping_Ask	= 1	; //Ping请求	PingAsk
	C2S_Operate_Login_Ask	= 2	; //登录请求	(取CAW PBLoginAsk和CAG PBC2GLoginAsk)
	C2S_Operate_Verify_Ack	= 3	; //验证应答	VerifyAck
	C2S_Operate_Ping_Ack	= 4	; //Ping应答	PingAck
	C2S_Operate_Disconnect	= 5	; //断开命令 	无内容
	C2S_Operate_Bad_Notify	= 6	; //错误包通知	BadNotify
	C2S_Operate_Kick_Notify	= 7 ; //踢出通知 	无内容
	C2S_Operate_Login_Ack	= 8	; //登录应答	(取CAW PBLoginAck 和CAG PBG2CLoginAck)	
	C2S_Operate_TimeoutRead	= 9; //读取超时		无内容
	C2S_Operate_TimeoutWrite = 10; //写入超时	无内容
};

//----网络层操作请求子协议
enum _emS2C_Operate_Protocol
{
	S2C_Operate_Verify_Ask	= 0	; //验证请求 	VerifyAsk
	S2C_Operate_Ping_Ask	= 1	; //Ping请求	PingAsk
	S2C_Operate_Login_Ask	= 2	; //登录请求	(取CAW PBLoginAsk和CAG PBC2GLoginAsk)
	S2C_Operate_Verify_Ack	= 3	; //验证应答	VerifyAck
	S2C_Operate_Ping_Ack	= 4	; //Ping应答	PingAck
	S2C_Operate_Disconnect	= 5	; //断开命令 	无内容
	S2C_Operate_Bad_Notify	= 6	; //错误包通知	BadNotify
	S2C_Operate_Kick_Notify	= 7 ; //踢出通知 	无内容
	S2C_Operate_Login_Ack	= 8	; //登录应答	(取CAW PBLoginAck 和CAG PBG2CLoginAck)	
	S2C_Operate_TimeoutRead	= 9; //读取超时		无内容
	S2C_Operate_TimeoutWrite = 10; //写入超时	无内容
	S2C_Operate_CloseServer = 11; //关服通知   (取CAW PBCloseServerData)
};

//----玩家操作请求子协议
enum _emC2S_Player_Protocol
{
	C2S_Player_Common = 0;//通用 无内容
};
//#############################################################
//############################## 服务器到客户端
//#############################################################
enum _emPS2C_Protocol
{
	P_S2C_Protocol_Player			= 0; //帐号角色信息 _emS2C_Player_Protocol
	P_S2C_Protocol_Common			= 1; //通用功能模块 _emS2C_Common_Protocol
	P_S2C_Protocol_Copymap			= 2; //副本模块 _emS2C_Copymap_Protocol
	P_S2C_Protocol_Pet				= 3; //伙伴系统	_emS2C_Pet_Protocol
	P_S2C_Protocol_Item				= 4; //道具模块 _emS2C_Item_Protocol
	P_S2C_Protocol_Fight			= 5; //战斗模块 _emS2C_Fight_Protocol
	P_S2C_Protocol_Task				= 6; //任务模块 _emS2C_Task_Protocol
	P_S2C_Protocol_Mail				= 7; //邮件系统 _emS2C_Mail_Protocol
	P_S2C_Protocol_TopList			= 8; //排行榜系统	_emS2C_TopList_Protocol
	P_S2C_Protocol_Challenge		= 9; //竞技场	_emS2C_Challenge_Protocol
	P_S2C_Protocol_Faction			= 10; //帮派相关操作 _emS2C_Faction_Protocol
	P_S2C_Protocol_Team				= 11; //帮派相关操作 _emS2C_Team_Protocol
	P_S2C_Protocol_Call				= 12; //召唤系统 _emS2C_Call_Protocol
	P_S2C_Protocol_Sail				= 13; //远航系统 _emS2C_Sail_Protocol
	P_S2C_Protocol_Hook				= 14; //挂机系统 _emS2C_Hook_Protocol
	P_S2C_Protocol_Artifact			= 15; //神器系统 _emS2C_Artifact_Protocol
	P_S2C_Protocol_Shop				= 16; //商店系统 _emS2C_Shop_Protocol
	P_S2C_Protocol_Train			= 17; //试炼系统 _emS2C_Train_Protocol
	P_S2C_Protocol_Achieve			= 18; //成就系统 _emS2C_Achieve_Protocol
	P_S2C_Protocol_Expedition		= 19; //远征系统 _emS2C_Expedition_Protocol
	P_S2C_Protocol_Shape			= 20; //外显系统 _emS2C_Shape_Protocol
	P_S2C_Protocol_Temple			= 21; //神殿系统 _emS2C_Temple_Protocol
	P_S2C_Protocol_Friend			= 22; //好友系统 _emS2C_Friend_Protocol
	P_S2C_Protocol_Element			= 23; //元素系统 _emS2C_Element_Protocol
	P_S2C_Protocol_Risk				= 24; //冒险系统 _emS2C_Risk_Protocol
	P_S2C_Protocol_Dan				= 25; //超凡段位系统 _emS2C_Dan_Protocol
	P_S2C_Protocol_Ladder			= 26; //跨服天梯系统 _emS2C_Ladder_Protocol
	P_S2C_Protocol_Champion			= 27; //冠军赛系统 _emS2C_Champion_Protocol
	P_S2C_Protocol_Broadcast		= 28; //广播 _emS2C_Broadcast_Protocol
	P_S2C_Protocol_Holy				= 29; //圣物系统 _emS2C_Holy_Protocol
	P_S2C_Protocol_Video			= 30; //录像系统 _emS2C_Video_Protocol
	P_S2C_Protocol_Privilege		= 31; //特权系统 _emS2C_Privilege_Protocol
	P_S2C_Protocol_Weal				= 32; //福利系统 _emS2C_Weal_Protocol
	P_S2C_Protocol_Activity			= 33; //活动系统 _emS2C_Activity_Protocol
	P_S2C_Protocol_Platform			= 34; //平台系统 _emS2C_Platform_Protocol
	P_S2C_Protocol_Talk				= 35; //聊天系统 _emS2C_Talk_Protocol
	P_S2C_Protocol_Treasure			= 36; //探宝系统 _emS2C_Treasure_Protocol
	P_S2C_Protocol_HeavenDungeon	= 37; //天界副本 _emS2C_HeavenDungeon_Protocol
	P_S2C_Protocol_CrossChallenge	= 38; //跨服竞技场 _emS2C_CrossChallenge_Protocol
	P_S2C_Protocol_Room				= 39; //家园系统 _emS2C_Room_Protocol
	P_S2C_Protocol_Tablet			= 40; //晶碑系统 _emS2C_Tablet_Protocol
	P_S2C_Protocol_WeekChampion		= 41; //周冠军赛系统 _emS2C_WeekChampion_Protocol
	P_S2C_Protocol_TeamCampaign		= 42; //组队征战系统 _emS2C_TeamCampaign_Protocol
	P_S2C_Protocol_DragonBall		= 43; //龙珠系统 _emS2C_DragonBall_Protocol
	P_S2C_Protocol_Convenant		= 44; //契约系统 _emS2C_Convenant_Protocol
	P_S2C_Protocol_Lottery			= 45; //抽奖系统		_emS2C_Lottery_Protocol
	P_S2C_Protocol_Illustration		= 46; //图鉴系统 _emS2C_Illustration_Protocol
	P_S2C_Protocol_RedEnvelope		= 47; //红包 _emS2C_RedEnvelope_Protocol
	P_S2C_Protocol_JoyousLinkup		= 48; //连连看 _emS2C_JoyousLinkup_Protocol
	P_S2C_Protocol_Guess			= 49; //猜猜猜 _emS2C_Guess_Protocol
	P_S2C_Protocol_Defend			= 50; //守护 _emS2C_Defend_Protocol
	P_S2C_Protocol_Resonance		= 51; //共鸣 _emS2C_Resonance_Protocol
	P_S2C_Protocol_IncubateEgg		= 52; //孵化屋 _emS2C_IncubateEgg_Protocol
	P_S2C_Protocol_ActivityBoss		= 53; //活动限时boss _emS2C_ActivityBoss_Protocol
	P_S2C_Protocol_Order			= 54; //订单管理 _emS2C_Order_Protocol
	P_S2C_Protocol_GodDeploy		= 55; //大神搭配 _emS2C_GodDeploy_Protocol
	P_S2C_Protocol_Operate			= 255; //网络层相关操作 _emS2C_Operate_Protocol
}
//----帐号角色信息
enum _emS2C_Player_Protocol
{
	S2C_Player_SelectPlayer			= 1; //选择角色返回	PBSelectPlayerAck
	S2C_Player_BaseInfo			= 2; //基础信息 PBPlayerBase
	S2C_Player_SystemInfo			= 3; //功能系统信息 PBPlayerSystem
	S2C_Player_SystemInfo2			= 4; //功能系统信息 PBPlayerSystemExt	
	S2C_Player_BagInfo			= 5; //背包信息 PBPlayerBag
	S2C_Player_BagInfo2			= 6; //背包信息 PBPlayerBag 扩展
	S2C_Player_PetInfo			= 7; //伙伴信息 PBPlayerPet
	S2C_Player_PetInfo2			= 8; //伙伴信息 PBPlayerPet 扩展
	S2C_Player_PetInfo3			= 9; //伙伴信息3 PBPlayerPetExt	
	S2C_Player_ClientInfo			= 10; //前端信息 PBClientData
	//S2C_Player_Global			= 11; //全局信息 PBPlayerGlobal
	S2C_Player_Friend			= 12; //好友信息 PBPlayerFriend
	S2C_Player_Mail				= 13; //邮件信息 PBPlayerMail
	S2C_Player_Faction			= 14; //帮会信息 PBPlayerFaction
	S2C_Player_CheckPlayerName		= 15; //检测角色名字 PBPlayerNameAck
	S2C_Player_LoadComplete			= 16; //玩家数据发送完成	
	S2C_Player_CheckWallow			= 17; //防沉迷检测 PBPlayerWallowData

};


//-------------------------------------------------------------
//------------------------------ 召唤相关
enum _emResultCall_12
{
	R_ResultCall_Succeed			= 0; // 成功
	R_ResultCall_Fail				= 1; // 失败
	R_ResultCall_NeedItem			= 2; //扣除的道具不足
	R_ResultCall_NeedVipLevel		= 3; //vip等级不足
	R_ResultCall_NeedPetBag			= 4; //伙伴背包不足
	R_ResultCall_NoFreeCount		= 5; //无免费次数
	R_ResultCall_NeedPetStar		= 6; //伙伴星级不满足
	R_ResultCall_ChangeNoSave		= 7; //请先保存已经转换的伙伴
	R_ResultCall_NeedPetType		= 8; //伙伴类型不满足
	R_ResultCall_PetInZhenfa		= 9; //伙伴阵法或者加锁，不能使用
	R_ResultCall_NoChangeSave		= 10; //无可以保存的伙伴
	R_ResultCall_NoPet				= 11; //此伙伴已经被删除
	R_ResultCall_PetNoStar			= 12; //此伙伴星级对不上
	R_ResultCall_FixType			= 13; //解放类型参数不合法
	R_ResultCall_NotConfigPet		= 14; //配置文件中没有此伙伴
	R_ResultCall_NeedPetLevel		= 15; //伙伴等级不满足
	R_ResultCall_NeedPetEvolve		= 16; //伙伴进化等级不满足
	R_ResultCall_NeedPetAdvance		= 17; //伙伴进阶等级不满足
	R_ResultCall_WaveGodEquip		= 18; //伙伴已戴神装
	R_ResultCall_WaveRune			= 19; //伙伴已戴宝石
	R_ResultCall_WaveEquip			= 20; //伙伴已穿装备
};
//----召唤模块
enum _emC2S_Call_Protocol
{
	C2S_Call_OnePet					= 1 ; 	// 召唤一次		PBU32
	C2S_Call_TenPet					= 2 ; 	// 召唤十次		PBU32
	C2S_Call_Free					= 3 ; 	// 免费召唤		PBU32
	C2S_Call_Change					= 4 ; 	// 英雄转换		PBU64
	C2S_Call_SaveChange				= 5 ; 	// 英雄转换保存	PBU32
	C2S_Call_AutoSplit				= 6 ; 	// 设置自动分解	PBU32
	C2S_Call_FixChange				= 7 ;	// 固定英雄转换	PBC2G_Call_FixChange
}
//----召唤模块
enum _emS2C_Call_Protocol
{
	S2C_Call_Common					= 0 ;	// 通用失败返回
	S2C_Call_Update					= 1 ;	// 更新召唤信息		PBPlayerCallInfo
	S2C_Call_Change					= 2 ; 	// 伙伴转换返回		PBPlayerCallChange
	S2C_Call_SaveChangeAck			= 3 ; 	// 伙伴转换保存返回	PBU32
	S2C_Call_AutoSplit				= 4 ; 	// 设置自动分解返回	PBU32
	S2C_Call_FixChange				= 5 ; 	// 固定伙伴转换返回	PBPlayerCallChange
}

//----固定转换功能类型 C2S_Call_FixChange
message PBC2G_Call_FixChange
{
	optional uint32 type 			= 1; 	// 类型值，_emFixChangeType
	optional uint64  value			= 2; 	// 伙伴SN
}

//----固定转换功能类型
enum _emFixChangeType
{
	FixChangeType_UnLockPetActivity	= 1 ; 	// 解放胡帕活动
}

// 开服记录 server_open
message PBCenterServerOpen
{
	optional uint32 serverid		= 1;// 所在服务器
    optional string open_time       = 2;// 开服时间
    optional uint32 open_time_num   = 3;// 开服时间数字版
    optional uint32 status          = 4;// 服务器状态 0 未开放不显示 1 火 2 正常 3 火+未开放 4 正常+未开放
    optional string server_name     = 5;// 服务器名称
}

// 玩家注册记录 player_account
message PBCenterPlayerAccount
{
	optional string account		= 1;// 玩家账号
    optional string regist_time = 2;// 注册时间
    optional string regist_ip   = 3;// 注册IP
    optional uint32 serverid    = 4;// 服务器id
    optional uint32 status      = 5;// 0 平台跳转 1 到达选服页面 2 点击开始游戏 3 连接到游戏服 
    optional string uid         = 6;// 渠道分配的UID
    optional string cid         = 7;// 渠道ID
    optional uint32 phonetype   = 8;// 机型 0 安卓 1 iphone
    optional string userinfos   = 9;// 玩家信息user-agent
}

// 玩家注册记录 player_regist
message PBCenterPlayerReg
{
    optional uint32 serverid        = 1;// 服务器id
    optional uint32 playerid        = 2;// 玩家id
    optional string account         = 3;// 玩家账号
    optional string regist_time     = 4;// 注册时间
    optional string ip              = 5;// 注册IP
    optional uint32 server_open_day = 6;// 开服第几天注册
    optional string name            = 7;// 玩家名称
    optional uint32 create_nums     = 8;// 该账号第几次创角
    optional uint32 regist_status   = 9;// 0 平台跳转 1 到达选服页面 2 点击开始游戏 3 进入游戏画面
    optional string uid             = 10;// 渠道分配的UID
    optional string cid             = 11;// 渠道ID
}

// 玩家登陆记录 player_login
message PBCenterPlayerLogin
{
    optional uint32 serverid        = 1;// 服务器id
    optional uint32 playerid        = 2;// 玩家id
    optional string account         = 3;// 玩家账号
    optional string name            = 4;// 玩家名称
    optional uint32 login_time      = 5;// 登录时间
    optional string ip              = 6;// 玩家登录IP
    optional uint32 level           = 7;// 玩家等级
    optional uint32 power           = 8;// 战力
    optional uint64 yuanbao         = 9;// 当前元宝数量
}

// 玩家登出记录 player_logout
message PBCenterPlayerLogout
{
    optional uint32 serverid        = 1;// 服务器id
    optional uint32 playerid        = 2;// 玩家id
    optional string account         = 3;// 玩家账号
    optional string name            = 4;// 玩家名称
    optional uint32 login_time      = 5;// 登录时间
    optional uint32 logout_time     = 6;// 玩家登录IP
    optional uint32 online_time     = 7;// 在线时长
    optional uint32 level           = 8;// 玩家等级
    optional uint32 power           = 9;// 战力
    optional uint64 yuanbao         = 10;// 当前元宝数量
    optional string ip              = 11;// 玩家登录IP
}

// 每天首次登陆表 player_daylogin
message PBCenterPlayerDayLogin
{
    optional uint32 serverid        = 1;// 服务器id
    optional uint32 playerid        = 2;// 玩家id
    optional string account         = 3;// 玩家账号
    optional string name            = 4;// 玩家名称
    optional string login_time      = 5;// 登录时间
}

// 玩家信息定时更新表 player_info
message PBCenterPlayerInfo
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 playerid                = 2;// 玩家id
    optional string account                 = 3;// 玩家账号
    optional string name                    = 4;// 玩家名称
    optional uint32 level                   = 5;// 玩家等级
    optional uint32 power                   = 6;// 战力
    optional uint64 yuanbao                 = 7;// 当前元宝数量
    optional uint32 vip                     = 8;// vip等级
    optional uint32 recharge                = 9;// 总充值金额
    optional uint32 total_online_time       = 10;// 总在线时长
    optional string last_online_time        = 11;// 最后在线时间
    optional uint32 last_online_time_num    = 12;// 最后在线时间数字版
    optional uint32 server_open_day         = 13;// 开服第几天注册
    optional string regist_time             = 14;// 注册时间
    optional uint32 create_nums             = 15;// 该账号第几次创角
}

// 元宝记录 log_yuanbao
message PBCenterLogYuanbao
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 playerid                = 2;// 玩家id
    optional string account                 = 3;// 玩家账号
    optional string name                    = 4;// 玩家名称
    optional uint32 type                    = 5;// 元宝改变类型
    optional string type_name               = 6;// 元宝改变详细信息
    optional int64  yuanbao                 = 7;// 元宝改变数量
    optional uint64 current                 = 8;// 当前元宝数量
}

// 物品记录 log_item
message PBCenterLogItem
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 playerid                = 2;// 玩家id
    optional string account                 = 3;// 玩家账号
    optional string name                    = 4;// 玩家名称
    optional uint32 type                    = 5;// 物品改变类型
    optional string type_name               = 6;// 物品改变详细信息
    optional uint32 itemid                  = 7;// 物品ID
    optional int32  count                   = 8;// 物品改变数量
}

// 金币记录 log_gold
message PBCenterLogGold
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 playerid                = 2;// 玩家id
    optional string account                 = 3;// 玩家账号
    optional string name                    = 4;// 玩家名称
    optional uint32 type                    = 5;// 金币改变类型
    optional string type_name               = 6;// 金币改变详细信息
    optional uint64 current                 = 7;// 当前金币数量
    optional int64  gold                    = 8;// 金币改变数量
}

// 在线人数记录 online_counts
message PBCenterOnlineCount
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 online_number           = 2;// 在线玩家数量
}

// 充值表 recharge
message PBCenterRecharge
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 playerid                = 2;// 玩家id
    optional string account                 = 3;// 玩家账号
    optional string name                    = 4;// 玩家名称
    optional uint32 level                   = 5;// 玩家等级
    optional uint32 power                   = 6;// 战力
    optional uint32 goods_id                = 7;// 商品ID
    optional uint32 recharge                = 8;// 充值金额
    optional uint32 yuanbao                 = 9;// 获得的元宝
    optional string recharge_time           = 10;// 充值时间
    optional string player_ip               = 11;// 充值的玩家IP
    optional string order_number            = 12;// 订单号
    optional uint32 chapter                 = 13;// 当前关卡
    optional uint32 rechargecount           = 14;// 该玩家第几次充值
}

//公会宣言记录 log_faction_notice
message PBCenterFactionNotice
{
    optional uint32 serverid                = 1;// 服务器id
    optional uint32 factionid               = 2;// 公会id
    optional string factionname             = 3;// 公会名称
    optional uint32 leaderid                = 4;// 会长id
    optional string leadername              = 5;// 会长名称
    optional uint32 playerid                = 6;// 玩家id
    optional string playername              = 7;// 玩家名称
    optional string message                 = 8;// 宣言内容
}

//-------------------------------------------------------------
//------------------------------ 竞技场相关
enum _emResultChallenge_9
{
	R_ResultChallenge_Succeed		= 0; // 成功
	R_ResultChallenge_Fail			= 1; // 失败
	R_ResultChallenge_Cooling		= 2; // 冷却中
	R_ResultChallenge_HavePrize		= 3; // 已经领取过
	R_ResultChallenge_NeedFightCount= 4; // 挑战次数不足
	R_ResultChallenge_InFighting	= 5; // 该玩家正在进行一场战斗，请稍后再试
	R_ResultChallenge_NeedItem		= 6; // 道具不足
	R_ResultChallenge_StateError	= 7; // 状态不对
	R_ResultChallenge_NoLikeNum		= 8; // 点赞次数不足
	R_ResultChallenge_NoLikeOneself = 9; // 对自己点赞
	R_ResultChallenge_Liked 		= 10; // 已经点过赞了
};
//----客户端到服务器
enum _emC2S_Challenge_Protocol
{
	C2S_Challenge_Refresh			= 1	;//刷新对手 	无内容
	C2S_Challenge_WeekPrize			= 2	;//领取周宝箱	PBU32
	C2S_Challenge_Open				= 3	;//打开竞技场	无内容
	C2S_Challenge_Like				= 4	;//点赞		PBU32玩家id
	C2S_Challenge_AskPlayerInfo		= 5	;//玩家信息	PBU32玩家id
};
//----服务器到客户端
enum _emS2C_Challenge_Protocol
{
	S2C_Challenge_Common_Ack		= 0;//失败才返回
	S2C_Challenge_Target_Ack		= 1;//对手信息返回		PBG2CChallengeTargetAck
	S2C_Challenge_WeekPrize			= 2;//领取周宝箱返回	PBU32
	S2C_Challenge_OpenSyn			= 3;//自己的排行信息	PBG2CChallengeTopInfo
	S2C_Challenge_SynEnterCount		= 4;//同步进入次数		PBG2CChallengeSynEnterCount
	S2C_Challenge_LikeNum			= 5;//被点赞次数		PBChallengeLikeAck
	S2C_Challenge_LikeNumToPlayer	= 6;//点赞次数		PBU32
	S2C_Challenge_Target_PlayerInfo	= 7;//对手信息返回		PBG2CChallengeTargetInfo
	S2C_Challenge_Like				= 8;//点赞返回			PBU32
};

//挑战记录
message PBChallengeRecordAck
{
	repeated PBFightResult		record = 1;//挑战记录
}

//被点赞次数
message PBChallengeLikeAck
{
	optional uint32					playerID		= 1;	//玩家id
	optional uint32 				likeNum			= 2;	//次数
}


//同步进入次数
message PBG2CChallengeSynEnterCount
{
	optional uint32					daycount		= 1;	//日次数
	optional uint32 				weekcount		= 2;	//周次数
}
//竞技场对手信息
message PBChallengeObject
{
	optional uint32					id				= 1;// 机器人ID/玩家ID
	optional uint32					param			= 2;// 是否是机器人
	optional PBPlayerDisplay		display			= 3;	//显示
	optional uint32 				score			= 4;// 积分
	optional uint32 				fightpower		= 5;// 战斗力
	optional PBBattlePet			defense			= 6;// 防守信息

}
//对手信息返回
message PBG2CChallengeTopInfo
{
	optional uint32					order		= 1;	//自己名次
	optional uint32 				score		= 2;	//积分
}
//对手信息返回
message PBG2CChallengeTargetAck
{
	optional uint32					order		= 1;	//自己名次
	repeated PBChallengeObject 		target		= 2;	//对手基本信息
}

//对手信息返回
message PBG2CChallengeTargetInfo
{
	optional uint32					order		= 1;	//自己名次
	optional PBChallengeObject 		target		= 2;	//对手基本信息
}

//查看排行榜
message PBC2GChallengeTopList
{
	optional uint32					begin		= 1;	//开始名次
	optional uint32 				end			= 2;	//结束名次
}
//真正开始
message PBW2GChallengeRealBegin
{
	optional uint64					id			= 1;	//目标ID
}

//-------------------------------------------------------------
//------------------------------ 冠军赛相关
enum _emResultChampion_27
{
	R_ResultChampion_Succeed		= 0; // 成功
	R_ResultChampion_Fail			= 1; // 失败
	R_ResultChampion_NeedGuessState	= 2; // 竞猜已经结束
	R_ResultChampion_HaveGuess		= 3; // 已经竞猜
	R_ResultChampion_NeedGuessCoin	= 4; // 竞猜币不足
	R_ResultChampion_NoJoin			= 5; // 您未能进入本次冠军赛
	R_ResultChampion_NeedItem		= 6; // 道具不足
	R_ResultChampion_NoStart		= 7; // 未开始
	R_ResultChampion_NoFight		= 8; // 无此战斗
	R_ResultChampion_Like			= 9; // 已点赞
};
//----客户端到服务器
enum _emC2S_Champion_Protocol
{
	C2S_Champion_SelfGuessAsk		= 1	;//我的竞猜 	无内容
	C2S_Champion_QueryGuessAsk		= 2	;//查询竞猜		无内容
	C2S_Champion_GuessAsk			= 3	;//竞猜下注		PBC2GChampionGuessAsk
	C2S_Champion_Query32List		= 4	;//查询32强		PBU32
	C2S_Champion_Query4List			= 5	;//查询4强	
	C2S_Champion_GuessRecordAsk		= 6	;//我的竞猜记录		
	C2S_Champion_FightRecordAsk		= 7	;//我的战斗记录	
	C2S_Champion_SendDanmuAsk		= 8	;//发送弹幕		PBC2GChampionSendDanmuAsk
	C2S_Champion_QueryDanmuAsk		= 9	;//请求查询弹幕 PBC2GChampionQueryDanmu	
	C2S_Champion_QueryOddsAsk		= 10;//查询下注信息	
	C2S_Champion_OpenAsk			= 11;//打开	
	C2S_Champion_QueryBattleInfo	= 12;//查看对战信息	PBC2GChampionQueryBattleInfo	
	C2S_Champion_QueryRound			= 13;//查询对应回合数据		PBC2GChampionQueryRound
	C2S_Champion_Like				= 14;//点赞		PBC2GChampionLike

	/*------------------服务器专用----------------------------------------*/
	C2S_Champion_GmOpt			= 30;//gm开启活动		PBC2GChampionGM
	C2S_Champion_FightResult	= 31;//战斗结果返回		
};
//----服务器到客户端
enum _emS2C_Champion_Protocol
{
	S2C_Champion_Common_Ack		= 0;//失败才返回
	S2C_Champion_SelfGuessAck	= 1;//我的竞猜返回		PBG2CChampionSelfGuessAck
	S2C_Champion_QueryGuessAck	= 2;//查询竞猜返回		PBG2CChampionQueryGuessAck
	S2C_Champion_SysGuessAck	= 3;//竞猜下注同步返回	PBG2CChampionSynGuessAck
	S2C_Champion_Query32ListAck	= 4;//查询32强返回		PBG2CChampionQuery32ListAck
	S2C_Champion_Query4ListAck	= 5;//查询4强返回		PBG2CChampionQuery4ListAck
	S2C_Champion_GuessRecordAck	= 6;//我的竞猜记录		PBChampionGuessRecord
	S2C_Champion_FightRecordAck	= 7;//我的战斗记录		PBChampionFightRecord
	S2C_Champion_SendDanmuAck	= 8;//发送弹幕返回		无内容
	S2C_Champion_GuessReusltAck	= 9;//竞猜结果			PBG2CChampionGuessResultAck
	S2C_Champion_QueryDanmuAck	= 10;//查询弹幕返回		PBG2CChampionQueryDanmuAck
	S2C_Champion_OpenAck		= 11;//打开返回			PBG2CChampionOpenAck
	S2C_Champion_EndResultAck	= 12;//我的结算结果		PBG2CChampionEndResultAck
	S2C_Champion_QueryBattleInfo= 13;//查看对战信息		PBChampionBattle
	S2C_Champion_SynState		= 14;//同步状态			PBG2CChampionSynState
	S2C_Champion_SynTopResult	= 15;//同步排行结果		PBG2CChampionSynTopResult
	S2C_Champion_QueryRoundAck	= 16;//查询对应回合数据	PBG2CChampionQueryRoundAck
	S2C_Champion_Like			= 17;//点赞返回			PBU32U32
};
//冠军赛状态
enum _emChampionState
{
	_emChampionState_None		= 0;
	_emChampionState_Match		= 1;//匹配
	_emChampionState_Ready		= 2;//准备
	_emChampionState_Guess		= 3;//竞猜
	_emChampionState_Fight		= 4;//开始
	_emChampionState_End		= 5;//结束
};
//冠军赛回合
enum _emChampionRound
{
	_emChampionRound_Normal0	= 0;
	_emChampionRound_Normal1	= 1;//选拔赛回合1
	_emChampionRound_Normal2	= 2;//选拔赛回合2
	_emChampionRound_Normal3	= 3;//选拔赛回合3
	_emChampionRound_Normal4	= 4;//选拔赛回合4
	_emChampionRound_Normal5	= 5;//选拔赛回合5
	_emChampionRound_Normal6	= 6;//选拔赛回合6
	_emChampionRound_Area4		= 7;//分区32强
	_emChampionRound_Area2		= 8;//分区16赛
	_emChampionRound_Area1		= 9;//分区8赛
	_emChampionRound_Final2		= 10;//半4赛
	_emChampionRound_Final1		= 11;//决赛2
};

//点赞
message PBC2GChampionLike
{
	optional uint32 likeplayerid 	= 1;//点赞player id
}
//同步排行结果
message PBG2CChampionSynTopResult
{
	optional uint32					begintime		= 1;//开始时间
	repeated PBPlayerDisplay		display			= 2;//排名
}
//同步状态
message PBG2CChampionSynState
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional uint32					endtime			= 4;//状态结束的时间
}
//查看对战信息
message PBC2GChampionQueryBattleInfo
{
	optional uint32	roundid			= 1;//回合ID
	optional uint32	leftplayerid	= 2;//左边玩家ID
	optional uint32	rightplayerid	= 3;//右边玩家ID
}

//查询第几回合
message PBC2GChampionQueryRound
{
	optional uint32	roundid			= 1;//回合ID
	optional uint32	areaid			= 2;//分区id
}

//gm
message PBC2GChampionGM
{
	optional uint32	type			= 1;//操作类型
	optional uint32	value			= 2;//参数
}

//我的结算结果
message PBG2CChampionEndResultAck
{
	optional uint32	rank		= 1;//名次
	optional uint32	fightcount	= 2;//比赛场次
	optional uint32	wincount	= 3;//胜场输
}
//打开返回
message PBG2CChampionOpenAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional uint32					endtime			= 4;//状态结束时间
	optional uint32					currank			= 5;//当前名次
	optional uint32					maxrank			= 6;//最高名次
}
//请求查询弹幕
message PBC2GChampionQueryDanmu
{
	optional uint32					startindex		= 1;//开始索引
	optional uint32					count			= 2;//数量
}
//弹幕信息
message PBChampionDanmu
{
	optional uint32					index			= 1;//id
	optional uint32					playerid		= 2;//玩家ID
	optional string					msg				= 3;//消息
}
//发送弹幕
message PBC2GChampionSendDanmuAsk
{
	optional string					msg				= 1;//消息
}
//请求查询弹幕返回
message PBG2CChampionQueryDanmuAck
{
	repeated PBChampionDanmu		danmu			= 1;//列表
}

//对战数据列表
message PBChampionFightUnitList
{
	repeated PBChampionFightUnit	fights			= 1;//分区
}
//分区列表
message PBChampionFightList
{
	repeated PBPlayerDisplay			allplayer		= 1;//所有玩家
	repeated PBChampionFightUnitList	fightsist		= 2;//分区
}

//查询回合返回
message PBG2CChampionQueryRoundAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional uint32					areaid			= 4;//赛区ID
	optional PBChampionFightList	list			= 5;//列表
}

//查询32强返回
message PBG2CChampionQuery32ListAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional uint32					areaid			= 4;//赛区ID
	optional PBChampionFight32		list			= 5;//列表
}
//查询4强返回
message PBG2CChampionQuery4ListAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional uint32					areaid			= 4;//赛区ID
	optional PBChampionFight4		list			= 5;//列表
}
//冠军赛战斗显示
message PBChampionBattle
{
	optional PBBattleDisplay		leftbattle		= 1;//左边显示
	optional PBBattleDisplay		rightbattle		= 2;//右边显示
	optional uint64					battlesn		= 3;//战斗SN
	optional uint32					winplayerid		= 4;//胜利玩家ID
	optional uint32					roundid 		= 5;//回合ID
}
//我的竞猜返回
message PBG2CChampionSelfGuessAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional PBChampionBattle		battle			= 4;//战斗显示
}
//查询竞猜返回
message PBG2CChampionQueryGuessAck
{
	optional uint32					begintime		= 1;//开始时间
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					state			= 3;//状态		_emChampionState
	optional PBChampionBattle		battle			= 4;//战斗显示
	optional uint32					guesscoin		= 5;//竞猜币
	optional uint32					leftodds		= 6;//左边赔率 扩大一百倍
	optional uint32					rightodds		= 7;//右边赔率 扩大一百倍
}
//押注请求
message PBC2GChampionGuessAsk
{
	optional bool					isguessleft		= 1;//是否压住左边
	optional uint32					guesscoin		= 2;//压住竞猜币
}
//竞猜结果返回
message PBG2CChampionGuessResultAck
{
	optional bool					iswin			= 1;//是否成功
	optional int32					addguesscoin	= 2;//增加的竞猜币 负数表示扣除
	optional uint32					guesscoin		= 3;//剩余的竞猜币
}
//赔率返回
message PBG2CChampionSynGuessAck
{
	optional uint32					leftodds		= 1;//左边赔率 扩大一百倍
	optional uint32					rightodds		= 2;//右边赔率 扩大一百倍
	optional uint32					guessplayerid	= 3;//下注的目标ID
	optional uint32					guesscoin		= 4;//剩余的竞猜币
}

//竞技场对手信息
message PBChampionObject
{
	optional uint32					id				= 1;// 机器人ID/玩家ID
	optional uint32					param			= 2;// 是否是机器人
	optional PBPlayerDisplay		display			= 3;	//显示
	optional uint32 				score			= 4;// 积分
	optional uint32 				fightpower		= 5;// 战斗力
	optional PBBattlePet			defense			= 6;// 防守信息

}
//对手信息返回
message PBG2CChampionTopInfo
{
	optional uint32					order		= 1;	//自己名次
	optional uint32 				score		= 2;	//积分
}
//对手信息返回
message PBG2CChampionTargetAck
{
	optional uint32					order		= 1;	//自己名次
	repeated PBChampionObject 		target		= 2;	//对手基本信息
}

//查看排行榜
message PBC2GChampionTopList
{
	optional uint32					begin		= 1;	//开始名次
	optional uint32 				end			= 2;	//结束名次
}
//战斗结果
message PBG2WChampionFightResult
{
	optional uint64				id				= 1;	//挑战ID
	optional uint32				result 			= 2;	//战斗结果 _emBattleResult
	repeated PBItem				iteminfo		= 3;	//奖励信息
}
//真正开始
message PBW2GChampionRealBegin
{
	optional uint64					id			= 1;	//目标ID
}
//战斗结果
message PBChampionResultInfo
{
	optional PBPlayerDisplay		display		= 1;	//显示
	optional uint32					score		= 2;	//最新积分
	optional int32					addscore	= 3;	//改变积分
}
//战斗结果
message PBG2CChampionResult
{
	optional uint64					battlesn	= 1;	//挑战sn
	optional uint32					battletype	= 2;	//挑战类型
	optional uint32					id			= 3;	//挑战ID
	optional uint32					param		= 4;	//参数
	optional uint32					result 		= 5;	//战斗结果 _emBattleResult
	repeated PBItemInfo				iteminfo	= 6;	//奖励信息
	optional PBChampionResultInfo	friend		= 7;	//友方
	optional PBChampionResultInfo	enermy		= 8;	//敌方
}
//战斗单元
message PBChampionFightUnit
{
	optional uint32					leftplayerid	= 1;//左边显示
	optional uint32					rightplayerid	= 2;//右边显示
	optional uint32					winplayerid		= 3;//胜利玩家
	optional uint64					battlesn		= 4;//战斗SN
}
//分区八强
message PBChampionFight32
{
	repeated PBPlayerDisplay		allplayer		= 1;//所有玩家
	repeated PBChampionFightUnit	fight4			= 2;//分区4强
	repeated PBChampionFightUnit	fight2			= 3;//分区半决赛
	repeated PBChampionFightUnit	fight1			= 4;//分区冠军
}
//4强
message PBChampionFight4
{
	repeated PBPlayerDisplay		allplayer		= 1;//所有玩家
	repeated PBChampionFightUnit	fight2			= 2;//半决赛
	repeated PBChampionFightUnit	fight1			= 4;//分区冠军
}
//冠军赛保存数据
message PBChampionSaveData
{
	repeated PBChampionFight32	area32				= 1;	//分区32强
	repeated PBChampionFight4	total4				= 2;	//总四强
}

//冠军赛个人数据
message PBRChampionPlayer
{
	optional uint32					id				= 1;	//玩家id
	optional uint32					score			= 2;	//积分
	optional uint32					order			= 3;	//排名
	optional uint32					like			= 4;	//点赞
	optional uint32 				maxrank			= 5;	//历史最高名次
	optional uint32					guesscoin		= 6;	//竞猜币
	optional bool					issynresult		= 7;	//是否通知结果
}
//每场战斗简要数据
message PBRChampionRoundFight
{
	optional uint64					sn					= 1;	//战斗回放sn
	optional uint64					leftid				= 2;	//左边玩家id
	optional uint64					rightid				= 3;	//右边玩家id
	optional uint64					winnerid			= 4;	//胜利玩家id
}
//每轮战斗简要数据
message PBRChampionRound
{
	optional uint32					roundid				= 1;	
	repeated PBRChampionRoundFight	roundfight			= 2;	//战斗
}

//战斗结果
message PBChampionFightResult
{
	optional uint64					battlesn		= 1;//战斗SN
	optional uint32					winnerid		= 2;//胜利玩家id
}

//------------------------------ 通用系统返回
enum _emResultCommon_1
{
	R_ResultCommon_Succeed					= 0; //成功
	R_ResultCommon_Fail						= 1; //失败
	R_ResultCommon_InPlane					= 2; //位面中
	R_ResultCommon_PlayerOffline			= 3; //玩家不在线
	R_ResultCommon_PlayerNameUsed			= 4; //名字被使用过
	R_ResultCommon_PlayerRenameing			= 5; //重命名中
	R_ResultCommon_PlayerHaveRename			= 6; //已经重新命名
	R_ResultCommon_RanameUsed				= 7; // 名字重名
	R_ResultCommon_RanameIllegalCharacter	= 8; // 名字字符非法
	R_ResultCommon_RanameIllegalNotLength	= 9; // 名字长度非法
	R_ResultCommon_RanameIllegalBadWord 	= 10; //名字含非法字符
	R_ResultCommon_NeedPlayerLevel			= 11; //需要玩家等级
	R_ResultCommon_TalkNeedStep				= 12; //发言过快
	R_ResultCommon_NoPlayer					= 13; //无此玩家
	R_ResultCommon_TalkForbid				= 14; //发言违规
	R_ResultCommon_FightEachOtherIng		= 16; //切磋状态中
	R_ResultCommon_FightEachOtherState		= 17; //切磋状态错误
	R_ResultCommon_FightEachOtherNotFound	= 18; //切磋目标不存在
	R_ResultCommon_SystemClose				= 19; //系统未开启
	R_ResultCommon_NeedDiamond				= 20; //钻石不足
	R_ResultCommon_AlreadyFollow			= 21; //已经关注该玩家了
	R_ResultCommon_NotFollow				= 22; //没有关注该玩家
	R_ResultCommon_FightEachOtherNotAllow	= 23; //对方没有同意切磋
	R_ResultCommon_AlreadyUseInviteCode		= 24; //已经使用邀请码了
	R_ResultCommon_InviteMaxNum				= 25; //对方邀请数量已满
	R_ResultCommon_InviteNotExist			= 26; //邀请码无效
	R_ResultCommon_InvitePrizeNum			= 27; //无可领取邀请奖励数量
	R_ResultCommon_GotPrize					= 28; //已领取奖励
};
//----通用功能模块
enum _emC2S_Common_Protocol
{
	C2S_Common_Go		 		= 0;//前端准备就绪
	C2S_Common_ClientSave 		= 1;//保存数据请求		PBClientData
	C2S_Common_GMCmd 			= 3;//文本命令 			PBC2GGMCmdTxtCmd
	C2S_Common_QueryPlayerView	= 4;//查询玩家 			PBC2GQueryPlayerView
	C2S_Common_QueryPetView		= 5;//查询玩家伙伴 		PBC2GQueryPetView
	C2S_Common_PlayerRename		=6;//重命名 			PBPlayerRename
	C2S_Common_QueryBigWorldGroup= 7;//查询跨服组
	C2S_Common_FindPlayerName	 = 9;//查询玩家名称 	PBC2GCommonFindPlayerName
	C2S_Common_QueryWorldLevel	 = 11;//查询世界等级 
	C2S_Common_SetBackground	 = 12;//保存个人空间背景 PBU32
	C2S_Common_SetShowPets	 	 = 13;//设置展示的英雄 PBG2CCommonShowPets
	C2S_Common_Follow			 = 14;//关注(world id, player id) PBU32U32
	C2S_Common_UnFollow		     = 15;//取消关注(world id, player id) PBU32U32
	C2S_Common_SetFEONeedConfirm = 16;//设置切磋需要验证(1需要0不需要) PBU32
	C2S_Common_FightEachOtherRequest = 17;//发出切磋的请求 PBC2GCommonFightRequest
	C2S_Common_FightEachOtherReply 	 = 18;//切磋验证回复 PBC2GCommonFightReply
	C2S_Common_UseInviteCode 	 	 = 19;//使用邀请码 PBString
	C2S_Common_InvitePrize			 = 20;//领取邀请奖励(成就ID) PBU32
	C2S_Common_Sign			 		 = 21;//请求校验 PBC2GCommonSign
	C2S_Common_WorldItemLog			 = 22;//请求全服物品记录(_emWorldItemLogType) PBU32
	C2S_Common_SurveyPrize			 = 23;//领取问卷奖励 PBU32	
	C2S_Common_SystemSwitchPrize	 = 24;//开启系统奖励 PBU32
	C2S_Common_Prize	 			 = 25;//简单通用奖励 PBU32
	C2S_Common_ReportLog			 = 26;//玩家举报日志  PBC2GCommonReportLog
	C2S_Common_GuideLog				 = 27;//玩家引导日志	PBC2GCommonGuideLog
	C2S_Common_SurveyLog			 = 28;//玩家问卷调查日志	PBC2GCommonSurveyLog
}

//----通用功能模块
enum _emS2C_Common_Protocol
{
	S2C_Common_ExpendSyn 			= 1;//消耗同步		PBG2CExpendSyn
	S2C_Common_TimeEvent			= 3;//时间事件		PBG2CCommon_TimeEvent
	S2C_Common_GMCmd				= 4;//GM命令返回	PBG2CGMCmdTxtCmd
	S2C_Common_AddLevel				= 5;//增加等级 		PBG2CAddLevel
	S2C_Common_ShowPrize			= 6;//通用道具奖励	PBG2CCommonShowPrize
	S2C_Common_PlayerViewAck		= 7;//查询玩家返回	PBG2CQueryPlayerViewAck
	S2C_Common_PetViewAck			= 8;//查询伙伴返回	PBPlayerPetView
	S2C_Common_PlayerRenameAck		= 9;//重命名返回	PBPlayerRename
	S2C_Common_UpdateFightPower		= 10;//更新战斗力	PBU32
	S2C_Common_SynPlayerBigWorld	= 11;//同步跨服信息	PBCommonSynPlayerBigWorld
	S2C_Common_SystemSwitch			= 12;//系统开启(id, time)		PBU32U32
	S2C_Common_FindPlayerNameAck	= 14;//查询玩家名称	PBPlayerFriendInfo
	S2C_Common_QueryWorldLevel	 	= 15;//查询世界等级 PBU32
	S2C_Common_AddRecharge			= 16;//玩家充值通知 PBU32
	S2C_Common_FightEachOther		= 17;//切磋错误通知 PBU32
	S2C_Common_SetBackground		= 18;//保存个人空间背景返回 PBU32
	S2C_Common_SetShowPets			= 19;//设置展示的英雄返回  PBG2CCommonShowPets
	S2C_Common_Follow				= 20;//关注返回(world id, player id) PBU32U32
	S2C_Common_UnFollow				= 21;//取消关注返回(world id, player id) PBU32U32
	S2C_Common_SetFEONeedConfirm	= 22;//设置切磋需要验证返回 PBU32
	S2C_Common_FightEachOtherRequest = 23;//被请求切磋验证的推送 PBG2CCommonFightRequest
	S2C_Common_FightEachOtherReply   = 24;//对方的切磋验证回复 PBG2CCommonFightReply
	S2C_Common_UseInviteCode		= 25;//使用邀请码(邀请人的 world id, player id) PBU32U32
	S2C_Common_InvitePlayer			= 26;//有接受自己邀请的玩家(world id, player id) PBU32U32
	S2C_Common_InvitePrize			= 27;//同步邀请奖励 PBPlayerInvitePrize
	S2C_Common_Sign					= 28;//请求校验返回 PBG2CCommonSign
	S2C_Common_WorldItemLog			= 29;//请求全服物品记录返回 PBWorldItemLogs
	S2C_Common_SurveyPrize			= 30;//领取问卷奖励
	S2C_Common_SystemSwitchPrize	= 31;//开启系统奖励返回 PBU32
	S2C_Common_Prize	 			= 32;//简单通用奖励 PBU32
}

// 查询伙伴评分
message PBG2CAddLevel
{
	optional uint32  level 		= 1;//等级
	optional uint32  doingtype 	= 2;//类型
}
// 查询伙伴评分
message PBG2CQueryPetScore
{
	optional PBPetScoreInfo  selfscore 	= 1;//自己的评分
	optional PBPetScoreInfo  maxscore 	= 2;//最大的评分
}
// 查询玩家
message PBC2GCommonFindPlayerName
{
	optional string		name			= 1;// 角色名
}
// 查询玩家
message PBCommonSynPlayerBigWorld
{
	repeated PBU32U32  worldinfo 	= 1;//服务器信息 服ID_等级
}

// 查询玩家
message PBPlayerRename
{
	optional string		name			= 1;// 角色名
	optional uint32 	gender			= 2;// 性别
}
// 查询玩家
message PBG2CExpendSyn
{
	optional uint32 expendtype		= 1; // 玩家ID
	optional int64 	change			= 2; // 改变值
	optional uint64 value			= 3; // 最终值
	optional uint32 doingtype		= 4; // 操作类型_emDoingType
}
// 查询玩家
message PBC2GQueryPlayerView
{
	optional uint32 playerid		= 1; // 玩家ID
	optional uint32 logicworldid	= 2;// 逻辑世界ID
	optional uint32 srplayerid		= 3; // 源玩家ID
	optional uint32 srlogicworldid	= 4;// 源世界ID
	optional uint32 viewtype		= 5;// 查询类型 _emQueryPlayerViewType
}
// 查询玩家伙伴
message PBC2GQueryPetView
{
	optional uint32 playerid		= 1; // 玩家ID
	optional uint32 logicworldid	= 2; // 逻辑世界ID
	optional uint64 petsn			= 3; // 伙伴SN
	optional uint32 srplayerid		= 4; // 源玩家ID
	optional uint32 srlogicworldid	= 5;// 源世界ID
}
// GM命令
message PBC2GGMCmdTxtCmd
{
	optional uint64 callbackid	= 1; // 回调id
	optional string param		= 2; // 参数
}
// GM命令
message PBG2CGMCmdTxtCmd
{
	optional uint64 callbackid	= 1; // 回调id
 	optional bool	result		= 2; // 结果
	optional string msg			= 3; // 附带信息
}

// 每日事件
message PBG2CCommon_TimeEvent
{
	optional bool	newday		= 1;	//是否跨天
	optional bool	newweek		= 2;	//是否跨周
	optional bool	newmonth	= 3;	//是否跨月
	optional uint32 time		= 4;	//当前时间
}
// 通用奖励展示
message PBG2CCommonShowPrize
{
	repeated PBItemInfo	item		= 1;	//道具
	repeated PBPetStar	pet			= 2;	//伙伴
	optional uint32 	doingtype	= 3; 	//原因_emDoingType
	repeated PBItemInfo	splititem	= 4;	//分解道具
}

// 设置展示英雄
message PBG2CCommonShowPets
{
	repeated uint64	sn		= 1;	//sn
}

// 请求切磋
message PBC2GCommonFightRequest
{
	optional uint32 worldid 	= 1; //切磋目标world id
	optional uint32 playerid 	= 2; //切磋目标player id
}

// 请求切磋
message PBG2CCommonFightRequest
{
	optional uint32 worldid 	= 1; //请求切磋玩家world id
	optional uint32 playerid 	= 2; //请求切磋玩家player id
	optional string playername 	= 3; //请求切磋玩家名字
}

// 答复切磋
message PBC2GCommonFightReply
{
	optional uint32 worldid 	= 1; //对方的world id
	optional uint32 playerid 	= 2; //对方的player id
	optional bool 	reply		= 3; //答复
}

// 答复切磋
message PBG2CCommonFightReply
{
	optional uint32 worldid 	= 1; //对方的world id
	optional uint32 playerid 	= 2; //对方的player id
	optional bool 	reply		= 3; //答复
	optional bool	confirm 	= 4; //对方是否需要验证(false的话可以不用弹出确认框直接请求战斗)
}

// 离线数据类型
enum _emCommonOfflineDataType
{
	CommonOffline_Follow 		= 0;//关注
	CommonOffline_UnFollow 		= 1;//取消关注
	CommonOffline_UseInviteCode = 2;//使用邀请码
	CommonOffline_InvitePlayer 	= 3;//邀请了新的玩家
	CommonOffline_InvitePrize 	= 4;//邀请玩家达成奖励
}

// 新邀请玩家
message PBCommonInvite
{
	optional uint32		worldid 		= 1;	// world id
	optional uint32 	playerid		= 2;    // player id
	optional uint32		inviteworldid	= 3;	// 邀请码的玩家world id
	optional uint32		inviteplayerid	= 4;	// 邀请码的玩家player id
	optional uint32		result 			= 5;	// 结果
}
// 邀请玩家达成奖励
message PBCommonInvitePrize
{
	optional uint32 worldid 	= 1; //对方的world id
	optional uint32 playerid 	= 2; //对方的player id
	optional uint32 id			= 3; //成就id
}

// 请求校验值
message PBC2GCommonSign
{
	optional uint32 type 		= 1; //类型 _emSignType
	repeated string params 		= 2; //请求的参数 根据_emSignType里的注释
}

// 校验值返回
message PBG2CCommonSign
{
	optional uint32 type 		= 1; //类型
	optional uint32 time 		= 2; //时间
	optional string sign		= 3; //校验字符串
	repeated string params 		= 4; //请求的参数原样返回
}

//客户端上传举报日志
message PBC2GCommonReportLog
{
	optional uint32 ReportPlayerID 		 = 1; //举报玩家ID
	optional string ReportPlayerName 	 = 2;//举报玩家姓名
	optional uint32 ReportPlayerServerID = 3;//举报玩家服务器ID
	optional string Reason 				 = 4;//举报理由
	optional string Explain				 = 5;//解释
	optional string Proof				 = 6;//举报证据
}
//玩家引导日志
message PBC2GCommonGuideLog
{
	optional uint32 GuideID		= 1; //引导ID
}
//玩家问卷调查日志
message PBC2GCommonSurveyLog
{
	optional uint32 QuestionID = 1; //问题ID
	optional string Question   = 2; //问题
	optional string Answer	   = 3; //答案	
}
/*************************************************************/
/*************************************************************/
//#############################################################
//##############################常量类型
//#############################################################
enum _emConstantType
{
	Constant_Game				= 0;	//游戏配置	_emConstant_Game
	Constant_Team				= 1;	//队伍配置	_emConstant_Team
	Constant_Hook				= 2;	//挂机配置	_emConstant_Hook
	Constant_Faction			= 3;	//帮派配置	_emConstant_Faction
	Constant_Friend				= 4;	//好友配置	_emConstant_Friend
	Constant_Item				= 5;	//道具配置	_emConstant_Item
	Constant_Risk				= 6;	//冒险配置	_emConstant_Risk
	Constant_Fanli				= 7;	//返利配置	_emConstant_Fanli
};
//#############################################################
//############################## 游戏属性
//#############################################################
enum _emConstant_Game
{
	C_Game_MaxLevel					= 1;	//最大开放等级
	C_Game_ReconnetTime				= 2;	//断线重连时长秒
	C_Game_EquipBagSpace			= 3;	//装备背包的格子数
	C_Game_MailExpireDay			= 4;	//邮件失效天数
	C_Game_MaxMailCount				= 5;	//最大邮件数量
	C_Game_DefaultPetSpace			= 6;	//默认伙伴空间个数
	C_Game_SailDayFreeCount			= 7;	//远航每日免费刷新次数
	C_Game_PetShopResetExpend		= 9;	//英雄商店重置消耗
	C_Game_TrainTowerDayFreeCount	= 10;	//试练塔每日免费次数
	C_Game_TempleCoolTime			= 11;	//神殿冷却时间
	C_Game_TempleMaxRecordCount		= 12;	//神殿挑战记录最大条数
	C_Game_ElementFreeCount			= 13;	//元素神殿免费次数
	C_Game_ElementBuyCount			= 14;	//元素神殿购买次数
	C_Game_BigworldNeedWorldLevel	= 15;	//跨服需要世界等级
	C_Game_VideoMaxCount			= 16;	//录像最大条数
	C_Game_VideoMaxLikeCount		= 17;	//录像点赞次数
	C_Game_VideoMaxLikePrizeGold	= 18;	//录像点赞奖励金币
	C_Game_MaxDailyLiveness			= 19;	//每日最大活跃度
	C_Game_EquipCompoundNeedLevel	= 20;	//装备一键合成开启等级
	C_Game_MaxActivityLiveness		= 21;	//七日目标最大活跃度
	C_Game_RenameNeedDiamond		= 22;	//改名需要的钻石
	C_Game_MaxInviteCount			= 23;	//最大邀请个数
	C_Game_RuneUnlockAchieve		= 24;	//星石开启成就
	C_Game_GodEquipUnLockAchieve	= 25;	//神装开启成就
	C_Game_RebornLevel				= 26;	//英雄重生等级限制
	C_Game_RebornCount				= 27;	//每天重生次数
	C_Game_MaxWeeklyLiveness		= 28;	//每周最大活跃度
	C_Game_AchieveVersionMark		= 29;	//成就版本标记
	C_Game_SwitchVersionMark		= 30;	//开关版本标记
	C_Game_VideoPvpMaxCount			= 31;	//pvp录像保存条数
	C_Game_CompensatePetVersion		= 32;	//精灵补偿版本标记
	C_Game_FindBackOfflineDay		= 33; 	//资源找回最小天数
	C_Game_FindBackMaxDay 			= 34;	//最大找回天数
};
//#############################################################
//############################## 队伍
//#############################################################
enum _emConstant_Team
{
	C_Team_MaxTeamMember			= 1;	//最大成员人数
	C_Team_MaxTeamList				= 2;	//最大队伍列表
	C_Team_AutoStartTime			= 3;	//自动开启时间
	
};

//#############################################################
//############################## 挂机配置
//#############################################################
enum _emConstant_Hook
{
	C_Hook_MaxProfitTime			= 1;	//挂机最大收益时间
	C_Hook_DayFreeSweepCount		= 2;	//每日免费快速作战次数
	C_Hook_DayBuySweepCount			= 3;	//每日购买快速作战次数
	C_Hook_SweepProfitTime			= 4;	//快速作战收益时间
};
//#############################################################
//############################## 公会配置
//#############################################################
enum _emConstant_Faction
{
	C_Faction_CreateNeedDiamond			= 1;	//创建需要的钻石
	C_Faction_CopymapSkillMaxLevel		= 2;	//副本加成技能最大等级
	C_Faction_CopymapSkillNeedDiamond	= 3;	//副本加成技能需要钻石
	C_Faction_CopymapSkillFirstTime		= 4;	//副本加成技能初始时长秒
	C_Faction_CopymapSkillPerTime		= 5;	//副本加成技能每级时长秒
	C_Faction_CopymapFreeCount			= 6;	//副本每日免费次数
	C_Faction_CopymapSkillID			= 7;	//副本加成被动技能ID
	C_Faction_CopymapSkillUseItem		= 8;	//副本增幅令ID
	C_Faction_MemberNoActiveOfflineDays	= 9;	//成员不活跃离线天数
	C_Faction_RenameNeedDiamond			= 10;	//重命名需要钻石
	C_Faction_RenameCoolTime			= 11;	//重命名冷却时间小时
	C_Faction_RecruitDayCount			= 12;	//招募日次数
	C_Faction_RecruitCoolTime			= 13;	//招募冷却时间分钟
	C_Faction_RecruitNeedDiamond		= 14;	//招募需要钻石
	C_Faction_CopymapNoticeCoolTime		= 15;	//副本集结冷却时间分钟
	C_Faction_LeaveCoolTime				= 16;	//离开公会冷却时间小时
	C_Faction_MaxEventCount				= 17;	//最大公会日志条数
	C_Faction_ImpeachCustom				= 18;	//公会消耗
};
//#############################################################
//############################## 好友配置
//#############################################################
enum _emConstant_Friend
{
	C_Friend_MaxFriendCount			= 1;	//好友最大个数
	C_Friend_MaxApplyCount			= 2;	//申请列表最大个数
	C_Friend_MaxBlackCount			= 3;	//黑名单最大个数
	C_Friend_MaxSendPrizeCount		= 4;	//赠送最大送礼物个数
	C_Friend_MaxRefreshCount		= 5;	//推荐好友个数
};
//#############################################################
//############################## 道具配置
//#############################################################
enum _emConstant_Item
{
	C_Item_RuneExchangeScore		= 1;	//符文熔炼需要积分
	C_Item_RuneExchangeItem			= 2;	//符文熔炼道具ID
};
//#############################################################
//############################## 冒险配置
//#############################################################
enum _emConstant_Risk
{
	C_Risk_ResetStepDay				= 1;	//重置间隔天数
	C_Risk_ResetDelStage			= 2;	//重置减去层数
	C_Risk_GroupMinRand				= 3;	//组随机最小个数
	C_Risk_GroupMaxRand				= 4;	//组随机最大个数
	C_Risk_MaxGridCount				= 5;	//最大格子数
	C_Risk_MaxUseHpDrup				= 6;	//生命药剂使用最大个数
	C_Risk_MaxUseKillDrup			= 7;	//驱魂药剂使用最大个数
	C_Risk_InitHpDrupCount			= 8;	//默认给的生命药剂数量
};

//返利配置
enum _emConstant_Fanli
{
	C_Fanli_Percent				= 1;	//返利比率
	C_Fanli_LowMoney			= 2;	//最低金额
};



//-------------------------------------------------------------
//------------------------------ 契约
enum _emResultConvenant_44
{
	R_ResultConvenant_Succeed			= 0; // 成功
	R_ResultConvenant_Fail				= 1; // 失败
    R_ResultConvenant_Lock				= 2; // 未解锁
    R_ResultConvenant_UnLock			= 3; // 已解锁
    R_ResultConvenant_NeedItem			= 4; // 道具不足
    R_ResultConvenant_MaxLevel			= 5; // 已经达到最大等级
    R_ResultConvenant_Select			= 6; // 已经选择了该属性
	R_ResultConvenant_Index				= 7; // 选择属性不存在
};

//--- 客户端到服务器
enum _emC2S_Convenant_Protocol
{
	C2S_Convenant_UnLock			= 0	;//解锁 
	C2S_Convenant_Levelup			= 1	;//升级	
	C2S_Convenant_Attr			    = 2	;//选择属性(id, index 1, 2, 3) PBU32U32
	C2S_Convenant_Power			    = 3	;//计算战斗力(id) PBU32
}

//----服务器到客户端
enum _emS2C_Convenant_Protocol
{
	S2C_Convenant_UnLock			= 0	;//解锁返回 	
	S2C_Convenant_Levelup			= 1	;//升级返回 (level) PBU32
    S2C_Convenant_Attr			    = 2	;//选择属性返回 (id, index 1, 2, 3) PBU32U32
	S2C_Convenant_Power			    = 3	;//计算战斗力(id, power) PBU32U32
};


//------------------------------ 副本系统返回
enum _emResultCopymap_2
{
	R_ResultCopymap_Succeed							= 0; //成功
	R_ResultCopymap_Fail							= 1; //失败
	R_ResultCopymap_MaxEnterCount					= 2; //进入次数不足
	R_ResultCopymap_SweepNeedWin					= 3; //未通关此难度不能扫荡
	R_ResultCopymap_NeedItem						= 4; //道具不足
	R_ResultCopymap_NeedPlayerLevel					= 5; //玩家等级不足
	R_ResultCopymap_NeedFightpower					= 6; //玩家战力不足
	R_ResultCopymap_NeedPreSubType					= 7; //需要前置关卡
	R_ResultCopymap_HaveEnterCount					= 8; //已经有次数
	R_ResultCopymap_NoBuyCount						= 9; //无购买次数，请提升VIP等级
}
//----副本模块
enum _emC2S_Copymap_Protocol
{
	C2S_Copymap_Sweep			= 0	;//扫荡	PBU32
	C2S_Copymap_BuyCount		= 1	;//购买次数 PBU32
	
}
//----副本模块
enum _emS2C_Copymap_Protocol
{
	S2C_Copymap_CommonAck		= 1	;//通用返回(失败才返回)
	S2C_Copymap_SynInfo			= 2	;//同步副本数据 PBPlayerCopymapInfo
	S2C_Copymap_BuyCount		= 3	;//同步购买次数 PBPlayerCopymapInfo
}


//-------------------------------------------------------------
//------------------------------ 跨服竞技场相关
enum _emResultCrossChallenge_38
{
	R_ResultCrossChallenge_Succeed		    = 0;    // 成功
	R_ResultCrossChallenge_Fail			    = 1;    // 失败
	R_ResultCrossChallenge_Cooling		    = 2;    // 冷却中
	R_ResultCrossChallenge_HavePrize		= 3;    // 已经领取过
	R_ResultCrossChallenge_NeedFightCount   = 4;    // 挑战次数不足
	R_ResultCrossChallenge_InFighting	    = 5;    // 该玩家正在进行一场战斗，请稍后再试
	R_ResultCrossChallenge_NeedItem		    = 6;    // 道具不足
	R_ResultCrossChallenge_StateError	    = 7;    // 状态不对
    R_ResultCrossChallenge_OpenTime	        = 8;    // 没到开放时间
	R_ResultCrossChallenge_PlayerNotExist	= 9;    // 玩家不存在
	R_ResultCrossChallenge_SystemOpen		= 10;   // 系统未开放
	R_ResultCrossChallenge_Liked			= 11;   // 已经对该玩家点过赞了
	R_ResultCrossChallenge_TeamATKIsNull	= 12;   // 进攻队伍必须都有精灵上阵
};

//----客户端到服务器
enum _emC2S_CrossChallenge_Protocol
{
	C2S_CrossChallenge_Refresh			= 1;   //刷新对手
	C2S_CrossChallenge_DailyPrize		= 2;   //领取每日宝箱 (index)	    					PBU32
	C2S_CrossChallenge_Open				= 3;   //打开跨服竞技场
	C2S_CrossChallenge_Query			= 4;   //查询玩家信息
	C2S_CrossChallenge_HonourLike		= 5;   //赛季荣耀点赞 (玩家id)		        		PBU32
	C2S_CrossChallenge_Record		    = 6;   //请求挑战记录
    C2S_CrossChallenge_BuyPrize         = 7;   //购买奖品,第一个免费，后边两个要买(index)         PBU32 
	C2S_CrossChallenge_SetTeamDEF       = 8;   //设置防守队伍(每个队伍会发送S2C_Pet_Set_Zhenfa_Ack返回)      PBCrossChallengeSetTeam
	C2S_CrossChallenge_SetTeamATK   	= 9;   //设置进攻队伍(每个队伍会发送S2C_Pet_Set_Zhenfa_Ack返回)      PBCrossChallengeSetTeam 
	
};

//----服务器到客户端
enum _emS2C_CrossChallenge_Protocol
{
	S2C_CrossChallenge_Common_Ack		= 0;    //失败才返回
	S2C_CrossChallenge_Refresh		    = 1;    //对手信息返回		                        PBCrossChallengeRefresh
	S2C_CrossChallenge_DailyPrize		= 2;    //领取每日宝箱返回	                        PBCrossChallengeDailyInfo
	S2C_CrossChallenge_Open				= 3;	//打开跨服竞技场返回						PBCrossChallengeOpenInfo
	S2C_CrossChallenge_Query			= 4;    //查询玩家信息返回	                    	PBCrossChallengeInfo
	S2C_CrossChallenge_Count	        = 5;    //同步次数		                            PBU32
	S2C_CrossChallenge_HonourLike 		= 6;    //点赞返回(key : 玩家id, value : 点赞数)    PBU32U32 
	S2C_CrossChallenge_Record		    = 7;    //挑战记录返回		                        PBCrossChallengerResults
	S2C_CrossChallenge_BuyPrize			= 8;	//购买奖品返回 								PBU32
	S2C_CrossChallenge_SetTeamDEF		= 9;	//设置防御队伍返回							PBCrossChallengeSetTeamAck
	S2C_CrossChallenge_Prize			= 10;	//战斗奖品									PBCrossChallengeFightPrize
	S2C_CrossChallenge_SetTeamATK		= 11;	//设置进攻队伍返回							PBCrossChallengeSetTeamAck
};

// 打开跨服竞技场玩家信息
message PBCrossChallengeOpenInfo
{
	optional uint32								order 		= 1;	// 名次
	optional uint32								score 		= 2;	// 积分
	optional uint32								scoretime 	= 3;	// 获得积分的时间
	optional uint32								openflag	= 4;    // 0：不开放挑战  1:开放挑战
	optional uint32								overtime    = 5;	// 对应倒计时时间
	optional PBCrossChallengeInfo				self 		= 6; 	// 自己信息
	repeated PBCrossChallengeInfo     			targets 	= 7; 	// 对手信息
	repeated uint32     						dailyinfo 	= 8; 	// 索引
	repeated uint32     						likeplayer 	= 9; 	// 今天点了赞的玩家，每日清理
	repeated PBCrossChallengeHonourInfo			horourinfo	= 10;	// 赛季荣耀
	optional uint32								historyrank	= 11;	// 历史最高排名
	optional uint32								seasonindex	= 12;	// 赛季
}


// 跨服竞技场刷新对手信息
message PBCrossChallengeRefresh
{
    repeated PBCrossChallengeInfo     	targets = 1; // 对手信息
}

// 宝箱领取信息
message PBCrossChallengeDailyInfo
{
    repeated uint32     	dailyinfo = 1; // 索引
}

//玩家点赞信息
message PBCrossChallengeLikeInfo
{
    repeated uint32     	likeinfo = 1; // palyerid
}

// 战斗奖励
message PBCrossChallengeFightPrize
{
	repeated uint32 index = 1; //奖品index
}

// 跨服竞技场向BW同步玩家信息
message PBCrossChallengerSyncInfo
{
	optional PBPlayerDisplay					display 	= 1;	// 玩家显示
	optional PBPlayerCrossChallengeTeamInfo		team 		= 2;	// 队伍
	optional uint32								power		= 3;	// 战斗力
	optional string								faction		= 4;	// 工会名
}

// 跨服竞技场一场战斗记录，三次战斗
message PBCrossChallengerBattleResult
{
	repeated PBFightResult 	fightresults 	= 1; // 战斗记录3个
}

// 跨服竞技场战斗记录
message PBCrossChallengerResults
{
	repeated PBCrossChallengerBattleResult results = 1; // 战斗记录
}

// 数据库中保存的竞技场玩家信息
message PBCrossChallengeDBData
{
	optional PBCrossChallengeInfo 		info 	= 1; // 玩家信息
	optional PBCrossChallengerResults 	record 	= 2; // 战斗记录
}

// 加载数据库中的竞技场玩家信息
message PBCrossChallengeDBDataSave
{
	optional uint32					group 	= 1; // group id
	optional PBCrossChallengeDBData	data 	= 2; // 玩家数据
}

// 加载数据库中的竞技场玩家信息
message PBCrossChallengeDBDataLoad
{
	optional uint32					group 	= 1; // group id
	repeated PBCrossChallengeDBData	data 	= 2; // 玩家数据
}

// 跨服竞技场设置队伍
message  PBCrossChallengeSetTeam
{
	repeated PBPlayerZhenfaInfo		team			= 1;    // 队伍 3个
    repeated bool                   hideteam       	= 2;    // 是否隐藏队伍 3个
}

// 跨服竞技场设队伍返回
message PBCrossChallengeSetTeamAck
{
	repeated PBPlayerZhenfaInfo		team			= 1;    // 队伍 3个
    repeated bool                   hideteam       	= 2;    // 是否隐藏队伍 3个
	repeated bool					ok				= 3;	// 第n队设置是否成功
}

// 跨服竞技场赛季荣耀
message PBCrossChallengeHonourInfo
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	//用户标记
	optional uint32					like 			= 2;	//点赞数
}



//-------------------------------------------------------------
//------------------------------ 超凡段位相关
enum _emResultDan_25
{
	R_ResultDan_Succeed				= 0; // 成功
	R_ResultDan_Fail				= 1; // 失败
	R_ResultDan_NeedItem			= 2; //扣除的道具不足
	R_ResultDan_LoadComplete		= 3; //加载完成
	R_ResultDan_NeedOpenTime		= 4; //不在开启时间内
	R_ResultDan_NeedEnterCount		= 5; //进入次数不足
	R_ResultDan_MaxBuyCount			= 6; //达到最大购买次数
	R_ResultDan_NeedVipLevel		= 7; //需要VIP等级
	R_ResultDan_FightNoMatch		= 8; //匹配不到对手
	R_ResultDan_NeedDanID			= 9; //暂时未达到此段位
	R_ResultDan_NeedPrizePrDan		= 10; //先领取上一个段位奖励
	R_ResultDan_InKingMatch			= 11; //在王者赛中，不能进行常规赛
};
//----超凡段位模块
enum _emC2S_Dan_Protocol
{
	C2S_Dan_OpenAsk					= 1 ; 	// 打开界面
	C2S_Dan_AwardAsk				= 2 ; 	// 领取奖励		PBU32
	C2S_Dan_BuyCountAsk				= 3 ; 	// 购买次数返回 PBU32
	C2S_Dan_TotalResultAsk			= 4 ; 	// 总战绩查询
	C2S_Dan_SeasonResultAsk			= 5 ; 	// 赛季战绩查询	PBU32
	C2S_Dan_SeasonAllAreaAsk		= 6 ; 	// 赛季所有赛区查询	PBC2GDanSeasonAllAreaAsk
	C2S_Dan_SeasonAreaInfoAsk		= 7 ; 	// 赛区信息查询	PBC2GDanSeasonAreaInfoAsk
	C2S_Dan_Search					= 8 ; 	// 搜索对手
	C2S_Dan_Record					= 9 ;	// 查询我的记录
	C2S_Dan_MasterRecord			= 10;	// 查询大神记录
	
	//以下服务器用
	G2BW_Dan_SynMember				= 50 ; 	// 赛区查询	PBU32U32
	G2BW_Dan_FightBegin				= 51;	// 挑战请求				PBFightBase
	G2BW_Dan_FightResult			= 52;	// 挑战完成				PBG2BWDanFightResultAck
	G2BW_Dan_AddRecord				= 53;	// 添加记录
}
//----超凡段位模块
enum _emS2C_Dan_Protocol
{
	S2C_Dan_Common					= 0 ;	// 通用错误返回
	S2C_Dan_SynInfo					= 1 ;	// 同步主界面数据 	PBG2CDan_SynInfo	
	S2C_Dan_AwardAck				= 2 ;	// 领取奖励返回 	PBU32
	S2C_Dan_BuyCountAck				= 3 ; 	// 购买次数返回		PBU32
	S2C_Dan_TotalResultAck			= 4 ; 	// 总战绩查询返回	PBPlayerDanResult
	S2C_Dan_SeasonResultAck			= 5 ; 	// 赛季战绩返回		PBPlayerDanResult
	S2C_Dan_SeasonAllAreaAck		= 6 ; 	// 赛季所有赛区查询	PBG2CDanSeasonAllAreaAck
	S2C_Dan_SeasonAreaInfoAck		= 7 ; 	// 赛区信息查询		PBDanKingRecord
	S2C_Dan_FightResultAck			= 8;	// 挑战结果返回		PBG2CDanFightResultAck	
	S2C_Dan_Search					= 9;	// 搜索对手返回		PBG2CDanSearch
	S2C_Dan_Record					= 10;	// 查询我的记录返回 PBG2CDanRecords
	S2C_Dan_MasterRecord			= 11;	// 查询大神记录返回 PBG2CDanRecords

	//以下服务器用 客户端不用
	S2C_Dan_FightBeginAck			= 50;	//挑战请求返回		PBFightBase	
}
// 同步主界面
message PBG2CDan_SynInfo
{
	optional uint32	 					curseasonid		= 1;	// 赛季ID
	optional uint32	 					curdanid		= 2;	// 当前段位ID
	optional uint32						score			= 3;	// 当前积分
	optional uint32						maxscore		= 4;	// 最大积分
	optional int32	 					exp				= 5;	// 当前经验
	optional int32						cacheexp 		= 6;	// 缓冲经验
	optional uint32	 					fightcount		= 7;	// 挑战次数
	optional uint32	 					buycount		= 8;	// 购买次数
	optional uint32	 					prizedanid		= 9;	// 领奖的段位ID
	optional uint32	 					maxdanid		= 10;	// 最大的段位ID
	repeated uint32	 					protmoteresult	= 11;	// 晋级赛结果
	optional uint32	 					bwstarttime		= 12;	// 跨服开始时间
	optional uint32	 					areaid			= 13;	// 自己赛区
	optional uint32	 					rank			= 14;	// 排名
	optional uint32	 					playerid		= 15;	// 玩家ID
	optional uint32	 					worldid			= 16;	// 世界ID
	optional bool						inkingmatch 	= 17;	// 参加了王者赛
}
// 挑战结果通知跨服
message PBG2BWDanFightResultAck
{
	optional uint32	 					playerid		= 1;	// 玩家ID
	optional uint32	 					worldid			= 2;	// 世界ID
	optional uint32	 					score			= 3;	// 当前积分
	optional uint32	 					danid			= 4;	// 当前段位
}
// 挑战结果
message PBG2CDanFightResultAck
{
	optional uint64	 					battlesn		= 1;	// 战斗流水号
	optional uint32	 					score			= 2;	// 当前积分
	optional uint32	 					danid			= 3;	// 当前段位
	optional int32						exp				= 4;	// 当前经验
	optional int32						cacheexp		= 5;	// 当前缓冲经验
	optional int32	 					addscore		= 6;	// 增加经验/积分(负数减)
	repeated PBItemInfo					prize			= 7;	// 奖励
	repeated uint32	 					promoteresult	= 8;	// 晋级赛结果
}
// 赛季所有赛区查询
message PBC2GDanSeasonAllAreaAsk
{
	optional uint32	 					seasonid		= 1;	// 赛季ID
	optional uint32	 					playerid		= 2;	// 玩家ID
	optional uint32	 					worldid			= 3;	// 世界ID
}
// 赛季所有赛区返回
message PBG2CDanSeasonAllAreaAck
{
	optional uint32	 					seasonid		= 1;	// 赛季ID
	repeated uint32	 					areaid			= 2;	// 区域ID
}
// 赛区信息查询
message PBC2GDanSeasonAreaInfoAsk
{
	optional uint32	 					seasonid		= 1;	// 赛季ID
	optional uint32	 					areaid			= 2;	// 区域ID
	optional uint32	 					playerid		= 3;	// 玩家ID
	optional uint32	 					worldid			= 4;	// 世界ID
}
// 刷新的数据
message PBG2CDanRefresh
{
	optional uint32	 					dayfreecount		= 1;	// 免费次数
}
// 王者赛排名信息
message PBDanKingTopPlayer
{
	optional PBPlayerDisplay 	playerdisplay	= 1;// 用户标记
	optional uint32				fightpower		= 2;// 战斗力
	optional uint32				rank			= 3;// 排名

}
// 王者赛记录
message PBDanKingRecord
{
	optional uint32				seasonid		= 1;			// 赛季ID
	optional uint32				areaid			= 2;			// 分区ID
	repeated PBDanKingTopPlayer	topplayer		= 3;			// 排名信息
}
// 超凡段位赛战斗数据
message PBDanBattleMember
{
	optional uint32 				score			= 1;	//积分
	optional uint32 				danid			= 2;	//段位ID
	optional uint32 				rank			= 3;	//名次
	optional bool					inkingMatch		= 4;	//在进行王者赛(参加过王者赛的玩家无法参加常规赛)				
	optional PBPlayerDisplay 		playerdisplay	= 5;	//用户标记
	optional PBBattlePet			battlepet		= 6;	//战斗阵容
	optional PBBattlePet			battlepet2		= 7;	//第二战斗阵容
}
// 超凡段位赛战斗多个数据
message PBDanBattleMemberMore
{
	optional uint32					areaid			= 1;	// 分区ID
	repeated PBDanBattleMember		member			= 2;	// 成员信息
}
// 王者赛多个记录
message PBDanKingRecordMore
{
	repeated PBDanKingRecord		record			= 1;	// 记录
}
// 搜索对手返回
message PBG2CDanSearch
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	//用户display
	optional PBBattlePet			battlepet		= 2;	//战斗阵容
	optional PBBattlePet			battlepet2		= 3;	//第二战斗阵容
	optional uint32					danid			= 4;	//段位id
	optional uint32					rank			= 5;	//排行榜名次
}

// 增加个人记录
message PBDanAddRecord
{
	optional bool				new 			= 1; // 新的战斗
	optional uint64 			battlesn 		= 2; // 战斗sn
	optional PBPlayerDisplay 	left 			= 3; // 左边display
	optional PBPlayerDisplay 	right 			= 4; // 右边display
	optional uint32 			leftrank 		= 5; // 左边排名
	optional uint32 			rightrank 		= 6; // 右边排名
	optional uint32 			leftdan 		= 7; // 左边段位
	optional uint32 			rightdan 		= 8; // 右边段位
	optional uint32				winner			= 9; // 胜利方0左边1右边
	optional uint32				type			= 10;// BattleType_Dan/BattleType_DanKing
	optional uint32				time 			= 11;// 时间
}

// 查询记录返回
message PBG2CDanRecords
{
	repeated PBPlayerDanRecord records = 1;//记录
}

// 查询大师录像
message PBG2BWQueryMasterVideo
{
	optional uint32 worldid 	= 1; //world id
	optional uint32 playerid 	= 2; //player id
	optional uint64 sn 			= 3; //sn
}

// 大师记录数据
message PBDanMasterRecordData
{
	optional uint32 			areaid 	= 1;//area id
	repeated PBPlayerDanRecord 	records = 2;//记录
}

// 大师录像
message PBDanMasterVideoData
{
	optional uint32 			areaid 	= 1;//area id
	repeated PBFightResult 		videos 	= 2;//录像
}


//-------------------------------------------------------------
//------------------------------ 守护
//----守护的返回
enum _emResultDefend_50
{
	R_Defend_Succeed			= 0; // 成功
	R_Defend_Fail				= 1; // 失败
    R_Defend_MaxLevel           = 2; // 已经达到当前阶等级上限
    R_Defend_MaxRank            = 3; // 已满阶
    R_Defend_NeedItem           = 4; // 道具不足
    R_Defend_RankContidion      = 5; // 未达到升阶条件
    R_Defend_PlanLock           = 6; // 方案未解锁
    R_Defend_SlotLock           = 7; // 槽位未解锁
    R_Defend_PetFight           = 8; // 英雄已在出战
    R_Defend_NoPet              = 9; // 当前方案没有英雄
};

//----守护请求
enum _emC2S_Defend_Protocol
{
	C2S_Defend_LevelUp	        = 1; 	// 升级
    C2S_Defend_RankUp	        = 2; 	// 升阶
    C2S_Defend_SavePlan	        = 3; 	// 保存方案         PBDefendPlan
    C2S_Defend_UsePlan	        = 4; 	// 使用方案         PBC2GDefendUsePlan
    C2S_Defend_UnlockPlan	    = 5; 	// 解锁方案         PBC2GDefendUnlockPlan
    C2S_Defend_PreviewAttr      = 6; 	// 属性预览         PBC2GDefendPreviewAttr
    C2S_Defend_RemovePet        = 7; 	// 移除某个宠物     PBC2GDefendRemovePet
}

//使用方案
message PBC2GDefendUsePlan
{
	optional uint32		index			= 1;	//方案索引
}

//解锁方案
message PBC2GDefendUnlockPlan
{
	optional uint32		index			= 1;	//方案索引
}

//解锁方案
message PBC2GDefendPreviewAttr
{
	optional bool		blevel			= 1;	//是否为等级
}

//移除某个宠物
message PBC2GDefendRemovePet
{
	optional uint64		snid			= 1;	//宠物id
}

//----守护返回
enum _emS2C_Defend_Protocol
{
	S2C_Defend_LevelUp_Ask	    = 1; 	// 升级返回 PBG2CDefendLevelUpAsk
    S2C_Defend_RankUp_Ask	    = 2; 	// 升阶返回 PBG2CDefendLevelUpAsk
    S2C_Defend_SavePlan_Ask	    = 3; 	// 保存方案返回 PBDefendPlan
    S2C_Defend_UsePlan_Ask	    = 4; 	// 使用方案返回 PBG2CDefendUsePlanAsk
    S2C_Defend_UnlockPlan_Ask	= 5; 	// 解锁方案返回 PBG2CDefendUnlockPlanAsk
    S2C_Defend_Attr	            = 6; 	// 属性下发 PBG2CDefendAttr
    S2C_Defend_Open	            = 7; 	// 功能开启下发 PBPlayerDefend
    S2C_Defend_PreviewAttr	    = 8; 	// 属性预览 PBG2CDefendAttr
    S2C_Defend_PlansChg	        = 9; 	// 移除某个宠物方案返回 PBG2CDefendPlansChg
}

//升级返回
message PBG2CDefendLevelUpAsk
{
	optional uint32		level			= 1;	//等级
}

//升阶返回
message PBG2CDefendRankUpAsk
{
	optional uint32		rank			= 1;	//阶级
}

//使用方案返回
message PBG2CDefendUsePlanAsk
{
	optional uint32		index			= 1;	//方案索引
}

//使解锁方案返回
message PBG2CDefendUnlockPlanAsk
{
	optional uint32		index			= 1;	//方案索引
}

// 属性下发
message PBG2CDefendAttr
{
	optional uint32 	power 			= 1;	//战斗力
	repeated PBAttrInfo attr		    = 2;	//所有属性
}

//移除某个宠物方案返回
message PBG2CDefendPlansChg
{
	repeated PBDefendPlan	plans		= 1;	//方案改变
}

//-------------------------------------------------------------
//------------------------------ 龙珠
enum _emResultDragonBall_43
{
	R_ResultDragonBall_Succeed			= 0; // 成功
	R_ResultDragonBall_Fail				= 1; // 失败
    R_ResultDragonBall_Lock				= 2; // 未解锁
    R_ResultDragonBall_UnLock			= 3; // 已解锁
    R_ResultDragonBall_NeedItem			= 4; // 道具不足
    R_ResultDragonBall_MaxLevel			= 5; // 已经达到最大等级
};

//--- 客户端到服务器
enum _emC2S_DragonBall_Protocol
{
	C2S_DragonBall_UnLock			= 0	;//解锁 PBU32
	C2S_DragonBall_Levelup			= 1	;//升级	PBU32
}
//----服务器到客户端
enum _emS2C_DragonBall_Protocol
{
	S2C_DragonBall_UnLock			= 0	;//解锁返回 	PBU32
	S2C_DragonBall_Levelup			= 1	;//升级(type, level) PBU32U32
};


//------------------------------ 元素系统返回
enum _emResultElement_23
{
	R_ResultElement_Succeed							= 0; //成功
	R_ResultElement_Fail							= 1; //失败
	R_ResultElement_NeedDiamond						= 2; //钻石不足	
	R_ResultElement_NeedStage						= 3; //请先通关此关卡
	R_ResultElement_NeedCount						= 4; //次数不足
	R_ResultElement_MaxBuyCount						= 5; //最大购买次数
	R_ResultElement_NeedOpenTime					= 6; //活动未开启
	R_ResultElement_NeedPlayerLevel					= 7; //玩家等级不足
	R_ResultElement_NeedFightPower					= 8; //玩家战力不足
	R_ResultElement_HaveFightStage					= 9; //已经通关此关卡
	R_ResultElement_NeedPetType						= 10; //伙伴类型不满足
}
//----元素模块
enum _emC2S_Element_Protocol
{
	C2S_Element_Sweep			= 1	;//扫荡			PBU32
	C2S_Element_BuyCount		= 2	;//购买次数
}
//----元素模块
enum _emS2C_Element_Protocol
{
	S2C_Element_CommonAck		= 1	;//通用返回(失败才返回)
	S2C_Element_UpdateCount		= 2	;//更新次数				PBG2CElementUpdateCount
	S2C_Element_UpdateStage		= 3	;//更新关卡				PBPlayerElementInfo
}
// 更新次数
message PBG2CElementUpdateCount
{
	optional uint32	 					dayfightcount		= 1;	// 今日挑战次数
	optional uint32	 					daybuycount			= 2;	// 今日购买次数
}

//------------------------------ 远征系统返回
enum _emResultExpedition_19
{
	R_ResultExpedition_Succeed							= 0; //成功
	R_ResultExpedition_Fail								= 1; //失败
	R_ResultExpedition_HavePrize						= 2; //奖励已经领取
	R_ResultExpedition_NeedStageID						= 3; //未通关此关卡
	R_ResultExpedition_NeedItem							= 4; //道具不足	
	R_ResultExpedition_HaveSelect						= 5; //今日已经选择模式
	R_ResultExpedition_NeedFightPower					= 6; //战力不足
	R_ResultExpedition_StageHaveFight					= 7; //关卡已经挑战
	R_ResultExpedition_NeedPreStage						= 8; //请先通关前置关卡
	R_ResultExpedition_PetHaveDead						= 9; //伙伴已经死亡
	R_ResultExpedition_NeedMaxType						= 10; //请通关上一个难度
	R_ResultExpedition_SupportCount						= 11; //超过可雇佣支援数量
	R_ResultExpedition_AlreadySupport					= 12; //已经雇佣过了
	R_ResultExpedition_NotSupport						= 13; //还未雇佣不可上场
	R_ResultExpedition_UsedSupport						= 14; //已经使用过了
	R_ResultExpedition_SupportLevel						= 15; //雇佣支援英雄等级不在范围内
	R_ResultExpedition_SupportNotExist					= 16; //支援不存在
}
//----远征模块
enum _emC2S_Expedition_Protocol
{
	C2S_Expedition_Select			= 1	;//选择难度			PBU32
	C2S_Expedition_StagePrize		= 2	;//领取奖励			PBU32
	C2S_Expedition_QueryStageInfo	= 3	;//查询关卡信息		PBU32
	C2S_Expedition_QueryPetHp		= 4	;//查询伙伴血量	
	C2S_Expedition_XXXXXXXXXX		= 5	;//废弃
}
//----远征模块
enum _emS2C_Expedition_Protocol
{
	S2C_Expedition_CommonAck		= 1	;//通用返回(失败才返回)
	S2C_Expedition_SelectAck		= 2	;//选择难度返回			PBG2CExpeditionInfo
	S2C_Expedition_StagePrizeAck	= 3	;//领取奖励返回 		PBU32
	S2C_Expedition_StageInfoAck		= 4	;//查询关卡信息返回 	PBExpeditionTar
	S2C_Expedition_SynPetHp			= 5	;//同步伙伴血量 		PBG2CExpeditionSynPetHp		
	S2C_Expedition_SynCurStage		= 6	;//同步最新关卡 		PBG2CExpeditionSynCurStage		
	S2C_Expedition_XXXXXXXXX		= 7 ;//废弃
	S2C_Expedition_XXXXXX			= 8 ;//废弃
}
// 登录返回玩家角色列表
message PBG2CExpeditionSynCurStage
{
	optional uint32			maxtype				= 1;	//通关最大的类型
	optional uint32			curstage			= 2;	//正在打的关卡ID 0表示通关
}
// 登录返回玩家角色列表
message PBG2CExpeditionSynPetHp
{
	repeated PBExpeditionPetHp 		usepethp	= 1;	// 使用的伙伴数据
}
// 登录返回玩家角色列表
message PBG2CExpeditionInfo
{
	optional uint32			stagetype			= 1;	//远征类型
	optional uint32			curstage			= 2;	//正在打的关卡ID 0表示通关
}	
// 登录返回玩家角色列表
message PBG2WExpeditionToplist
{
	optional uint32			index			= 1;	// 关卡索引
	optional uint32			minfightpower	= 2;	// 最低战力
	optional uint32			maxfightpower	= 3;	// 最高战力
}	

// 登录返回玩家角色列表
message PBW2GExpeditionToplist
{
	optional PBPlayerDisplay	display				= 1;	// 显示
	optional PBBattlePet		battlepet			= 2;	// 伙伴数据
	optional uint32				fightpower			= 3;	// 战力
	optional uint32				index				= 4;	// 关卡索引
	optional uint32				minfightpower		= 5;	// 最低战力
	optional uint32				maxfightpower		= 6;	// 最高战力
}

//-----------------------------------------------------------------------------------------------------

//------------------------------ 帮派系统返回
enum _emResultFaction_10
{
	R_ResultFaction_Succeed				= 0; //成功
	R_ResultFaction_Fail				= 1; //失败
	R_ResultFaction_HaveFaction			= 2; //已经有帮派
	R_ResultFaction_Creating			= 3; //创建中
	R_ResultFaction_NeedDiamond			= 4; //钻石不足
	R_ResultFaction_NameDup				= 5; //帮派重名
	R_ResultFaction_DBError				= 6; //数据库错误
	R_ResultFaction_NoFaction			= 7;// 无帮会
	R_ResultFaction_Permission			= 8;//权限不足
	R_ResultFaction_InApply				= 9;//已经在申请列表中
	R_ResultFaction_ApplyNeedLevel		= 10;//入帮等级不足
	R_ResultFaction_NotInApply			= 11;//不在申请列表中
	R_ResultFaction_Full				= 12;//帮派人数已满
	R_ResultFaction_JobFull				= 13;//目标职位无空缺
	R_ResultFaction_HaveDonate			= 14;//今日已经捐献
	R_ResultFaction_NeedMoney			= 15; //金钱不足	
	R_ResultFaction_NameLength			= 16; //帮派名长度错误
	R_ResultFaction_DeclarationLength	= 17; //宣言文字长度错误
	R_ResultFaction_BadWord				= 18; //敏感词	
	R_ResultFaction_IllegalCharacter	= 19;//包含非法字符
	R_ResultFaction_NameIllegalChar		= 20;// 帮派名字包含非法字符 
	R_ResultFaction_NameBadWord			= 21;// 帮派名字敏感词
	R_ResultFaction_YouInOther			= 22;//你已经有帮派
	R_ResultFaction_NeedItem			= 23;// 道具不足
	R_ResultFaction_NeedLivenessExp		= 24;// 活跃升级经验不足
	R_ResultFaction_LivenessMaxLevel	= 25;// 活跃等级达到最大等级
	R_ResultFaction_SkillMaxLevel		= 26;// 技能达到最大等级
	R_ResultFaction_NeedAllJobLevel		= 27;// 其它职业技能等级不足
	R_ResultFaction_SkillNoLevel		= 28;// 其它职业技能为0
	R_ResultFaction_HaveDonatePrize		= 29;// 已经领取此贡献奖励
	R_ResultFaction_CopymapSkillMaxLevel= 30;// 副本技能加成最大等级
	R_ResultFaction_CopymapMaxBuyCount	= 31;// 副本最大购买次数
	R_ResultFaction_CopymapNeedEnterCount= 32;// 副本进入次数不足
	R_ResultFaction_CopymapBossHaveKill	= 33;// 副本boss已经被击杀
	R_ResultFaction_CopymapNoSweep		= 34;// 副本今日未打，不能扫荡
	
	R_ResultFaction_WarNoMatch			= 35;// 公会战未开始
	R_ResultFaction_WarNeedFightCount	= 36;// 挑战次数不足
	R_ResultFaction_WarRunieMaxFightCount	= 37;// 废墟达到最大挑战次数
	R_ResultFaction_WarBeAttack			= 38;// 正在被攻打
	R_ResultFaction_WarStarHaveAttack	= 39;// 此难度已经被攻打
	R_ResultFaction_WarNoJoin			= 40;// 你未参加公会战，无法查看
	R_ResultFaction_WarBoxHaveOpen		= 41;// 此宝箱已经打开
	R_ResultFaction_WarNeedPrizeState	= 42;// 奖励时间已过
	R_ResultFaction_WarHaveOpenBox		= 43;// 你已经开过宝箱
	R_ResultFaction_WarNoOpen			= 44;// 公会战未开启
	R_ResultFaction_NeedDonateLivess	= 45;// 捐献活跃值不足
	R_ResultFaction_RenmaeCoolTime		= 46;// 重命名冷却中
	R_ResultFaction_RecruitDayMaxCount	= 47;// 每日招募次数已满
	R_ResultFaction_RecruitCoolTime		= 48;// 招募冷却中
	R_ResultFaction_JoinCoolTime		= 49;// 距离上一次退出公会不满12小时，期间无法加入公会
	R_ResultFaction_WarNoEnd			= 50;// 公会战未结束
	R_Result_faction_MatchFail			= 51;//未匹配成功（未满足参与条件或您的公会本轮轮空）
	R_Result_faction_LevelFail			= 52;//公会等级不足
	R_Result_faction_PeopleFail			= 53;//活跃人数不足
	R_Result_faction_FindFail			= 54;//公会轮空
	R_Result_faction_TimeFail			= 55;//加入公会时间过晚，错过了匹配时间
	
	R_Result_faction_PVPSkillFindFail	= 56;//公会技能未找到
	R_Result_faction_NeedOtherJobLevel	= 57;//本天赋属性技能等级不足
}


//----帮派系统
enum _emC2S_Faction_Protocol
{
	C2S_Faction_Create						= 0;	// 创建帮会 				PBC2GFactionCreate	
	C2S_Faction_Quit						= 1;	// 退出
	C2S_Faction_Edit						= 2;	// 修改帮派公告				PBC2GFactionEdit
	C2S_Faction_Apply						= 3;	// 申请加入帮会 			PBC2GFactionApply
	C2S_Faction_Open						= 4;	// 打开帮会					
	C2S_Faction_List						= 5;	// 请求帮会列表
	C2S_Faction_MemberList					= 6;	// 请求帮会成员列表
	C2S_Faction_AgreeApply					= 7;	// 批准/拒绝加入申请		PBC2GFactionAgreeApply					
	C2S_Faction_ChangeJob					= 9;	// 改变官职					PBC2GFactionChangeJob							
	C2S_Faction_Kick						= 11;	// 踢出帮派					PBU32					
	C2S_Faction_Rename						= 12;	// 帮会改名					PBString	
	C2S_Faction_Donate						= 13;	// 帮会捐献					PBU32
	C2S_Faction_QueryApplyList				= 14;	// 查看申请列表
	C2S_Faction_DonatePrize					= 15;	// 领取捐献奖励				PBU32
	C2S_Faction_UpgradeLiveness				= 16;	// 活跃度升级
	C2S_Faction_UpgradeSkill				= 17;	// 技能升级					PBCAGFactionSkillUpgrade	
	C2S_Faction_SkillReset					= 18;	// 技能重置					PBU32
	C2S_Faction_CopymapBuyCount				= 19;	// 购买副本次数
	C2S_Faction_CopymapSweep				= 20;	// 购买扫荡					PBU32
	C2S_Faction_CopymapOpen					= 21;	// 打开副本系统
	C2S_Faction_CopymapTop					= 22;	// 副本排行					PBU32
	C2S_Faction_CopymapNotice				= 23;	// 副本集结
	C2S_Faction_CopymapBuySkill				= 24;	// 副本否买加成buff
	C2S_Faction_SetCondition				= 25;	// 修改入会条件				PBCAGFactionSetCondition	
	C2S_Faction_Recruit						= 26;	// 公会招募
	C2S_Faction_Impeach						= 27;	//公会弹劾					PBC2GFactionImpeach
	
	//公会技能拓展
	C2S_Faction_UpgradePVPSkill				= 28;	// PVP技能升级				PBU32
	C2S_Faction_PVPSkillReset				= 29;	// PVP技能重置				PBU32
	
	//以下公会战用
	C2S_FactionWar_QueryAllList				= 50;	// 查询所有对阵列表		
	C2S_FactionWar_QueryMemberList			= 51;	// 查询成员列表				PBC2GFactionWarMemberList
	C2S_FactionWar_QueryMemberInfo			= 52;	// 查询成员信息				PBC2GFactionWarMemberInfo
	C2S_FactionWar_QueryWarLog				= 53;	// 查询战场日志
	C2S_FactionWar_QuerySelfLog				= 54;	// 查询我的日志		
	C2S_FactionWar_QueryTarRecord			= 55;	// 查询目标防守记录			PBC2GFactionWarQueryTarRecord		
	C2S_FactionWar_QueryAttackList			= 56;	// 查询进攻列表	
	C2S_FactionWar_QueryBoxInfo				= 57;	// 查询宝箱	
	C2S_FactionWar_OpenBox					= 58;	// 开启宝箱					PBC2GFactionWarOpenBox			
	C2S_FactionWar_OpenWar					= 59;	// 打开公会战

	C2S_Faction_Log 						= 60;	// 帮会日志

	//以下客户端不用
	C2S_Faction_AddContriExp				= 100;	// 同步贡献跟经验			PBC2GFactionAddContriExp
	C2S_Faction_FightBegin					= 101;	// 副本进入请求				PBFightBase
	C2S_Faction_FightResult					= 102;	// 副本完成请求				PBC2GFactionAddContriExp
	C2S_Faction_LivenessLevel				= 103;	// 同步活跃等级				PBU32
	C2S_Faction_FightWarResult				= 104;	// 公会战结果
}

//----帮派系统
enum _emS2C_Faction_Protocol
{
	S2C_Faction_Common						= 0;	// 通用返回				失败才返回
	S2C_Faction_Create						= 1;	// 创建帮会				PBC2GFactionCreate
	S2C_Faction_Syn							= 2;	// 帮会基本数据			PBG2CFactionSyn
	S2C_Faction_Quit						= 3;	// 退出帮会
	S2C_Faction_SelfApplyList				= 4;	// 请求自己申请帮会列表	PBG2CFactionApplyList	
	S2C_Faction_SelfAllApply				= 5;	// 所有自己申请的帮派	PBG2CFactionAllApply	
	S2C_Faction_TopList						= 6;	// 请求帮会列表			PBG2CFactionList	
	S2C_Faction_MemberList					= 7;	// 请求帮会成员列表		PBG2CFactionMemberList
	S2C_Faction_Remove						= 8;	// 帮会删除				PBU32
	S2C_Faction_Edit						= 9;	// 修改帮派公告			PBC2GFactionEdit
	S2C_Faction_DelApply					= 10;	// 删除一个申请			PBU32	
	S2C_Faction_ChangeJob					= 11;	// 改变官职				失败才返回	
	S2C_Faction_Apply						= 12;	// 申请返回				失败才返回	
	S2C_Faction_Donate						= 13;	// 帮会捐献返回			PBU32
	S2C_Faction_QueryApplyList				= 14;	// 查看申请帮会列表		PBG2CFactionQueryApplyList	
	S2C_Faction_SetCondition				= 15;	// 修改入会条件			PBCAGFactionSetCondition	
	S2C_Faction_JoinAck						= 16;	// 通知玩家加入帮会		无内容	
	S2C_Faction_ExitAck						= 17;	// 通知玩家退出帮会		无内容	
	
	S2C_Faction_DonatePrize					= 18;	// 领取捐献奖励返回		PBU32
	S2C_Faction_SynLiveness					= 19;	// 活跃度同步返回		PBG2CFactionSynLiveness
	S2C_Faction_UpgradeSkill				= 20;	// 技能升级				PBCAGFactionSkillUpgrade
	S2C_Faction_SkillReset					= 21;	// 技能重置				PBG2CFactionSkillReset
	
	S2C_Faction_CopymapSyn					= 22;	//帮派副本同步			PBG2CFactionCopymapSyn
	S2C_Faction_CopymapTop					= 23;	//帮派副本排行同步		PBG2CFactionCopymapTop
	S2C_Faction_CopymapUpdateSkill			= 24;	//帮派副本副本否买加成buff	PBG2CFactionCopymapSkill
	S2C_Faction_SynDonateLiveness			= 25;	//同步捐献活跃度		PBU32
	S2C_Faction_CopymapUpdateCount			= 26;	//帮派副本副本更新次数	PBG2CFactionCopymapUpdateCount
	S2C_Faction_CopymapSweep				= 28;	//副本扫荡返回			
	S2C_Faction_Rename						= 29;	//帮派重命名			PBG2CFactionRenameAck		
	S2C_Faction_Recruit						= 30;	//公会招募				PBG2CFactionRecruitAck
	S2C_Faction_CopymapNotice				= 31;	//副本集结				PBU32
	S2C_Faction_ApplyHotData				= 32;	// 帮派红点	无内容
	S2C_Faction_Impeach						= 33;	//公会弹劾				PBG2CFactionImpeach
	//公会技能拓展
	S2C_Faction_UpgradePVPSkill				= 34;	// PVP技能升级				PBG2CFactionPVPSkillUpgrade
	S2C_Faction_PVPSkillReset				= 35;	// PVP技能重置				PBG2CFactionPVPSkillReset
	
	//公会战用
	S2C_FactionWar_QueryAllListAck			= 50;	//返回所有对阵列表		PBG2CFactionWarListAck
	S2C_FactionWar_QueryMemberListAck		= 51;	//返回查询成员列表		PBG2CFactionWarMemberListAck
	S2C_FactionWar_QueryMemberInfoAck		= 52;	//返回查询成员信息		PBG2CFactionWarMemberInfoAck
	S2C_FactionWar_QueryWarLog				= 53;	//返回查询战场日志		PBG2CFactionWarLogAck
	S2C_FactionWar_QuerySelfLog				= 54;	//返回查询我的日志		PBG2CFactionWarLogAck
	S2C_FactionWar_QueryTarRecordLog		= 55;	//返回查询目标防御记录	PBG2CFactionWarTarRecordAck
	S2C_FactionWar_QueryAttackListAck		= 56;	//返回查询进攻列表		PBG2CFactionWarAttackListAck
	S2C_FactionWar_SynBoxInfo				= 57;	//返回所有宝箱信息		PBG2CFactionWarSynBoxInfo
	S2C_FactionWar_OpenBoxPrizeAck			= 58;	//开启宝箱返回			PBFactionWarBox
	S2C_FactionWar_OpenAck					= 59;	//开启返回				PBG2CFactionWarSynOpen	
	S2C_FactionWar_SynMatch					= 60;	//返回匹配成功			
	S2C_FactionWar_FightResult				= 61;	//公会战挑战结果		PBG2CFactionWarFightResult
	

	S2C_Faction_Log 						= 62;	// 帮会日志 			PBFactionAllEvents

	//以下服务器用 客户端不用
	S2C_Faction_SynGame						= 100;	//同步游戏数据			PBFactionSynGame
	S2C_Faction_FightBeginAck				= 101;	//副本进入返回			PBFightBase
	S2C_Faction_WarFightBeginAck			= 102;	//公会战挑战返回		PBFightBase
	S2C_Faction_WarOpenBoxPrizeAck			= 103;	//宝箱奖励				PBFactionWarBox
};

//公会弹劾
message PBC2GFactionImpeach
{
	
}

//公会弹劾
message PBG2CFactionImpeach
{
	
}

// 公会招募
message PBG2CFactionRecruitAck
{
	optional uint32					nextrecruittime		= 1;	// 下次招募时间
	optional uint32					dayrecruitcount		= 2;	// 日招募次数
}
// 帮派重命名
message PBG2CFactionRenameAck
{
	optional uint32				nextrenametime	= 1;	//下次重命名时间
	optional string				name			= 2;	//名称
}
// 一条帮会成员DB数据
message PBFactionMember
{
	optional PBPlayerDisplay	displayer		= 1;	//角色信息
	optional uint32				job				= 2;	//职位	_emFactionJob
	optional uint32				daycontri		= 3;	//日贡献
	optional uint32				totalcontri		= 4;	//总共贡献
	optional uint32				lastlogouttime	= 5;	//离线时间
	optional uint32				jointime		= 6;	//加入时间
	optional uint32				livenesslevel	= 7;	//活跃等级
	optional uint32				livenessexp		= 8;	//活跃经验
}
// 一个帮派完整数据
message PBFactionData
{
	optional string 				name				= 1;		//帮派名
	optional uint32 				factionid			= 2;		//帮派ID
	optional uint32 				leader				= 3;		//帮主ID
	optional uint32 				worldid				= 4;		//世界ID
	optional uint32					level				= 5;		//帮派等级
	optional uint32					exp					= 6;		//帮派经验
	optional string					declaration			= 7;		//宣言
	optional uint32					createtime			= 8;		//创建时间
	repeated PBFactionMember		members				= 9;		//成员列表
	repeated PBFactionApplyData		applys				= 10;		//入帮申请列表
	optional uint32					joinneedlevel		= 11;		//加入需要的玩家等级
	optional bool					isautoapply			= 12;		//是否自动入帮申请
	optional uint32					donateliveness		= 13;		//每日捐献活跃度
	optional uint64					totalfightpower		= 14;		//总战力
	optional uint32					nextrecruittime		= 15;		// 下次招募时间
	optional uint32					dayrecruitcount		= 16;		// 日招募次数
	optional uint32					nextcopymapnotictime= 17;		// 下次招募时间
}

// 一条申请加入帮派数据
message PBFactionApplyData
{
	optional PBFactionMember		base	= 1;	//角色数据
	optional uint32					stamp	= 2;	//申请时间戳
}

// 帮派副本排行
message PBFactionCopymapTop
{
	optional PBPlayerDisplay	displayer	= 1;		//角色信息
	optional uint32				likecount	= 2;		//点赞次数
	optional uint64				damage		= 3;		//伤害值
	optional int64				lastdamage	= 4;		//上一次的伤害值 -1表示无伤害
}
// 帮派副本信息
message PBFactionCopymapInfo
{
	optional uint32 				id				= 1;//副本ID
	optional uint64 				curhp			= 2;//当前HP
	optional uint64 				maxhp			= 3;//最大HP
	optional uint32 				killplayerid	= 4;//击杀者
	repeated PBFactionCopymapTop	topplayer		= 5;//伤害排名
}
// 帮派副本数据
message PBFactionCopymap
{
	optional uint32					curcopymapid		= 1;//当前正在打的副本id
	repeated PBFactionCopymapInfo 	copymapinfo			= 2;//帮派副本信息
	optional uint32					skilllevel			= 3;//被动技能等级
	optional uint32					skilldeltime		= 4;//被动技能消失时间
}
//同步游戏服数据
message PBFactionSynGame
{		
	optional uint32					donateliveness		= 1;		//每日捐献活跃度
	optional uint32					copymapskilllevel	= 2;		//副本被动技能等级
	optional uint32					curcopymapid		= 3;		//当前副本ID
	optional string					factioname			= 4;		//帮派名称
	optional uint32					dayrecruitcount		= 5;		//每日招募次数
}
//-----------------------------------------------------------------------------------------------------
//							客户端与Game服务器互发的消息
//-----------------------------------------------------------------------------------------------------
// 技能重置返回
message PBG2CFactionSkillReset
{
	optional uint32			jobtype			= 1;		//职业类型
	optional uint32			resetcount		= 2;		//重置次数
}
// 修改入会条件
message PBCAGFactionSetCondition
{
	optional uint32			isauto			= 1;		//是否验证 0不验证
	optional uint32			joinneedlevel	= 2;		//加入需要的玩家等级
}
// 创建帮派	C -> G
message PBC2GFactionCreate
{
	optional uint32			playerid		= 1;		//创建者ID
	optional uint32			worldid			= 2;		//世界ID
	optional string			factionname		= 3;		//帮派名
	optional uint32			creattime		= 4;		//创建时间
	optional uint32			factionid		= 5;		//帮派ID
	optional string			declaration		= 6;		//帮派宣言
	optional uint32			isauto			= 7;		//是否验证 0不验证
	optional uint32			joinneedlevel	= 8;		//加入需要的玩家等级
}
// 编辑帮会信息	C -> G
message PBC2GFactionEdit
{
	optional string		declaration		= 1;		//宣言
}
// 申请加入帮会	C -> G
message PBC2GFactionApply
{
	optional uint32					factionid	= 1;	//帮派ID
	optional bool					isapply		= 2;	//true=申请	false=取消
}

// 帮派同步	C -> G
message PBG2CFactionSyn
{
	optional PBFactionDisplay		display		= 1;	//帮派显示
	optional uint32					jobtype		= 2;	//帮派职位
}
// 请求帮会列表	G -> C
message PBG2CFactionList
{
	repeated PBFactionDisplay	list	= 1;		//帮派列表
	repeated PBPlayerDisplay	leader	= 2;		//前三名帮派会长
}

// 所有已经申请的帮派
message PBG2CFactionAllApply
{
	repeated uint32				factionid	= 1;		//已经申请的帮派ID
}

// 请求申请帮会列表	G -> C
message PBG2CFactionApplyList
{
	repeated	PBFactionDisplay		display			= 1;		//帮派信息展示
	optional	PBG2CFactionAllApply	allapply		= 2;		//已经申请的帮派ID
}
// 请求帮会成员列表	G -> C
message PBG2CFactionMemberList
{
	repeated PBFactionMember	members	= 1;		//成员列表
}
// 同意或拒绝申请
message PBC2GFactionAgreeApply
{
	optional uint32					playerid	= 1;	//帮派ID
	optional bool					isagree		= 2;	//true=同意	false=拒绝
}
// 改变官职
message PBC2GFactionChangeJob
{
	optional uint32					playerid	= 1;	//目标成员
	optional uint32					jobtype		= 2;	//官职类型	_emFactionJob
}
//增加帮派贡献值  经验
message PBC2GFactionAddContriExp
{
	optional int64					addcontri	= 1;	//增加帮派贡献值
	optional uint32					addexp		= 2;	//增加帮派经验
	optional uint32					doingtype	= 3;	//操作类型
}
//查看帮派申请列表
message PBG2CFactionQueryApplyList
{
	repeated PBFactionApplyData		apply		= 1;	//申请信息
}
//活跃升级
message PBG2CFactionSynLiveness
{
	optional uint32	 				livenesslevel	= 1;	// 活跃等级
	optional uint32	 				livenessexp		= 2;	// 活跃经验
	optional uint32					dailyliveness	= 3;	// 日活跃度
	optional uint32					weekliveness	= 4;	// 周活跃度
}
// 编辑帮会信息	C -> G
message PBCAGFactionSkillUpgrade
{
	optional uint32		jobtype		= 1;		//职业
	optional uint32		curlevel	= 2;		//当前等级
}
//帮派副本同步
message PBG2CFactionCopymapSyn
{
	optional PBFactionCopymapInfo	copymapinfo				= 1;//副本信息
	optional uint32					skilllevel				= 2;//被动技能等级
	optional uint32					skilldeltime			= 3;//被动技能消失时间
	optional uint32					nextcopymapnotictime	= 4;// 下次招募时间
	optional int64					lastdamage				= 5;//当前自己上一次的伤害值 -1表示无伤害
}
// 帮派副本排行
message PBG2CFactionCopymapTop
{		
	optional uint32					id				= 1;//副本ID
	repeated PBFactionCopymapTop	top				= 2;//排行信息
}
// 帮派副本排行
message PBG2CFactionCopymapSkill
{		
	optional uint32					skilllevel		= 1;//被动技能等级
	optional uint32					skilldeltime	= 2;//被动技能消失时间
}
// 帮派副本同步次数
message PBG2CFactionCopymapUpdateCount
{		
	optional uint32					copymapbuycount		= 1;// 副本购买次数
	optional uint32					copymapusefreecount	= 2;// 副本使用免费次数
	optional uint32					copymapusebuycount	= 3;// 副本使用购买次数
}

//战斗结果
message PBG2CFactionCopymapResult
{
	optional uint32					id			= 1;	//挑战ID
	optional uint64					damage 		= 2;	//伤害值
	optional uint64					curhp 		= 3;	//当前血量
}
//跨服同步帮派排行榜
message PBW2BWSynFactionTopList
{
	optional uint32				type	= 1;	//排行类型 _emTopListType
	optional uint32				worldid	= 2;	//世界ID
	repeated PBFactionDisplay	display	= 3;	//帮派显示
}
//帮派排行榜列表 返回
message PBS2CFactionTopList
{
	optional uint32			type		= 1;	//排行类型 _emTopListType
	optional uint32 		beginorder	= 2;	//开始排行
	optional uint32 		count		= 3;	//请求数量
	optional uint32 		playerid	= 4;	//玩家ID
	optional uint32 		worldid		= 5;	//世界ID
	optional uint32			allcount	= 6;	//入榜的全部角色数量
	repeated PBFactionTop	list		= 7;	//帮派列表
	optional PBFactionTop	selfinfo	= 8;	//自己信息
}

//*********************************************公会战开始***********************************//
// 帮战信息显示
message PBFactionWarDisplay
{
	optional string 				name				= 1;		//帮派名
	optional uint32 				factionid			= 2;		//帮派ID
	optional uint32 				worldid				= 3;		//世界ID
	optional uint64					totalfightpower		= 4;		//总战力
	optional uint32					rank				= 5;		//排名
	optional uint32					totalstar			= 6;		//总星星数
}
// 帮派成员显示
message PBFactionWarMemberDisplay
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	//用户标记
	optional uint32					fightpower		= 2;	//战斗力
	optional uint32					beattackstar	= 3;	//被攻打星数
	optional uint32					rank			= 4;	//排名
}
// 帮派战信息
message PBFactionWarMember
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	//用户标记
	optional PBBattlePet			battlepet		= 2;	//战斗阵容
	
}
// 帮派战战场日志类型
enum _emFactionWarLogType
{
	FactionWarLogType_Friend		 		= 1;//友方
	FactionWarLogType_Enemy		 			= 2;//敌方
	FactionWarLogType_FriendRunie 			= 3;//友方挑战废墟
	FactionWarLogType_EnemyRunie 			= 4;//敌方挑战废墟
};
// 帮派战战场日志
message PBFactionWarLog
{
	optional uint32 				logtime				= 1;	//日志记录时间
	optional uint32 				logtype				= 2;	//日志类型	_emFactionWarLogType
	optional uint32 				result				= 3;	//战斗结果	_emBattleResult
	optional string 				friendname			= 4;	//友方姓名
	optional uint32 				enemyworldid		= 5;	//敌方世界ID
	optional string 				enemyname			= 6;	//敌方姓名
	optional uint32 				addstar				= 7;	//获得星星数
	optional uint32 				addfightpoint		= 8;	//获得战绩点数
	optional string 				enemyfactionname	= 9;	//敌方公会名
	optional uint32 				enemytotalstar		= 10;	//敌方总星星数
	optional uint32 				runieskilllevel		= 11;	//废墟技能等级
	optional uint32 				friendtotalstar		= 12;	//友方总星星数
	optional uint32 				friendid			= 13; 	//自己的ID, 日志归属者 TODO客户端
}
// 帮派战战场记录
message PBFactionWarRecord
{
	optional uint64				battlesn		= 1;			// 战斗sn
	optional PBBattleDisplay	battledisplay	= 2;			// 攻击者外显
	optional PBPlayerDisplay 	playerdisplay	= 3;			//用户标记
	optional uint32				result			= 4;			// 战斗结果
	optional uint32				star			= 5;			// 难度
	optional uint32				time			= 6;			// 挑战时间
}
// 帮战信息
message PBFactionWarInfo
{
	optional PBFactionWarDisplay 	display			= 1;	//帮派基本信息
	repeated PBFactionWarMember		members			= 2;	//成员信息
}
// 帮战存库基础信息
message PBFactionWarSaveWarInfo
{
	optional uint32					roomsn			= 1;	//房间ID
	optional uint32					groupid			= 2;	//组ID
	optional PBFactionWarDisplay 	display			= 3;	//帮派显示
	optional uint32					totalattackstar	= 4;	//总攻打的星星数
	optional uint32					totalrunslevel	= 5;	//总攻打的废墟等级
	optional uint32					result			= 6;	//战斗结果
	repeated PBFactionWarLog		log				= 7;	//战场日志
	repeated PBFactionWarBox		boxinfo			= 8;	//宝箱
}

// 帮战存库成员信息
message PBFactionWarSaveMemberInfo
{
	optional uint32					beattackstar	= 1;	//被攻打的星星数
	optional uint32					toldefensecount	= 2;	//总防守次数
	optional uint32					sucdefensecount	= 3;	//成功防守次数
	optional uint32					rank			= 4;	//排名
	optional uint32					prizerank		= 5;	//奖励排名
	optional uint32					fightpoint		= 6;	//战绩点
	optional uint32					addstar			= 7;	//星星数
	optional PBFactionWarMember		members			= 8;	//成员基础
	repeated PBFactionWarLog		log				= 9;	//战场日志信息
	repeated PBFactionWarRecord		record			= 10;	//战场记录
}
// 帮战存库成员信息
message PBFactionWarSaveMemberList
{
	optional uint32						roomsn			= 1;	//房间ID
	optional uint32						groupid			= 2;	//组ID
	optional uint32						factionid		= 3;	//帮派ID
	repeated PBFactionWarSaveMemberInfo	members			= 4;	//成员信息
}
// 帮战宝箱
message PBFactionWarBox
{
	optional uint32	 	pos					= 1;	//宝箱位置1开始
	optional uint32	 	index				= 2;	//宝箱索引
	optional uint32	 	playerid			= 3;	//开启的玩家ID
	optional string	 	playername			= 4;	//开启的玩家名称
}
// 公会战对阵列
message PBFactionWarList
{
	optional PBFactionWarDisplay 		left		= 1;	//左边帮派
	optional PBFactionWarDisplay		right		= 2;	//右边帮派
}
// 返回所有公会战对阵列表
message PBG2CFactionWarListAck
{
	optional PBFactionWarList 	self		= 1;	//自己
	repeated PBFactionWarList 	list		= 2;	//对阵信息
}
// 查询公会对阵列表
message PBW2BWFactionWarQueryAllList
{
	optional uint32	playerid 					= 1;	//玩家ID
	optional uint32	worldid 					= 2;	//世界ID
	optional uint32	factionid 					= 3;	//帮派ID
}
// 查询公会成员列表
message PBC2GFactionWarMemberList
{
	optional uint32	tarfactionid				= 1;	//目标帮派ID
	optional uint32	playerid 					= 2;	//玩家ID
	optional uint32	worldid 					= 3;	//世界ID
	optional uint32	factionid 					= 4;	//帮派ID
}
// 查询公会成员列表返回
message PBG2CFactionWarMemberListAck
{
	optional uint32						tarfactionid 	= 1;	//目标帮派ID
	repeated PBFactionWarMemberDisplay 	member			= 2;	//成员信息
	optional uint32						friendstar 		= 3;	//友方总星星
	optional uint32						enemystar 		= 4;	//敌方总星星
	optional uint32						ruinslevel		= 5;	//废墟等级
	optional PBFactionWarList 			warlist			= 6;	//对战信息
}
// 查询公会成员信息
message PBC2GFactionWarMemberInfo
{
	optional uint32	tarplayerid					= 1;	//目标玩家ID
	optional uint32	playerid 					= 2;	//玩家ID
	optional uint32	worldid 					= 3;	//世界ID
	optional uint32	factionid 					= 4;	//帮派ID
}
// 查询公会成员信息返回
message PBG2CFactionWarMemberInfoAck
{
	optional PBBattleDisplay		battledisplay 	= 1;	//帮派显示
	optional uint32					beattackstar	= 2;	//被攻打星数
	optional uint32					sucdefensecount	= 3;	//成功防御次数
	optional uint32					toldefensecount	= 4;	//据点被挑战次数
}
// 查询目标防御记录
message PBC2GFactionWarQueryTarRecord
{
	optional uint32	tarplayerid					= 1;	//目标ID
	optional uint32	playerid 					= 2;	//玩家ID
	optional uint32	worldid 					= 3;	//世界ID
}
// 返回查询战场日志
message PBG2CFactionWarLogAck
{
	repeated PBFactionWarLog log				= 1;	//战场日志信息
}
// 返回查询目标防御记录
message PBG2CFactionWarTarRecordAck
{
	optional uint32					tarplayerid	= 1;	//目标ID
	repeated PBFactionWarRecord		record		= 2;	//防御记录
}
// 返回查询进攻列表
message PBG2CFactionWarAttackListAck
{
	repeated PBFactionWarMemberDisplay 	member	= 1;	//成员信息
}
// 开启宝箱
message PBC2GFactionWarOpenBox
{
	optional uint32	pos							= 1;	//宝箱位置
	optional uint32	playerid 					= 2;	//玩家ID
	optional uint32	worldid 					= 3;	//世界ID
	optional string	playername					= 4;	//玩家名
}
// 同步宝箱信息
message PBG2CFactionWarSynBoxInfo
{
	optional uint32				totolcount		= 1;	//总共个数
	optional uint32				result			= 2;	//战斗结果 _emBattleResult
	repeated PBFactionWarBox 	box				= 3;	//开启过的宝箱
}
// 开启返回
message PBG2CFactionWarSynOpen
{
	optional bool					isjoin		= 1;	//是否参加
}
//战斗结果
message PBG2CFactionWarFightResult
{
	optional uint32					warcount	= 1;	//次数
}

//*********************************************公会战结束***********************************//

//帮会事件
message PBFactionEvent
{
	optional uint32 type 	= 1; //类型
	optional string name 	= 2; //角色名
	repeated uint32 params 	= 3; //参数
	optional uint32	time	= 4; //时间
}

//帮会事件
message PBFactionAllEvents
{
	repeated PBFactionEvent events = 1;//事件
}
//*********************************************帮会事件结束***********************************//
// 编辑帮会信息	G -> C
message PBG2CFactionPVPSkillUpgrade
{
	optional uint32		skillIndex		= 1;		//索引
	optional uint32		curlevel	= 2;		//当前等级
}
// 技能重置返回
message PBG2CFactionPVPSkillReset
{
	optional uint32			jobtype			= 1;		//职业类型
	optional uint32			resetcount		= 2;		//重置次数
}
//*********************************************PVP技能结束***********************************//

//-------------------------------------------------------------
//------------------------------ 好友相关
enum _emResultFriend_22
{
	R_ResultFriend_Succeed			= 0; // 成功
	R_ResultFriend_Fail				= 1; // 失败
	R_ResultFriend_TarMaxCount		= 2; // 对方好友数量达到上限
	R_ResultFriend_SelfMaxCount		= 3; // 好友数量达到上限
	R_ResultFriend_MaxSendCount		= 4; // 今天赠送友情点已达到上限
	R_ResultFriend_IsInFriend		= 5; // 已经在好友列表中
	R_ResultFriend_IsInBlack		= 6; // 已经在黑名单中
	R_ResultFriend_IsInApply		= 7; // 已经在申请列表中
	R_ResultFriend_MaxApplyCount	= 8; // 好友最大申请上限
	R_ResultFriend_MaxBlackCount	= 9; // 好友最大黑名单上限
	R_ResultFriend_NoInApply		= 10; //不在申请列表中
	R_ResultFriend_NoOnline			= 11; //玩家不在线
	R_ResultFriend_NotFriend		= 12; //对方不是好友
	R_ResultFriend_NoSendPrize		= 13; //该好友未送礼物
	R_ResultFriend_NoRecievePrize	= 14; //已经领取所有礼物
	R_ResultFriend_SupportCount		= 15; //超过最大支援个数
	R_ResultFriend_SupportNotExist	= 16; //支援英雄不存在
	R_ResultFriend_AddSelf			= 17; //不能加自己
	R_ResultFriend_AlreadySupport	= 18; //已经雇佣了该支援
	R_ResultFriend_SupportPower		= 19; //雇佣英雄超过最大战力范围
	R_ResultFriend_CantFire			= 20; //不能解雇
	R_ResultFriend_CantUseAgain		= 21; //不能重复上场
};
//----好友模块
enum _emC2S_Friend_Protocol
{
	C2S_Friend_RequestAddFriend			= 1 ; 	// 请求加好友		PBU32
	C2S_Friend_AgreeAddFriend			= 2 ; 	// 同意加好友		PBU32
	C2S_Friend_DelFriend				= 3 ; 	// 删除好友			PBU32
	C2S_Friend_DelApply					= 4 ; 	// 移除申请			PBU32
	C2S_Friend_AddBlack					= 5 ; 	// 增加黑名单		PBU32
	C2S_Friend_DelBlack					= 6 ; 	// 移除黑名单		PBU32
	C2S_Friend_SendPrize				= 7 ; 	// 赠送礼物			PBU32
	C2S_Friend_AutoSendPrize			= 8 ; 	// 一键赠送礼物	
	C2S_Friend_RecievePrize				= 9 ; 	// 领取礼物			PBU32
	C2S_Friend_AutoRecievePrize			= 10 ; 	// 一键领取礼物	
	C2S_Friend_Refresh					= 11 ; 	// 刷新推荐好友		
	C2S_Friend_SendSupport				= 12 ; // 派遣支援银熊	PBPlayerSendSupportHero
	C2S_Friend_Search					= 13;	// 根据名字搜索		PBString
	C2S_Friend_HireSupport				= 14;	// 雇佣支援 		PBFriendHireSupport
	C2S_Friend_FireSupport				= 15;	// 解雇支援			PBFriendHireSupport
	

	//以下是服务器用
	C2S_Friend_SynFriend				= 20 ; 	// 同步好友信息		PBG2WFriendIDSyn
	C2S_Friend_RealAddBlack				= 21 ; 	// 真正添加黑名单	PBU32
	C2S_Friend_SyncSupport				= 22 ;	// 同步支援信息	
	C2S_Friend_UseSupport				= 23 ;	// 支援被使用
	C2S_Friend_UnuseSupport				= 24 ;  // 支援使用回退
}
//----好友模块
enum _emS2C_Friend_Protocol
{
	S2C_Friend_CommonAck				= 0 ;	// 通用失败返回
	S2C_Friend_AddApply					= 1 ;	// 好友申请			PBPlayerFriendInfo
	S2C_Friend_DelApply					= 2 ;	// 删除申请			PBU32
	S2C_Friend_AddFriend				= 3 ; 	// 加好友			PBPlayerFriendInfo
	S2C_Friend_DelFriend				= 4 ; 	// 删好友			PBU32
	S2C_Friend_AddBalck					= 5 ; 	// 增加黑名单		PBPlayerFriendInfo
	S2C_Friend_DelBalck					= 6 ; 	// 移除黑名单		PBU32
	S2C_Friend_RecievePrize				= 7 ; 	// 增加领取礼物		PBU32
	S2C_Friend_DelRecievePrize			= 8 ; 	// 删除领取礼物		PBG2CFriendPrize
	S2C_Friend_SendPrize				= 9 ; 	// 赠送礼物			PBG2CFriendPrize
	S2C_Friend_SynFriend				= 10 ; 	// 同步好友信息		PBG2CFriendSyn
	S2C_Friend_Online					= 11 ; 	// 同步好友上线		PBPlayerFriendInfo
	S2C_Friend_Offline					= 12 ; 	// 同步好友下线		PBPlayerFriendInfo
	S2C_Friend_Refresh					= 13 ; 	// 推荐好友			PBG2CFriendRefresh
	S2C_Friend_SyncSupport				= 14 ; 	// 同步支援信息		PBW2GFriendSupportSync
	S2C_Friend_SendSupport				= 15 ;	// 派遣支援返回		PBPlayerSendSupportHero
	S2C_Friend_Search					= 16;	// 搜索返回			PBG2CFriendRefresh
	S2C_Friend_HireSupport				= 17;	// 雇佣支援返回		PBFriendHireSupport
	S2C_Friend_FireSupport				= 18;	// 解雇支援返回		PBFriendHireSupport
	S2C_Friend_SyncUsedSupport			= 19;	// 同步已使用支援	PBG2CFriendUsedSupportSync
}
// 同步好友信息
message PBG2WFriendIDSyn
{
	repeated uint32				playerid		= 1;	// 好友ID
	repeated uint32				blackid			= 2;	// 黑名单
}
// 同步好友信息
message PBG2CFriendPrize
{
	optional uint32 			playerid		= 1;	// 好友显示
	repeated PBItemInfo 		item			= 2;	// 奖励道具
}
// 同步好友信息
message PBG2CFriendRefresh
{
	repeated PBPlayerFriendInfo info			= 1;	// 好友
}
// 同步好友信息
message PBG2CFriendSyn
{
	repeated PBPlayerFriendInfo info			= 1;	// 好友
}
// 同步好友信息
message PBG2CFriendID
{
	repeated uint32				playerid		= 1;	// 好友ID
}
// 派遣支援信息
message PBPlayerSendSupportHero
{
	optional uint32				type 	= 1; // _emFriendSupportType
	optional uint64 			petsn 	= 2; // 支援英雄sn
}
// 同步支援信息
message PBG2WSupportSync
{
	repeated PBPlayerSupportHero 	support		= 1;	// 支援英雄
	optional bool					syncback	= 2;	// 是否返回所有好友支援信息
}
// 好友支援信息
message PBW2GFriendSupport
{
	optional	uint32					id 		= 1;	// 好友id
	repeated 	PBPlayerSupportHero 	support	= 2;	// 支援英雄
}

// 同步好友支援信息
message PBW2GFriendSupportSync
{
	repeated 	PBW2GFriendSupport 	support	= 2;	// 好友支援
}

// 同步已经使用的英雄
message PBG2CFriendUsedSupportSync
{
	repeated 	PBFriendSupport 	used	= 1;	// used
}

// 雇佣/解雇支援
message PBFriendHireSupport
{
	optional uint32 type 		= 1; //类型
	optional uint32 friendid 	= 2; //好友id
	optional uint64	sn			= 3; //pet sn
}

//-------------------------------------------------------------
//------------------------------ 角色数据类型
enum _emPlayerType
{
	_PInfo_Account			= 0;//帐号信息
	_PInfo_Base			= 1;//基本信息
	_PInfo_System			= 2;//系统信息
	_PInfo_System2			= 3;//扩展 系统信息
	_PInfo_Bag			= 4;//包裹
	_PInfo_Bag2			= 5;//扩展 包裹
	_PInfo_Client			= 6;//前端数据
	_PInfo_Pet			= 7;//伙伴信息
	_PInfo_Pet2			= 8;//扩展 伙伴信息
	_PInfo_Mail			= 9;//邮件数据
	_PInfo_Friend			= 10;//好友数据
	_PInfo_Faction			= 11;//帮会数据 //最后一个
	_PInfo_Global			= 12;//全局数据
	_PInfo_Pet3			= 13;//伙伴信息3	
};

//-------------------------------------------------------------
//------------------------------ 帐号标示
enum _emAccountMark
{
	AccountMask_New			= 0;//新帐号
	AccountMark_Adult		= 1;//是否成年人
	AccountMark_Card		= 2;//是否身份验证
	AccountMark_Inner		= 3;//是否内部账号
};

//-------------------------------------------------------------
//------------------------------ 游戏系统类型
enum _emGameSystemType
{
	GameSystemType_Common			= 0;//通用功能
	GameSystemType_Pet				= 1;//伙伴功能
	GameSystemType_Copymap			= 2;//副本功能
	GameSystemType_Item				= 3;//道具功能
	GameSystemType_Fight			= 4;//战斗功能
	GameSystemType_Task				= 5;//任务功能
	GameSystemType_Mail				= 6;//邮件功能
	GameSystemType_TopList			= 7;//排行榜功能
	GameSystemType_Team				= 8;//组队功能
	GameSystemType_Challenge		= 9;//竞技场
	GameSystemType_Faction			= 10;//帮会
	GameSystemType_Call				= 11;//召唤
	GameSystemType_Sail				= 12;//远航
	GameSystemType_Hook				= 13;//挂机
	GameSystemType_Artifact			= 14;//神器
	GameSystemType_Shop				= 15;//商店
	GameSystemType_Train			= 16;//试炼
	GameSystemType_Achieve			= 17;//成就
	GameSystemType_Expedition		= 18;//远征
	GameSystemType_Shape			= 19;//外形
	GameSystemType_Temple			= 20;//神殿
	GameSystemType_Friend			= 21;//好友
	GameSystemType_Element			= 22;//元素
	GameSystemType_Risk				= 23;//冒险
	GameSystemType_Switch			= 24;//系统开启
	GameSystemType_Dan				= 25;//超凡段位赛
	GameSystemType_Ladder			= 26;//跨服天梯
	GameSystemType_Champion			= 27;//冠军赛
	GameSystemType_Holy				= 28;//圣物
	GameSystemType_Video			= 29;//录像
	GameSystemType_Privilege		= 30;//特权
	GameSystemType_Weal				= 31;//福利
	GameSystemType_Activity			= 32;//活动
	GameSystemType_Platform			= 33;//平台
	GameSystemType_Talk				= 34;//聊天
	GameSystemType_Treasure			= 35;//探宝
	GameSystemType_HeavenDungeon	= 36;//天界副本
	GameSystemType_CrossChallenge	= 37;//跨服竞技场
	GameSystemType_Room				= 38;//家圓功能
	GameSystemType_Tablet			= 39;//晶碑
	GameSystemType_ElfTree			= 40;//精灵系统
	GameSystemType_WeekChampion		= 41;//周冠军赛
	GameSystemType_TeamCampaign		= 42;//组队征战
	GameSystemType_DragonBall		= 43;//龙珠
	GameSystemType_Convenant		= 44;//契约
	GameSystemType_Lottery			= 45;//抽奖		
	GameSystemType_Illustration		= 46;//图鉴收集
	GameSystemType_RedEnvelope		= 47;//红包
	GameSystemType_JoyousLinkup		= 48;//连连看
	GameSystemType_Guess			= 49;//猜猜猜
	GameSystemType_Defend			= 50;//守护
	GameSystemType_Resonance		= 51;//共鸣
	GameSystemType_IncubateEgg		= 52;//孵化蛋
	GameSystemType_ActivityBoss		= 53;//活动boss
	GameSystemType_PlayerOrder		= 54;//订单管理
};
//-------------------------------------------------------------
//------------------------------ 游戏对像类型
enum _em_GameUnitType
{
	GameObject_None				= 0;//非法空对像
	GameObject_Pet				= 1;//伙伴对像
	GameObject_Monster			= 2;//怪物对像
	GameObject_Artifact			= 3;//神器对像
	GameObject_ElfTree			= 4;//神树对像
	GameObject_God				= 5;//上帝对像
	GameObject_Defend			= 6;//守护对像
};
//-------------------------------------------------------------
//------------------------------ 战斗属性
enum _emBattleAttribute
{
	BattleAttribute_Attack				= 1;//攻击
	BattleAttribute_HPMax				= 2;//最大生命
	BattleAttribute_Defense				= 3;//防御
	BattleAttribute_Speed				= 4;//速度
	BattleAttribute_CriticalAddRate		= 5;//暴击率
	BattleAttribute_CriticalAdd			= 6;//暴伤
	BattleAttribute_CriticalDelRate		= 7;//抗暴
	BattleAttribute_ControlAdd			= 8;//控制
	BattleAttribute_ControlDel			= 9;//抗控
	BattleAttribute_DamageAdd			= 10;//伤害加成
	BattleAttribute_DamageDel			= 11;//免伤
	BattleAttribute_Hit					= 12;//命中
	BattleAttribute_Dodge				= 13;//闪避
	BattleAttribute_CureAdd				= 14;//治疗加成
	BattleAttribute_BeCureAdd			= 15;//被治疗加成
	BattleAttribute_PhysicsAdd			= 16;//物伤
	BattleAttribute_MagicAdd			= 17;//法伤
	BattleAttribute_PhysicsDel			= 18;//物免
	BattleAttribute_MagicDel			= 19;//法免
	
	BattleAttribute_TankeAdd			= 20;//对坦克伤害加成 _emPetJobType
	BattleAttribute_ZhanshiAdd			= 21;//对战士伤害加成
	BattleAttribute_FashiAdd			= 22;//对法师伤害加成
	BattleAttribute_FuzhuAdd			= 23;//对辅助伤害加成
	BattleAttribute_TankeDel			= 24;//对坦克伤害减免
	BattleAttribute_ZhanshiDel			= 25;//对战士伤害减免
	BattleAttribute_FashiDel			= 26;//对法师伤害减免
	BattleAttribute_FuzhuDel			= 27;//对辅助伤害减免

	
};
//-------------------------------------------------------------
//------------------------------ 消耗类型
enum _emExpendType
{
	ExpendType_Gold				= 1;//金币
	ExpendType_Diamond			= 2;//钻石
	ExpendType_PetExp			= 3;//英雄经验
	ExpendType_FrendShip		= 4;//友情点
	ExpendType_CallPoint		= 5;//召唤积分
	ExpendType_Exp				= 6;//经验
	ExpendType_FactionContri	= 7;//帮贡
	ExpendType_SailPoint		= 8;//远航积分
	ExpendType_GodPoint			= 9;//神格积分
	ExpendType_Chanllenge		= 10;//竞技积分
	ExpendType_Expedition		= 11;//远征币
	ExpendType_RuneScore		= 12;//符文熔炼值
	ExpendType_XianzhiPoin		= 13;//先知水晶
	ExpendType_WaterExchange	= 14;//水兑换(曙光之盾)
	ExpendType_FireExchange		= 15;//火兑换
	ExpendType_WindExchange		= 16;//风兑换
	ExpendType_Ladder			= 17;//天梯积分	
	ExpendType_ArtifactRefine	= 18;//神器烈阳石头	
	ExpendType_TreasurePoint	= 19;//探宝积分
	ExpendType_Lucky			= 20;//探宝幸运值
	ExpendType_AdvanceLucky		= 21;//高级探宝幸运值
	ExpendType_ExchangeItem1	= 22;//兑换活动用道具1
	ExpendType_ExchangeItem2	= 23;//兑换活动用道具2
	ExpendType_ExchangeItem3	= 24;//兑换活动用道具3
	ExpendType_ExchangeItem4	= 25;//兑换活动用道具4
	ExpendType_BraveEmblem		= 26;//勇者印记
	ExpendType_FactionExp		= 27;//帮派经验
	ExpendType_WeekChampion		= 28;//周冠军赛冠军币
    ExpendType_TeamCampaign		= 29;//组队征战积分
	ExpendType_ExchangeItem5	= 30;//兑换活动用道具5
	ExpendType_WarOrderScore	= 31;//活动进阶战令积分
	ExpendType_DreamScore		= 32;//梦幻积分
	ExpendType_WarOrderScore1	= 33;//活动进阶战令积分1
	ExpendType_WarOrderScore2	= 34;//活动进阶战令积分2
	ExpandType_TowerScore		= 35;//对战塔积分
	ExpandType_MasterTowerScore	= 36;//大师对战塔积分
	ExpendType_Save				= 50;//存库的数据
	ExpendType_PetHp			= 51;//伙伴当前血量
	ExpendType_Liveness			= 52;//活跃度
	ExpendType_ActivityLiveness	= 53;//七日目标活动活跃度
	ExpendType_ChargeDiamond	= 54;//充值钻石
	ExpendType_WeekLiveness		= 55;//周活跃度
	ExpendType_WarOrderExp		= 56;//战令经验值
};
//-------------------------------------------------------------
//------------------------------ 性别
enum _emGenderType
{
	GenderType_Male		 			= 0;//男性
	GenderType_Female		 		= 1;//女性
};
//-------------------------------------------------------------
//------------------------------ 操做类型
enum _emDoingType
{
	DoingType_Others 						= 0;
	DoingType_GM							= 1;  //GM
	DoingType_Item_Use						= 2;  //道具使用
	DoingType_Hook							= 3;  //挂机
	DoingType_Copymap						= 4;  //副本系统
	DoingType_Task							= 5;  //任务奖励
	DoingType_Mail							= 6;  //邮件获取
	DoingType_Pet							= 7;  //伙伴
	DoingType_Buff							= 8;  //buff
	DoingType_Skill							= 9;  //技能
	DoingType_PetEquip						= 10; //伙伴装备
	DoingType_EquipUpgrade					= 11; //装备升阶
	DoingType_Challenge						= 12; //竞技场
	DoingType_EquipSplit					= 13; //装备分解
	DoingType_ItemCompound					= 14; //道具合成
	DoingType_Gem							= 15; //宝石镶嵌
	DoingType_Faction						= 16; //帮派
	DoingType_ItemSell						= 17; //道具出售
	DoingType_ItemSplit						= 18; //道具分解
	DoingType_RuneRefine					= 19; //符文重铸
	DoingType_PetCall						= 20; //召唤系统
	DoingType_Sail							= 21; //远航系统
	DoingType_PetSplit						= 22; //伙伴分解
	DoingType_PetUpStar						= 23; //伙伴升星
	DoingType_SystemGive					= 24; //系统赠送
	DoingType_Artifact						= 25; //神器系统
	DoingType_Shop							= 26; //商店系统
	DoingType_Train							= 27; //试炼系统
	DoingType_Liveness						= 28; //每日活跃系统
	DoingType_Achieve						= 29; //成就系统
	DoingType_FactionDonate					= 30; //帮派贡献
	DoingType_FactionCopymap				= 31; //帮派副本
	DoingType_Expedition					= 32; //远征系统
	DoingType_Friend						= 33; //好友系统
	DoingType_Element						= 34; //元素神殿系统
	DoingType_Risk							= 35; //神殿冒险
	DoingType_TopList						= 36; //排行榜
	DoingType_FactionWar					= 37; //公会战
	DoingType_Dan							= 38; //超凡段位赛
	DoingType_Ladder						= 39; //跨服天梯
	DoingType_GodEquip						= 40; //神装
	DoingType_Champion						= 41; //冠军赛
	DoingType_Holy							= 42; //圣物
	DoingType_Video							= 43; //录像
	DoingType_PetCall2						= 44; //先知召唤系统
	DoingType_FactionRename					= 45; //帮派重命名
	DoingType_HookBoss						= 46; //挂机boss
	DoingType_VIP							= 47; //VIP
	DoingType_Weal							= 48; //福利系统
	DoingType_Activity						= 49; //活动
	DoingType_PlatformCharge				= 50; //充值
	DoingType_Treasure						= 51; //探宝
	DoingType_Privilege						= 52; //特权
	DoingType_CreateRole					= 53;// 角色创建
	DoingType_RoleLogin						= 54;// 角色登陆
	DoingType_RoleLogout					= 55;// 角色登出
	DoingType_OnlineCount					= 57;//在线数量
	DoingType_HeavenDungeon					= 58; // 天界副本
	DoingType_ItemBag						= 59; // 礼包
	DoingType_Fanli							= 60; // 返利
	DoingType_CDK							= 61; // cdk
	DoingType_Like							= 62; // 点赞
	DoingType_CrossChallenge				= 63; // 跨服竞技场
	DoingType_FactionBossAward				= 64; // 帮派副本奖励
	DoingType_Tablet						= 65; // 晶碑
	DoingType_PetReplace					= 66; // 置换英雄
	DoingType_PetDegenerate					= 67; // 回退英雄
	DoingType_Rename						= 68; // 重命名
	DoingType_WeekChampion					= 69; // 周冠军赛
	DoingType_SevenDayAward					= 70; // 七日目标奖励
	DoingType_TeamCampaign					= 71; // 组队征战
	DoingType_InvitePrize					= 72; // 邀请奖励
	DoingType_Survey						= 73; // 问卷调查
	DoingType_PetReborn						= 74; // 英雄重生
	DoingType_PetRebornCount				= 75; // 购买英雄重生次数
	DoingType_WeekLiveness					= 76; // 周活跃
	DoingType_SystemOpen					= 77; // 系统开启奖励
	DoingType_ItemVIPExp					= 78; // 使用vip经验道具
	DoingType_WarOrder						= 80; // 战令
	DoingType_DragonBall					= 81; // 龙珠
	DoingType_CommonPrize					= 82; // 通用奖励
	DoingType_Convenant						= 83; // 契约
	DoingType_PetHighRebron					= 84; //高星重生
	DoingType_PetEvolve						= 85; //伙伴进化
	DoingType_Lottery						= 86; //抽奖	
	DoingType_Illustration					= 87; //图鉴收集
	DoingType_SysCompensate					= 88; //系统补偿
	DoingType_RedEnvelope					= 89; //红包
	DoingType_ResourceFindBack				= 90; //资源找回
	DoingType_Guess							= 91; //猜猜猜
	DoingType_PetHorcrux					= 92;//伙伴魂器
	DoingType_Defend						= 93; //守护
	DoingType_Resonance						= 94; //共鸣
	DoingType_IncubateEgg					= 95; //孵化蛋
	DoingType_UnlockPet						= 96; //宠物j解锁奖励
	DoingType_ActivityBoss					= 97; //限时活动boss
	DoingType_ActivityBase					= 10000; // 活动开始

	DoingType_ActivityChargeAmount			= 10001; // 充值累计金额
	DoingType_ActivityChargeDays			= 10002; // 充值累计天数
	DoingType_ActivityLeveup				= 10003; // 升级奖励
	DoingType_ActivityTimes					= 10004; // 计次奖励
	DoingType_ActivityExchange				= 10005; // 兑换
	DoingType_ActivityFirstCharge			= 10006; // 首充
	DoingType_ActivityGrowFund				= 10007; // 成长基金
	DoingType_ActivityFund					= 10008; // 基金
	DoingType_ActivityLogin					= 10009; // 登录
	DoingType_ActivityShortTermGift			= 10010; // 短期礼包
	DoingType_ActivityAchievement			= 10011; // 目标
	DoingType_ActivityRank					= 10012; // 冲榜活动
	DoingType_ActivityZeroBuy				= 10013; // 0元购
	DoingType_ActivityLimitGift				= 10014; // 限购礼包
	DoingType_ActivityWeekend				= 10015; // 周末福利
	DoingType_ActivityAchieveRoad			= 10016; // 成就之路
	DoingType_ActivityCrossRank				= 10017; // 跨服冲榜活动
	DoingType_ActivityWarOrder				= 10018; // 春节战令
	DoingType_ActivityLuckyEgg				= 10019; //周日福蛋
	DoingType_ActivityCustomGift			= 10020; //定制礼包
}
//-------------------------------------------------------------
//------------------------------ 平台类型
enum _emPlatformType
{
	Platform_normal							= 1; 	// 内网
	Platform_sanqi_android					= 2; 	// 37安卓
	Platform_sanqi_ios						= 3; 	// 37ios
	Platform_funjoy							= 4; 	// funjoy
}
//-------------------------------------------------------------
//------------------------------ 状态类型
enum _emGameStateType
{
	StateType_WaitReady			= 0;//等待前端加载完毕
	StateType_InPlane			= 1;//位面中
	StateType_InBattle			= 2;//战斗中
};
//-------------------------------------------------------------
//------------------------------ 怪物类型
enum _emMonsterType
{
	MonsterType_Battle					= 0; 	//战斗怪
	MonsterType_Npc						= 1; 	//npc怪
}
//-------------------------------------------------------------
//------------------------------ 副本类型
enum _emCopymapType
{
	CopymapType_Gold				= 1; 	//金币副本
	CopymapType_Exp					= 2; 	//经验副本
	CopymapType_Pet					= 3; 	//英雄副本
	CopymapType_Artifact			= 4; 	//神器副本
	CopymapType_Rune				= 5; 	//符文副本
}
//-------------------------------------------------------------
//------------------------------ 副本子类型
enum _emCopymapSubType
{
	CopymapStageType_Jiandan		= 1; 	//简单
	CopymapStageType_Putong			= 2; 	//普通
	CopymapStageType_Kunnan			= 3; 	//困难
	CopymapStageType_Emeng1			= 4; 	//噩梦1
	CopymapStageType_Emeng2			= 5; 	//噩梦2
	CopymapStageType_Diyu1			= 6; 	//地狱1
	CopymapStageType_Diyu2			= 7; 	//地狱2
	CopymapStageType_Shenyuan1		= 8; 	//深渊1
	CopymapStageType_Shenyuan2		= 9; 	//深渊2
}
//-------------------------------------------------------------
//------------------------------阵营类型
enum _emCampType
{
	CampType_None			= 0;//默认
	CampType_Friend			= 1;//友方
	CampType_Enermy			= 2;//敌方
};

//-------------------------------------------------------------
//------------------------------战斗结果
enum _emBattleResult
{
	BattleResult_Sucess			= 0;//胜利
	BattleResult_Fail			= 1;//失败
	BattleResult_Equal			= 2;//平局
	BattleResult_DefenseSuc		= 3;//防守成功
	BattleResult_DefenseFail	= 4;//防守失败
};
//-------------------------------------------------------------
//------------------------------奖励类型
enum _emPrizeType
{
	PrizeType_Quest					= 1;// 任务完成奖励
	PrizeType_Copymap				= 2;// 副本完成奖励
};

//------------------------------------------------------
//------------------------------ 道具配置标示
enum _emItemMark
{
	ItemMark_NoSell			= 0;//是否不可出售
	ItemMark_UseBatch		= 2;//是否不可以批量使 无用
	ItemMark_Show			= 3;//是否可展示
	ItemMark_Shortcut		= 4;//是否可以放入快捷栏
	ItemMark_DropBroadcast	= 5;//掉出是否广播
	ItemMark_SaveLog		= 6;//是否记录日志
	ItemMark_GetAutoUse		= 7;//得到道具是否自动使用
	ItemMark_GetTimeLimit	= 8;//得到道具开始计时
	ItemMark_UseTimeLimit	= 9;//使用道具开始计时
	ItemMark_OfflineNoTime	= 10;//是否下线不计时
	ItemMark_GetBind		= 11;//是否获得绑定
	ItemMark_LimitUseOne	= 12;//是否限制使用一个
	ItemMark_GetAddDailyCD	= 13;//获得增加跨天CD
	ItemMark_SplitForceBind	= 14;//是否分解强绑定
};
//------------------------------------------------------
//------------------------------ 道具品质
enum _emItemQualityType
{
	ItemQualityType_White		= 0;//白色
	ItemQualityType_Green       = 1;//绿色
	ItemQualityType_Blue        = 2;//蓝色
	ItemQualityType_Purple		= 3;//紫色
	ItemQualityType_Orange		= 4;//橙色
	ItemQualityType_Red			= 5;//红色
	ItemQualityType_Pink		= 6;//粉色
	ItemQualityType_Gold		= 7;//铂金
}
//-------------------------------------------------------------
//------------------------------ 道具列表类型
enum _emBagType
{
	BagType_Equip		= 1;//装备背包类型
	BagType_Item		= 2;//道具背包类型
	BagType_PetPiece	= 3;//碎片背包类型
	BagType_Special		= 4;//特殊背包类型
	BagType_GodEquip	= 5;//神装背包类型
};
//------------------------------------------------------
//------------------------------ 道具大类型
enum _emItemType
{
	ItemType_Resource		= 0;//资源类 
	ItemType_Equip			= 1;//装备类型  _emEquipType
	ItemType_Rune			= 2;//符文类型  _emRuneType
	ItemType_Pet			= 3;//伙伴类型 	_emItemPetType 
	ItemType_Normal			= 4;//普通		_emItemNormalType
	ItemType_GodEquip		= 5;//神装类型  _emGodEquipType
	ItemType_Privilege		= 6;//特权类型(数量作为特权数值)  _emPrivilegeType
	ItemType_FazhenAwake	= 7;//法阵觉醒
}
//-------------------------------------------------------------
//------------------------------ 普通类型
enum _emItemNormalType
{
	ItemNormalType_Normal		= 0;//普通
	ItemNormalType_Skill		= 1;//技能道具
}
//-------------------------------------------------------------
//------------------------------ 神装品质
enum _emGodEquipQuality
{
	GodEquipQuality_Normal		= 0;//普通
	GodEquipQuality_Good		= 1;//良品
	GodEquipQuality_Excellent	= 2;//极品
}
//-------------------------------------------------------------
//------------------------------ 神装类型
enum _emGodEquipType
{
	GodEquipType_Earring		= 1;//耳环
	GodEquipType_Necklace		= 2;//项链
	GodEquipType_Ring			= 3;//戒指
	GodEquipType_Bracelet		= 4;//手镯
}
//-------------------------------------------------------------
//------------------------------ 伙伴类型
enum _emItemPetType
{
	ItemPetType_PetID				= 1;//伙伴ID
	ItemPetType_PetType				= 2;//伙伴种族
	ItemPetType_Rand				= 3;//随机任意
	ItemPetType_MaterialAny			= 4;//升星材料任意英雄
	ItemPetType_MaterialSpecific	= 5;//升星材料指定英雄
	ItemPetType_Group				= 6;//组随机概率
}
//-------------------------------------------------------------
//------------------------------ 符文类型
enum _emRuneType
{
	RuneType_Star		= 1;//星辰符文
	RuneType_Moon		= 2;//月亮符文
	RuneType_Sun		= 3;//太阳符文
	RuneType_Rainbow	= 4;//彩虹符文
	RuneType_Blink		= 5;//闪烁符文
	RuneType_StarStone	= 6;//星石符文
}
//-------------------------------------------------------------
//------------------------------ 装备类型
enum _emEquipType
{
	EquipType_Weapon		= 1;//武器
	EquipType_Cloth			= 2;//护甲
	EquipType_Shoe			= 3;//鞋子
	EquipType_Helmet		= 4;//头盔
}
//------------------------------------------------------
//------------------------------ 道具使用类型
enum _emItemUseType
{
	ItemUseType_Expend				= 1;//加消耗
	ItemUseType_Buff				= 2;//加buff
	ItemUseType_Packet				= 3;//礼包
	ItemUseType_AddPet				= 4;//获得英雄
	ItemUseType_AddTitle			= 5;//增加称号ID
	ItemUseType_AddHeadIcon			= 6;//增加头像框
	ItemUseType_AddProductID		= 7;//增加商品ID
	ItemUseType_VIPExp				= 8;//增加vip经验
	ItemUseType_Profit				= 9;//挂机收益
	ItemUseType_UpStar				= 10;//升星
}
//------------------------------------------------------
//------------------------------ 礼包使用类型
enum _emItemPackType
{
	ItemPacket_Normal		= 1; //标准全部获取
	ItemPacket_Rate			= 2; //几率获取
	ItemPacket_Mutually		= 3; //互斥获取
	ItemPacket_CountGet		= 4; //次数获取
	ItemPacket_Drop			= 5; //掉落获取
	ItemPacket_Select		= 6; //选择获取
}
//-------------------------------------------------------------
//------------------------------ 道具标记
enum _emItemFlag
{
	ItemFlag_Equip				= 0;//是否穿戴
	ItemFlag_Sequence			= 1;//新道具ID
	ItemFlag_AutoUse			= 2;//是否自动使用
};
//-------------------------------------------------------------
//------------------------------ 任务类型
enum _emTaskType
{
	TaskType_Main				= 0;//主线
}
//-------------------------------------------------------------
//------------------------------ 任务目标类型
enum _emTaskTargetType
{
	TaskTargetType_Equip					= 1;//穿戴装备
	TaskTargetType_CompleteStage			= 2;//完成战斗关卡
	TaskTargetType_PetLevel					= 3;//主角等级
	TaskTargetType_SkillLevel				= 4;//技能升级
}


//-------------------------------------------------------------
//------------------------------ 邮件类型
enum _emMailType
{
	MailType_INVALID			= 0;//无效
	MailType_GM					= 1;//GM
	MailType_BagFull			= 2;//背包已满
	MailType_OfflinePrize		= 3;//离线奖励
	MailType_Level				= 4;//等级奖励
	MailType_ChallengeDaily		= 5;//竞技场每日奖励	参数:名次
	MailType_Element			= 6;//元素神殿排行		参数:名次
	MailType_FactionWarTop		= 7;//公会战排行		参数:名次_战绩
	MailType_DanSeasonPrize		= 8;//超凡段位赛赛季奖励 参数:名次
	MailType_LadderPrize		= 9;//跨服天梯奖励 		参数:名次
	MailType_ChampionNotice		= 10;//冠军赛通知
	MailType_ChampionTopPrize	= 11;//冠军赛排名奖励	参数:名次
	MailType_ChampionGuessCoin	= 12;//冠军赛竞猜币
	MailType_FactionDissolve	= 13;//公会解散
	MailType_MonthCardReward	= 14;//月卡每日奖励	参数: 商品ID
	MailType_Fund				= 15;//基金每日奖励	参数:商品ID
	MailType_Platform			= 16;//平台充值购买	参数:钻石_返利钻石
	MailType_ChallengeSeason	= 17;//竞技场赛季奖励	参数:开始时间_结束时间_名次
	MailType_CDK				= 18;//cdk邮件
	MailType_Endless			= 19;//无尽试炼每日奖励	参数:名次
	MailType_FactionBossAward	= 20;//帮派副本boss奖励
	MailType_FactionKillBoss	= 21;//帮派副本击杀boss奖励
	MailType_WeekChampionTop	= 22;//冠军赛排名奖励 		参数:名次
	MailType_WeekChampionGuess	= 23;//冠军赛竞猜奖励
	MailType_TopClickGold		= 24;//点金活动排行奖励		参数:名次
	MailType_TopSail			= 25;//远航活动排行奖励		参数:名次
	MailType_TopExpedition		= 26;//远征活动排行奖励		参数:名次
	MailType_TopRaid			= 27;//快速战斗活动排行奖励	参数:名次
	MailType_TopiskCount		= 28;//神界冒险次数排行奖励	参数:名次
    MailType_SupportPrize       = 29;//支援奖励
	MailType_Fazhen      		= 30;//开启法阵奖励
	MailType_Peak      			= 31;//巅峰挑战奖励
	MailType_SonOfDestiny      	= 32;//命运之子
	MailType_ActivityRankHero 	= 33;//英雄榜冲榜活动 参数:名次
	MailType_ActivityRankLevel 	= 34;//等级榜冲榜活动 参数:名次
	MailType_ActivityRankPower 	= 35;//战力榜冲榜活动 参数:名次
	MailType_ActivityRankEquip 	= 36;//装备榜冲榜活动 参数:名次
	MailType_ActivityRankCharge = 37;//充值榜冲榜活动 参数:名次
	MailType_ActivityRankHeroLv = 38;//英雄等级榜冲榜活动 参数:名次
	MailType_ActivityRankHeroLimit 		= 39;//英雄榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityRankLevelLimit 	= 40;//等级榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityRankPowerLimit 	= 41;//战力榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityRankEquipLimit 	= 42;//装备榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityRankChargeLimit 	= 43;//充值榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityRankHeroLvLimit 	= 44;//英雄等级榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ZeroBuy 					= 45;//0元购
	MailType_ActivityChargeDays 		= 46;//充值活动
	MailType_SysCompensate 				= 47;//系统补偿
	MailType_Guess 						= 48;//猜猜猜活动 参数:名次
	MailType_LifeTimeCard 				= 49;//终身卡
	
	MailType_MergerStarUp				= 50;// 合服星级冲榜活动 参数:名次
	MailType_MergerCharge				= 51;// 合服充值冲榜活动 参数:名次
	MailType_MergerHero					= 52;// 合服抽卡冲榜活动 参数:名次
	
	MailType_ActivityWarOrder			= 54;//进阶战令结算(备用)
	MailType_ActivityWarOrder1			= 55;//进阶战令结算(备用)
	MailType_ActivityWarOrder2			= 56;//进阶战令结算(备用)
	
	MailType_MergerStarUpLimit				= 57;// 合服星级冲榜活动未达到条件 参数:原名次_名次
	MailType_MergerChargeLimit				= 58;// 合服充值冲榜活动未达到条件 参数:原名次_名次
	MailType_MergerHeroLimit				= 59;// 合服抽卡冲榜活动未达到条件 参数:原名次_名次
	
	MailType_ActivityCrossRankHero 					= 61;//跨服抽卡榜冲榜活动 参数:名次
	MailType_ActivityCrossRankPower 				= 62;//跨服战力榜冲榜活动 参数:名次
	MailType_ActivityCrossRankIllustration 			= 63;//跨服图鉴榜冲榜活动 参数:名次
	MailType_ActivityCrossRankStarUp 				= 64;//跨服升星榜冲榜活动 参数:名次
	
	MailType_ActivityCrossRankHeroLimit 			= 71;//跨服抽卡榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityCrossRankPowerLimit 			= 72;//跨服战力榜活动未达到条件 参数:原名次_名次
	MailType_ActivityCrossRankIllustrationLimit 	= 73;//跨服图鉴榜活动未达到条件 参数:原名次_名次
	MailType_ActivityCrossRankStarUpLimit 			= 74;//跨服升星榜冲榜活动未达到条件 参数:原名次_名次
	MailType_ActivityJoyousLinkup					= 75;//连连看排名活动 参数:名次
	MailType_ActivityIllustration					= 76;//图鉴榜冲榜活动 参数:名次
	MailType_ActivityStarUp							= 77;//升星榜冲榜活动 参数:名次
	MailType_ActivityIllustrationLimit 				= 78;//图鉴榜活动未达到条件 参数:原名次_名次
	MailType_ActivityStarUpLimit 					= 79;//升星榜冲榜活动未达到条件 参数:原名次_名次
	
	MailType_CrossChallengeSeason					= 80;//跨服竞技场赛季奖励	参数:开始时间_结束时间_名次
	MailType_TowerFirstReward_Score					= 81;//对战塔积分补发
	MailType_Privilege_Compensation					= 82;//特权卡补偿邮件
	MailType_Activity_ChargeAmount					= 83;//累充未领邮件
	MailType_ActivityBoss							= 84;//活动boss伤害排名 参数:名次
}
//-------------------------------------------------------------
//------------------------------ 邮件状态
enum _emMailState
{
	MailState_NoRead			= 0; // 未读
	MailState_Readed			= 1; // 已读 
	MailState_Reward			= 2; // 已领
	MailState_Delete			= 3; // 已领
	
	//后台邮件状态
	MAILSTATE_SUCCESS	=	8;		//发送成功
	MAILSTATE_FAIL		=	16;		//发送失败
	MAILSTATE_READED	=	32;		//已读
	MAILSTATE_REWARD	=	64;		//已领取附件
	MAILSTATE_DEL		=	128;	//已删除
}

//-------------------------------------------------------------
//------------------------------ 邮件操作
enum _emMailOpt
{
	MailOpt_Add			= 0;		// 增加邮件
	MailOpt_Reward		= 1;		// 已领取附件
	MailOpt_Del			= 2;		// 删除邮件
}

//------------------------------ 广播的频道
enum _emBroadcast_Channel
{
	BroadcastChannel_World					= 1;//世界(属于指定服务器的玩家)
	BroadcastChannel_Player					= 2;//私聊
	BroadcastChannel_Faction				= 3;//帮会
	BroadcastChannel_Team					= 4;//队伍
	BroadcastChannel_System					= 5;//系统
	BroadcastChannel_Cross					= 6;//跨服
	BroadcastChannel_Province				= 7;//同省
	BroadcastChannel_Notice					= 8;//跑马灯
};
//-------------------------------------------------------------
//------------------------------  排行榜类型
enum _emTopListType
{
	TopListType_Hook				= 1; // 个人剧情进度
	TopListType_Train1				= 2; // 试练塔
	TopListType_Faction				= 3; // 公会
	TopListType_Challenge			= 4; // 竞技场
	TopListType_Figthpower			= 5; // 个人战力
	TopListType_Element				= 6; // 元素神殿
	TopListType_Risk				= 7; // 神界冒险
	TopListType_Endless				= 8; // 无尽试炼
	TopListType_PlayerLevel			= 9; // 玩家等级
	TopListType_Champion			= 10; //冠军赛
	TopListType_ClickGold			= 11;// 点石成金
	TopListType_Sail				= 12;// 远航
	TopListType_Expedition			= 13;// 远征
	TopListType_Raid				= 14;// 快速战斗
	TopListType_RiskCount			= 15;// 神界冒险次数排行
	TopListType_HeavenStar			= 16;// 天界副本星星
	TopListType_Fans				= 17;// 粉丝排行
	TopListType_PeakDay1			= 18;// 巅峰挑战第一天
	TopListType_PeakDay2			= 19;// 巅峰挑战第二天
	TopListType_PeakDay3			= 20;// 巅峰挑战第三天
	TopListType_PeakDay4			= 21;// 巅峰挑战第四天
	TopListType_PeakDay5			= 22;// 巅峰挑战第五天
	TopListType_AcitivtyHero		= 23;// 活动英雄榜
	TopListType_AcitivtyLevel		= 24;// 活动等级榜
	TopListType_AcitivtyPower		= 25;// 活动战力榜
	TopListType_AcitivtyEquip		= 26;// 活动装备榜
	TopListType_AcitivtyCharge		= 27;// 活动充值榜
	TopListType_AcitivtyHeroLevelup	= 28;// 活动英雄等级榜
	TopListType_Train2				= 29; // 试练塔
	TopListType_Guess				= 30; // 猜猜猜榜单
	TopListType_JoyousLinkup		= 31; // 连连看榜单
	TopListType_AcitivtyIllustration	= 32;// 活动图鉴积分单服榜
	TopListType_AcitivtyStarUp		= 33;// 活动英雄星级榜
	TopListType_AcitivtyBoss		= 34;// 活动boss伤害榜

	TopListType_MergerStarUp		= 41;// 合服星级榜
	TopListType_MergerCharge		= 42;// 合服充值榜
	TopListType_MergerHero			= 43;// 合服抽卡榜

	TopListType_BWBegin				= 50; // 跨服开始
	TopListType_BWFigthpower		= 51; // 跨服个人战力
	TopListType_BWFaction			= 52; // 跨服公会
	TopListType_BWLadder			= 53; // 跨服天梯
	TopListType_BWFctionWar			= 54; // 跨服公会战
	TopListType_BWChallenge			= 55; // 跨服竞技场
	TopListType_BWWeekChampion		= 56; // 周冠军赛
	TopListType_CrossAcitivtyHero		= 61;// 跨服活动抽卡榜
	TopListType_CrossAcitivtyPower		= 62;// 跨服活动战力榜
	TopListType_CrossAcitivtyIllustration	= 63;// 跨服活动图鉴积分榜
	TopListType_CrossAcitivtyStarUp			= 64;// 跨服活动升星积分榜
};
//-------------------------------------------------------------
//------------------------------伙伴种族
enum _emPetType
{
	PetType_Water				= 1;//水
	PetType_Fire				= 2;//火
	PetType_Wind				= 3;//风
	PetType_Sun					= 4;//太阳
	PetType_Moon				= 5;//月亮
};
//-------------------------------------------------------------
//------------------------------伙伴职业
enum _emPetJobType
{
	PetJobType_Tanke				= 1;//坦克
	PetJobType_Zhanshi				= 2;//战士
	PetJobType_Fashi				= 3;//法师
	PetJobType_FuZhu				= 4;//辅助
};
//-------------------------------------------------------------
//------------------------------公会属性
enum _emFactionPVPSkillType
{
	FactionPVPSkillType_Attr				= 1;//属性
	FactionPVPSkillType_Passive				= 2;//被动技能
};
//-------------------------------------------------------------
//------------------------------buff类型
enum _emBuffType
{
	BuffType_AddAttri				= 1;//加属性			属性类型_属性值(可为负数)_属性万分比(可为负数)
	BuffType_AddState				= 2;//加状态			状态ID _emBuffControlType
	BuffType_ContinueAddExpend		= 3;//持续加消耗		加消耗  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数)
	BuffType_ShareDamage			= 4;//所有带有buff的一起分担伤害			伤害万分比
	BuffType_MagicDamage			= 5;//法术反噬			施法者属性ID_施法者属性万分比
	BuffType_PDamageAddBuff			= 6;//受物理攻击加buff	概率万分比_buffid
	BuffType_AddCureShield			= 7;//增加治疗护盾	
	BuffType_AddShield				= 8;//增加护盾			施法者属性ID_施法者属性万分比
	BuffType_ReboundDamage			= 9;//反弹伤害			伤害万分比
	BuffType_GetTargetAttr			= 10;//偷取目标的属性	施法者属性ID_施法者属性万分比
	BuffType_BeAttackDelHp			= 11;//被攻击掉血		施法者属性ID_施法者属性万分比
	BuffType_ContinueDelHp			= 12;//持续掉血			自己属性ID_自己属性万分比_最大自己属性ID_最大自己属性万分比
	BuffType_ResistDamage			= 13;//抵挡伤害			次数
	BuffType_DelLayerDamage			= 14;//buff删除掉血		消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数)
	BuffType_DamageLimit			= 15;//伤害限制			属性类型_属性万分比
	BuffType_NoramlSkillTarget		= 16;//普攻选目标		_emSkillCondition_参数1
	BuffType_DamageAddHp			= 17;//攻击吸血			伤害万分比
	BuffType_ProtectDamage			= 18;//只和加buff的人分担伤害	伤害万分比
};

//-------------------------------------------------------------
//------------------------------ 有益类型
enum _emBuffEffectType
{
	BuffEffectType_Useful			= 1;//正面
	BuffEffectType_Harmful			= 2;//负面非控制
	BuffEffectType_Endless			= 3;//负面完全可驱散（不检测Mark驱散标记）
	BuffEffectType_HarmfulControl	= 4;//负面控制
};
//-------------------------------------------------------------
//-----------------------------Buff控制类型
enum _emBuffControlType
{
	BuffControl_Bingdong				= 1;//冰冻 无法行动
	BuffControl_Xuanyun					= 2;//眩晕 无法行动
	BuffControl_Chenshui				= 3;//沉睡 无法行动
	BuffControl_NoFuhuo					= 4;//禁止复活 无法行动
	BuffControl_Chaofeng				= 5;//嘲讽
	BuffControl_Xuruo					= 6;//虚弱
	BuffControl_Hunluan					= 7;//混乱状态
	BuffControl_Shihua					= 8;//石化
	BuffControl_Lijian					= 9;//离间
	BuffControl_Mabi					= 10;//麻痹
	BuffControl_Fengying				= 11;//封印
	BuffControl_Jinliao					= 12;//禁疗
	BuffControl_Mianyi					= 13;//免疫
	BuffControl_Liuxue					= 14;//流血
	BuffControl_Zhuoshao				= 15;//灼烧
	BuffControl_Zhongdu					= 16;//中毒
	BuffControl_Pojia					= 17;//破甲
	BuffControl_Jiansu					= 18;//减速
	BuffControl_Jiasu					= 19;//速度提升
	BuffControl_Gedangdun				= 20;//格挡盾
	BuffControl_Fashufanshi				= 21;//法术反噬
	BuffControl_Haishebihu				= 22;//海蛇庇护
	BuffControl_Chixuhuifu				= 23;//持续恢复
	BuffControl_Zhiliaodun				= 24;//治疗盾
	BuffControl_Hudun					= 25;//护盾
	BuffControl_Lieyanzhuoshao			= 26;//烈焰灼烧
	BuffControl_Chenmo					= 27;//沉默
	BuffControl_Touqugongji				= 28;//偷取攻击
	BuffControl_Mohua					= 29;//魔化
	BuffControl_Senlinyinji				= 30;//森林印记
	BuffControl_Gandian					= 31;//感电
	BuffControl_Zuzhou					= 32;//诅咒
	BuffControl_Siwangyinji				= 33;//死亡印记
	BuffControl_Linghunyinji			= 34;//灵魂印记
	BuffControl_Nuqi					= 35;//怒气
	BuffControl_NoControl				= 36;//免疫控制
	BuffControl_NoHarmEffect			= 37;//免疫负面效果
};
//------------------------------------------------------------------------------
//------------------------------------- BUFF不同来源叠加类型
enum _emBuffDiffRepeatType
{
	BuffDiffRepeatType_Drop			= 1;//丢弃
	BuffDiffRepeatType_Refresh		= 2;//替换
	BuffDiffRepeatType_Save			= 3;//共存
};
//------------------------------------------------------------------------------
//------------------------------------- BUFF相同来源叠加类型
enum _emBuffSameRepeatType
{
	BuffSameRepeatType_Drop			= 1;//丢弃
	BuffSameRepeatType_Refresh		= 2;//替换
	BuffSameRepeatType_AddRound		= 3;//叠加回合
};
//------------------------------------------------------------------------------
//------------------------------------- BUFF删除条件
enum _emBuffDelCondition
{
	BuffDelCondition_BeAttack			= 1;//被攻击 参数1:次数_概率万分比
	BuffDelCondition_Effect				= 2;//生效立即删除
};
//------------------------------------------------------------------------------
//------------------------------------- BUFF删除触发
enum _emBuffDelAction
{
	BuffDelAction_SourceUseSkill		= 1;//源头使用技能 技能ID
};
//------------------------------------------------------------------------------
//------------------------------------- BUFF掩码
enum _emBuffMark
{
	BuffMark_NoClear			= 1;//不可驱散
	BuffMark_DeadNoDel			= 2;//死亡是否不删除
	BuffMark_DeadCanAdd			= 3;//死亡可以加
};
//-------------------------------------------------------------
//------------------------------技能顺序类型
enum _emSkillOrderType
{
	SkillOrderType_Damage			= 1;//伤害
	SkillOrderType_Cure				= 2;//治疗
	SkillOrderType_AddTarBuff		= 3;//给目标加buff
	SkillOrderType_AddSelfBuff		= 4;//给自己加buff
	SkillOrderType_ClearEffectBuff	= 5;//驱散	 	参数:概率_效果类型1_个数1(0表示所有)_效果类型2_个数2_..._效果类型n_个数n
	SkillOrderType_FightBack		= 6;//反击	 	参数:概率_取自身属性类型_属性万分比
	SkillOrderType_SelfCure			= 7;//给自己治疗
	SkillOrderType_AddDamageHp		= 8;//回复上一次伤害生命 参数:万分比
	SkillOrderType_DelBuffState		= 9;//删除状态buff 参数:状态ID
	SkillOrderType_RealDamge		= 10;//真实伤害
	SkillOrderType_UseLastDamage	= 11;//使用上一次伤害
	SkillOrderType_PercentDamage	= 12;//百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比
	SkillOrderType_AddTotalDamageHp	= 13;//回复上一次伤害生命 参数:万分比
	SkillOrderType_DamageBackBySelf			= 14;//依据自身属性反伤  参数：概率_取自身属性类型_属性万分比 
	SkillOrderType_DamageBackByBeInjured		= 15;//依据受到伤害反伤  参数：概率_万分比  
	SkillOrderType_PetTypeCount		= 16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)
	SkillOrderType_CopyBuffer		= 17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大）
};
//-------------------------------------------------------------
//------------------------------技能类型
enum _emSkillType
{
	SkillType_Passive			=	1;//被动技能
	SkillType_Normal			=	2;//普攻
	SkillType_Skill				=	3;//主动技能
};
//-------------------------------------------------------------
//------------------------------技能掩码类型
enum _emSkillMaskType
{
	SkillMaskType_IgnorSelf			=	1;//是否忽略自己
	SkillMaskType_UseDamageCount	=	2;//是否继承伤害次数
	SkillMaskType_SelectDead		=	3;//是否选择死亡角色
	SkillMaskType_AddBuffIgorSelf	=	4;//是否不给自己加buff
	SkillMaskType_UseLastTarget		=	5;//是否继承目标
	SkillMaskType_IsDelayUse		=	6;//是否延时释放
	SkillMaskType_EndlessContinue	=	7;//是否无尽试炼连续释放
	SkillMaskType_DelayOneTime		=	8;//是否延时技能只能放一次
	SkillMaskType_LastDamage		=	9;//是否使用上一次伤害
	SkillMaskType_CampCriticalDamage=	10;//是否使用上一次暴击伤害
	SkillMaskType_AddBuffNextRound	=	11;//增加buff下一回合生效
	SkillMaskType_FirstUseSkill		=	12;//优先技能，必定最先释放，无视控制技能
};
//-------------------------------------------------------------
//------------------------------技能目标条件类型
enum _emSkillTarCondition
{
	SkillTarCondition_PetType			=	1;//职业 参数 职业类型_emPetJobType
	SkillTarCondition_State				=	2;//状态 参数: 状态1_状态2
};
//-------------------------------------------------------------
//------------------------------技能buff条件类型
enum _emSkillBuffCondition
{
	SkillBuffCondition_PetType			=	1;//职业 参数 职业类型_emPetJobType_buff额外万分比
	SkillBuffCondition_State			=	2;//状态 参数: 状态1_状态2
	SkillBuffCondition_Dead				=	3;//死亡
	SkillBuffCondition_Critical			=	4;//暴击
	SkillBuffCondition_LowAttr			=	5;//属性低于自身  属性类型_buff概率万分比
	SkillBuffCondition_StateAddBuffRate	=	6;//状态提升概率  状态1_buff概率万分比
	SkillBuffCondition_RandBuffCount	=	7;//buff随机个数  个数
	SkillBuffCondition_DownHp			=	8;//生命值低于万分比 万分比
	SkillBuffCondition_UsePetType		=	9;//选择职业 参数 职业类型1_职业类型2....
	SkillBuffCondition_RandBuff			=	10;//buff权重随机个数  个数
};
//-------------------------------------------------------------
//------------------------------技能额外伤害条件
enum _emSkillExtraCondition
{
	SkillExtraCondition_PetType			=	1;//职业 职业类型_万分比
	SkillExtraCondition_State			=	2;//状态 万分比_状态1_状态2(BuffControlType)
	SkillExtraCondition_EffectType		=	3;//正负面效果 效果(_emBuffEffectType)_万分比
	SkillExtraCondition_Radio			=	4;//概率提升 概率万分比_万分比
	SkillExtraCondition_LowAttr			=	5;//属性低于自身  属性类型_万分比
	SkillExtraCondition_UpHp			=	6;//生命值高于  	生命万分比_万分比
	SkillExtraCondition_DownHp			=	7;//生命值低于  	生命万分比_万分比
	SkillExtraCondition_TarAttrDamage	=	8;//目标属性伤害  属性类型_万分比_限制属性类型_限制万分比
	SkillExtraCondition_NormalSkill		=	9;//普攻触发  	 万分比
	SkillExtraCondition_TarEffectType	=	10;//目标效果个数  	效果(_emBuffEffectType)_万分比
	SkillExtraCondition_LeftHpDamage	=	11;//损失血量万分比伤害  万分比
	SkillExtraCondition_TarPetTypeDamage=	12;//职业伤害值  职业类型_取目标属性类型_万分比_限制自身属性类型_限制万分比
	
};
//-------------------------------------------------------------
//------------------------------技能临时属性类型
enum _emSkillAttrCondition
{	
	SkillAttrCondition_State				=	1;//状态或加属性 			属性类型_属性值_万分比_状态1(BuffControlType)_状态2 
	SkillAttrCondition_UpHp					=	2;//血量高于百分比 			百分比_属性类型_属性值_万分比
	SkillAttrCondition_AddAttr				=	3;//临时加属性 				属性类型_属性值_万分比
	SkillAttrCondition_LowHp				=	4;//血量低于百分比 			百分比_属性类型_属性值_万分比
	SkillAttrCondition_Job					=	5;//职业加临时数据 			职业_属性类型_属性值_万分比
	SkillAttrCondition_FirstAttack			=	6;//最先出手  				属性类型1_属性值1_万分比1_属性类型2_属性值2_万分比2。
	SkillAttrCondition_HpDownAttrUp			= 	7;//血量降低x%,属性提高y%	 属性类型_血量降低万分比_提高值
	SkillAttrCondition_HasSkillAttrUp		= 	8;//对方有技能xxx属性提高	 属性类型_属性提高值_技能ID_技能ID_ ...
	SkillAttrCondition_HasSkillAttrDown		= 	9;//对方有技能xxx属性降低	 属性类型_属性降低值_技能ID_技能ID_ ...
	SkillAttrCondition_IgnoreDef			= 	10;//无视防御				无视防御万分比
};
//-------------------------------------------------------------
//------------------------------技能特殊类型
enum _emSkillCommonCondition
{
	SkillCommonCondition_StateAddCure			=	1;//状态增加治疗 万分比_状态ID 若目标处于【流血】状态，则回复自身等同伤害量40%的生命值
	SkillCommonCondition_HpAddCure				=	2;//血量低于加治疗效果 万分比_加治疗效果万分比
	SkillCommonCondition_ClearAddHpDamage		=	3;//驱散增加生命上限伤害 驱散个数_生命上限万分比
	SkillCommonCondition_DanKill				=	4;//技能段斩杀  段ID_生命万分比_不超过自身属性_不超过自身属性万分比
	SkillCommonCondition_ExtraTargetCount		=	5;//额外技能目标个数  概率_个数
	SkillCommonCondition_LastDamageAddShief		=	6;//使用上一次总伤害加护盾  万分比
	SkillCommonCondition_HPAddShief				=	7;//使用HP加护盾  HP的万分比
	SkillCommonCondition_BuffLayerAddDamageCount= 	8;//状态层数加次数 参数:stateid_buff层数_最大次数
	SkillCommonCondition_LimitDamage			= 	9;//限制伤害 最大值_最小值
	SkillCommonCondition_HealAddShief			= 	10;//使用上一次治疗量加护盾  万分比
	SkillCommonCondition_DamageShare			=   11;//伤害均摊
};
//-------------------------------------------------------------
//------------------------------附加伤害
enum _emSkillAddDamageCondition
{
	SkillAddDamageCondition_TarAttr		=	1;//目标属性类型_目标属性万分比_自身属性类型_自身属性最大万分比
};
//-------------------------------------------------------------
//------------------------------伤害记录
enum _emSkillDamageRecord
{
	SkillDamageRecord_LastDamage			=	1;//上一次技能伤害
	SkillDamageRecord_CampCriticalDamage	=	2;//上一次队伍暴击伤害
	SkillDamageRecord_LowAttack				=	3;//降低攻击万分比
	SkillDamageRecord_LastTotalDamage		=	4;//上一次伤害总量
	SkillDamageRecord_ReduceDamageRate		=	5;//降低伤害万分比
	SkillDamageRecord_ReduceControlRate		=	6;//降低控制万分比
	SkillDamageRecord_Combo					=	7;//是否时连击
	SkillDamageRecord_IgnoreDef				=	8;//无视防御
	DelayUseSkillParam_Combo				= 	9;//连击
    DelayUseSkillParam_Reattack				= 	10;//追击
	SkillDamageRecord_LastHeal				=	11;//上次被治疗的量
	SkillDamageRecord_LastToalBeInjured			=   12;//上次受到总伤害伤害
};
//-------------------------------------------------------------
//------------------------------技能触发类型
enum _emSkillTriggerType
{
	SkillTriggerType_BeAttack				= 1;//被攻击触发 
	SkillTriggerType_ExtraDamage			= 2;//额外伤害	
	SkillTriggerType_UseSkill				= 3;//使用技能触发(继承技能目标) 参数 技能ID(0表示所有技能)
	SkillTriggerType_Round					= 4;//回合数触发 参数:回合1_回合2;(2_0表示第二回合后每回合)
	SkillTriggerType_Attack					= 5;//攻击触发
	SkillTriggerType_EnhanceBuffType		= 6;//自己buff状态加强 参数:buff类型_万分比
	SkillTriggerType_BeginRoundHpAddBuff	= 7;//每回合开始血量加buff 参数:血量百分比_不低于加buff_低于加buff;
	SkillTriggerType_UseSkillIgnorTar		= 8;//使用技能触发(忽略技能目标) 参数:技能ID(0表示所有技能)
	SkillTriggerType_RandOrSkill			= 9;//随机或技能 技能1_技能2
	SkillTriggerType_Dead					= 10;//死亡触发复活
	SkillTriggerType_CriticalCamp			= 11;//队伍暴击 参数:万分比
	SkillTriggerType_Hp						= 12;//生命触发 生命百分比
	SkillTriggerType_FriendState			= 13;//队伍状态额外伤害 参数:取属性类型_属性万分比_状态1_状态2
	SkillTriggerType_RandAndSkill			= 14;//随机与技能 概率1_技能1_概率2_技能2
	SkillTriggerType_KillUseLastSkill		= 15;//击杀目标触发使用上一个技能 参数:攻击力万分比
	SkillTriggerType_LowAttrAddSelfAttr		= 16;//目标属性对比加自身属性	参数:属性类型_低于加属性类型_低于加属性类型万分比__高于加属性类型_高于加属性类型万分比
	SkillTriggerType_Kill					= 17;//击杀目标触发 参数:技能ID
	SkillTriggerType_NormalAttack			= 18;//普通攻击触发
	SkillTriggerType_TeamDead				= 19;//队伍死亡触发 参数:状态（0无状态）
	SkillTriggerType_KillBySkill			= 20;//被技能击杀目标,攻击力减少 参数:技能ID_攻击力万分比
	SkillTriggerType_EnemyStateDead			= 21;//携带状态敌方死亡 参数:状态ID
	SkillTriggerType_SkillGroup				= 22;//技能组合(走子技能CD) 参数:技能ID1_技能ID2
	SkillTriggerType_PhsicalAttack			= 23;//物理攻击触发 
	SkillTriggerType_MagicalAttack			= 24;//法术攻击触发 
	SkillTriggerType_PhsicalAttackCombo		= 25;//物理攻击触发连击 参数：伤害降低_控制降低
	SkillTriggerType_MagicalAttackCombo		= 26;//法术攻击触发连击 参数：伤害降低_控制降低
	SkillTriggerType_KillReattack			= 27;//物理攻击击杀之后追加普攻
	SkillTriggerType_CriticalReattack		= 28;//物理攻击暴击之后追加普攻
	SkillTriggerType_Revive					= 29;//复活触发
	SkillTriggerType_DamagePercent			= 30;//伤害超过目标生命值多少触发 参数：伤害万分比
	SkillTriggerType_SelfHeal				= 31;//自己使用治疗触发
	SkillTriggerType_UseExtraLastSkill		= 32;//使用额外技能斩击触发 参数:技能ID
	SkillTriggerType_Critical				= 33;//自己暴击触发
};
//-------------------------------------------------------------
//------------------------------技能范围类型类型
enum _emSkillRangeType
{
	SkillRangeType_Single			= 1;	//对位单体
	SkillRangeType_All				= 2;	//全体
	SkillRangeType_Row1				= 3;	//前排
	SkillRangeType_Row2				= 4;	//中排
	SkillRangeType_Row3				= 5;	//后排
	SkillRangeType_Row12			= 6;	//前中排
	SkillRangeType_Row13			= 7;	//前后排
	SkillRangeType_Row23			= 8;	//中后排
	SkillRangeType_RandRow			= 9;	//随机横排
	SkillRangeType_Colume1			= 10;	//上列
	SkillRangeType_Colume2			= 11;	//中列
	SkillRangeType_Colume3			= 12;	//下列	
	SkillRangeType_RandColume		= 13;	//随机列	
	SkillRangeType_Colume			= 14;	//对位列
	SkillRangeType_MaxHp			= 15;	//最大血量
	SkillRangeType_MinHp			= 16;	//最小血量
	SkillRangeType_MaxAttack		= 17;	//攻击最高
	SkillRangeType_MinAttack		= 18;	//攻击最低
	SkillRangeType_MaxSpeed			= 19;	//速度最高
	SkillRangeType_MinSpeed			= 20;	//速度最低
	SkillRangeType_MaxDefense		= 21;	//防御最高
	SkillRangeType_MinDefense		= 22;	//防御最低
	SkillRangeType_Rand				= 23;	//随机
	SkillRangeType_MaxColume		= 24;	//人数最多的一列
};
//-------------------------------------------------------------
//------------------------------技能目标类型
enum _emSkillTargetType
{
	SkillTargetType_Enermy			= 0;//敌方
	SkillTargetType_Friend			= 1;//友方
	SkillTargetType_Self			= 2;//自己
	SkillTargetType_All				= 3;//所有
};
//-------------------------------------------------------------
//------------------------------ 战场类型
enum _emBattleType
{
	BattleType_Hook					= 1;//挂机BOSS
	BattleType_Tower				= 2;//试练塔
	BattleType_Copymap				= 3;//日常副本
	BattleType_Endless				= 4;//无尽试炼
	BattleType_Challenge			= 5;//竞技场
	BattleType_Temple				= 6;//星河神殿	
	BattleType_FactionCopymap		= 7;//公会副本
	BattleType_FactionWar			= 8;//公会战
	BattleType_Expedition			= 9;//英雄远征
	BattleType_Element				= 10;//元素神殿
	BattleType_Risk					= 11;//神界冒险
	BattleType_Dan					= 12;//超凡段位赛
	BattleType_Ladder				= 13;//跨服天梯赛
	BattleType_Champion				= 14;//冠军赛
	BattleType_WeekChampion			= 15;//周冠军赛
	BattleType_HeavenDungeon		= 16;//天界副本
	BattleType_FightEachOther		= 17;//切磋 id填切磋目标playerid，param填目标worldid
	BattleType_DanKing				= 18;//超凡段位赛王者赛
	BattleType_CrossChallege		= 19;//跨服竞技场  id填切磋目标player id，param填是否机器人
	BattleType_TeamCampaign		    = 20;//组队征战  id 关卡index, param 阵容index
	BattleType_Peak		    		= 21;//巅峰挑战 id 第几天
	BattleType_Tower2				= 22;//试练塔2
	BattleType_ActivityBoss			= 23;//活动boss
};
//-------------------------------------------------------------
//------------------------------ 技能攻击类型
enum _emSkillAttackType
{
	SkillAttackType_None		= 0; // 无类型
	SkillAttackType_Physical 	= 1; // 物理攻击
	SkillAttackType_Magical		= 2; // 法术攻击
};
//-------------------------------------------------------------
//------------------------------ 帮会职位
enum _emFactionJob
{
	FactionJob_Unknown		= 0;
	FactionJob_Leader		= 1;	// 帮主
	FactionJob_Deputy		= 2;	// 副帮主
	FactionJob_People		= 3;	// 普通会员
};
//-------------------------------------------------------------
//------------------------------ 权限
enum _emFactionPrivilege
{
	FactionPrivilege_AgreeApply		= 1;	// 批准审批
	FactionPrivilege_SetJob			= 2;	// 职位任免
	FactionPrivilege_Remove			= 3;	// 踢出帮会
	FactionPrivilege_Edit			= 4;	// 修改公告
	FactionPrivilege_Name			= 5;	// 修改帮名
	FactionPrivilege_War			= 6;	// 帮战报名
};
//-------------------------------------------------------------
//------------------------------ 帮会数据类型
enum _emFactionDataType 
{
  _FactionData_Base		= 0;	//基础信息
  _FactionData_Copymap	= 1;	//副本数据
  _FactionData_Events	= 2;	//帮会事件
};
//-------------------------------------------------------------
//------------------------------ 阵法类型
enum _emZhenfaType 
{
	ZhenfaType_Zhuxian				= 1;	//主线剧情
	ZhenfaType_Jingjichang			= 2;	//竞技场防守
	ZhenfaType_Guanjun				= 3;	//冠军赛防守
	ZhenfaType_Tianti				= 4;	//天梯赛防守
	ZhenfaType_Duanwei				= 5;	//段位赛防守1
	ZhenfaType_Duanwei2				= 6;	//段位赛防守2

	ZhenfaType_Tower				= 10;	//试练塔阵法
	ZhenfaType_Heaven1				= 11;	//天界副本队伍1
	ZhenfaType_Heaven2				= 12;	//天界副本队伍2
	ZhenfaType_Endless				= 13;	//无尽试炼队伍
	ZhenfaType_Expedition			= 14;	//远征队伍
	ZhenfaType_CrossChallengeDEF1	= 15;	//跨服竞技场防守队伍1
	ZhenfaType_CrossChallengeDEF2	= 16;	//跨服竞技场防守队伍2
	ZhenfaType_CrossChallengeDEF3	= 17;	//跨服竞技场防守队伍3
	ZhenfaType_WeekChampion			= 18;	//周冠军赛
    ZhenfaType_TeamCampaign         = 19;   //组队征战
	ZhenfaType_CrossChallengeATK1	= 20;	//跨服竞技场进攻队伍1
	ZhenfaType_CrossChallengeATK2	= 21;	//跨服竞技场进攻队伍2
	ZhenfaType_CrossChallengeATK3	= 22;	//跨服竞技场进攻队伍3
};
//-------------------------------------------------------------
//------------------------------ 位置类型
enum _emPosType
{
	PosType_1		= 1;	//位置1
	PosType_2		= 2;	//位置2
	PosType_3		= 3;	//位置3
	PosType_4		= 4;	//位置4
};
//-------------------------------------------------------------
//------------------------------ 伙伴召唤类型
enum _emPetCallType 
{
	PetCallType_Normal		= 1;	//基础召唤
	PetCallType_FriendShip	= 2;	//友情召唤
	PetCallType_Advance		= 3;	//高级召唤
	PetCallType_CallPoint	= 4;	//积分召唤
	PetCallType_Water		= 5;	//先知水召唤
	PetCallType_Fire		= 6;	//先知火召唤
	PetCallType_Wind		= 7;	//先知风召唤
	PetCallType_SunMoon		= 8;	//先知光暗召唤
};
//-------------------------------------------------------------
//------------------------------ 远航类型
enum _emSailType 
{
	SailType_Putong		= 1;	//普通
	SailType_Jingliang	= 2;	//精良
	SailType_Xiyou		= 3;	//稀有
	SailType_Shishi		= 4;	//史诗
	SailType_Chuanshuo	= 5;	//传说
	SailType_Buxiu		= 6;	//不朽
};
//-------------------------------------------------------------
//------------------------------ 成就大类型
enum _emAchieveBigType 
{
	AchieveBigType_Main					= 1;	//主线成就
	AchieveBigType_Daily				= 2;	//每日活跃
	AchieveBigType_Faction				= 3;	//公会成就
	AchieveBigType_Artifact				= 4;	//神器成就
	AchieveBigType_Train				= 5;	//历练成就
	AchieveBigType_Activity				= 6;	//活动活跃
	AchieveBigType_Invite				= 7;	//邀请码
	AchieveBigType_Artifact_Activity	= 8;	//元灵觉醒活动
	AchieveBigType_SonOfDestiny			= 9;	//天命之子活动
	AchieveBigType_Weekly				= 10;	//每周活跃
	AchieveBigType_Gift					= 11;	//礼包
	AchieveBigType_WarOrder				= 12;	//战令任务
	AchieveBigType_Illustration			= 13;	//图鉴激活成就
	AchieveBigType_IllustrationPowe		= 14;	//图鉴战力成就
	AchieveBigType_AchieveRoad			= 15;	//成就之路
};
//-------------------------------------------------------------
//------------------------------ 重置类型
enum _emTimeResetType 
{
	TimeResetType_None		= 0;	//不重置
	TimeResetType_Daily		= 1;	//日重置
	TimeResetType_Week		= 2;	//周重置
	TimeResetType_Month		= 3;	//月重置
	TimeResetType_ServerDay	= 4;	//开服天数
};
//-------------------------------------------------------------
//------------------------------ 成就历练类型
enum _emAchieveTrainType 
{
	AchieveTrainType_PVP		= 1;//竞技历练
	AchieveTrainType_Battle		= 2;//战斗历练
	AchieveTrainType_Specail	= 3;//特殊历练
};
//-------------------------------------------------------------
//------------------------------ 成就类型
enum _emAchieveType 
{

	AchieveType_DailyLogin			= 1;	//日常登录
	AchieveType_GiveFriendPoint		= 2;	//赠送友情点
	AchieveType_PetCall				= 3;	//伙伴召唤
	AchieveType_ChallengeFight		= 4;	//竞技场挑战次数
	AchieveType_SweepHook			= 5;	//快速挑战次数
	AchieveType_TowerWin			= 6;	//试练塔成功次数
	AchieveType_FactionBoss			= 7;	//公会boss挑战次数
	AchieveType_FactionDonate		= 8;	//公会捐献次数
	AchieveType_Endless				= 9;	//参与一次无尽试炼
	AchieveType_AccpetSail			= 10;	//接取远航订单
	AchieveType_DailyCopymap		= 11;	//日常副本
	AchieveType_Expedition			= 12;	//远征胜利
	
	AchieveType_PlayerLevel			= 13;	//等级达到
	AchieveType_AddEquip			= 14;	//获得X颜色装备
	AchieveType_AddPet				= 15;	//获得X星英雄
	AchieveType_ChallengePoint		= 16;	//竞技场积分
	AchieveType_CompauseRune		= 17;	//符文合成
	AchieveType_XianzhiCall			= 18;	//先知召唤
	AchieveType_AccpetSailType		= 19;	//接取X颜色远航订单
	AchieveType_FactionBossKill		= 20;	//公会boss击杀次数
	AchieveType_ChallengRank1		= 21;	//竞技场排名达到第一名
	AchieveType_ChallengRank2		= 22;	//竞技场排名达到第二名
	AchieveType_ChallengRank3		= 23;	//竞技场排名达到第三名
	AchieveType_PetLevel			= 24;	//X个英雄达到Y级
	AchieveType_FriendCount			= 25;	//拥有X个好友
	AchieveType_ExpeditionStage		= 26;	//英雄远征通关第X关
	AchieveType_JoinFaction			= 27;	//加入公会
	AchieveType_PetSplit			= 28;	//献祭X个英雄
	AchieveType_Fightpower			= 29;	//战力达到X
	AchieveType_TempleFight			= 30;	//参与1次星河神殿
	AchieveType_ChallengRankDown	= 31;	//竞技场排名达到前多少名
	AchieveType_HookStage			= 32;	//通关挂机关卡X关
	AchieveType_AdvancePetCall		= 33;	//进行X次高级召唤
	AchieveType_ShopBuyCount		= 34;	//X商店购买X次
	AchieveType_TowerStage			= 35;	//试练塔通关X关
	AchieveType_PetCompoundCount	= 36;	//合成X星英雄X次
	AchieveType_DanStage			= 37;	//超凡段位赛达到X段位
	AchieveType_Charge				= 38;	//累充x毛
	AchieveType_CompleteSailType	= 39;	//完成X颜色以上的远航订单
	AchieveType_PvpFightpowerWin	= 40;	//PVP中跨战力战胜对手
	AchieveType_PvpFullHpWinHigh	= 41;	//PVP中满血战胜高于自身的玩家
	AchieveType_PvpMoshenDizze		= 42;	//PVP中累计用魔神之锤眩晕敌人次数
	AchieveType_PvpShenyouOneFight	= 43;	//PVP中单场战斗触发保命/神佑
	AchieveType_PvpReliveOneFight	= 44;	//PVP中单场战斗复活X位英雄
	AchieveType_PvpDodgeOneFight	= 45;	//PVP中单场战斗触发X次闪避
	AchieveType_PvpDamagePet		= 46;	//PVP中任意英雄单场伤害量达到X万
	AchieveType_PvpCurePet			= 47;	//PVP中任意英雄单场治疗量达到x万
	AchieveType_PvpArtifactKill		= 48;	//PVP中使用神器累计达到100次
	AchieveType_SailRefresh			= 49;	//远航刷新x次
	AchieveType_ArtifactNum			= 50;	//解锁神器x件
	AchieveType_ArtifactLevel		= 51;	//神器x达到x级
	AchieveType_EndlessStage		= 52;	//无尽试炼达到x关
	AchieveType_EndlessSentHero		= 53;	//无尽试炼派遣英雄X次
	AchieveType_Treasure			= 54;	//寻宝X次
	AchieveType_HeroAdvance			= 55;	//x个英雄达到y阶
	AchieveType_VIPLevel			= 56;	//vip等级达到x
	AchieveType_5StarPetLevel		= 57;	//x个五星英雄达到y级
	AchieveType_UnLockArtifact		= 58;	//解锁xxx元灵
	AchieveType_5StarLightDarkPet	= 59;	//获得x个五星光系，或者暗系英雄
	AchieveType_Stone				= 60;	//获得x个y级星石
	AchieveType_Risk				= 61;	//神界冒险达到x层
	AchieveType_ClickGold			= 62;	//点金多少次
	AchieveType_GotHero				= 63;	//获得id为x的英雄
	AchieveType_FactionJob			= 64;	//工会x职业等级y
	AchieveType_Card				= 65;	//获得特权卡x
	AchieveType_Achieve				= 66;	//完成成就x
	AchieveType_SonOfDestinyLogin	= 67;	//天命之子次日登陆
	AchieveType_AddRedEquip			= 68;	//获得x星红色装备
	AchieveType_ChampionGuess		= 69;	//冠军赛竞猜x次
	AchieveType_TeamCompain			= 70;	//组队征战挑战x次
	AchieveType_FactionWar			= 71;	//公会战挑战x次
	AchieveType_ForgeEquip			= 72;	//合成装备x次
	AchieveType_ChallengeWin		= 73;	//竞技场胜利x次
	AchieveType_TeamCompainStage	= 74;	//组队征战x关
	AchieveType_FactionWarWin		= 75;	//公会战胜利x次
	AchieveType_RefineRune			= 76;	//洗练星石x次
	AchieveType_Gold				= 77;	//获得金币x
	AchieveType_HeroExp				= 78;	//获得英雄经验x
	AchieveType_ChampionRank		= 79;	//冠军赛x名
	AchieveType_DailyLiveness		= 80;	//日活跃度达到x
	AchieveType_WeeklyLiveness		= 81;	//周活跃度达到x
	AchieveType_ExpendDiamond		= 82;	//消耗x钻石
	AchieveType_UpStarTimes			= 83;	//升星x次
	//AchieveType_PetEvolve			= 84;	//进化X只精灵到Y阶
	AchieveType_LotteryTimes		= 85;	//许愿模块：某类抽奖次数	_emLotteryType
	AchieveType_CallTimes			= 86;	//召唤模块：某类型xx抽卡类次数, _emPetCallType

	AchieveType_Faction_UpSkill				= 100;	//升级公会技能
	AchieveType_Faction_Donate				= 102;	//公会捐献
	AchieveType_Faction_RedPaket			= 103;	//发送任意红包
	AchieveType_Faction_CopymapProfit		= 104;	//公会副本增益加成	
	AchieveType_Illustration				= 105;	//图鉴皮肤激活x只
	AchieveType_IllustrationPower			= 106;	//图鉴加成战力达到x
};
//-------------------------------------------------------------
//------------------------------ 商店类型
enum _emShopType 
{
	ShopType_Item				= 1;	//百货-道具商店
	ShopType_Pet				= 2;	//百货-精灵商店
	ShopType_Expedition			= 3;	//百货-积分商店-狩猎
	ShopType_Challenge			= 4;	//百货-积分商店-竞技
	ShopType_Faction			= 5;	//百货-积分商店-公会
	ShopType_Grading			= 6;	//百货-积分商店-段位
	ShopType_Xianzhi			= 7;	//梦幻抽卡-梦幻商店
	ShopType_Ladder				= 8;	//跨服天梯-积分商店
	ShopType_GodSuit			= 9;	//海岛乐园-饰品商店
	ShopType_Team				= 10;	//百货-积分商店-遗迹
	ShopType_NB					= 11;	//牛X商城
	ShopType_Tower				= 12;	//百货-积分商店-对战塔
	ShopType_MasterTower 		= 13;	//百货-积分商店-大师塔
	ShopType_WeekChampion 		= 14;	//百货-积分商店-周冠赛
	ShopType_Adventure			= 20;	//神秘岛-冒险商店
	ShopType_Common				= 99;	//公共商店 客户端
	ShopType_MaxFix				= 100;	//最大固定商店
	ShopType_Treasure			= 101;	//百货-积分商店-探宝
	ShopType_Skill				= 102;	//百货-天赋商店
	ShopType_Sprite				= 103;	//喵喵购物车
	ShopType_CrossChallenge		= 110;	//百货-积分商店-跨竞
};
//-------------------------------------------------------------
//------------------------------ 商店随机类型
enum _emShopGroupRandType
{
	ShopGroupRandType_Count		= 1;	//按次数随机
	ShopGroupRandType_Rate		= 2;	//按概率随机
};
//-------------------------------------------------------------
//------------------------------ 帮派捐献类型
enum _emFactionDonateType 
{
	FactionDonateType_Gold		= 1;	//金币捐献
	FactionDonateType_Diamond	= 2;	//钻石捐献
	FactionDonateType_BigDiamond= 3;	//至尊钻石捐献
}
//-------------------------------------------------------------
//------------------------------ 远征类型
enum _emExpeditionType 
{	
	ExpeditionType_Simple		= 1;	//简单
	ExpeditionType_Difficulty	= 2;	//困难
	ExpeditionType_Hell			= 3;	//地狱
}
//-------------------------------------------------------------
//------------------------------ 神殿类型
enum _emTempleType 
{	
	TempleType_Wandian		= 1;	//万殿之巅
	TempleType_Taitan		= 2;	//泰坦神耀
	TempleType_Xingling		= 3;	//瀚海星灵
}
//-------------------------------------------------------------
//------------------------------ 世界服公共数据类型
enum _emWorldDataType 
{
	WorldDataType_Base			= 0;	//基础信息
	WorldDataType_Temple		= 1;	//神殿数据
	WorldDataType_TopList		= 2;	//排行榜数据
	WorldDataType_Activity		= 3;	//活动数据
};
//-------------------------------------------------------------
//------------------------------ 录像离线数据
enum _emVideo_Offline 
{
	Video_Offline_AddRecord		= 0;	//增加记录	PBFightResult
};
//-------------------------------------------------------------
//------------------------------ 外观离线数据
enum _emShape_Offline 
{
	Shape_Offline_DelTitle		= 0;	//删除称号	PBU32
	Shape_Offline_AddTitle		= 1;	//增加称号	PBU32
};
//-------------------------------------------------------------
//------------------------------ 跨服天梯离线数据
enum _emLadder_Offline 
{
	Ladder_Offline_AddRecord		= 0;	//增加记录	PBPlayerLadderRecord
};
//-------------------------------------------------------------
//------------------------------ 平台离线数据
enum _emPlatform_Offline 
{
	Platform_Recharge				= 0;	//充值	PBRechargeInfo
	Platform_Recharge_GM			= 1;	//模拟充值	PBRechargeInfo
};
//-------------------------------------------------------------
//------------------------------ 好友离线数据
enum _emFriend_Offline
{
	Friend_Offline_Apply			= 0;	//申请加好友	PBPlayerFriendInfo
	Friend_Offline_Add				= 1;	//增加好友		PBU32
	Friend_Offline_Del				= 2;	//删除好友		PBU32
	Friend_Offline_RecievePrize		= 3;	//接收礼物		PBU32
};
//------------------------------------------------------
//------------------------------ 角色标示
enum _emPlayerMark
{
	PlayerMark_Test	= 0;//测试
};
//-------------------------------------------------------------
//------------------------------ 系统功能 对应cs_system_switch表的id
enum _emSystemSwitchType
{
	SystemSwitch_DailyTask        	= 1;  // 日常任务
	SystemSwitch_Weapon         	= 2;  // 神器
	SystemSwitch_Trave          	= 3;  // 历练
	SystemSwitch_Faction       		= 4;  // 公会
	SystemSwitch_Library       		= 5;  // 图书馆
	SystemSwitch_Sacrifice        	= 6;  // 祭祀小屋
	SystemSwitch_Challenge        	= 7;  // 竞技场
	SystemSwitch_StarTower        	= 8;  // 试炼塔
	SystemSwitch_Risk          		= 9;  // 秘境探险--海岛探险
	SystemSwitch_CrossWar       	= 10; // 跨服战场
	SystemSwitch_Seer         		= 11; // 先知圣殿
	SystemSwitch_Element        	= 12; // 元素圣殿
	SystemSwitch_Heaven          	= 13; // 天界副本 --海岛乐园
	SystemSwitch_Heaven2        	= 14; // 天界副本--海岛乐园
	SystemSwitch_AcrossSpace      	= 15; // 跨服时空
	SystemSwitch_PetCombin       	= 16; // 融合神殿
	SystemSwitch_AcrossLadder    	= 17; // 跨服天梯
	SystemSwitch_Dan          		= 18; // 超凡段位赛
	SystemSwitch_AcrossChallenge  	= 19; // 跨服竞技场
	SystemSwitch_Sail  				= 20; // 远航
	SystemSwitch_Shop  				= 21; // 商城
	SystemSwitch_ElfShop			= 22; // 精灵商店
	SystemSwitch_Home 				= 23; // 家园
	SystemSwitch_Call  				= 24; // 召唤
	SystemSwitch_Enhance			= 25; // 锻造屋
	SystemSwitch_Signin 			= 26; // 七日登录
	SystemSwitch_WeekTarget			= 27; // 七日目标
	SystemSwitch_WeekChampion		= 28; // 周竞技场
	SystemSwitch_Hunting			= 30; //狩猎地带
	SystemSwitch_SonOfDestiny		= 39; // 天命之子
	SystemSwitch_PeakChallenge		= 40; // 巅峰挑战
	SystemSwitch_MasterStarTower	= 51; //大师对战塔
	SystemSwitch_Defend				= 60; // 守护
	SystemSwitch_ResonanceLevel		= 61; // 共鸣等级
	SystemSwitch_ResonanceStar		= 62; // 共鸣星级
};

//------------------------------------------------------
//------------------------------ 徽章类型
enum _emBadgeType
{
	BadgeType_Train			= 1;//试炼之塔
	BadgeType_Endless		= 2;//无尽试炼
	BadgeType_Expedition	= 3;//远征
	BadgeType_FactionWar	= 4;//公会战
	BadgeType_Risk			= 5;//神界冒险
	BadgeType_Champion		= 6;//冠军赛
	BadgeType_WeekChampion	= 7;//周冠军赛
	BadgeType_Element		= 8;//元素神殿
	BadgeType_Dan			= 9;//超凡段位赛
	BadgeType_Achieve		= 10;//特殊成就
	BadgeType_Specail		= 11;//特殊
};
//------------------------------------------------------
//------------------------------ 查看类型
enum _emQueryPlayerViewType
{
	QueryPlayerViewType_Main		= 1;//主界面
	QueryPlayerViewType_Info		= 2;//个人信息
	QueryPlayerViewType_Honor		= 3;//荣誉墙
	QueryPlayerViewType_Record		= 4;//成长之路
	QueryPlayerViewType_Message		= 5;//留言板
};
//------------------------------------------------------
//------------------------------ 录像类型
enum _emVideoStageType
{
	VideoStageType_Fast			= 1;//时间最快
	VideoStageType_MinFightpower= 2;//战斗力最低
	VideoStageType_Lately		= 3;//时间最近
};
//------------------------------------------------------
//------------------------------ 录像类型
enum _emVideoType
{
	VideoType_Hook				= 1;//挂机BOSS
	VideoType_Tower				= 2;//试练塔	
	VideoType_Challenge			= 3;//竞技场
	VideoType_Temple			= 4;//星河神殿	
	VideoType_FactionWar		= 5;//公会战
	VideoType_Risk				= 6;//神界冒险
	VideoType_Dan				= 7;//超凡段位赛
	VideoType_Ladder			= 8;//跨服天梯赛
	VideoType_NewPet			= 9;//新英雄集锦
	VideoType_Champion			= 10;//冠军赛
	VideoType_WeekChampion		= 11;//周冠军赛
	VideoType_WeekHot			= 12;//本周热门
	VideoType_PlayerCollect		= 13;//个人收藏
	VideoType_PlayerRecord		= 14;//个人记录
	VideoType_PlayerTower		= 15;//玩家的试练塔录像
	VideoType_PlayerQiecuo		= 16;//玩家的切磋录像
	VideoType_PlayerExpdition	= 17;//远征录像
	VideoType_Tower2			= 18;//试练塔2
}
//------------------------------------------------------
//------------------------------ 录像存储类型
enum _emVideoSaveType
{
	VideoSaveType_System			= 1;//系统
	VideoSaveType_Player			= 2;//个人
	VideoSaveType_All				= 3;//都存储
};
//-------------------------------------------------------------
//------------------------------ 录像存储类型
enum _emVideoSavePrevTag
{
	VideoSavePrevTag_Player			= 0; // 以角色ID为目录来保存录像数据文件
	VideoSavePrevTag_Common			= 1; // 会存放到一个公用目录中的文件
};
//-------------------------------------------------------------
//------------------------------ 前提条件
enum _emPreCondition
{
	PreCondition_None				= 0;	//没有前提条件
	PreCondition_NeedSkin			= 1;	//需要皮肤ID
	PreCondition_NeedPetID			= 2;	//需要伙伴ID
	PreCondition_NeedStar			= 3;	//需要星级
	PreCondition_NeedPlayerLevel	= 4;	//需要玩家等级
	PreCondition_NeedVipLevel		= 5;	//需要VIP等级
	PreCondition_NeedSkyLevel		= 6;	//需要天界等级
	PreCondition_NeedCard			= 7;	//需要特权卡
	PreCondition_NeedFightpower		= 8;	//需要战力
};
//-------------------------------------------------------------
//------------------------------ 充值购买类型
enum _emChargeType
{
	ChargeType_Cash							= 0; 	// 购买元宝
	ChargeType_FirstPack					= 1; 	// 超值首冲
	ChargeType_DailyPack					= 2;	// 每日礼包
	ChargeType_ServerWeekPack				= 3;	// 开服周礼包
	ChargeType_ServerMonthPack				= 4;	// 开服月礼包
	ChargeType_DiscountPack					= 5;	// 折扣礼包
	ChargeType_LimitTimePack				= 6;	// 限时礼包
	ChargeType_PrivilegeCard				= 7;	// 特权卡
	ChargeType_GrowFund						= 8;	// 成长基金
	ChargeType_SkinPack						= 9;	// 皮肤礼包
	ChargeType_LevelPack					= 10;	// 升级礼包
	ChargeType_GodPack						= 11;	// 神装礼包
	ChargeType_MonthFund					= 12;	// 月基金
	ChargeType_ShortTermPack				= 13;	// 短期礼包
	ChargeType_ActivityRank					= 14;	// 冲榜活动
	ChargeType_FiveTimes					= 15;	// 五倍返利
	ChargeType_7DayLogin					= 16;	// 7日登录
	ChargeType_Help							= 17;	// 助力礼包 
	ChargeType_WarOrder						= 18;	// 战令 
	ChargeType_LimitGift					= 19;	// 限购礼包 
	ChargeType_ActivityCrossRank			= 20;	// 跨服冲榜活动
	ChargeType_Activity_WarOrder			= 21;	// 春节战令 
	ChargeType_Activity_CustomGift			= 22;	//定制礼包
	ChargeType_Activity_GiftGiving			= 23;	//赠送礼物（需要填写地址）
}
//-------------------------------------------------------------
//------------------------------ 特权卡
enum _emPrivilegeCard
{
	PrivilegeCard_Elf					= 1;//精灵孵化特权
	PrivilegeCard_Hook					= 2;//快速作战特权
	PrivilegeCard_Element				= 3;//元素神殿特权
	PrivilegeCard_SailAdvance			= 4;//远航高级特权
	PrivilegeCard_SailSuper				= 5;//远航豪华特权
	PrivilegeCard_GrowFund				= 6;//成长基金
	PrivilegeCard_MonthFund1			= 7;//月基金128
	PrivilegeCard_MonthFund2			= 8;//月基金328
	PrivilegeCard_MonthZZCard			= 9;//至尊月卡
	PrivilegeCard_MonthRYCard			= 10;//荣耀月卡
	PrivilegeCard_FirstCharge			= 11;//超值首冲
	PrivilegeCard_DailyCharge			= 12;//每日首冲
	PrivilegeCard_DailyCharge2			= 13;//每日首冲
	PrivilegeCard_DailyCharge3			= 14;//每日首冲
	PrivilegeCard_WarOrder				= 20;//战令特权
};
//-------------------------------------------------------------
//------------------------------ 特权类型
enum _emPrivilegeType
{
	PrivilegeType_EquipAutoCompound					= 1;//装备一键合成
	PrivilegeType_CopymapBuyCount					= 2;//副本购买次数
	PrivilegeType_HookExp							= 3;//挂机经验（百分数）
	PrivilegeType_HookGold							= 4;//挂机金币数（百分数）
	PrivilegeType_HookHeroExp						= 5;//挂机英雄经验（百分数）
	PrivilegeType_HookTime							= 6;//挂机时长(分钟)
	PrivilegeType_ClickGold							= 7;//点金(百分比)
	PrivilegeType_Train								= 8;//购买试炼塔(次数)
	PrivilegeType_HeroSpace							= 9;//英雄背包格数
	PrivilegeType_FreeTreasure						= 10;//探宝免费次数
	PrivilegeType_ChallengeBuyCount					= 11;//竞技场购买次数
	PrivilegeType_SpriteShopRefreshCount			= 12;//精灵商店刷新次数
	PrivilegeType_SailAdvance						= 13;//远航高级特权
	PrivilegeType_SailSuper							= 14;//远航豪华特权
	PrivilegeType_ElementFreeCount					= 15;//元素圣殿额外免费次数
	PrivilegeType_ElementBuyCount					= 16;//元素圣殿额外购买次数
	PrivilegeType_HookFreeCount						= 17;//快速战斗免费次数
	PrivilegeType_HookExtraBuyCount					= 18;//快速战斗额外购买次数
	PrivilegeType_BattleSpeedX2						= 19;//战斗速度x2,客户端使用
	PrivilegeType_Shop90PercentOff					= 20;//商城1折优惠商品,客户端使用
	PrivilegeType_TreasureX15						= 21;//探宝15连抽,客户端使用
	PrivilegeType_HeroPointCall						= 22;//英雄积分召唤,客户端使用
	PrivilegeType_HeadID							= 23;//激活专属头像,客户端使用
	PrivilegeType_HeadIcon							= 24;//激活专属头像框,客户端使用
	PrivilegeType_SailPoint							= 25;//增加远航点数最大值
};
//-------------------------------------------------------------
//------------------------------ 福利类型
//签到状态
enum _emWealSigninState
{
	Weal_Signin_Available		= 1;	// 可以领取
	Weal_Signin_OnceMore		= 2;	// 已经领取，可以再领取一次, 签到天数 + 1
	Weal_Signin_Complete		= 3;	// 已经完成
}
//-------------------------------------------------------------
//------------------------------活动类型
enum _emActivityType
{
	Activity_Charge_Amount		= 1;	// 充值累计金额
	Activity_Charge_Days		= 2;	// 充值累计天数
	Activity_Leveup				= 3;	// 升级奖励
	Activity_Times				= 4;	// 计次奖励
	Activity_Exchange			= 5;	// 兑换
	Activity_FirstCharge		= 6;	// 首充
	Activity_GrowFund			= 7;	// 成长基金
	Activity_Fund				= 8;	// 基金
	Activity_Login				= 9;	// 登录
	Activity_ShortTermGift		= 10;	// 短期礼包
	Activity_Achievement		= 11;	// 目标
	Activity_Rank				= 12;	// 冲榜活动
	Activity_ZeroBuy			= 13;	// 0元购
	Activity_LimitGift			= 14;	// 限购礼包
	Activity_ACTIVE				= 15;	// 活动激活
	Activity_Lottery			= 16;	// 保底抽奖
	Activity_AchieveRoad		= 17;	// 成就之路
	Activity_LimitDayGift		= 18;	// 每日限购活动
	Activity_RedEnvelope		= 19;	// 红包
	Activity_ExchangeEx			= 20;	// 加强版兑换	
	Activity_WarOrder			= 21;	// 战令
	Activity_CrossRank			= 22;	// 跨服冲榜	
	Activity_Guess				= 23;	// 猜猜猜活动
	Activity_JoyousLinkup		= 24;	// 欢乐连连看
	Activity_LuckyEgg			= 25; 	//周末福蛋
	Activity_CustomGift			= 26;	//定制礼包
	Activity_Boss				= 27;	//活动boss
}
//-------------------------------------------------------------
//------------------------------活动选项
enum _emActivityOption
{
	ActivityOption_Hollow			= 1; // 空壳活动,无视活动类型,没有实际内容, 参数：无
	ActivityOption_Duration			= 2; // 持续时长,无视结束时间, 参数: 天数
	ActivityOption_OpenOpen			= 3; // 开启时开启其他活动, 参数：活动ID_活动ID_....
	ActivityOption_CloseClose		= 4; // 结束时结束其他活动, 参数：活动ID_活动ID_....
	ActivityOption_OpenClose		= 5; // 开启时结束其他活动, 参数：活动ID_活动ID_....
	ActivityOption_CloseOpen		= 6; // 结束时开启其他活动, 参数：活动ID_活动ID_....
	ActivityOption_NotUseTime		= 7; // 不使用时间开关活动, 参数：无
	ActivityOption_ResetDuration	= 8; // 多少天之后重置，无视重置时间，参数：天数
	ActivityOption_StartServerOpen	= 9; // 服务器开起来之后即开启，参数：无
	ActivityOption_StartTimeInterval= 10; // 开服多少天后，再按活动配置时间来驱动 开起来之后即开启 	
}
//-------------------------------------------------------------
//------------------------------计次活动类型
enum _emActivityTimesType
{
	Activity_Times_ClickGold	= 1;	// 点石成金
	Activity_Times_Voyage		= 2;	// 远航
	Activity_Times_Expedition	= 3;	// 远征
	Activity_Times_Raid			= 4;	// 快速作战
	Activity_Times_Risk			= 5;	// 神界冒险
}
//-------------------------------------------------------------
//------------------------------登录
enum _emActivityLoginType
{
	Activity_Login_7Day			= 1;	// 7天登陆
	Activity_Login_Total		= 2;	// 新春累登
}
//-------------------------------------------------------------
//------------------------------短期礼包触发类型
enum _emActivityShortTermGiftTrigger
{
	Activity_ShortTermGiftTrigger_Hero 		= 1; //获得英雄，参数：英雄的星
	Activity_ShortTermGiftTrigger_Item 		= 2; //获得道具，参数：道具类型；等级；品质；评分
	Activity_ShortTermGiftTrigger_Level 	= 3; //玩家等级，参数：等级
	Activity_ShortTermGiftTrigger_HeroLevel = 4; //英雄等级，参数：等级
}
//-------------------------------------------------------------
//------------------------------冲榜类型
enum _emActivityRankType
{
	Activity_Rank_Hero 		= 1;	// 英雄榜
	Activity_Rank_Level 	= 2;	// 等级榜
	Activity_Rank_Power 	= 3;	// 战力榜
	Activity_Rank_Equip 	= 4;	// 装备榜
	Activity_Rank_Charge 	= 5;	// 充值榜
	Activity_Rank_HeroLevel = 6;	// 英雄等级榜
	Activity_Rank_Illustration = 7;	// 图鉴积分榜
	Activity_Rank_StarUp  = 8;	// 英雄星级榜
}
//-------------------------------------------------------------
//------------------------------跨服冲榜类型
enum _emActivityCrossRankType
{
	Activity_CrossRank_Hero 		= 1;	// 抽卡榜
	Activity_CrossRank_Power 		= 2;	// 战力榜
	Activity_CrossRank_Illustration = 3;	// 图鉴积分榜
	Activity_CrossRank_StarUp		= 4;	// 英雄星级榜
}
//-------------------------------------------------------------
//------------------------------ dip名字类型
enum _emDipNameType
{
	DipNameType_Item				= 1;//道具名
	DipNameType_Notice				= 2;//公告名
	DipNameType_Charge				= 3;//充值名
};
//-------------------------------------------------------------
//------------------------------ 禁言操作
enum _emTalkOperate
{
	TalkOperate_Forid		 = 0;// 禁言 PBGMTalkForbid
	TalkOperate_UnForbid	 = 1;// 解禁
};
//-------------------------------------------------------------
//------------------------------ 日志类型
enum _emLogType
{
	LogType_Jiuwu			 = 0;// 九五日志
	LogType_Client			 = 1;// 九五客户端日志
	LogType_CenterHttp		 = 2;// 中心服
};

//-------------------------------------------------------------
//------------------------------ 天界副本星星条件
enum _emHeavenDungeonStarCondition
{
	StarCondition_Victory			= 1; // 战斗胜利
	StarCondition_HeroTypeUnder	 	= 2; // x类型的英雄小于y个
	StarCondition_HeroJobUnder	 	= 3; // x职业的英雄小于y个
	StarCondition_HeroTypeAtLeast	= 4; // x类型的英雄至少y个
	StarCondition_HeroJobAtLeast	= 5; // x职业的英雄至少y个
	StarCondition_NoDeath			= 6; // 没有死亡
	StarCondition_HPAbove			= 7; // HP至少百分之x以上
	StarCondition_TurnsUnder		= 8; // 回合数小于x
	StarCondition_Formation			= 9; // 阵型为x
};

//-------------------------------------------------------------
//------------------------------ 世界服物品记录
enum _emWorldItemLogType
{
	WorldItemLog_Treasure			= 1; //探宝
	WorldItemLog_AdvTreasure		= 2; //高级探宝
	WorldItemLog_Pray1				= 3; //天界副本祈祷1
	WorldItemLog_Pray2				= 4; //天界副本祈祷2
	WorldItemLog_Pray3				= 5; //天界副本祈祷3
	WorldItemLog_Pray4				= 6; //天界副本祈祷4
	WorldItemLog_Pray5				= 7; //天界副本祈祷5
};

//-------------------------------------------------------------
//------------------------------ 切磋状态
enum _emFightEachOtherState
{
	FightEachOtherState_Free		= 1; //空闲
	FightEachOtherState_Wait		= 2; //等待目标数据
	FightEachOtherState_Result		= 3; //已经结束等待获取结果
};

//-------------------------------------------------------------
//------------------------------ 支援类型
enum _emFriendSupportType
{
	FriendSupportType_Endless		= 1; //无尽试炼支援
	FriendSupportType_Expedition	= 2; //远征支援
    FriendSupportType_TeamCampaign  = 3; //组队征战支援
};

//家具使用状态
enum _emFurnitureState
{
	Furniture_use			= 1;//当前家具正在使用
	Furniture_nouse			= 2;//当前家具没有使用
};


//精灵位置
enum _emElfTreePosition
{
	ElfTreePosition_one		= 1;	//一号位置
	ElfTreePosition_two		= 2;	//二号位
	ElfTreePosition_three	= 3;	//三号位
	ElfTreePosition_four	= 4;	//四号位
};

//-------------------------------------------------------------
//------------------------------ 公共战斗序列号空间
enum _emCommonBattleSeqSpan
{
	CommonBattleSeq_ChampionBegin		= 0x10000001; 								//冠军赛开始
	CommonBattleSeq_ChampionEnd			= 0x20000000; 						//冠军赛结束
	CommonBattleSeq_WeekChampionBegin	= 0x20000001; 						//周冠军赛开始
	CommonBattleSeq_WeekChampionEnd		= 0x30000000; 						//周冠军赛结束
};

//-------------------------------------------------------------
//------------------------------ 组队征战参与条件
enum _emTeamCampaignCondition
{
    TeamCampaignCondition_Hero          = 1; 	//指定英雄 参数: 英雄ID_英雄ID_ ....
    TeamCampaignCondition_Job           = 2; 	//指定职业 参数: 职业ID_职业ID_ ....
    TeamCampaignCondition_Formation     = 3; 	//指定阵容 参数: 阵容index_阵容index_ ...
};

//-------------------------------------------------------------
//------------------------------ 组队征战额外奖励类型
enum _emTeamCampaignExtraPrize
{
    TeamCampaignExtraPrize_Heal          = 1; 	//回复出战英雄血量 参数: 回复百分比
    TeamCampaignExtraPrize_Revive        = 2; 	//复活已死英雄 参数: 复活血量百分比
    TeamCampaignExtraPrize_Skill         = 3; 	//技能 参数: 技能Index
};

//-------------------------------------------------------------
//------------------------------ 战斗位置区间
enum _emBattlePos
{
    BattlePos_Pet          		= 0; 	//出场英雄
    BattlePos_Artifact        	= 100; 	//神器
    BattlePos_Elf         		= 200; 	//精灵
	BattlePos_Defend         	= 300; 	//守护
};

//-------------------------------------------------------------
//------------------------------ 帮会事件类型
enum _emFactionEventType
{
	FactionEventType_Join 		= 1; //加入
	FactionEventType_Quit 		= 2; //退出
	FactionEventType_War 		= 3; //公会战 			参数：几颗星
	FactionEventType_Donate 	= 4; //捐赠				参数：捐赠类型
	FactionEventType_Liveness 	= 5; //领取活跃度奖励	 参数：活跃度等级
	FactionEventType_Leader 	= 6; //会长变更
	FactionEventType_Job 		= 7; //提升副会长
	FactionEventType_Impeach	= 8; //弹劾会长
}

//-------------------------------------------------------------
//------------------------------ 校验类型
enum _emSignType
{
	Sign_Center 		= 1; //中心服上报 参数：没有
	Sign_Survey 		= 2; //调查问卷 参数：question_id
	Sign_Report 		= 3; //举报 参数：没有
	Sign_Feedback 		= 4; //意见反馈 参数：没有
	Sign_Guide 			= 5; //引导记录 参数：没有
}
//-------------------------------------------------------------
//------------------------------ 战令类型
enum _emWarOrderType
{
	WarOrder_Day		= 1;	//战令每日任务
	WarOrder_Week		= 2;	//战令每周任务
	WarOrder_Month		= 3;	//战令每月任务
}
//-------------------------------------------------------------
//------------------------------ 战令类型
enum _emCommonPrizeType
{
	CommonPrize_WeShare		= 1;	//微享
	CommonPrize_QQShare		= 2;	//Q享
	CommonPrize_Subscribe	= 3;	//关注
	CommonPrize_WD			= 4;	//微端
	CommonPrize_Verify		= 5;	//实名认证
	CommonPrize_Desktop		= 6;	//桌面
}

//---------------------------------------------------------
//----------------------------对战塔类型
enum _emTowerType
{
	TOWER_TYPE_COMMON	= 1;//对战塔
	TOWER_TYPE_MONSTER	= 2;//大师对战塔
}
//---------------------------------------------------------
//----------------------------宠物状态
enum _emPetStateType
{
	PetStateType_Normal				= 0; 	//无其他状态
	PetStateType_Fight				= 1; 	//战斗
	PetStateType_Defend				= 2; 	//守护
	PetStateType_ResonanceLevel		= 3; 	//共鸣等级
	PetStateType_ResonanceStar		= 4; 	//共鸣星级
}

//-------------------------------------------------------------
//------------------------------ 相关系统订单类型
enum _emOrderType
{
	OrderType_BlindBox			= 1; 	//盲盒
	OrderType_MAX				= 100; 	//守护
}

//-------------------------------------------------------------
//------------------------------ 跨服redis系统key类型
enum _emRedisKeyType
{
	RedisKeyType_CrossRank			= 1; 	//跨服竞技场
	RedisKeyType_WeekChampionRank	= 2; 	//周冠军赛排行榜
	RedisKeyType_MAX				= 100; 	//守护
}

//-------------------------------------------------------------
//------------------------------ redis玩家系统数据保存key
enum _emRedisPlayerSystemType
{
	RedisPlayerSystemKey_challenge			= 1; 	//玩家竞技场数据
	RedisPlayerSystemKey_toplist				= 2; 	//玩家排行榜数据
	RedisPlayerSystemKey_MAX					= 100; 	//守护
}
// 开服时间
message PBWorldSvrInfo
{
	optional uint32	logicworldid	= 1;// 逻辑服务器ID
	optional uint32 startTime		= 2;// 开服时间
	optional uint32 worldlevel		= 3;// 世界等级
	repeated uint32 worldid			= 4;// 游戏服务器ID
	optional uint32 mergeTime		= 5;// 合服时间
}

// 服务器信息
message PBServerInfo
{
	optional uint32	logicWorldID	= 1;			// 逻辑服务器ID
	optional uint32 serverType		= 2;			// 服务器类型
	optional uint32 serverID		= 3;			// 服务器ID
}
// 消耗
message PBPlayerExpend
{
	optional uint32 	expendtype	 	= 1;// 货币类型	_emExpendType
	optional uint64 	value	 		= 2;// 值
}
// 客户端数据
message PBVerClientData
{
	optional string filename		= 1;			//文件名
	optional uint32 crc				= 2;			// crc码
}
// 战斗属性
message PBAttrBaseInfo
{
	optional uint32 type			= 1;		//属性类型	_emBattleAttribute
	optional uint64 value			= 2;		//属性值
	optional uint32 rate			= 3;		//属性万分比
}
// 战斗属性
message PBAttrInfo
{
	optional uint32 type			= 1;		//属性类型	_emBattleAttribute
	optional uint64 value			= 2;		//属性值
}
// 战斗属性
message PBSkillInfo
{
	optional uint32 skillid			= 1;		//技能ID
	optional uint32 skilllevel		= 2;		//技能等级
}
// 伙伴星级
message PBPetStar
{
	optional uint32 petid			= 1;		//伙伴ID
	optional uint32 star			= 2;		//伙伴星级
}
// 道具信息
message PBItemInfo
{
	optional uint32 itemid			= 1;		//道具ID
	optional uint64 itemcount		= 2;		//道具个数
}
// 道具信息
message PBItemSnCount
{
	optional uint64 itemsn			= 1;		//道具sn
	optional uint32 itemcount		= 2;		//道具个数
}
// 消耗
message PBExpendInfo
{
	optional uint32 	expendtype	 	= 1;// 货币类型	_emExpendType
	optional uint64 	value	 		= 2;// 值
}
// 通用双属性
message PBU32U32
{
	optional uint32 	key	 			= 1;//
	optional uint32 	value	 		= 2;// 
}
// 通用双属性
message PBU32U64
{
	optional uint32 	key	 			= 1;//
	optional uint64 	value	 		= 2;// 
}
// 通用双属性
message PBU64U32
{
	optional uint64 	key	 			= 1;//
	optional uint32 	value	 		= 2;// 
}
// 通用双属性
message PBSkillCD
{
	optional uint32 	skillid	 		= 1;//技能id
	optional uint32 	cd	 			= 2;//当前的CD
}
// 通用单属性
message PBString
{
	optional string 	value	 		= 1;// 
}
// 通用属性
message PBU32String
{
	optional uint32 	key	 			= 1;// 
	optional string 	value	 		= 2;// 
}
// 通用单属性
message PBU32
{
	optional uint32 	value	 		= 1;// 
}
// 通用单属性
message PBU64
{
	optional uint64 	value	 		= 1;//
}
// 血量
message PBPetHp
{
	optional uint64 				sn			= 1;	//sn
	optional uint64 				curhp		= 2;	//当前血量0死亡
}
// 玩家请求
message PBPlayerQuery
{
	optional uint32 				playerid	= 1;	//玩家ID
	optional uint32 				worldid		= 2;	//世界ID
	optional uint32 				factionid	= 3;	//帮派ID
}
// 装备sn
message PBPosEquip
{
	optional uint32 				pos			= 1;	//位置
	optional uint64					itemsn		= 2;	//道具SN
}
//-------------------------------------------------------------
//------------------------------ 大神搭配
enum _emResultGodDeploy_55
{
	R_ResultGodDeploy_Succeed			= 0; // 成功
	R_ResultGodDeploy_Fail				= 1; // 失败
	R_ResultGodDeploy_NotExist			= 2; // 不存在
};

//--- 客户端到服务器
enum _emC2S_GodDeploy_Protocol
{
	C2S_GodDeploy_TopList			= 1	;//请求排行榜(精灵ID)  PBU32
	C2S_GodDeploy_Like				= 2	;//点赞(精灵SN)	PBU64

};

//----服务器到客户端
enum _emS2C_GodDeploy_Protocol
{
	S2C_GodDeploy_Common_Ack			= 0	;//失败才返回
	S2C_GodDeploy_TopList				= 1	;//返回地址数据 PBGodDeployTopList
	S2C_GodDeploy_LikeInfo				= 2	;//返回点赞数据 PBLikeInfo
};


// 点赞数据
message PBLikeInfo
{
	optional  uint32	 petid	 	= 1 ; //精灵id（对应排行榜id）
	optional  uint32	 petsn 		= 2 ; //精灵sn
	optional  uint32	 likesum 	= 3 ; //点赞数
};

//排行信息
message PBGodDeployTopListDetail
{
	optional PBPetDisplay		petdisplay 		= 1; 		//精灵标记
	optional PBPlayerDisplay 	playerdisplay	= 2;		//用户标记
	optional uint32				likesum   		= 3;		//点赞数
}

//天赋信息
message PBGodDeployPetTalent
{
	optional uint32 				skillindex		= 1;	//技能信息
	optional uint32 				useratio		= 2;	//使用率（百分比）
}

//神装套装信息
message PBGodDeployPetGodEquip
{
	optional uint32 				itemid			= 1;	//套装信息
	optional uint32 				useratio		= 2;	//使用率（百分比）
}

//阵容推荐
message PBGodDeployZhenfa
{
	optional PBPlayerDisplay 			playerdisplay	= 1;		//用户标记
	optional PBBattlePet 				zhenfa			= 2;	//阵容
}

// 排行榜数据
message PBGodDeployTopList
{
	optional  	uint32	 petid	 	= 1 ; //精灵id（对应排行榜id）
	repeated	PBGodDeployTopListDetail	 	detail		= 2 ; //排行信息
	repeated	PBGodDeployPetTalent	 		talent		= 3 ; //天赋信息
	repeated	PBGodDeployPetGodEquip	 		godequip	= 4 ; //神装套装信息
	repeated	PBGodDeployZhenfa				zhenfa		= 5 ; //阵容推荐
};


//-------------------------------------------------------------
//------------------------------ 猜猜猜
enum _emResultGuess_48
{
	R_ResultGuess_Succeed			= 0; // 成功
	R_ResultGuess_Fail				= 1; // 失败
	R_ResultGuess_TimeOut			= 2; // 超时
};
//----客户端到服务器
enum _emC2S_Guess_Protocol
{
	C2S_Guess_Begin				= 1	;//答题开始，请求题目 
	C2S_Guess_Answer_Ask		= 2 ;//发送选择给服务器 PBC2GAnswerAsk
	C2S_Guess_Exit_Ask			= 3 ;//发送退出给服务器 
	C2S_Guess_Next				= 4 ;//请求服务器下一题 
};
//----服务器到客户端
enum _emS2C_Guess_Protocol
{
	S2C_Guess_Common_Ack			= 0	;//失败才返回
	S2C_Guess_Answer_Ack			= 1 ;//选择结果 PBG2CAnswerAck
	S2C_Guess_Question				= 2	;//问题下发 PBG2CQuestion
	S2C_Guess_Exit					= 3 ;//答题结束 PBG2CExit
};

//发送题目给客户端
message PBG2CQuestion
{
	optional uint32 		index			= 1 ;// 问题序号
	optional uint32 		time			= 2 ;// 答题时间
	repeated PBGuessAnswer  answers			= 3 ;// 答案 PBGuessAnswer
};
//答案
message PBGuessAnswer
{
	optional uint32  answerIndex  = 1;//答案序号
	optional string  answerText   = 2;//答案文本
};

//发送答案给服务器
message PBC2GAnswerAsk
{
	optional uint32 answer 				= 1; //答案索引
};

//答题结果给客户端
message PBG2CAnswerAck
{
	optional uint32 result 				= 1; //0错误1正确
	optional uint32 score				= 2; //当前分数
	optional uint32 worngCount			= 3; //剩余错误次数
	optional PBGuessAnswer  rightAnswers	= 4 ;// 正确答案 PBGuessAnswer
};

//答题结束
message PBG2CExit
{
	optional uint32 rightCount			= 1; //猜中次数
};




//-------------------------------------------------------------
//------------------------------ 天界副本相关
//----天界副本的返回
enum _emResultHeavenDungeon_37
{
	R_ResultHeavenDungeon_Succeed		= 0; // 成功
	R_ResultHeavenDungeon_Fail			= 1; // 失败
    R_ResultHeavenDungeon_NotOpend		= 2; // 还没有开启
    R_ResultHeavenDungeon_Requirement	= 3; // 条件未满足不能领取奖励
    R_ResultHeavenDungeon_NeedItem	    = 4; // 缺少道具不能购买
    R_ResultHeavenDungeon_NoTimes	    = 5; // 次数用光
    R_ResultHeavenDungeon_NoBuyTimes	= 6; // 购买次数用光
    R_ResultHeavenDungeon_TimesFull	    = 7; // 次数达到最大值
    R_ResultHeavenDungeon_Acquired	    = 8; // 已经领取
    R_ResultHeavenDungeon_Star          = 9; // 星星数没有满, 不能扫荡
    R_ResultHeavenDungeon_HeroDead      = 10; // 英雄已死
    R_ResultHeavenDungeon_NoHero        = 11; // 英雄不存在，不是上次派上场的英雄
    R_ResultHeavenDungeon_OnlyOneFight  = 12; // 只有一次战斗
};

//----天界副本模块
enum _emC2S_HeavenDungeon_Protocol
{
	C2S_HeavenDungeon_ChapterReward = 1; 	// 领章节奖品                                               PBU32
    C2S_HeavenDungeon_BuyCount      = 2; 	// 购买挑战次数
    C2S_HeavenDungeon_Pray          = 3; 	// 祈祷                                                    PBC2GHeavenDungeonPray
    C2S_HeavenDungeon_Sweep         = 4;    // 扫荡关卡,服务器用S2C_HeavenDungeon_StageChange返回       PBU32 
}

//----天界副本模块
enum _emS2C_HeavenDungeon_Protocol
{
	S2C_HeavenDungeon_Common_ACK    = 1; 	// 通用返回
    S2C_HeavenDungeon_ChapterReward = 2;    // 领取章节奖品返回             PBU32
    S2C_HeavenDungeon_BuyCount      = 3;    // 购买挑战次数返回             PBG2CHeavenDungeonCount
    S2C_HeavenDungeon_Pray          = 4;    // 祈祷返回                    PBG2CHeavenDungeonPray
    S2C_HeavenDungeon_StageSync     = 5;    // 关卡战斗或扫荡之后推送       PBG2CHeavenDungeonStageSync
}

//祈祷请求
message PBC2GHeavenDungeonPray
{
	optional uint32 statue  = 1; // 神像
    optional uint32 num     = 2; // 次数 1 or 10
}

//次数
message PBG2CHeavenDungeonCount
{
	optional uint32 count         = 1; // 当前挑战次数
    optional uint32 buycount      = 2; // 已经使用的购买次数
}

//挑战关卡的返回,需要两次的战斗只会在两次战斗胜利后推送
message PBG2CHeavenDungeonStageSync
{
    optional PBPlayerHeavenDungeonStage stage       = 1; // 关卡
	optional uint32                     count       = 2; // 当前挑战次数
    optional uint32                     buycount    = 3; // 已经使用的购买次数
}

//祈祷返回
message PBG2CHeavenDungeonPray
{
	optional uint32 statue      = 1; // 神像
    repeated uint32 reward      = 2; // 奖励index
    optional uint32 freecount   = 3; // 免费次数
    optional uint32 times       = 4; // 该神像的祈祷次数
}

//再战斗一次
message PBG2CHeavenDungeonFightAgain
{
	optional uint32 index       = 1; // 关卡index
    optional uint32 team        = 2; // 1或者2，表示用1队还是2队战斗
}


//-------------------------------------------------------------
//------------------------------ 圣物相关
enum _emResultHoly_29
{
	R_ResultHoly_Succeed			= 0; // 成功
	R_ResultHoly_Fail				= 1; // 失败
	R_ResultHoly_NeedItem			= 2; //扣除的道具不足
	R_ResultHoly_MaxUpgradeLevel	= 3; //达到最大等级
	R_ResultHoly_MaxAdvanceLevel	= 4; //达到最大进阶等级
	R_ResultHoly_NeedHolyLevel		= 5; //圣物等级不足
	R_ResultHoly_PetNoUse			= 6; //伙伴不能够被消耗
	R_ResultHoly_NeedPet			= 7; //需要伙伴不满足
	R_ResultHoly_HaveUnlock			= 8; //已经解锁
	R_ResultHoly_NoUnlock			= 9; //未解锁
};
//----圣物模块
enum _emC2S_Holy_Protocol
{
	C2S_Holy_Upgrade				= 1 ; 	// 升级		PBU32
	C2S_Holy_Advance				= 2 ; 	// 进阶		PBC2GHolyAdvanceAsk
	C2S_Holy_Unlock					= 3 ; 	// 解锁		PBC2GHolyAdvanceAsk
}
//----圣物模块
enum _emS2C_Holy_Protocol
{
	S2C_Holy_Upgrade				= 0 ;	// 升级返回		PBPlayerHolyInfo
	S2C_Holy_Advance				= 1 ;	// 进阶返回 	PBPlayerHolyInfo
	S2C_Holy_Unlock					= 2 ;	// 解锁返回 	PBPlayerHolyInfo
}
// 玩家离开请求
message PBC2GHolyAdvanceAsk
{
	optional uint32 pettype				= 1;			// 伙伴类型
	repeated uint64 petsn				= 2;			// 伙伴SN
}

//-------------------------------------------------------------
//------------------------------ 挂机相关
enum _emResultHook_14
{
	R_ResultHook_Succeed			= 0; //成功
	R_ResultHook_Fail				= 1; //失败
	R_ResultHook_SystemNoOpen		= 2; //系统未开启
	R_ResultHook_NeedHookTime		= 3; //需要累计一定收益才能领取
	R_ResultHook_NeedStageID		= 4; //你未通关此关卡
	R_ResultHook_HaveStagePrize		= 5; //已经领取此关卡的奖励
	R_ResultHook_NoFreeSweepCount	= 6; //无免费快速作战次数
	R_ResultHook_NeedDiamond		= 7; //需要钻石
	R_ResultHook_NeedPlayerLevel	= 8; //玩家等级不足
	R_ResultHook_NoStage			= 9; //无此关卡
	R_ResultHook_NeedPreStage		= 10; //请通关上一关卡
	R_ResultHook_FightCoolTime		= 11; //挑战冷却中
};
//----挂机模块
enum _emC2S_Hook_Protocol
{
	C2S_Hook_Profit					= 0	;//收益领奖  		无内容
	C2S_Hook_FlyNewScene			= 1	;//飞新挂机地图		无内容
	C2S_Hook_StagePrize				= 2 ;//领取关卡奖励	 	PBU32
	C2S_Hook_BuySweep				= 3 ;//购买快速挑战
	C2S_Hook_FreeSweep				= 4 ;//免费快速挑战
	C2S_Hook_FightStage				= 5 ;//挑战关卡	
}
//----挂机模块
enum _emS2C_Hook_Protocol
{
	S2C_Hook_Common					= 0 ;	//通用错误返回
	S2C_Hook_ProfitAck				= 1	;	//收益领奖					PBG2CProfitAck	
	S2C_Hook_FlyNewSceneAck			= 2	;	//飞新地图返回(新地图ID)	PBU32
	S2C_Hook_StagePrizeAck			= 3	;	//领取关卡奖励返回			PBU32
	S2C_Hook_SweepAck				= 4 ;	//快速挑战返回				PBG2CSweepAck	
	S2C_Hook_SynStage				= 5 ;	//同步新关卡				PBG2CSynStageAck
}
//同步新关卡
message PBG2CSynStageAck
{
	optional uint32 			stageid			= 1;	//关卡ID
	optional uint32 			nextfighttime	= 2;	//下次挑战时间
}
//挂机收益领奖返回
message PBG2CProfitAck
{
	optional uint32 			profittime	= 1;	//收益时间
	optional uint32 			begintime	= 2;	//更新开始时间
	repeated PBItemInfo 		prizeitem	= 3;	//奖励道具
}
//购买快速挑战返回
message PBG2CSweepAck
{
	optional uint32				dayfreesweepcount	= 1;	//快速作战免费次数
	optional uint32				daubuysweepcount	= 2;	//快速作战购买次数
	optional uint32 			profittime			= 3;	//收益时间
	repeated PBItemInfo 		prizeitem			= 4;	//奖励道具
}
//-------------------------------------------------------------
//------------------------------ 图鉴相关
enum _emResultIllustration_46
{
	R_ResultIllustration_Succeed			= 0; // 成功
	R_ResultIllustration_Fail				= 1; // 失败
	R_ResultIllustration_NotPet				= 2; // 没有伙伴（玩家精灵空间）
	R_ResultIllustration_PetRepeat 			= 3; // 重复（玩家精灵空间）
	R_ResultIllustration_NotPetSkin 		= 4; // 没有皮肤（图鉴不需要显示）
	R_ResultIllustration_ADDFail 			= 5; // 添加失败
	R_ResultIllustration_RemoveFail 		= 6; // 移除失败
	R_ResultIllustration_LevelErr	 		= 7; // 等级不为1
};
//----客户端到服务器
enum _emC2S_Illustration_Protocol
{
	C2S_Illustration_addPetAsk			= 1	;//往图鉴背包加 PBC2GADDPetAsk
	C2S_Illustration_removePetAsk		= 2	;//从图鉴背包减	PBC2GRemovePetAsk
	
};
//----服务器到客户端
enum _emS2C_Illustration_Protocol
{
	S2C_Illustration_Common_Ack			= 0	;//失败才返回
	S2C_Illustration_addPetAck			= 1	;//往图鉴背包加 PBG2CADDPetAck
	S2C_Illustration_removePetAck		= 2	;//从图鉴背包减 PBG2CRemovePetAck
	S2C_Illustration_Freash				= 3 ;//	刷新 PBG2CFreashIllustration
};

//往图鉴背包加
message PBC2GADDPetAsk
{
	optional uint64 petsn			= 1 ;// 伙伴SN
};

//从图鉴背包减
message PBC2GRemovePetAsk
{
	optional uint32 petskinid			= 1 ;// 伙伴皮肤id
};

//往图鉴背包加,
message PBG2CADDPetAck
{
	repeated uint32 indexs			= 1 ;//  取消激活的羁绊索引数组
};

//从图鉴背包减，羁绊索引数据
message PBG2CRemovePetAck
{
	repeated uint32 indexs			= 1 ;// 取消激活的羁绊索引数组
};

//图鉴背包
message PBG2CFreashIllustration
{
	repeated  PBPetDisplay  petdisplay	= 1 ;// 精灵图鉴列  
	optional uint32 historyPower		= 2 ;// 历史最高战力
};


//-------------------------------------------------------------
//------------------------------ 孵蛋
//孵蛋的返回
enum _emResultIncubateEgg_52
{
	R_ResultIncubateEgg_Succeed				= 0; //成功
    R_ResultIncubateEgg_Fail                = 1; //失败
    R_ResultIncubateEgg_Already             = 2; //该精灵正在孵化中
    R_ResultIncubateEgg_Consume             = 3; //消耗材料不足
    R_ResultIncubateEgg_NotIncubate         = 4; //精灵未在孵化
    R_ResultIncubateEgg_BikeInUse           = 5; //自行车道具正在使用中
    R_ResultIncubateEgg_AlreadyUseSub       = 6; //该次孵化已使用过暖暖石
    R_ResultIncubateEgg_NoEnd               = 7; //该孵化未结束
}

//孵蛋模块
enum _emC2S_IncubateEgg_Protocol
{
    C2S_IncubateEgg_Start   = 1; //开始孵蛋 PBC2SIncubateEggStart
    C2S_IncubateEgg_SpeedUp = 2; //加速孵化 PBC2SIncubateEggSpeedUp
    C2S_IncubateEgg_Cancel  = 3; //取消孵化 PBC2SIncubateEggCancel
    C2S_IncubateEgg_Pip     = 4; //孵蛋破壳 PBC2SIncubateEggPip
}

//孵蛋模块
enum _emS2C_IncubateEgg_Protocol
{
    S2C_IncubateEgg_Common      = 1;//通用返回,错误码
	S2C_IncubateEgg_Start       = 2; //开始孵蛋     PBS2CIncubateEggStart
    S2C_IncubateEgg_SpeedUp     = 3; //加速孵化     PBS2CIncubateEggSpeedUp
    S2C_IncubateEgg_Cancel      = 4; //取消孵化     PBS2CIncubateEggCancel
    S2C_IncubateEgg_Pip         = 5; //孵蛋破壳     PBS2CIncubateEggPip
    S2C_IncubateEgg_EndSyn      = 6; //孵化结束同步 PBS2CIncubateEggEndSyn
    S2C_IncubateEgg_SynInfo     = 7; //孵蛋         PBIncubateEggData
}

//孵化道具作用类型
enum _emIncubateEgg_ItemType
{
    ENM_INCUBATEEGG_ADD_STEP = 1; //孵化道具直接增加步数
    ENM_INCUBATEEGG_ADD_SPEED = 2; //孵化道具增加每分钟步数(速度)
    ENM_INCUBATEEGG_SUB_TOTAL_STEP = 3; //孵化道具，减少总步数
}

//开始孵化
message PBC2SIncubateEggStart
{
    optional uint32 Index = 1; //孵化索引
}
//开始孵化
message PBS2CIncubateEggStart
{

}

//取消孵化
message PBC2SIncubateEggCancel
{
    optional uint32 Index = 1; //取消孵化Index
}

//取消孵化
message PBS2CIncubateEggCancel
{
  
}

//加速孵化
message PBC2SIncubateEggSpeedUp
{
    optional uint32 IncubateEggIndex = 1; //加速孵化蛋索引
    optional uint32 ItemID           = 2; //使用加速道具ID
}
//加速孵化
message PBS2CIncubateEggSpeedUp
{

}

//孵蛋破壳
message PBC2SIncubateEggPip
{
    optional uint32 Index = 1; //破壳孵蛋Index
}
//孵蛋破壳
message PBS2CIncubateEggPip
{
    optional uint32 Index = 1;
}

//孵化结束同步
message PBS2CIncubateEggEndSyn
{
    optional uint32 Index = 1; //结束孵化蛋索引
}

//-------------------------------------------------------------
//------------------------------ 物品背包相关
enum _emResultItem_4
{
	R_ResultItem_Succeed			= 0; // 成功
	R_ResultItem_Fail				= 1; // 失败
	R_ResultItem_NoItem				= 2; // 物品不存在
	R_ResultItem_CannotEquip		= 3; // 不能装备
	R_ResultItem_CannotUse			= 5; // 不能使用
	R_ResultItem_NotEnough			= 6; // 数量不够
	R_ResultItem_MaxCount			= 7; // 叠加数量已满
	R_ResultItem_PreCondition		= 8; // 前提条件不满足
	R_ResultItem_CD					= 9; // CD冷却中
	R_ResultItem_NeedMoney			= 10;// 钱不够
	R_ResultItem_NoTimeLimit		= 11;// 已过期，物品失效
	R_ResultItem_ExpendFull			= 12;//当前值已满
	R_ResultItem_ParamNumError		= 13;//参数个数错误
	R_ResultItem_Level_Low			= 14;//等级太低
	R_ResultItem_NoDayUseCount		= 15;//每日使用次数已满
	R_ResultItem_NoWeekUseCount		= 16;//每周使用次数已满
	R_ResultItem_NoMonthUseCount	= 17;//每月使用次数已满
	R_ResultItem_ItemNoInEquipMap	= 18;//装备没有穿戴
	R_ResultItem_UseNumError		= 19;//使用道具数量不对
	R_ResultItem_LimitUseOne		= 20;//不能使用多个道具
	R_ResultItem_PetBagFull			= 21;//伙伴背包已满
	R_ResultItem_NoForverUseCount	= 22;//永久使用次数已满
	R_ResultItem_NeedItem			= 23;//扣除的道具不足
	R_ResultItem_EquipUpgradeMaxLevel= 24;//装备升阶达到最大等级
	R_ResultItem_NoEquip			 = 25;//未穿戴此装备
	R_ResultItem_NoSell				 = 26;//不能出售此道具
	R_ResultItem_NoSplit			 = 27;//不能分解此道具
	R_ResultItem_NeedItemType		 = 28;//道具类型不对
	R_ResultItem_RefineNoSave		 = 29;//无洗练属性保存
	R_ResultItem_NeedRuneScore		 = 30;//熔炼值不足
	R_ResultItem_NeedItemQuality	 = 31;//道具品质不对
	R_ResultItem_NeedVip			 = 32;//需要vip特权
	R_ResultItem_EquipCompoundCondi	 = 33;//人物达到30级或VIP达到2级开启
	R_ResultItem_LockError	 		 = 34;//锁定错误
	R_ResultItem_NoPet	 		  	 = 35;//伙伴不存在
	R_ResultItem_NeedLevel	 		 = 36;//等级不足
	R_ResultItem_NeedPetLevel	 	 = 37;//伙伴等级不足
	R_ResultItem_PetType	 	 	 = 38;//伙伴类型不符
	R_ResultItem_PetJob	 	 	     = 39;//伙伴职业不符
	R_ResultItem_PetStar	 	 	 = 40;//伙伴星级不符
	R_ResultItem_PetID	 	 	 	 = 41;//伙伴不符
	R_ResultItem_LimitTime	 	 	 = 42;//时间不符
};

//----道具模块
enum _emC2S_Item_Protocol
{
	C2S_Item_Use				= 1 ; 	// 使用道具				PBC2GUseItem
	C2S_Item_EquipCompound		= 2 ; 	// 装备合成				PBCAGItemCompound
	C2S_Item_EquipAutoCompound	= 3 ; 	// 装备一键合成			PBC2GEquipAutoCompound
	C2S_Item_RuneCompound		= 4 ; 	// 符文合成				PBC2GRuneCompound
	C2S_Item_PetCompound		= 5 ; 	// 伙伴合成				PBC2GPetCompound
	C2S_Item_Sell				= 6 ; 	// 道具出售				PBC2GItemSell
	C2S_Item_Split				= 7 ; 	// 道具分解				PBC2GItemSplit		
	C2S_Item_RuneRefine			= 8 ; 	// 符文重铸				PBC2GRuneRefineAsk	
	C2S_Item_SaveRuneRefine		= 9 ; 	// 符文重铸保存			PBItemSn	
	C2S_Item_FullBuy			= 10 ; 	// 全额购买				PBItemInfo
	C2S_Item_RuneExchange		= 11 ; 	// 符文兑换	
	C2S_Item_GodEquipRefine		= 12 ; 	// 神装洗练				PBC2GGodEquipRefineAsk	
	C2S_Item_SaveGodEquipRefine	= 13; 	// 神装洗练	保存		PBItemSn	
	C2S_Item_SellOneKey			= 14 ; 	// 一键出售				PBC2GItemSellOneKeyAsk	
	C2S_Item_EquipCompoundLog	= 15 ; 	// 查询装备合成记录			
	C2S_Item_Bag_Use			= 16 ; 	// 使用礼包道具				PBC2GBagUseItem
	C2S_Item_UpStar_Use 		= 17;	// 使用升星道具			PBC2GUpstarUseItem
}

//----道具模块
enum _emS2C_Item_Protocol
{
	S2C_Item_New				= 0 ;	// 新增道具				PBG2CNewItem
	S2C_Item_Update				= 1 ;	// 更新道具信息			PBItem
	S2C_Item_UpdateNum			= 2 ;	// 更新道具数量			PBG2CUpdateItem
	S2C_Item_Use				= 3 ;	// 使用道具返回			无内容
	S2C_Item_Common				= 4 ;	// 通用失败返回
	S2C_Item_RuneCompound		= 5 ;	// 符文合成返回			PBItemSn
	S2C_Item_RuneRefine			= 6 ;	// 符文重铸返回			PBG2CRuneRefineAck
	S2C_Item_SaveRuneRefine		= 7 ;	// 符文重铸保存返回		PBItem
	S2C_Item_EquipCompound		= 8 ; 	// 装备合成返回			失败才返回
	S2C_Item_EquipAutoCompound	= 9 ; 	// 装备一键合成返回		失败才返回
	S2C_Item_PetCompound		= 10; 	// 伙伴合成返回			PBG2CPetCompound
	S2C_Item_GodEquipRefine		= 11 ;	// 神装洗练	返回		PBG2CGodEquipRefineAck
	S2C_Item_SaveGodEquipRefine	= 12 ;	// 神装洗练	保存返回	PBItem
	S2C_Item_EquipCompoundLog	= 13 ;	// 查询装备合成记录		PBG2CEquipCompoundLog	
}

//礼包使用类型
enum itemBagUseType  
{
	itemBagUseType_all		= 1;	//获得所有道具
	itemBagUseType_perscent	= 2;	//概率获得道具
	itemBagUseType_scelect	= 3;	//选择道具
};


// 查询装备合成记录
message PBG2CEquipCompoundLog
{
	repeated PBEquipCompoundLog		log			= 1;	//记录
}
// 一键出售
message PBC2GItemSellOneKeyAsk
{
	repeated uint64		itemsn			= 1;	//品质
}
// 神装洗练返回
message PBG2CGodEquipRefineAck
{
	optional uint64 		itemsn			= 1;	//道具SN
	optional uint32 		refinecount		= 2;	//洗练次数
	repeated PBAttrBaseInfo refineattr		= 3;	//洗练的随机属性
}
// 神装洗练
message PBC2GGodEquipRefineAsk
{
	optional uint64 itemsn		= 1;	//道具SN
	repeated uint32 lockattr	= 2;	//锁定的属性
}

// 伙伴合成返回
message PBG2CPetCompound
{
	repeated PBPetStar pet		= 1;	//新增的伙伴
}
// 伙伴合成
message PBC2GPetCompound
{
	optional uint64 itemsn		= 1;	//道具SN
	optional uint32 itemcount	= 2;	//合成的数量
}
// 符文重铸
message PBC2GRuneRefineAsk
{
	optional uint64 		itemsn		= 1;	//道具SN
	repeated uint32			lockskill 	= 2;	//锁定的技能id
	optional bool 			blockattr	= 3;	//锁定基础属性
}
// 符文重铸返回
message PBG2CRuneRefineAck
{
	optional uint64 		itemsn			= 1;	//道具SN
	repeated PBSkillInfo 	refineskill		= 2;	//重铸的被动技能索引
	repeated PBAttrBaseInfo refineattr		= 3;	//重铸的随机属性
}
// 道具SN
message PBItemSn
{
	optional uint64 itemsn		= 1;	//道具SN
}
// 道具分解
message PBC2GItemSplit
{
	repeated PBItemSnCount 	iteminfo = 1;//道具SN
}
// 道具出售
message PBC2GItemSell
{
	optional uint64 itemsn		= 1;	//道具SN
	optional uint32 itemcount	= 2;	//道具数量
}
// 道具合成
message PBCAGItemCompound
{
	optional uint32 itemid		= 1;	//道具
	optional uint32 itemcount	= 2;	//道具数量
}
// 符文合成
message PBC2GRuneCompound
{
	optional uint32 itemid		= 1;	//道具id
	repeated uint64 runesn		= 2;	//符文SN
}
// 装备一键合成
message PBC2GEquipAutoCompound
{
	optional uint32 equiptype	= 1;	//装备类型	_emEquipType
}

// 更新道具返回
message PBG2CUpdateItem
{
	optional uint64 itemsnid	= 1; 
	optional uint32 itemid		= 2; //道具ID
	optional uint32 itemcount  	= 3; //道具的当前个数
	optional uint32 flag  		= 4; //标志 _emItemFlag
	optional uint32 doing 		= 5; //_emDoingType
}
// 使用道具请求
message PBC2GUseItem
{
	optional uint64 itemsnid	= 1;	//道具SN
	optional uint32 itemcount	= 2;	//道具个数
}

// 使用礼包请求
message PBC2GBagUseItem
{
	optional uint64 itemsnid	= 1;	//道具SN
	optional uint32 itemcount	= 2;	//道具个数
	repeated uint32 itemGroupID	= 3;	//道具组ID	//只有类型为3的有用
}

// 使用升星道具请求
message PBC2GUpstarUseItem
{
	optional uint64 itemsn		= 1;	//道具SN
	optional uint32 itemcount	= 2;	//道具个数
	optional uint64 petsn		= 3;	//英雄sn
}

// 使用道具返回
message PBG2CUseItem
{
	optional uint64 itemsnid	= 1;
	optional uint32 itemid		= 2;	//道具ID
	optional uint32 itemcount	= 3;	//实际扣除数量
	optional uint32 inputcount	= 4;	//玩家输入数量
}
// 新增道具返回
message PBG2CNewItem
{
	optional PBItem iteminfo 	= 1;
	optional uint32 doing 		= 2; //_emDoingType
}


//-------------------------------------------------------------
//------------------------------ 欢乐连连看
//----连连看请求
enum _emC2S_JoyousLinkup_Protocol
{
	C2S_JoyousLinkup_Start	        = 1; 	// 开始游戏 PBC2GJoyousLinkupStart
    C2S_JoyousLinkup_Connect	    = 2; 	// 连接棋子 PBC2GJoyousLinkupConnect
    C2S_JoyousLinkup_Refresh	    = 3; 	// 刷新棋子位置
    C2S_JoyousLinkup_Quit	        = 4; 	// 退出游戏
}

// 坐标
message PBJoyousLinkupPos
{
    optional uint32 x               = 1; //x
    optional uint32 y               = 2; //y
}
// 开始游戏
message PBC2GJoyousLinkupStart
{
    optional bool bStart         = 1;   //是否为重开
}

// 连接棋子
message PBC2GJoyousLinkupConnect
{
    optional PBJoyousLinkupPos startPos         = 1; //起始棋子坐标
    optional PBJoyousLinkupPos endPos           = 2; //目标棋子坐标
}


//----连连看返回
enum _emS2C_JoyousLinkup_Protocol
{
	S2C_JoyousLinkup_Start_Info	        = 1; 	// 初始信息 PBG2CJoyousLinkupStartInfo
    S2C_JoyousLinkup_Connect_Result	    = 2; 	// 连接棋子返回 PBG2CJoyousLinkupConnectResult
    S2C_JoyousLinkup_Info_Chg	        = 3; 	// 棋子位置刷新 PBG2CJoyousLinkupChessData
    S2C_JoyousLinkup_End	            = 4; 	// 游戏结束 PBG2CJoyousLinkupEnd
    S2C_JoyousLinkup_Quit	            = 5; 	// 退出游戏
}


//每一行的数据
message PBJoyousLinkupChessRow
{
	optional uint32 					index 		= 1;	// 索引
    repeated PBU32U32 					data  		= 2;    // 数值
}
//棋盘数据
message PBJoyousLinkupChessData
{
	repeated PBJoyousLinkupChessRow	indexdata	= 1;	//棋盘数据
}


// 初始数据
message PBG2CJoyousLinkupStartInfo
{
    optional uint32 index                           = 1; //棋盘类型
    optional PBJoyousLinkupChessData chessData      = 2; //棋盘数据
    optional uint32 topScore                        = 3; //最高积分
    optional uint32 currScore                       = 4; //当前积分
    optional uint32 layerId                         = 5; //关卡id
}

// 连接返回
message PBG2CJoyousLinkupConnectResult
{
    optional bool flag                           = 1; //是否成功消除
    optional uint32 endTime                      = 2; //倒计时结束时间
    optional uint32 currDoubleHit                = 3; //当前连击数
    optional PBJoyousLinkupPos startPos          = 4; //起始棋子坐标
    optional PBJoyousLinkupPos endPos            = 5; //目标棋子坐标
    optional uint32 currScore                    = 6; //当前积分
}

// 棋盘棋子位置刷新
message PBG2CJoyousLinkupChessData
{
    optional PBJoyousLinkupChessData chessData      = 1; //棋盘数据
    optional uint32 refreshNum                      = 2; //刷新次数
}

// 游戏结束
message PBG2CJoyousLinkupEnd
{
    optional bool   flag                         = 1; //游戏完成
    optional uint32 doubleHitScore               = 2; //连击得分
    optional uint32 disScore                     = 3; //消除得分
    optional uint32 timeScore                    = 4; //时间得分
    optional bool   bOver                        = 5; //游戏结束
}

//-------------------------------------------------------------
//------------------------------ 跨服天梯相关
enum _emResultLadder_26
{
	R_ResultLadder_Succeed			= 0; // 成功
	R_ResultLadder_Fail				= 1; // 失败
	R_ResultLadder_Cooling			= 2; // 冷却中
	R_ResultLadder_NeedFightCount	= 3; // 挑战次数不足
	R_ResultLadder_InFighting		= 4; // 该玩家正在进行一场战斗，请稍后再试
	R_ResultLadder_NeedItem			= 5; // 道具不足
	R_ResultLadder_NeedOpenTime		= 6; // 不在开启时间内
	R_ResultLadder_MaxBuyCount		= 7; // 达到最大购买次数
	R_ResultLadder_NoPlayer			= 8; // 玩家不存在
	R_ResultLadder_Like				= 9; // 已经点过赞了
	R_ResultLadder_NotInRank		= 10; // 不在排名内
	R_ResultLadder_NeedVIP			= 11; // 需要VIP等级
};
//----客户端到服务器
enum _emC2S_Ladder_Protocol
{
	C2S_Ladder_Open				= 1	;//打开			PBG2BWOpenAsk
	C2S_Ladder_Refresh			= 2	;//刷新对手 	PBPlayerQuery
	C2S_Ladder_BuyCount			= 3	;//购买次数		PBU32
	C2S_Ladder_FightOneKey		= 4	;//一键挑战
	C2S_Ladder_HeroTop			= 5	;//英雄殿
	C2S_Ladder_HeroTopLike		= 6	;//点赞英雄殿	PBC2GLike
	C2S_Ladder_QueryRecord		= 7	;//查询我的记录
	C2S_Ladder_QueryPublicRecord= 8	;//查询大神记录	PBPlayerQuery
	C2S_Ladder_QueryPlayerInfo	= 9 ;//查询玩家数据 PBLadderQueryPlayerInfo

	//以下服务器用
	G2BW_Ladder_FightBegin		=50	;//战斗开始	PBFightBase
	G2BW_Ladder_FightResult		=51	;//战斗结束	PBFightResult
	G2BW_Ladder_Like			=52	;//点赞英雄殿	PBG2BWLike
	G2BW_Ladder_QueryHeroTop	=53	;//英雄殿	PBPlayerQuery
	G2BW_Ladder_UpdateDefense	=54 ;//更新防守阵容
};
//----服务器到客户端
enum _emS2C_Ladder_Protocol
{
	S2C_Ladder_CommonAck		= 0;//失败才返回
	S2C_Ladder_SynInfo			= 1;//同步信息			PBG2CLadderSynInfo	
	S2C_Ladder_RefreshAck		= 2;//刷新对手返回		PBG2CLadderRefreshAck
	S2C_Ladder_BuyCountAck		= 3;//购买次数返回		PBU32
	S2C_Ladder_SynFightCount	= 4;//同步挑战从数		PBU32
	S2C_Ladder_FightResult		= 5;//战斗结果			PBG2CLadderResult
	S2C_Ladder_HeroTopAck		= 6;//英雄殿返回		PBG2CLadderHeroTopAck
	S2C_Ladder_RecordAck		= 7;//查询我的记录返回	PBG2CLadderRecordAck
	S2C_Ladder_PublicRecordAck	= 8;//查询大神记录返回	PBLadderPublicAllRecord
	S2C_Ladder_SynCountAck		= 9;//同步次数			PBU32
	S2C_Ladder_HeroTopLikeACK	= 10;//点赞英雄殿返回	PBG2CLike
	S2C_Ladder_QueryPlayerInfo	= 11;//查询玩家数据返回  PBLadderPlayerInfo

		//以下服务器用
	BW2G_Ladder_FightBeginAck	= 51;//战斗开始	PBFightBase
	BW2G_Ladder_SynRefreshRank	= 52;//同步刷新对手	PBBW2GSynRefreshRank
	BW2G_Ladder_Like			= 53;//点赞英雄殿返回	PBG2CLike
	W2G_Ladder_CheckRank		= 54;//检查竞技场排名返回
};

//查询我的记录返回
message PBG2CLadderRecordAck
{
	repeated PBPlayerLadderRecord	 	record			= 3;	// 记录
}
//战斗结果
message PBG2BWOpenAsk
{
	optional uint32	 					playerid		= 1;	// 玩家ID
	optional uint32	 					worldid			= 2;	// 世界ID
	repeated uint32	 					rank			= 3;	// 刷新名次
}
//战斗结果
message PBBW2GSynRefreshRank
{
	repeated uint32	 					rank		= 1;	// 名次
}
//英雄殿
message PBLadderHeroTop
{
	optional PBPlayerDisplay		display				= 1;//显示
	optional string					factionname			= 2;//公会名称
	optional uint32					likecount			= 3;//点赞次数

}
//英雄殿返回
message PBG2CLadderHeroTopAck
{
	repeated PBLadderHeroTop 		herotop			=1;//英雄殿
}
//对手基本信息
message PBLadderObject
{
	optional uint32					id				= 1;// 机器人ID/玩家ID
	optional uint32					param			= 2;// 是否是机器人
	optional PBPlayerDisplay		display			= 3;// 显示
	optional uint32 				rank			= 4;// 排名
	optional uint32 				fightpower		= 5;// 战斗力
	optional PBBattlePet			defense			= 6;// 防守信息
	optional string 				factionname		= 7;// 公会名
	optional uint32 				fighttime		= 8;// 攻击时间
	optional uint32 				like			= 9;// 点赞数
}
//大神记录
message PBLadderPublicRecord
{
	optional uint64 				battlesn	= 1;//流水号
	optional uint32 				time		= 2;//流水号
	optional PBPlayerDisplay		windisplay	= 3;//胜利者显示
	optional uint32 				winrank		= 4;//胜利者排名
	optional PBPlayerDisplay		faildisplay	= 5;//失败者显示
	optional uint32 				failrank	= 6;//失败者排名
}
//大神所有记录
message PBLadderPublicAllRecord
{
	optional uint32					groupid		= 1;//组ID
	repeated PBLadderPublicRecord 	record		= 2;//大神记录
}
//保存排行
message PBLadderObjectSave
{
	optional uint32 				groupid		= 1;//跨服组
	optional uint32 				orderid		= 2;//排名
	repeated PBLadderObject 		target		= 3;//对手基本信息
}
//同步信息返回
message PBG2CLadderSynInfo
{
	optional uint32					order			= 1;	//自己名次
	repeated PBLadderObject 		target			= 2;	//刷新的目标信息
}
//对手信息返回
message PBG2CLadderTopInfo
{
	optional uint32					order		= 1;	//自己名次
	optional uint32 				score		= 2;	//积分
}
//刷新对手信息返回
message PBG2CLadderRefreshAck
{
	repeated PBLadderObject 		target			= 1;	//对手基本信息
	optional uint32					nextrefreshtime	= 2;	//下次刷新时间
}

//查看排行榜
message PBC2GLadderTopList
{
	optional uint32					begin		= 1;	//开始名次
	optional uint32 				end			= 2;	//结束名次
}
//战斗结果
message PBG2WLadderFightResult
{
	optional uint64				id				= 1;	//挑战ID
	optional uint32				result 			= 2;	//战斗结果 _emBattleResult
	repeated PBItem				iteminfo		= 3;	//奖励信息
}
//真正开始
message PBW2GLadderRealBegin
{
	optional uint64					id			= 1;	//目标ID
}
//战斗结果
message PBLadderResultInfo
{
	optional PBPlayerDisplay		display		= 1;	//显示
	optional uint32					score		= 2;	//最新积分
	optional int32					addscore	= 3;	//改变积分
}
//战斗结果
message PBG2CLadderResult
{
	optional uint64					battlesn	= 1;	//挑战sn
	optional uint32					battletype	= 2;	//挑战类型
	optional uint32					id			= 3;	//挑战ID
	optional uint32					param		= 4;	//参数
	optional uint32					result 		= 5;	//战斗结果 _emBattleResult
	repeated PBItemInfo				iteminfo	= 6;	//奖励信息
	optional PBLadderResultInfo	friend		= 7;	//友方
	optional PBLadderResultInfo	enermy		= 8;	//敌方

}

//点赞
message PBC2GLike
{
	optional uint32 likeplayerid 	= 1;//点赞player id
	optional bool	robot 			= 2;//是否是机器人
}

//点赞
message PBG2BWLike
{
	optional uint32 playerid 		= 1;//player id
	optional uint32 worldid 		= 2;//world id
	optional uint32 likeplayerid 	= 3;//点赞player id
	optional bool	robot 			= 4;//是否是机器人
}

//点赞
message PBG2CLike
{
	optional uint32 playerid 		= 1;//player id
	optional bool	robot 			= 2;//是否是机器人
	optional uint32 likes			= 3;//点赞数
}

//查询玩家信息
message PBLadderQueryPlayerInfo
{
	optional uint32 playerid 	= 1; // 玩家ID/机器人ID
	optional bool 	robot		= 2; // 是否是机器人
}

//查询玩家信息
message PBG2BWLadderQueryPlayerInfo
{
	optional uint32 playerid 		= 1; //player id
	optional uint32 worldid 		= 2; //world id
	optional uint32 queryplayerid 	= 3; // 玩家ID/机器人ID
	optional bool 	robot			= 4; // 是否是机器人
}

//玩家信息
message PBLadderPlayerInfo
{
	optional PBPlayerDisplay 	playerdisplay 	= 1;// player display
	optional PBBattlePet		defense 		= 2;// 防守阵容
	optional uint32 			rank			= 3;// 排名
	optional uint32 			fightpower		= 4;// 战斗力
	optional string 			factionname		= 5;// 公会名
	optional uint32 			like			= 6;// 点赞数
}

//创建角色
message PBCreateRole
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional 	string 		accountName			= 5;	//账号名
	optional	uint32		iRoleId				= 6;	//角色ID
	optional	string		vRoleName			= 7;	//角色名
	optional	uint32		loginType			= 8;	//登录方式
	optional	uint32		loginChannel		= 9;	//登录渠道
	optional	string		vClientIp			= 10;	//客户端所在ip
}
//角色登陆
message PBRoleLogin
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional 	string 		accontName			= 5;	//用户名称
	optional	uint32		iRoleId				= 6;	//角色ID
	optional	string		vRoleName			= 7;	//角色名
	optional	uint32		loginChannel		= 8;	//登录渠道
	optional	string		vClientIp			= 9;	//客户端所在ip
	optional	uint32		vipLevel			= 10;	//角色VIP等级
	optional	uint32		iRoleLevel			= 11;	//角色等级
	optional	uint32		iRoleFight			= 12;	//角色战力
	optional	uint32		iJinbi				= 13;	//角色金币数
	optional	uint32		izuanshi			= 14;	//角色钻石数量
	optional	uint32		expNum				= 15;	//角色经验数量
	optional 	string		dtCreateTime		= 16;	//角色创建的时间, 格式 YYYY-MM-DD HH:MM:SS
	optional	uint32		cerateRoleDays		= 17;	//角色创角天数

}
//角色登出
message PBRoleLogout
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional 	string 		accontName			= 5;	//用户名称
	optional	uint32		iRoleId				= 6;	//角色ID
	optional	string		vRoleName			= 7;	//角色名
	optional	string		loginTime			= 8;	//登录时间
	optional	uint32		loginChannel		= 9;	//登录渠道
	optional	string		vClientIp			= 10;	//客户端所在ip
	optional	uint32		vipLevel			= 11;	//角色VIP等级
	optional	uint32		iRoleLevel			= 12;	//角色等级
	optional	uint32		iRoleFight			= 13;	//角色战力
	optional	uint32		iJinbi				= 14;	//角色金币数
	optional	uint32		izuanshi			= 15;	//角色钻石数量
	optional	uint32		expNum				= 16;	//角色经验数量
	optional	uint32		onlineTime			= 17;	//本次在线时间
}
//角色等级
message PBLevelUp
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional	uint32		iOperateType		= 8;	//升级原因
	optional	uint32		beginExpNum			= 9;	//开始经验
	optional	uint32		addExpNum			= 10;	//增加经验
	optional	uint32		endExpNum			= 11;	//结束后经验
	optional	uint32		endLevel			= 12;	//变动后等级
	optional	uint32		itemID				= 13;	//经验道具id
	optional	uint32		itemNum				= 14;	//经验道具个数
}
//在线人数
message PBOnlineCount
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional	uint32		iAccountCount		= 4;	//当前在线帐号数量
}
//充值
message PBRecharge
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional	string		vSN					= 8;	//流水号
	optional	uint32		ts					= 9;	//充值时间
	optional	uint32		iPayDelta			= 10;	//充值金额(单位人民币分)
	optional	uint32		beginZuanShi		= 11;	//变化前钻石数量
	optional	uint32		addZuanShi			= 12;	//变化钻石数量
	optional	uint32		endZuanShi			= 13;	//变化后钻石数量
	optional	uint32		chargeChannel		= 14;	//充值渠道
	optional	uint32		deviceID			= 15;	//设备id
	optional	uint32		doingtype			= 16;	//来源
	optional	uint32		vipLevel			= 17;	//vip等級
	optional	uint32		goodsId				= 18;	//购买礼包ID
	optional	string		goodsName			= 19;	//购买礼包名称
	optional	string		rechargeMode		= 20;	//充值方式（微信。。）
	optional	uint32		rechargeAmount		= 21;	//累计充值金额
	optional	uint32		rechargeCount		= 22;	//累计充值次数
	optional	string		player_ip			= 23;	//充值IP	
}

//任务日志
message PBTaskLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional	uint32		taskId				= 8;	//任务Id
	optional	uint32		taskType			= 9;	//任务类型 5日环 10周环
	optional	uint32		loginChannel		= 10;	//登录渠道
}

//获得物品
message PBReceiveGoods
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	uint32		iOperateType		= 6;	//操作类型
	optional	uint32		goodsId				= 7;	//物品ID
	optional	uint32		count				= 8;	//获得的数量
	optional	uint32		bindtype			= 9;	//是否绑定(0:不绑定 1:绑定)
	optional	string		equipprop			= 10;	//装备属性
}
//使用物品
message PBUseGoods
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	uint32		iOperateType		= 6;	//操作类型
	optional	uint32		goodsId				= 7;	//物品ID
	optional	string		goodsName			= 8;	//物品名称
	optional	uint32		count				= 9;	//获得的数量
	optional	uint32		positionItemNum		= 10;	//动作后格子数量
}
// 获得现金 
message PBReceiveMoney
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	uint32		iRoleLevel			= 6;	//角色等级
	optional	uint64		oldMoney			= 7;	//动作前的金钱
	optional	uint64		newMoney			= 8;	//动作后的金钱
	optional	uint64		changeValue			= 9;	//角色银币数
	optional	uint32		valueType			= 10;	//金钱类型
	optional	uint32		iOperateType		= 11;	//操作类型
}
// 使用现金 
message PBUseMoney
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	uint32		iRoleLevel			= 6;	//角色等级
	optional	uint64		oldMoney			= 7;	//动作前的金钱
	optional	uint64		newMoney			= 8;	//动作后的金钱
	optional	uint64		changeValue			= 9;	//角色银币数
	optional	uint32		valueType			= 10;	//金钱类型 _emExpendType
	optional	uint32		iOperateType		= 11;	//操作类型
}

//元宝消耗
message PBShop
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iCost				= 7;	//消耗值
	optional	uint32		iShopType			= 8;	//消耗类型
	optional	uint32		iGoodsType			= 9;	//操作类型
	optional	uint32		iGoodsId			= 10;	//购买道具ID
	optional	uint32		iGoodsNum			= 11;	//购买道具个数
	optional	uint64		iNewCash			= 12;	//剩余值
	optional	uint32		loginChannel		= 13;	//登录渠道
}

//英雄事件
message PBHero
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		upetID				= 9;	//英雄id
	optional	string		petName				= 10;	//英雄名称
	optional	uint32		type				= 11;	//动作
	optional	uint32		doingType			= 12;	//动作变化渠道
	optional	uint32		changeNum			= 13;	//动作变化数量
	optional	uint64		beginNum			= 14;	//开始数量
	optional	uint32		endNum				= 15;	//结束数量
	optional	uint32		totalNum			= 16;	//英雄总数量
}

// 客户端加载 
message PBC2SLoadProgress
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32		plattype			= 3;	//平台类型
	optional 	uint32 		worldid				= 4;	//服ID
	optional 	uint32 		iuin				= 5;	//用户ID
	optional	uint32		progress			= 6;	//加载进度
	optional	string		deviceid			= 7;	//设备id
}

//星石合成锻造
message PBRuneCompause
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		compauseID			= 7;	//合成的id
	optional	uint32		useCount			= 8;	//消耗的个数
	optional	uint32		result				= 9;	//结果(0失败 1成功)
}
//星石重铸
message PBRuneRefine
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint64		itemSn				= 7;	//星石sn
	optional	uint32		itemID				= 8;	//星石id
	optional	string		oldAttr				= 9;	//旧属性，格式 类型_值_万分比;
	optional	string		newAttr				= 10;	//新属性，格式 类型_值_万分比;
	optional	string		oldSkill			= 11;	//旧技能，格式 技能ID_等级;
	optional	string		newSkill			= 12;	//新技能，格式 技能ID_等级;
}
//星石保存
message PBRuneSave
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint64		itemSn				= 7;	//星石sn
	optional	uint32		itemID				= 8;	//星石id
	optional	string		oldAttr				= 9;	//旧属性，格式 类型_值_万分比;
	optional	string		newAttr				= 10;	//新属性，格式 类型_值_万分比;
	optional	string		oldSkill			= 11;	//旧技能，格式 技能ID_等级;
	optional	string		newSkill			= 12;	//新技能，格式 技能ID_等级;
}
//商城刷新
message PBShopRefresh
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		shopType			= 7;	//商店类型
}
//天赋升级
message PBTalentUpgrade
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		pos					= 7;	//位置
	optional	uint32		skillID				= 8;	//技能ID
	optional	uint32		skillLevel			= 9;	//技能等级1表示学习,0表示遗忘，其他表示升级
}
//英雄升级
message PBHeroUgrade
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint64		heroSn				= 7;	//位置
	optional	uint32		heroID				= 8;	//技能ID
	optional	uint32		addLevel			= 9;	//增加等级
	optional	uint32		newLevel			= 10;	//新等级
}
//英雄升阶
message PBHeroAdvance
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint64		heroSn				= 7;	//位置
	optional	uint32		heroID				= 8;	//技能ID
	optional	uint32		newLevel			= 9;	//新阶
}
//英雄升星
message PBHeroStar
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint64		heroSn				= 7;	//位置
	optional	uint32		heroID				= 8;	//技能ID
	optional	uint32		newStar				= 9;	//新的星级
	optional	string		expendPets 			= 10;	//消耗英雄
	optional	string		expendItems			= 11;	//消耗道具
}
//远航接取
message PBSailAccpet
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		sailType			= 7;	//任务类型
	optional	uint32		sailIndex			= 8;	//远航索引
}
//远航完成
message PBSailComplete
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		sailType			= 7;	//任务类型
	optional	uint32		sailIndex			= 8;	//远航索引
	optional	uint32		lefttime			= 9;	//剩余时间秒
}
//剧情副本
message PBHookBoss
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		stageid				= 7;	//关卡ID
	optional	uint32		useTime				= 8;	//使用时间
	optional	uint32		fightpower			= 9;	//玩家战斗力
	optional	string		prize				= 10;	//奖励 格式 道具id_个数;
}
//挂机收益
message PBHookProfit
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		isFree				= 7;	//是否免费1免费
	optional	uint32		sweepcount			= 8;	//快速作战日次数(0表示挂机)
	optional	uint32		profitTime			= 9;	//使用时间
	optional	string		prize				= 10;	//奖励 格式 道具id_个数;
}
//竞技场挑战日志
message PBChallengeLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		result				= 7;	//挑战结果 1 成功 0 失败
	optional	int32		addScore			= 8;	//积分变化
	optional	uint32		scoreAfter			= 9;	//挑战后积分
	optional	uint32		itemCount			= 10;	//挑战前消耗道具数量
	optional	uint32		itemCountAfter		= 11;	//挑战后消耗道具数量
	optional	uint32		rank				= 12;	//挑战后的名次
	optional	uint32		targetID			= 13;	//被挑战用户ID
	optional	string		targetName			= 14;	//被挑战用户名称
	optional	int32		targetAddScore 		= 15;	//被挑战者积分变化
}

//竞技场宝箱日志
message PBChallengeBoxLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		index				= 7;	//宝箱ID
	optional	uint32		fightcount			= 8;	//战斗次数
	optional	string		prize				= 9;	//奖励道具
}

//邮件日志
message PBMailLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	string		receiveTime			= 7;	//领取时间
	optional	string		prize				= 8;	//奖励道具
}

//冠军赛下注日志
message PBChampionBetLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		coin				= 7;	//竞猜币数量
	optional	uint32		guessCoin			= 8;	//下注数量
	optional	uint32		side				= 9;	//下注哪边1左边0右边
}

//冠军赛竞猜日志
message PBChampionGuessLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	int32		addCoin				= 7;	//竞猜币变化
	optional	uint32		guessCoin			= 8;	//下注数量
	optional	uint32		result				= 9;	//竞猜结果1猜对0猜错
	optional	uint32		coinAfter			= 10;	//竞猜后竞猜币数量
}

//冠军赛排行榜日志
message PBChampionTopListLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		rank				= 7;	//名次
}

//试炼塔挑战日志
message PBTowerLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		stage				= 7;	//关卡
	optional	uint32		result				= 8;	//结果 1 通过 0 未通过
	optional	string		prize				= 9;	//奖励道具
}

//试炼塔奖励日志
message PBTowerPrizeLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		curStage			= 7;	//当前通关数
	optional	uint32		index				= 8;	//奖励ID
	optional	string		prize				= 9;	//奖励道具
}

//英雄献祭日志
message PBHeroSplitLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		heroID				= 7;	//英雄ID
	optional	string		heroName			= 8;	//英雄名称
	optional	uint32		count				= 9;	//数量
	optional	string		addItems			= 10;	//获得道具
}

//英雄碎片献祭日志
message PBHeroPieceSplitLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		heroPieceID			= 7;	//英雄碎片ID
	optional	string		heroPieceName		= 8;	//英雄碎片名称
	optional	uint32		count				= 9;	//数量
	optional	string		addItems			= 10;	//获得道具
}

//万神殿抽奖日志
message PBPantheonCallLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	string		removeItems			= 7;	//消耗物品
	optional	string		addItems			= 8;	//得到物品
	optional	string		items				= 9;	//道具数量
	optional	string		itemsAfter			= 10;	//召唤后道具数量
}

//万神殿-英雄转换日志
message PBHeroChangeLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		heroID				= 7;	//英雄ID
	optional	string		removeItems			= 8;	//消耗道具
	optional	uint32		newHeroID			= 9;	//新英雄ID
}

//万神殿-英雄转换保存日志
message PBHeroChangeSaveLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		heroID				= 7;	//英雄ID
	optional	uint32		newHeroID			= 9;	//新英雄ID
}

//装备锻造日志
message PBEquipForgeLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	string		removeItems			= 7;	//消耗道具
	optional	string		addItems			= 8;	//获得道具
}

//设置阵法日志
message PBZhenFaLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	string		zhenfa 				= 7;	//设置阵法
	optional	uint32		zhenfaid 			= 8;	//阵法id
}

//英雄高星重生
message PBHeroRebornLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		heroID				= 7;	//英雄ID
	optional	uint32		iOperateType		= 8;	//操作类型
	optional	string		vBefore				= 9;	//重生前 等级；星级；进化段数
	optional	string		vAfter				= 10;	//重生后 等级；星级；进化段数

}
//英雄进化
message PBHeroEvolveLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional	uint32		heroID				= 8;	//英雄ID
	optional	uint32		heroLevel			= 9;	//英雄等级
	optional	uint32		heroStar			= 10;	//英雄星级
	optional	string		vBefore				= 11;	//进化后   	进化段数；皮肤ID
	optional	string		vAfter				= 12;	//进化后	进化段数；皮肤ID
}

//玩家举报
message PBReportLog
{
	optional string account  	 		= 1;//账号名
	optional uint32 player_id  			= 2;//角色ID
	optional uint32 server_id  			= 3;//游戏大区ID	
	optional string player_name 		= 4;//角色名
	optional uint32 report_server_id 	= 5;//举报玩家ID
	optional uint32 report_player_id 	= 6;//举报玩家ID
	optional string report_player_name 	= 7;//举报玩家名字
	optional string reason 			 	= 8;//理由
	optional string explain_			= 9;//解释
	optional string proof 			 	= 10;//证据
	optional string log_time 		 	= 11;//记录时间, 格式 YYYY-MM-DD HH:MM:SS
}

//玩家引导
message PBGuideLog
{
	optional	uint32		player_id 		 = 1;	//角色ID
	optional 	string 		account			 = 2;	//账号名
	optional 	uint32 		server_id		 = 3;	//游戏大区ID
	optional	string		player_name		 = 4;	//角色名
	optional 	uint32 		guide_id		 = 5;	//引导ID
	optional 	string 		log_time 		 = 6;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
}
//玩家问卷调查
message PBSurveyLog
{
	optional	string		account			 = 1;	//账户名
	optional 	uint32 		player_id		 = 2;	//用户ID
	optional 	uint32 		server_id		 = 3;	//游戏大区ID
	optional	string		player_name		 = 4;	//角色名
	optional 	uint32 		question_id		 = 5;	//问题ID
	optional	string		question		 = 6;	//问题
	optional 	string 		answer			 = 7;	//答案
	optional 	string 		log_time 		 = 8;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
}

//携带物觉醒强化日志
message PBHeroHorcruxLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		RoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional 	uint32		iVipLevel 			= 8; 	//vip等级
	optional 	uint32		HorcruxID			= 9;	//携带物ID
	optional 	uint32 		uBefore				= 10;	//强化前数据
	optional 	uint32		uAfter 				= 11;	//强化后数据
	optional 	string 		HeroInfo			= 12;	//英雄数据
}

//孵化屋日志
message PBIncubateEggLog
{
	optional 	string		ieventid			= 1;	//游戏事件ID
	optional 	string		dtEventTime			= 2;	//记录时间, 格式 YYYY-MM-DD HH:MM:SS
	optional 	uint32 		iWorldId			= 3;	//游戏大区ID
	optional 	uint32 		iUin				= 4;	//用户ID
	optional	uint32		iRoleId				= 5;	//角色ID
	optional	string		vRoleName			= 6;	//角色名
	optional	uint32		iRoleLevel			= 7;	//角色等级
	optional 	uint32		iVipLevel			= 8;	//vip等级
	optional	uint32 		uIncubateIndex 		= 9;	//孵化位
	optional	uint32		heroID				= 10;	//英雄ID
	optional	uint32		heroLevel			= 11;	//英雄等级
	optional	uint32		heroStar			= 12;	//英雄星级
	optional 	uint32 		uOperateID			= 13; 	//操作类型
}


//------------------------------ 结果
enum _emResultLottery
{
	R_ResultLottery_Succeed				= 0; // 成功
	R_ResultLottery_Fail				= 1; // 失败
	R_ResultLottery_TYPE_INVALID		= 2; // 数据包TYPE参数不对
	R_ResultLottery_INDEX_INVALID		= 3; // 数据包INDEX参数不对
	R_ResultLottery_NOT_COUNT			= 4; // 次数已用完
	R_ResultLottery_NeedVIP				= 5; // 需要VIP等级不足
	R_ResultLottery_RemoveCount_INVALID	= 6; // 要扣除物品数量配置不对	
	R_ResultLottery_NeedItem			= 7; // 需要物品不足
};

// 玩法类型
enum _emLotteryType
{
	LotteryType_Wishing   = 1; // 许愿进化 
	LotteryType_DropCard  = 2; // 心愿抽卡
	LotteryType_UnlockPet = 3; // 解放胡帕
	LotteryType_CommonPet = 4; // 通用精灵 4~10为通用类型
	LotteryType_CommonPet1 = 10; // 通用精灵4~10为通用类型
};

// 抽獎类型
enum _emLotteryRefreshType
{
	LotteryRefreshType_KEY1 = 1;  // 许愿1
	LotteryRefreshType_KEY2 = 2;  // 许愿2
}

// ---- 许愿模块 ---------
enum _emC2S_Lottery_Protocol
{
	C2S_Lottery_Refresh			= 1; 	// 许愿请求 PBC2GLotteryRefresh
	C2S_Lottery_Pool_Set		= 2; 	// 许愿池设置请求 PBC2GLotteryPoolSet
}

// ---- 许愿模块 ---------
enum _emS2C_Lottery_Protocol
{
	S2C_Lottery_Refresh			= 1; 	// 许愿回应 PBG2CLotteryRefresh
	S2C_Lottery_Pool_Set 		= 2; 	// 许愿池设置请求 PBG2CLotteryPoolSet
}


// 客户端 许愿请求 C2S_Lottery_Refresh
message PBC2GLotteryRefresh
{
	optional uint32 type 			= 1; 	// 类型值，用于扩展区别不同玩法，_emLotteryType
	optional uint32 index			= 2; 	// 许愿序号  _emLotteryRefreshType
}

// 服务器 许愿请求回应 S2C_Lottery_Refresh
message PBG2CLotteryRefresh
{
	optional uint32 code				= 1; 	// 返回结果 _emResultLottery
	optional PBPlayerLotteryData data	= 2; 	// 数据
	repeated PBU32U32 prizeItems		= 3; 	// 奖励物品列表
}

// 客户端 许愿池设置请求 C2S_Lottery_Pool_Set
message PBC2GLotteryPoolSet
{
	optional uint32 type 			= 1; 	// 类型值，用于扩展区别不同玩法，_emLotteryType
	optional uint32 index			= 2; 	// 许愿序号， 0=次数为1; 1=次数为10次许愿
}

// 服务器 许愿池设置请求 S2C_Lottery_Pool_Set 
message PBG2CLotteryPoolSet
{
	optional uint32 code				= 1;	// 结果 _emResultLottery
	optional PBPlayerLotteryData data	= 2; 	// 数据	
}

//-------------------------------------------------------------
//------------------------------ 邮件相关
enum _emResultMail_7
{
	R_ResultMail_Succeed			= 0; // 成功
	R_ResultMail_Fail				= 1; // 失败
	R_ResultMail_BagFull			= 2; // 背包已满
	R_ResultMail_HaveReward			= 3; // 已经领取过
	R_ResultMail_NoMail				= 4; // 无此邮件
	R_ResultMail_NoRewardItem		= 5; // 此邮件无奖励
	R_ResultMail_ItemNoReward		= 6; // 有附件未领取
};

//--- 客户端到服务器
enum _emC2S_Mail_Protocol
{
	C2S_Mail_Read				= 0	;//读取邮件	PBMailID
	C2S_Mail_Reward				= 1	;//领取奖励	PBMailID
	C2S_Mail_RewardAll			= 2	;//领取所有奖励  无内容
	C2S_Mail_Delete				= 3	;//删除邮件	PBMailID
	C2S_Mail_DeleteAll			= 4	;//领取所有邮件  无内容
};
//----服务器到客户端
enum _emS2C_Mail_Protocol
{
	S2C_Mail_New				= 0	;//新邮件 	PBMail
	S2C_Mail_Delete				= 1	;//删除返回	 PBAllMailID
	S2C_Mail_Read				= 2	;//已读返回	PBMailID
	S2C_Mail_Reward				= 3	;//领取返回	PBAllMailID
};

// 邮件
message PBMailID
{
	optional uint32 mailid			= 1;//邮件ID
};

// 邮件
message PBAllMailID
{
	repeated uint32 mailid			= 1;//邮件ID
};

//------------------------------------------------------
//------------------------------ 结果
enum _emResultNet_255
{
	NetResult_Succeed 		= 0	; //成功
	NetResult_Fail			= 1	; //失败
	NetResult_SizeError		= 2	; //大小错误
	NetResult_VersionError	= 3	; //版本错误 
	NetResult_SendError		= 4	; //发送错误 
	NetResult_DBError		= 5	; //数据库错误
	NetResult_Online		= 6	; //上线
	NetResult_Offline		= 7	; //离线*/ 
	NetResult_Complete		= 8	; //完成*/ 
	NetResult_Max			= 9;
	
	R_Login_Loging			= 10; //正在登录中
	R_Login_Wait			= 11; //等待消息
	R_Login_PwdError		= 12; //密码错误
	R_Login_Disable			= 13; //IP冻结
	R_Login_Freeze			= 14; //帐号冻结
	R_Login_Timeout			= 15; //超时
	R_Login_DBError			= 16; //数据库错误
	R_Login_Reloging		= 17; //需要重新登录
	R_Login_Entering		= 18; //帐号正在登录中
	R_Login_ServerID		= 19; //选择服务器错误【一般为配置错误】
	R_Login_OnlineMax		= 20; //在线人数已满
	R_Login_Kickout			= 21; //登录踢人
	R_Login_NoAccount		= 22; //无此账号
	
	R_PlayerCreate_Ignore			= 23; //服务器未链接成功稍后再试
	R_PlayerCreate_Full				= 24; //可创建角色已满
	R_PlayerCreate_JobError			= 25; //职业错误
	R_PlayerCreate_BadWord			= 26; //名称中包含禁用字词
	R_PlayerCreate_Createing		= 27; //角色正在创建中
	R_PlayerCreate_Wait				= 28; //正在创建请稍等
	R_PlayerCreate_Useed			= 29; //角色名已被使用
	R_PlayerCreate_NotLength		= 30; //角色名长度不足
	R_PlayerDelete_NoPlayerID		= 31; //无此账号
	R_EnterScene_Close				= 32; //场景已关闭
	R_PlayerCheckName_Checking		= 33; // 检测名字中
	R_PlayerCheckName_Wait			= 34; // 检测名字等待
	R_PlayerCheckName_Count			= 35; // 随便名字次数超出限制
	R_PlayerCreate_IllegalCharacter	= 36; //包含非法字符

	R_Login_Platform				= 37; //平台验证错误
	R_EnterScene_GroupLimit			= 38; //该服务器暂时无法参加此玩法

	NetResult_NoBindTimeOut			= 39; //作为未实名用户，您的体验时长已结束，请实名认证之后再登陆游戏。
	NetResult_noAultTimeOut			= 40; //作为未成年用户，您的体验时长已结束，无法登陆游戏。
	NetResult_noAultNotLogin		= 41; //作为未成年用户，您的游戏时间将会受限，敬请知晓。
	NetResult_noBlindNotLogin		= 42; //作为未实名用户，您的游戏时间将会受限，敬请知晓。

	R_InviteCode_NoPlayer			= 50; // 角色不存在
	R_InviteCode_NoInvitePlayer		= 51; // 邀请角色不存在
	R_InviteCode_HadInvited			= 52; // 该账户已经使用过邀请码
	R_InviteCode_InviteNum			= 53; // 对方可邀请数量已满

	R_SystemBusy_PlayerSaveData		= 54; // 您的游戏数据正在保存中，请稍后登录。
};

//------------------------------------------------------
//------------------------------ 连接标志
enum _e_P_OperateFlag
{
	P_SO_Verify_Ask	= 0	; //验证请求 	VerifyAsk
	P_SO_Ping_Ask	= 1	; //Ping请求	PingAsk
	P_SO_Login_Ask	= 2	; //登录请求	(取CAW PBLoginAsk和CAG PBC2GLoginAsk)

	P_SO_Verify_Ack	= 3	; //验证应答	VerifyAck
	P_SO_Ping_Ack	= 4	; //Ping应答	PingAck
	P_SO_Disconnect	= 5	; //断开命令 	无内容
	P_SO_Bad_Notify	= 6	; //错误包通知	BadNotify
	P_SO_Kick_Notify= 7 ; //踢出通知 	无内容
	P_SO_Login_Ack	= 8	; //登录应答	(取CAW PBLoginAck 和CAG PBG2CLoginAck)	

	P_SO_TimeoutRead= 9; //读取超时	无内容	_emNetResult
	P_SO_TimeoutWrite = 10	; //写入超时	无内容	_emNetResult
};

// 验证请求
message VerifyAsk
{
	optional uint32 mainVersion 	= 1;				// 主版本号
	optional uint32 subVersion 		= 2;				// 子版本号
}
	
// 验证返回	
message VerifyAck	
{	
	optional uint64 key				= 1;				// 加密秘钥
	optional uint64 systemTick		= 2;				// 系统启动毫秒
	optional uint32 systemTime		= 3;				// 系统时间
}	
//ping 请求	
message PingAsk	
{	
	optional uint32 order			= 1;				// 序号
}	
	
//ping 返回	
message PingAck	
{	
	optional uint32 order			= 1;				// 序号
	optional uint64 systemTick		= 2;				// 系统启动毫秒
	optional uint32 systemTime		= 3;				// 系统时间
}

// 通知消息错误
message BadNotify
{
	optional uint32 packetSize		= 1;				// 包的大小
	optional uint32 mainProtocol	= 2;				// 主协议
	optional uint32 protocol		= 3;				// 子协议
	optional uint32 eventFlag		= 4;				// 事件类型
}

// 版本类型
enum _emVersionMainType
{
	VersionMainType_Cleint  = 1; 				// 客户端用的版本类型
	VersionMainType_Server  = 2; 				// 服务端内部用的类型 
};

//------------------------------   dip
enum _emResultDip
{
	R_ResultDip_Succeed		= 0; //成功
	R_ResultDip_Fail		= 1; //失败
};

//-------------------------------------------------------------
//------------------------------ 订单相关
enum _emResultOrder_54
{
	R_ResultOrder_Succeed			= 0; // 成功
	R_ResultOrder_Fail				= 1; // 失败
	R_ResultOrder_Full				= 2; // 地址数量已满
	R_ResultOrder_AddrNotFind		= 3; // 地址不存在
	R_ResultOrder_OrderNotFind		= 4; // 订单不存在
	R_ResultOrder_OrderIsCompleted	= 5; // 订单重复确认
};

//--- 客户端到服务器
enum _emC2S_Order_Protocol
{
	C2S_Order_AddrData				= 1	;//请求地址  无内容
	C2S_Order_NewAddr				= 2	;//增加地址	PBAddrInfo
	C2S_Order_ChangeAddr			= 3	;//修改地址	PBAddrInfo
	C2S_Order_OrderData				= 4	;//请求订单信息，参数订单类型 PBU32 
	C2S_Order_Completed				= 5	;//确认订单地址  PBC2SOrderInfo
	C2S_Order_SetDefault			= 6	;//设置默认参数 参数地址id  PBU32
	C2S_Order_DeleteAddr			= 7	;//删除地址	PBU32
	C2S_Order_GetNewOrder			= 8	;//获取最新订单信息 无内容
};

//----服务器到客户端
enum _emS2C_Order_Protocol
{
	S2C_Order_Common_Ack			= 0	;//失败才返回
	S2C_Order_AddrData				= 1	;//返回地址数据 PBAddrData
	S2C_Order_OrderData				= 2	;//返回订单数据 PBOrderData
	S2C_Order_OneNewOrder			= 3	;//返回最新的订单信息 PBOrderInfo
};

// 地址数据
message PBAddrData
{
	repeated  PBAddrInfo addrinfo   = 1 ; //地址数据
	optional  uint32	 defaultid 	= 2 ; //默认地址id
};

// 订单数据
message PBOrderData
{
	repeated  PBOrderInfo orderinfo   = 1 ; //订单数据
};

// 订单操作数据数据
message PBC2SOrderInfo
{
	optional  string ordersn       	= 1 ; //游戏订单流水
	optional  uint32 type     		= 2 ; //订单类型 _emOrderType
	optional uint32 addrID			= 3 ; //地址id 
};


//------------------------------ 伙伴系统返回
enum _emResultPet_3
{
	R_ResultPet_Succeed							= 0; //成功
	R_ResultPet_Fail							= 1; //失败
	R_ResultPet_ZhenfaTypeNoOpen				= 2; //该阵法类型未开启
	R_ResultPet_ZhenfaNoOpen					= 3; //该阵法未开启
	R_ResultPet_ZhenfaErroPos					= 4; //该阵法位置错误
	R_ResultPet_NoPet							= 5; //无此伙伴
	R_ResultPet_HavePetID						= 6; //已经有此类型伙伴
	R_ResultPet_MaxLevel						= 7; //已经最大等级
	R_ResultPet_NeedPetExp						= 8; //伙伴经验不足
	R_ResultPet_NeedCoin						= 9; //金币不足
	R_ResultPet_NeedPetLevel					= 10; //伙伴等级不足
	R_ResultPet_MaxPetAdvance					= 11; //伙伴阶数已经达到最大
	R_ResultPet_NeedItem						= 12; //道具不足
	R_ResultPet_MaxPetStar						= 13; //达到最大星级
	R_ResultPet_PetLock							= 14; //上锁的伙伴不能被消耗
	R_ResultPet_PetTypeError					= 15; //伙伴种族不一致
	R_ResultPet_PetExpendError					= 16; //消耗的伙伴不对
	R_ResultPet_PetInZhuxian					= 17; //主线上阵伙伴不能被消耗
	R_ResultPet_PetBagFull						= 18; //伙伴背包空间已满
	R_ResultPet_EquipRepeat						= 19; //重复穿戴
	R_ResultPet_NoItemEquip						= 20; //无穿戴装备
	R_ResultPet_LockRepeat						= 21; //重复加锁
	R_ResultPet_RuneRepeat						= 22; //重复符文
	R_ResultPet_HaveTalentSkill					= 23; //已有天赋技能
	R_ResultPet_NeedStar						= 24; //星级不够
	R_ResultPet_NeedLevel						= 25; //等级不足
	R_ResultPet_NeedLowSkill					= 26; //需要前置技能
	R_ResultPet_NoTalentSkill					= 27; //无天赋技能
	R_ResultPet_SkillMaxLevel					= 28; //技能最大等级
	R_ResultPet_NeedDiamond						= 29; //钻石不足
	R_ResultPet_PetChange						= 30; //伙伴正在先知转换中
	R_ResultPet_NoSkin							= 31; //无此皮肤
	R_ResultPet_NeedActiveArtifact				= 32; //需要激活此神器
	R_ResultPet_GodEquipRepeat					= 33; //重复神装
	R_ResultPet_NameError						= 34; //非法字符或长度超出
	R_ResultPet_NoGodEquip						= 35; //未穿戴神装
	R_ResultPet_TeamDuplicate					= 36; //相关队伍之间有重复英雄
	R_ResultPet_TempPet							= 37; //临时英雄
	R_ResultPet_NeedExpend						= 38; //消耗英雄数量不足
	R_ResultPet_Count							= 39; //次数不足
	R_ResultPet_MaxCount						= 40; //达到最大购买次数
	R_ResultPet_Item							= 41; //不能使用该道具
	R_ResultPet_EXP								= 42; //没有经验值
	R_ResultPet_MaxPetEvolve					= 43; //已进化到最终形态
	R_ResultPet_Horcrux_Awake_Cost				= 44; //觉醒材料不足
	R_ResultPet_Horcrux_Need_Awake				= 45; //携带物未觉醒
	R_ResultPet_Horcrux_MaxLevel				= 46; //携带物已达到最大等级
	R_ResultPet_Horcrux_NotPet					= 47; //魂器强化，未找到消耗本体
	R_ResultPet_Horcrux_Awake_Repeat			= 48; //携带物觉醒重复
	
	R_ResultPet_PetStateDefend					= 49; //宠物已在守护中出战
	R_ResultPet_PetStateResonanceLevel			= 50; //已放置在共鸣等级中
	R_ResultPet_PetStateResonanceStar			= 51;//已放置在共鸣星级中
}
//----伙伴系统
enum _emC2S_Pet_Protocol
{
	C2S_Pet_Set_Zhenfa_Ask				= 0	;//设置阵法		PBPlayerZhenfaInfo
	C2S_Pet_UpLevel_Ask					= 1 ;//伙伴升级		PBC2GPet_UpLevel_Ask
	C2S_Pet_Advance_Ask					= 2 ;//伙伴升阶		PBCAGPet_Advance
	C2S_Pet_UpStar_Ask					= 3 ;//伙伴升星		PBC2GPet_UpStar
	C2S_Pet_Equip_Ask					= 4 ;//穿戴装备		PBCAGPet_Equip
	C2S_Pet_AutoEquip_Ask				= 5 ;//一键穿脱装备	PBC2GPet_AutoEquip
	C2S_Pet_Lock_Ask					= 6 ;//伙伴加锁		PBCAGPet_Lock
	C2S_Pet_RuneEquip_Ask				= 7 ;//穿戴符文		PBCAGPet_RuneEquip
	C2S_Pet_LearnTalent_Ask				= 8 ;//天赋领悟		PBCAGPet_Talent
	C2S_Pet_DelTalent_Ask				= 9 ;//天赋遗忘		PBCAGPet_Talent
	C2S_Pet_UpgradeTalent_Ask			= 10 ;//天赋升级	PBCAGPet_Talent
	C2S_Pet_BuyBag_Ask					= 11 ;//购买背包	PBCAGPet_BuyBag
	C2S_Pet_Split_Ask					= 12 ;//伙伴分解	PBC2GPet_Split
	C2S_Pet_SetSkin_Ask					= 13 ;//设置皮肤	PBCAGPet_SetSkin
	C2S_Pet_GodEquip_Ask				= 14 ;//穿戴神装	PBCAGPet_GodEquip
	C2S_Pet_GodUnEquipOneKey_Ask		= 15 ;//一键脱下神装	PBU64
	C2S_Pet_GodSuit_OpenAsk				= 16 ;//开启套装格子 PBU32
	C2S_Pet_GodSuit_SaveAsk				= 17 ;//保存套装方案 PBC2GPet_GodSuitSaveAsk
	C2S_Pet_GodSuit_EquipAsk			= 18 ;//穿戴套装 	 PBC2GPet_GodSuitEquipAsk
	C2S_Pet_GodSuit_RenameAsk			= 19 ;//套装方案改名 	 PBC2GPet_GodSuitRenameAsk
	C2S_Pet_GodSuit_SaveEquipAsk		= 20 ;//装配套装方案 	 PBC2GPet_GodSuitSaveAsk
	C2S_Pet_QueryScore					= 21 ;//查询伙伴评分 	PBU64
	C2S_Pet_AdvancePreview				= 22 ;//进阶属性预览 	PBU64
	C2S_Pet_UpStarPreview				= 23 ;//升星属性预览 	PBU64
	C2S_Pet_Replace_Ask					= 24 ;//置换 		PBCAGPet_Replace
	C2S_Pet_Degenerate_Ask				= 25 ;//回退		PBU64
	C2S_Pet_GodEquipPreview				= 26 ;//神装预览	PBU64
	C2S_Pet_Reborn						= 27 ;//重生		PBU64
	C2S_Pet_BuyRebornCount				= 28 ;//购买重生次数
	C2S_Pet_GodSuit_Unload				= 29 ;//卸载套装(id, petsn) 	 PBU32U64
	C2S_Pet_Swallow						= 30 ;//吞噬		PBC2GPet_UpStar
	C2S_Pet_HighStarReborn				= 31 ;//高星重生		PBU64
	C2S_Pet_Evolve_Ask					= 32 ;//进化 PBC2GPet_Evolve_Ask
	C2S_Pet_Horcrux_Awake				= 33 ;//魂器觉醒 PBC2GHorcruxAwake
	C2S_Pet_Horcrux_LevelUp				= 34 ;//魂器强化 PBC2GHorcruxLevelUp
	C2S_Pet_GetPetAchivesReward			= 35 ;//领取档案奖励 PBU32
}
//----伙伴系统
enum _emS2C_Pet_Protocol
{
	S2C_Pet_AddNew_Ack				= 0	;//新增				PBPlayerPetInfo
	S2C_Pet_Remove_Ack				= 1	;//删除				PBG2CPet_Remove_Ack
	S2C_Pet_Set_Zhenfa_Ack			= 2	;//设置阵法返回		PBPlayerZhenfaInfo
	S2C_Pet_UpLevel_Ack				= 3	;//升级伙伴返回		PBG2CPet_UpLevel_Ack
	S2C_Pet_Advance_Ack				= 4 ;//伙伴升阶返回		PBCAGPet_Advance
	S2C_Pet_UpStar_Ack				= 5 ;//伙伴升星返回		PBG2CPet_UpStar
	S2C_Pet_Equip_Ack				= 6 ;//穿戴装备返回		PBCAGPet_Equip
	S2C_Pet_AutoEquip_Ack			= 7 ;//一键穿戴装备返回	PBG2CPet_AutoEquip
	S2C_Pet_Lock_Ack				= 8 ;//伙伴加锁返回		PBCAGPet_Lock
	S2C_Pet_RuneEquip_Ack			= 9 ;//穿戴符文返回		PBCAGPet_RuneEquip
	S2C_Pet_LearnTalent_Ack			= 10 ;//天赋领悟返回	PBCAGPet_Talent
	S2C_Pet_DelTalent_Ack			= 11 ;//天赋遗忘返回	PBCAGPet_Talent
	S2C_Pet_UpgradeTalent_Ack		= 12 ;//天赋升级返回	PBCAGPet_Talent
	S2C_Pet_BuyBag_Ack				= 13 ;//购买背包		PBCAGPet_BuyBag
	S2C_Pet_Common_Ack				= 14 ;//失败才返回
	S2C_Pet_SetSkin_Ack				= 15 ;//设置皮肤返回	PBCAGPet_SetSkin
	S2C_Pet_SynAttr					= 16 ;//同步显示属性	PBG2CSynPetAttr
	S2C_Pet_SynFightPower			= 17 ;//同步单个战斗力	PBG2CSynPetFightPower
	S2C_Pet_GodEquip_Ack			= 18 ;//穿戴神装返回	PBCAGPet_GodEquip
	S2C_Pet_GodSuit_Syn				= 19 ;//同步套装格子 	PBPlayerGodEquipSuitInfo
	S2C_Pet_GodUnEquipOneKey_Ack	= 20 ;//一键脱下神装	PBU64
	S2C_Pet_QueryScore_Ack	 		= 21;//查询伙伴评分 	PBG2CPetQueryScore
	S2C_Pet_SynPreviewAttr			= 22 ;//同步属性预览	PBG2CSynPreviewAttr
	S2C_Pet_Replace_Ack				= 23 ;//置换返回		PBPlayerPetInfo
	S2C_Pet_Degenerate_Ack			= 24 ;//回退返回		PBPlayerPetInfo
	S2C_Pet_GodEquipPreview			= 25 ;//神装预览返回	PBG2CGodEquipPreview
	S2C_Pet_NotSeenPet				= 26 ;//出现没见过的英雄(doing type, sn)	PBU32U64
	S2C_Pet_Reborn					= 27 ;//重生返回(次数，SN)		PBU32U64
	S2C_Pet_BuyRebornCount			= 28 ;//购买重生次数返回		PBU32
	S2C_Pet_Swallow					= 29 ;//吞噬返回(exp, petsn)		PBU32U64
	S2C_Pet_HighStarReborn			= 30 ;//高星重生		PBU64
	S2C_Pet_Evolve_Ack				= 31 ;//进化 PBG2CPet_Evolve_Ack
	S2C_Pet_Horcrux_Awake			= 32 ;//魂器觉醒  PBG2CHorcruxAwake
	S2C_Pet_Horcrux_LevelUp			= 33 ;//魂器强化  PBG2CHorcruxLevelUp
	S2C_Pet_State_Chg				= 34 ;//宠物状态变化 PBG2CPetStateChg
	S2C_Pet_PetAchivesReward_Chg	= 35 ;//领取档案奖励 PBU32
}

// 伙伴置换标识
enum _emPetChangeFlag
{
	PetChangeFlag_ResetEvolve		= 0x1;	// 是否重置进化等级
}

// 宠物状态标记改变
message PBG2CPetStateChg
{
	optional uint64 		petsn		= 1;	//sn
	optional uint32			state		= 2; 	//状态标记
}

//同步显示属性
message PBG2CSynPreviewAttr
{
	optional uint64 		petsn		= 1;	//sn
	optional uint32 		maxlevel	= 2;	//等级上限
	optional PBSkillInfo 	addskill	= 3;	//增加技能
	repeated PBAttrInfo 	attr		= 4;	//所有属性
}
// 查询伙伴评分
message PBG2CPetQueryScore
{
	optional uint64 		sn 			= 1;//伙伴sn
	optional PBPetScoreInfo  selfscore 	= 2;//自己的评分
	optional PBPetScoreInfo  maxscore 	= 3;//最大的评分
}
//套装穿戴
message PBC2GPet_GodSuitEquipAsk
{
	optional uint32 	id 			= 1;	//方案ID
	optional uint32 	pos 		= 2;	//部位
	optional uint64 	itemsn 		= 3;	//穿戴的道具 0表示脱下
}
//套装方案改名
message PBC2GPet_GodSuitRenameAsk
{
	optional uint32 	id 			= 1;	//方案ID
	optional string 	name		= 2;	//方案名称
}
//保存套装方案
message PBC2GPet_GodSuitSaveAsk
{
	optional uint64 	petsn 		= 1;	//伙伴sn
	optional uint32 	id 			= 2;	//方案ID
}
//穿戴符文
message PBCAGPet_GodEquip
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	pos 		= 2;	//部位
	optional uint64 	itemsn 		= 3;	//穿戴的道具 0表示脱下
}
//同步显示属性
message PBG2CSynPetAttr
{
	optional uint64 	sn 			= 1;	//伙伴
	repeated PBAttrInfo attr		= 2;	//所有属性
}
//同步战斗力
message PBG2CSynPetFightPower
{
	optional uint64 	sn 			= 1;	//伙伴
	optional uint32		fightpower	= 2;	//同步战斗力
}
//设置皮肤
message PBCAGPet_SetSkin
{
	optional uint64 	sn 			= 1;	//伙伴
	optional uint32		skinid		= 2;	//皮肤ID
}
//伙伴分解
message PBC2GPet_Split
{
	repeated uint64 	sn 			= 1;	//伙伴
}
//伙伴删除
message PBCAGPet_BuyBag
{
	optional uint32 	totalbuyspace = 1;	//总购买空间
}
//伙伴删除
message PBG2CPet_Remove_Ack
{
	repeated uint64 	sn 			= 1;	//伙伴
}
//伙伴升星
message PBC2GPet_UpStar
{
	optional uint64 		sn 			= 1;	//要升星的伙伴
	repeated uint64 		expendsn	= 2;	//消耗的伙伴
	repeated PBItemSnCount 	items 		= 3;	//消耗的道具
}
//伙伴升星返回
message PBG2CPet_UpStar
{
	optional uint64 	sn 			= 1;	//伙伴
	optional uint32 	star		= 2;	//星星数
	optional uint32 	oldstar		= 3;	//星星数
}
//天赋领悟
message PBCAGPet_Talent
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	pos 		= 2;	//部位
	optional uint32 	skillindex	= 3;	//技能索引
}
//穿戴符文
message PBCAGPet_RuneEquip
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	pos 		= 2;	//部位
	optional uint64 	itemsn 		= 3;	//穿戴的道具 0表示脱下
}
//伙伴加锁
message PBCAGPet_Lock
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional bool 		islock 		= 2;	//是否加锁
}
//穿戴装备
message PBC2GPet_AutoEquip
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional bool 		isequip 	= 2;	//是否穿戴
}
//穿戴装备返回
message PBG2CPet_AutoEquip
{
	optional uint64 			sn 		= 1;	//伙伴sn
	repeated PBPlayerPetEquip 	equip	= 2;	//装备信息
}

//穿戴装备
message PBCAGPet_Equip
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	equiptype 	= 2;	//部位类型
	optional uint32 	equipid 	= 3;	//装备ID
}

//魂器觉醒Req
message PBC2GHorcruxAwake
{
	optional uint64 sn 	= 1; //伙伴sn
}
//魂器觉醒Res
message PBG2CHorcruxAwake
{
	optional uint64 sn  = 1; //伙伴sn
	optional PBPetHorcrux horcrux = 2; //魂器
}

//魂器强化Req
message PBC2GHorcruxLevelUp
{
	optional uint64 sn = 1; //伙伴sn
}
//魂器强化Res
message PBG2CHorcruxLevelUp
{
	optional uint64 sn  = 1; //伙伴sn
	optional PBPetHorcrux horcrux = 2; //魂器
}

//伙伴升级请求
message PBC2GPet_UpLevel_Ask
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	addlevel 	= 2;	//级数
}
//伙伴升级返回
message PBG2CPet_UpLevel_Ack
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional uint32 	petlevel 	= 2;	//伙伴等级
}
//伙伴升阶
message PBCAGPet_Advance
{
	optional uint64 	sn 				= 1;	//伙伴sn
	optional uint32 	advancelevel 	= 2;	//伙伴当前阶数
	optional bool 		bshow 			= 3;	//是否显示突破成功界面
}

//伙伴置换
message PBCAGPet_Replace
{
	optional uint64 	sn 			= 1;	//7星以上基础伙伴sn
	repeated uint64 	material 	= 2;	//5星材料
}

//神装预览返回
message PBG2CGodEquipPreview
{
	optional uint64 		sn 			= 1;	//伙伴sn
	optional uint32			power 		= 2;	//战斗力
	optional uint32			suit		= 3;	//套装id
	repeated PBAttrInfo 	attri		= 4;	//属性
}

//伙伴进化请求
message PBC2GPet_Evolve_Ask
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional bool 		isevolve 	= 2;	//是否进化形态
}
//伙伴进化返回
message PBG2CPet_Evolve_Ack
{
	optional uint64 	sn 			= 1;	//伙伴sn
	optional bool 		isevolve 	= 2;	//是否进化形态
	optional uint32 	skinid 		= 3;	//皮肤ID
	optional uint32 	evolve 		= 4;	//进化阶段
}

//-------------------------------------------------------------
//------------------------------ 平台返回错误码
enum _emResultPlatform_34
{
	R_Platform_Succeed			= 0; // 成功
	R_Platform_Fail				= 1; // 失败
	R_Platform_NeedBuyCount		= 2; // 需要购买次数
	R_Platform_NeedLevel		= 3; // 需要等级
	R_Platform_NeedVIPLevel		= 4; // 需要vip等级
	R_Platform_NeedActivity		= 5; // 活动商品不能买
	R_Platform_NeedCondition	= 6; // 条件不满足
	R_Platform_Wait				= 7; // 查询中
};
//----平台模块
enum _emC2S_Platform_Protocol
{
	C2S_Platform_charge 			= 1; //充值 PBChargeData
}
//----平台模块
enum _emS2C_Platform_Protocol
{
	S2C_Platform_Common					= 0; //通用失败返回
	S2C_Platform_sanqi_charge 			= 1; //充值 PBChargeData
	S2C_Platform_update_chargeinfo 		= 2; //更新充值信息 PBChargeInfo
	S2C_Platform_SynCharge				= 3; //更新充值信息 PBPlayerPlatform
	S2C_Platform_MISC					= 4; //切支付 PBPlatformMisc
}

// 充值 
message PBChargeData
{
	optional string  uid				= 1; //用户ID
	optional uint32  sid				= 2; //服务器ID
	optional uint32  actorid			= 3; //角色ID 
	optional string  orderno			= 4; //游戏研发订单 id
	optional string  money				= 5; //金额
	optional uint32  productid			= 6; //商品ID 
	optional uint32  time				= 7; //当前请求时间
	optional string  ordersign			= 8; //订单sign
	optional string  orderitem			= 9; //订单Item = 商品ID*单价（分）*数量*商品名称*内购定义商品ID
	optional string  currencytype		= 10; //国内版不传，海外版必传。如美元USD，默认人民币CNY
	optional string  version			= 11; //版本号
	repeated ClientParam   clientparam	= 12; //客户端参数
}

// 创建订单 客户端参数
message ClientParam
{

	optional string  key			= 1; //
	optional string  value			= 2; //
}

// 版本号
message PBPlatformMisc
{
	optional string  misc			= 1; //切支付url
}
// 用户标记
message PBPlayerDisplay
{
	optional string playername			= 1;			// 角色名称
	optional uint32 playerid			= 2;			// 角色ID
	optional uint32 worldid				= 3;			// 世界ID
	optional uint32 logicworldid		= 4;			// 逻辑世界ID
	optional uint32 level				= 5;			// 玩家等级
	optional uint32 viplevel			= 6;			// vip等级
	optional uint32 gender				= 7;			// 性别
	optional uint32 head				= 8;			// 头像ID
	optional uint32 headicon			= 9;			// 头像框ID
	optional uint32 shape				= 10;			// 形象
	optional uint32 province			= 11;			// 省份
	optional uint32 city				= 12;			// 城市
	optional uint32 createnum			= 13;			// 该账号第几个角色
	optional uint32 title				= 14;			// 称号
}

// 扩展数据标识位bit
enum _emPBPlayerBaseFlagBit
{
	PBPLAYERBASEFLAG_BIT_INIT_POWER		= 0x1;	// 初始战力 
};

// 角色社会属性
message PBPlayerBase
{
	optional uint32			 	saveorder				= 1;	// 序列号
	optional PBPlayerDisplay 	playerdisplay 			= 2;	// 角色标记
	optional uint32 			accountid				= 3;	// 账号ID
	optional string 			factionname				= 4;	// 帮派名称
	optional uint32				factionid				= 5;	// 帮派ID
	optional uint32				playermark				= 6;	// 角色标示
	optional uint32 			lastlogintime			= 7;	// 最后一次登录时间
	optional uint32 			lastlogouttime			= 8;	// 最后一次登出时间
	optional uint32 			createtime				= 9;	// 创建角色时间
	optional string 			accountname				= 10;	// 账号名称
	repeated PBPlayerExpend		expend					= 11;	// 消耗
	optional uint32 			onlinetime				= 12;	// 在线时长
	optional uint32 			itemsequence			= 13;	// 道具自增长索引
	optional uint32 			fightpower				= 14;	// 战斗力
	optional uint32 			dailycleantime			= 15;	// 日清理时间
	optional uint32 			weekcleantime			= 16;	// 周清理时间
	optional uint32 			monthcleantime			= 17;	// 月清理时间
	optional uint32 			battlesequence			= 18;	// 战斗自增长索引
	optional uint32 			lastdaymaxfightpower	= 19;	// 前日最大战斗力
	optional uint32 			maxfightpower			= 20;	// 最大战斗力
	optional uint32 			todaymaxfightpower		= 21;	// 今日日最大战斗力
	optional uint32				todayrecharge			= 22;	// 今日充值金额
	optional uint32 			chargesequence			= 23;	// 充值自增长索引
	optional uint32				totalrecharge			= 24;	// 今日充值金额
	optional uint32				renamecount				= 25;	// 改名次数
	optional uint32				rechargecount			= 26;	// 充值次数
	optional uint32				oldlogintime			= 27;	// 上次一次登陆的时间
	optional uint32				realrecharge			= 28;	// 真实充值总额
	optional uint32				flag					= 29;	// 标识符 _emPBPlayerBaseFlagBit
	optional uint32				originworldid			= 30;	// 合服前的原世界ID
}
// 角色查看
message PBPlayerView
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	// 用户标记
	optional PBGlobalCommonDisplay	commondisplay	= 2;	// 通用
	optional string 				factionname		= 3;	// 帮派名称
	repeated PBPetDisplay			petdisplay		= 4;	// 伙伴显示
}
// 伙伴查看
message PBPlayerPetView
{
	optional PBPlayerPetInfo 		petinfo				= 1;	// 伙伴数据
	optional uint32 				factionskilllevel	= 2;	// 帮派技能等级
	optional PBPlayerHolyInfo 		holyinfo			= 3;	// 圣物数据
}

// 伙伴战斗伙伴的buff状态
message PBPetFightBuffInfo
{
	optional uint32 buffid 			= 1;	//buff id
	optional uint64 sourcesn 		= 2;	//施法者 sn
	optional uint32 skillindex 		= 3;	//skill index
	optional uint32 continueround 	= 4;	//持续回合数
	repeated uint32 layerround 		= 5;	//层数回合数
	optional uint32 beattackcount 	= 6;	//被攻击次数
	optional uint32 extravalue 		= 7;	//额外参数  当前护盾值
}

// 伙伴战斗状态
message PBPetFightStateInfo
{
	optional uint64				petsn			= 1;	//伙伴SN
	repeated PBSkillCD			skillcd			= 2;	//技能CD
	optional uint64 			maxhp			= 3;	//最大血量
	optional uint64 			curhp			= 4;	//当前血量
	optional uint64 			damage			= 5;	//伤害值
	optional uint64 			cure			= 6;	//治疗值
	repeated PBPetFightBuffInfo buff			= 7;	//buff
	optional uint64 			defense			= 8;	//防御值
}
// 伙伴战斗状态
message PBPetFightState
{
	repeated PBPetFightStateInfo	petstate		= 1;	//伙伴战斗状态
}
//战斗伙伴信息
message PBBattlePetInfo
{
	optional uint32 				unittype			= 1;	//对象类型 _em_GameUnitType 
	optional uint32 				unitid				= 2;	//对象ID
	optional uint32 				pos					= 3;	//位置
	optional PBPlayerPetInfo 		pet					= 4;	//伙伴信息
	repeated PBAttrInfo 			attr				= 5;	//战斗属性
	repeated PBSkillInfo 			allskill			= 6;	//所有技能
	optional uint32 				camptype			= 7;	//阵营
	optional PBPetFightStateInfo	petstate			= 8;	//伙伴战斗状态
}
//战斗显示信息
message PBBattleDisplay
{
	optional PBPlayerDisplay	 	playerdisplay		= 1;	//玩家外显
	repeated PBPetDisplay 			petdisplay			= 2;	//战斗伙伴外显
	repeated PBPlayerZhenfaPos		posdata				= 3;	//位置伙伴 key:位置 value:伙伴sn
	optional uint32	 				zhenfaid			= 4;	//阵法ID
	optional uint32	 				fightpower			= 5;	//战力
	optional uint32	 				param				= 6;	//参数 排名
}
// 公会技能
message PBBattleFactionPVPSkill
{
	repeated PBPlayerFactionPVPSkill   skillinfo = 1;	//战斗用
}
//战斗阵容
message PBBattlePet
{
	repeated PBBattlePetInfo 			battlepet			= 1;	//战斗伙伴信息
	optional uint32	 					zhenfaid			= 2;	//阵法id
	optional PBGlobalArtifactDisplay	artifact			= 3;	//神器信息
	optional uint32	 					fightpower			= 4;	//战力
	repeated uint32 					extraskill			= 5;	//额外技能
	optional PBPetFightStateInfo		artifactstate		= 6;	//神器状态
	optional PBGlobalDefendDisplay		defend				= 7;	//守护信息
	optional PBBattleFactionPVPSkill	pvpskill			= 8;	//公会pvp技能信息
}
//角色显示详情 存库用
message PBPlayerViewDetail
{
	optional PBPlayerView 			view			= 1;	// 用户标记
	optional PBBattlePet			battlepet		= 2;	// 伙伴标记
}

//*************************************************伙伴数据开始***************************
//伙伴装备信息
message PBPlayerPetEquip
{
	optional uint32 				equiptype		= 1;	//装备类型
	optional uint32 				itemid			= 2;	//道具ID
}
//伙伴符文信息
message PBPlayerPetRune
{
	optional uint32 				pos				= 1;	//符文位置
	optional uint64 				itemsn			= 2;	//道具sn
	optional PBItem					iteminfo		= 3;	//道具信息
}
//伙伴天赋信息
message PBPlayerPetTalent
{
	optional uint32 				pos				= 1;	//天赋位置
	optional uint32 				skillindex		= 2;	//技能信息
}
//伙伴神装
message PBPlayerPetGodEquip
{
	optional uint32 				equiptype		= 1;	//装备类型
	optional uint64 				itemsn			= 2;	//道具sn
	optional PBItem					iteminfo		= 3;	//道具信息
}
// 伙伴标记
message PBPetDisplay
{
	optional uint64 				sn			= 1;	//伙伴sn
	optional uint32 				id			= 2;	//伙伴ID
	optional uint32 				star		= 3;	//伙伴星星数
	optional uint32 				level		= 4;	//伙伴等级
	optional uint32 				useskinid	= 5;	//用的皮肤ID
	optional uint32					evolve      = 6;	//进化段数
}
//伙伴魂器
message PBPetHorcrux
{
	optional uint32 id         = 1; //魂器ID 0表示为觉醒
	optional uint32 level      = 2; //魂器等级
	optional uint32	fightpower = 3; //魂器提升战力
	//TODO 是否需要重新开发技能
}

//伙伴基础信息
message PBPlayerPetInfo
{
	optional PBPetDisplay 			display		= 1;	//显示
	optional uint32 				advance		= 2;	//伙伴进阶等级
	optional bool 					islock		= 3;	//伙伴是否加锁
	optional uint32 				holylevel	= 4;	//圣物等级
	optional uint32 				holyexp		= 5;	//圣物经验
	optional uint32 				holyadvance	= 6;	//圣物进阶
	repeated PBPlayerPetEquip		equip		= 7;	//伙伴装备
	repeated PBPlayerPetRune		rune		= 8;	//伙伴符文
	repeated PBPlayerPetTalent		talent		= 9;	//伙伴天赋
	repeated PBPlayerPetGodEquip	godequip	= 10;	//伙伴神装
	optional uint32 				fightpower	= 11;	//战斗力
	repeated PBU32U32 				baseskill	= 12;	//技能数据
	repeated PBAttrInfo 			attr		= 13;	//显示属性
	optional bool					istemporary = 14;	//是否是临时英雄
	optional uint32					factionskilllv = 15;//工会技能等级
	optional uint32					exp 		= 16;	//极化值
	optional uint32					flag		= 17;	//标识值，目前用于做版本控制
	optional PBPetHorcrux			horcrux 	= 18;	//魂器
	repeated PBU32U32				extraskill	= 19;	//额外技能, 只做属性加成
	optional uint32					state 		= 20;	//状态
	optional uint32					skinselectflag 	= 21;	//玩家皮肤选择标识（当前皮肤展示停留在哪个进化阶段）
}

// 用户伙伴数据
message PBPlayerPet
{
	optional 	uint32 					saveorder		= 1;	//序列号
	repeated	PBPlayerPetInfo			pet				= 2;	//伙伴信息
	optional 	uint32					sequence		= 3;	//伙伴自增长索引
	optional 	uint32					buyspace		= 4;	//购买的伙伴空间
	repeated 	uint32					seenpets 		= 5;	//见过的英雄
	optional	uint32					reborncount		= 6;	//重生次数
	optional	uint32					rebornbuycount	= 7;	//购买重生次数
	repeated	uint32					rewardpets		= 8;	//已领取的档案奖励的id
}

//伙伴数据扩展
message PBPlayerPetExt
{
	optional 	uint32 					saveorder		= 1;	//序列号
	repeated	PBPlayerPetInfo			pet				= 2;	//伙伴信息
}

//*************************************************伙伴数据结束***************************

//*************************************************神装套装数据开始***************************
//神装套装管理
message PBPlayerGodEquipSuitInfo
{
	optional uint32 				id			= 1;	//方案ID
	optional string 				name		= 2;	//方案名称
	optional uint64 				petsn		= 3;	//伙伴SN
	repeated PBPosEquip 			posequip	= 4;	//神装
}
// 神装套装
message PBPlayerGodEquipSuit
{
	repeated PBPlayerGodEquipSuitInfo		suitinfo		= 1;	//神装套装
}
//*************************************************神装套装数据结束***************************

//*************************************************阵法数据开始***************************
message PBPlayerZhenfaPos
{
	optional uint32 				pos				= 1;	//位置
	optional uint64 				petsn			= 2;	//伙伴SN
	optional uint32					friendid		= 3;	//是支援英雄填好友ID，否则填0
}
// 用户阵法信息
message PBPlayerZhenfaInfo
{
	optional uint32 				type			= 1;	//阵法类型	_emZhenfaType
	optional uint32 				id				= 2;	//阵法ID	cs_pet表中阵法
	repeated PBPlayerZhenfaPos		posdata			= 3;	//位置伙伴 key:位置 value:伙伴sn
	optional uint32 				artifactid		= 4;	//神器ID
}
// 阵法数据
message PBPlayerZhenfa
{
	repeated PBPlayerZhenfaInfo		zhenfainfo		= 1;	//阵法数据

}
//*************************************************阵法数据结束***************************


//*************************************************副本数据开始***************************
// 用户副本信息
message PBPlayerCopymapInfo
{
	optional uint32 				copymaptype		= 1;	//副本类型
	optional uint32 				dailyentercount	= 2;	//日进入次数
	optional uint32 				maxsubtype		= 3;	//挑战的最大子类型
	optional uint32 				daybuycount		= 4;	//购买的次数
}
// 用户副本数据
message PBPlayerCopymap
{
	repeated PBPlayerCopymapInfo		copymapinfo		= 1;	//副本
}
//*************************************************副本数据结束***************************

//*************************************************用户战斗数据开始***************************
// 用户战斗数据
message PBPlayerFight
{
	optional uint32 				battletype		= 1;	//战斗类型
}
//*************************************************用户战斗数据结束***************************


//*************************************************用户任务数据开始***************************
// 用户任务
message PBPlayerTask
{
	optional uint32 				taskid			= 1;	//当前任务ID
	optional uint32 				param			= 2;	//当前任务进度
}
//*************************************************用户任务数据结束***************************

//*************************************************竞技场数据开始***************************
// 用户竞技场信息
message PBPlayerChallenge
{
	optional uint32 				dayentercount		= 1;	//进入次数
	optional uint32 				weekentercount		= 2;	//周进入次数
	repeated uint32 				weekprize			= 3;	//周宝箱领取
	optional uint32 				linenum				= 4;	//点赞次数
	optional uint32					continuewincount	= 5;	//连胜场数
	optional uint32					lastcleardays		= 6;	//上次清理时间
	repeated uint32					likeplayers 		= 7;	//点赞的人player id
}
//*************************************************竞技场数据结束***************************

//*************************************************帮会数据开始***************************
// 公会技能
message PBPlayerFactionSkill
{
	optional uint32 					jobtype		= 1;	// 职业类型 _emPetJobType
	optional uint32	 					level		= 2;	// 总等级
}
// 公会技能
message PBPlayerFactionPVPSkill
{
	optional uint32 					skillindex	= 1;	// PVP技能索引
	optional uint32	 					level		= 2;	// PVP技能等级
}

// 帮派数据
message PBPlayerFaction
{
	optional uint32	 				donatetype			= 1;	// 捐献类型	_emFactionDonateType
	repeated uint32	 				donateprize			= 2;	// 捐献活跃奖励
	optional uint32	 				livenesslevel		= 3;	// 活跃等级
	optional uint32	 				livenessexp			= 4;	// 活跃经验
	optional uint32					dailyliveness		= 5;	// 日活跃度
	optional uint32					weekliveness		= 6;	// 周活跃度
	repeated PBPlayerFactionSkill	skill				= 7;	// 公会技能
	optional uint32					skillresetcount		= 8;	// 技能重置次数
	optional uint32					copymapbuycount		= 9;	// 副本购买次数
	optional uint32					copymapusefreecount	= 10;	// 副本使用免费次数
	optional uint32					copymapusebuycount	= 11;	// 副本使用购买次数
	optional uint32					factionwarcount		= 12;	// 公会战挑战次数
	optional uint32					nextrenametime		= 13;	// 下次重命名时间
	optional uint32					nextjointime		= 14;	// 下次加入公会时间
	optional uint32					copymapid			= 15;	// 正在打的副本ID
	repeated PBPlayerFactionPVPSkill	pvpskill			= 16;	// 公会pvp技能
	optional uint32					pvpskillresetcount		= 17;	// pvp技能重置次数
}
//*************************************************帮会数据结束***************************

//*************************************************召唤数据开始***************************
// 召唤数据
message PBPlayerCallInfo
{
	optional uint32	 					calltype		= 1;	// 召唤类型
	optional uint32 					netxfreetime	= 2;	// 表示可以召唤时间
	optional uint32	 					totalcount		= 3;	// 总召唤次数
	optional uint32	 					continuecount	= 4;	// 连续不出五星次数
	optional uint32	 					firstcontinuecount	= 5;	// 首次出五星的次数
}
// 置换数据
message PBPlayerCallChange
{
	optional uint64						basechangesn	= 1;	//置换的基本英雄
	optional uint32 					petid			= 2;	//伙伴ID
	optional uint32 					star			= 3;	//伙伴星级
}
// 召唤数据
message PBPlayerCall
{
	repeated PBPlayerCallInfo	 		callinfo		= 1;	// 召唤数据
	optional PBPlayerCallChange			changeinfo		= 2;	// 置换数据
	optional bool						autosplit 		= 3;	// 自动分解
}
//*************************************************召唤数据结束***************************

//*************************************************远航数据开始***************************
// 远航接取数据
message PBPlayerSailInfo
{
	optional uint32	 					sn					= 1;	// sn
	optional uint32	 					index				= 2;	// 索引 配置表中
	optional uint32	 					endtime				= 3;	// 结束时间
	repeated uint64						petsn				= 4;	// 派遣伙伴sn
}
// 远航索引
message PBPlayerSailIndex
{
	optional uint32	 					sn					= 1;	// sn
	optional uint32	 					index				= 2;	// 索引 配置表中
}
// 远航数据
message PBPlayerSail
{
	optional uint32	 					dayfreecount		= 1;	// 免费刷新次数
	optional uint32	 					daybuycount			= 2;	// 每日购买次数
	optional uint32	 					totalrefreshcount	= 3;	// 总刷新次数
	optional uint32	 					cursequne			= 4;	// 当前序列号
	repeated PBPlayerSailIndex			refresh				= 5;	// 刷新的数据
	repeated PBPlayerSailInfo			accpet				= 6;	// 接取的数据
}
//*************************************************远航数据结束***************************

//*************************************************挂机数据开始***************************
// 用户挂机数据
message PBPlayerHook
{
	optional uint32 				stageid				= 1;	//当前关卡ID
	optional uint32 				sceneid				= 2;	//当前场景ID
	optional uint32					begintime			= 3;	//开始时间
	repeated uint32					stageprize			= 4;	//已经领取的关卡奖励
	optional uint32					prizestageid		= 5;	//领奖的基础关卡
	optional uint32					dayfreesweepcount	= 6;	//快速作战免费次数
	optional uint32					daubuysweepcount	= 7;	//快速作战购买次数
	optional uint32					nextfighttime		= 8;	//下次战斗时间
	optional uint32					activedropmin		= 9;	//活动掉落统计的分钟
	optional uint32					activedropcount		= 10;	//活动掉落个数
}
//*************************************************挂机数据结束***************************

//*************************************************神器数据开始***************************
// 神器具体数据
message PBPlayerArtifactInfo
{
	optional uint32	 				id					= 1;	// 神器ID
	optional bool	 				isactive			= 2;	// 是否已经激活
	repeated uint32	 				activestage			= 3;	// 已经激活的进度
	optional uint32	 				skilllevel			= 4;	// 技能等级
	optional uint32	 				shapeid				= 5;	// 幻化ID
	repeated PBItemInfo	 			expenditem			= 6;	// 已经消耗的道具,重置返回
}
// 法阵数据
message PBPlayerFaZhenInfo
{
	optional uint32	 				level				= 1;	// 神器等级
	optional uint32	 				exp					= 2;	// 当前经验
	optional uint32	 				count				= 3;	// 使用刻印石强化次数
}
// 神器数据
message PBPlayerArtifact
{
	repeated PBPlayerArtifactInfo		info				= 1;	// 神器具体数据
	optional PBPlayerFaZhenInfo			fazhen				= 2;	// 法阵数据
	repeated uint32						awake				= 3;	// 以完成的觉醒的任务
	repeated uint32						awakeprize			= 4;	// 已经领取de数量奖励
	optional uint32						starttime			= 5;	// 解锁第一个元灵的时间
	optional bool						fazhenawake 		= 6;	// 法阵是否觉醒
}
//*************************************************神器数据结束***************************

//*************************************************商店数据开始***************************
// 固定商店数据
message PBPlayerFixShop
{
	optional uint32	 					shoptype			= 1;	// 商店类型
	repeated PBU32U32 					buycount			= 2;	// 购买次数 KEY:索引 value:次数
}
// 随机商店数据
message PBPlayerRandShop
{
	optional uint32	 					shoptype			= 1;	// 商店类型
	optional uint32						freeleftcount		= 2;	// 免费刷新剩余次数
	optional uint32						nextfreetime		= 3;	// 下次免费刷新时间
	optional uint32						daybuyrefreshcount	= 4;	// 每日购买刷新次数
	repeated uint32 					refreshindex		= 5;	// 刷新的索引
	repeated PBU32U32 					buycount			= 6;	// 购买次数 KEY:位置(0开始) value:购买次数
	repeated PBU32U32 					daybuycount			= 7;	// 日限购 KEY:商品id value:购买次数
	repeated PBU32U32 					weekbuycount		= 8;	// 周限购 KEY:商品id value:购买次数
	repeated PBU32U32 					monthbuycount		= 9;	// 月限购 KEY:商品id value:购买次数
}
// 商店数据
message PBPlayerShop
{
	repeated PBPlayerFixShop			fixshop			= 1;	// 固定商店
	repeated PBPlayerRandShop			randshop		= 2;	// 随机商店
}
//*************************************************商店数据结束***************************

//*************************************************试炼数据开始***************************
// 试练塔录像数据
message PBPlayerTrainTowerVideo
{
	optional uint32	 					stageid				= 1;	// 当前关卡
	optional uint64						battlesn			= 2;	// 录像SN
	optional uint32						fighttime			= 3;	// 通关时间
}
// 试练塔数据
message PBPlayerTrainTower
{
	optional uint32	 					stageid				= 1;	// 当前关卡
	optional uint32						daybuycount			= 2;	// 今日购买次数
	optional uint32						dayfightcount		= 3;	// 今日挑战次数
	optional uint32						totalfightcount		= 4;	// 累计挑战次数
	repeated uint32 					prizestage			= 5;	// 领取的奖励
	repeated PBPlayerTrainTowerVideo 	video				= 6;	// 通关录像
	optional uint32						type 				= 7;	// 类型
}
// 无尽试练数据
message PBPlayerTrainEndless
{
	optional uint32	 					maxstageid			= 1;	// 当前挑战的最大关卡
	optional uint32						prizestage			= 2;	// 当前领取的最大关卡
	optional uint32						buffgroup			= 3;	// 随机的buff组
	optional uint32						buffid				= 4;	// 加成的buffid
	optional uint32	 					daybeginstage		= 5;	// 今日开始的关卡
	optional uint32	 					daymaxstage			= 6;	// 今日最高的关卡
	optional uint32	 					curfightstage		= 7;	// 当前挑战的关卡次数
	optional uint32	 					daybeginprizestage	= 8;	// 每日领奖的起始关卡		
	optional uint32						buffstage 			= 9;	// 选择buff的关卡
	optional uint32						dayclearnum			= 10;	// 今日已通多少关
}

// 巅峰挑战数据
message PBPlayerTrainPeak
{
	optional uint64	 	totaldamage = 1;	// 总伤害量
	optional uint32		fightcount 	= 2;	// 挑战次数
	optional uint32		buycount 	= 3;	// 购买次数
	repeated uint32		buff 		= 4;	// 购买的buff技能index
}

// 试炼数据
message PBPlayerTrain
{
	optional PBPlayerTrainTower			tower			= 1;	// 试练塔
	optional PBPlayerTrainEndless		endless			= 2;	// 无尽试练
	optional PBPlayerTrainPeak			peak 			= 3;	// 巅峰挑战
	repeated PBPlayerTrainTower			towers			= 4;	// 试炼塔
	optional bool						IsSendMail		= 5;	//是否已发送补发首通积分奖励邮件
}
//*************************************************试炼数据结束***************************

//*************************************************成就数据开始***************************
// 一条成就数据
message PBPlayerOneAchieve
{
	optional uint32	 					id					= 1;	// 成就ID
	optional uint32						value				= 2;	// 当前值
	optional uint32 					time				= 3;	// 完成时间
	repeated uint32						extravalue 			= 4;	// 额外记录值
}
// 主线成就
message PBPlayerMainAchieve
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	repeated uint32						completeid			= 2;	// 领取的成就
}
// 历练成就
message PBPlayerTrainAchieve
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	repeated uint32						completeid			= 2;	// 领取的成就
}
// 每日活跃
message PBPlayerLiveness
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	optional uint32						livessvalue			= 2;	// 活跃度
	repeated uint32						accpetprize			= 3;	// 领取的奖励
	repeated uint32						completeid			= 4;	// 领取的成就
}
// 帮派活跃
message PBFactionLiveness
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
}

// 战令成就
message PBWarOrderAchieve
{
	optional uint32						type 				= 1;	// 类型 _emWarOrderType
	repeated PBPlayerOneAchieve	 		achieve				= 2;	// 成就数据
	repeated uint32						completeid			= 3;	// 完成的成就
}

//战令
message PBWarOrder
{
	repeated PBWarOrderAchieve	 		achieves				= 1;	// 成就数据
	repeated PBU32U32					prize					= 2;	// 领取的等级奖励(等级，普通 1 进阶 2 both 3)
	optional uint32 					exp 					= 3;	// 当前经验值
	optional uint32 					level 					= 4;	// 当前等级
	optional bool						open 					= 5;	// 是否开启
}

// 图鉴成就
message PBIllustrationAchieve
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	repeated uint32						completeid			= 2;	// 领取的成就
}
// 图鉴战力成就
message PBIllustrationPower
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	repeated uint32						completeid			= 2;	// 领取的成就
}
// 成就之路
message PBPlayerAchieveRoad
{
	repeated PBPlayerOneAchieve	 		achieve				= 1;	// 成就数据
	repeated uint32						completeid			= 2;	// 领取的成就
}

// 成就数据
message PBPlayerAchieve
{
	optional PBPlayerLiveness			liveness			= 1;	// 每日活跃
	optional PBPlayerMainAchieve		mainachieve			= 2;	// 主线成就
	optional PBFactionLiveness			faction				= 3;	// 帮派活跃
	optional PBPlayerTrainAchieve		train				= 4;	// 历练成就
	optional PBPlayerLiveness			activity			= 5;	// 活动活跃
	optional PBPlayerLiveness			weekliveness		= 6;	// 每周活跃
	optional uint32						mark 				= 7;	// 版本标记
	optional PBWarOrder					warorder			= 8;	// 战令数据
	optional PBIllustrationAchieve		illustration		= 9;	// 图鉴成就
	optional PBIllustrationPower		illustrationpower	= 10;	// 图鉴战力成就
	optional PBPlayerAchieveRoad		acheveroad			= 11;	// 成就之路
}


//*************************************************成就数据结束***************************

//*************************************************英雄远征数据开始***************************
//远征伙伴显示数据
message PBExpeditionPetDisplay
{
	optional PBPetDisplay 			display		= 1;	//伙伴显示
	optional uint64				maxhp		= 2;	//最大血量
	optional uint64 				curhp		= 3;	//当前血量0死亡
}
//远征伙伴当前血量
message PBExpeditionPetHp
{
	optional uint64 				sn			= 1;	//sn
	optional uint64 				curhp		= 2;	//当前血量0死亡
}
//远征对手信息
message PBExpeditionTar
{
	optional uint32						index				= 1;	// 关卡
	optional uint32	 					fightpower			= 2;	// 战力
	optional PBPlayerDisplay			display				= 3;	// 显示数据
	repeated PBExpeditionPetDisplay 	petdisplay			= 4;	// 关卡显示
}
//远征数据
message PBPlayerExpedition
{	
	optional uint32						curtype				= 1;	// 远征类型 _emExpeditionType
	optional uint32						curstage			= 2;	// 当前打的关卡 0表示通关
	repeated PBExpeditionTar			stageinfo			= 3;	// 所有关卡信息
	optional PBBattlePet				battlepet			= 4;	// 当前打的关卡数据	
	repeated PBExpeditionPetHp 			usepethp			= 5;	// 使用的伙伴数据
	optional uint32						laststage			= 6;	// 昨日的最大关卡	
	repeated uint32						prizeid				= 7;	// 领取的奖励ID
	optional uint32						basefightpower		= 8;	// 基础战力
	optional uint32						maxtype				= 9;	// 最大的通关类型
	optional uint32						lasttype			= 12;	// 上一次的远征类型
}
//*************************************************英雄远征结束***************************

//*************************************************外显数据开始***************************
//称号
message PBPlayerTitle
{
	optional uint32						titleid				= 1;	// 称号ID
	optional uint32	 					endtime				= 2;	// 到期时间0无限
	optional bool	 					isactive			= 3;	// 是否激活
}
//头像框
message PBPlayerHeadIcon
{
	optional uint32						id					= 1;	// ID
	optional uint32	 					endtime				= 2;	// 到期时间0无限
	optional bool	 					isactive			= 3;	// 是否激活
}
//冒险形象
message PBPlayerRiskShape
{
	optional uint32						id					= 1;	// 形象ID
	repeated uint32	 					condition			= 2;	// 已经达成的条件
}
//徽章
message PBPlayerBadge
{
	optional uint32						id					= 1;	// 徽章ID
	optional uint32	 					addtime				= 2;	// 获取时间
}
//外形数据
message PBPlayerShape
{	
	repeated PBPlayerTitle				title				= 1;	// 称号
	optional uint32	 					usetitleid			= 2;	// 当前使用的称号
	repeated uint32						headid				= 3;	// 头像
	repeated PBPlayerHeadIcon			headicon			= 4;	// 头像框
	repeated PBPlayerRiskShape			risk				= 5;	// 冒险形象
	repeated uint32						activerisk			= 6;	// 已经激活的冒险形象
	optional uint32	 					useriskid			= 7;	// 当前使用的冒险形象
	repeated PBU32U32 					allskin				= 8;	//皮肤数据  皮肤ID_过期时间
	repeated PBPlayerBadge 				badge				= 9;	//徽章
	optional uint32	 					honor				= 10;	//荣誉点数
	repeated uint32	 					badgedisplay		= 11;	//徽章展示
	repeated uint32						headidnew			= 12;	// 皮肤id激活头像
	repeated PBPlayerRiskShape			risknew				= 13;	// 皮肤id激活冒险形象
	repeated uint32						activerisknew		= 14;	// 皮肤id已经激活的冒险形象
	optional uint32	 					useriskidnew		= 15;	// 皮肤id当前使用的冒险形象
	optional uint32	 					mergetitleversion	= 16;	// 合服玩家检测名人堂称号版本标识
}

//*************************************************外显数据结束***************************

//*************************************************神殿数据开始***************************
//神殿数据
message PBPlayerTemple
{	
	optional uint32	 					nextfighttime				= 1;	//下次战斗时间
}
//*************************************************神殿数据结束***************************

//*************************************************元素圣殿开始***************************
//元素信息
message PBPlayerElementInfo
{
	optional uint32						pettype				= 1;	// 类型
	optional uint32	 					maxstage			= 2;	// 历史最高关卡
	optional uint32	 					daymaxstage			= 3;	// 今日最高关卡
}
//元素数据
message PBPlayerElement
{	
	repeated PBPlayerElementInfo		info				= 1;	// 元素信息
	optional uint32	 					dayfightcount		= 2;	// 今日挑战次数
	optional uint32	 					daybuycount			= 3;	// 今日购买次数
	optional uint32	 					weekstagecount		= 4;	// 每周通关数
}
//*************************************************元素圣殿结束***************************

//*************************************************神殿冒险开始***************************
//冒险格子信息
message PBPlayerRiskGrid
{
	optional uint32						grid				= 1;	// 格子ID
	optional uint32	 					type				= 2;	// 类型 _emRiskRefreshType
	optional uint32						openstate			= 3;	// 开启状态	_emRiskGridOpenState
	repeated PBU32U32					indexvalue			= 4;	// 索引 答题ID_答题状态(_emRiskQuestionResult) 店位置_索引
	optional uint32						param				= 5;	// 参数 对话ID/事件ID
}
//神殿冒险
message PBPlayerRisk
{	
	optional uint32	 					curstage			= 1;	// 当前层数
	optional uint32	 					killguardcount		= 2;	// 已经击杀守卫个数
	optional uint32	 					guardprize			= 3;	// 领取的奖励ID
	optional uint32	 					hpdrupcount			= 4;	// 生命药剂数量
	optional uint32	 					usehpdrupcount		= 5;	// 使用生命药剂数量
	optional uint32	 					killdrupcount		= 6;	// 驱魂药剂数量
	optional uint32	 					usekilldrupcount	= 7;	// 使用驱魂药剂数量
	optional uint32	 					tradercount			= 8;	// 召唤商人数量
	repeated PBU32U32	 				shopindex			= 9;	// 冒险商店
	repeated uint32	 					shopbuypos			= 10;	// 冒险商店购买的位置
	repeated PBPlayerRiskGrid	 		gridinfo			= 11;	// 格子信息
	repeated PBU32U64	 				guardhp				= 12;	// 守卫血量(位置12345)
	repeated PBBattlePetInfo			petInfo				= 13;	// 伙伴信息
	repeated PBItemInfo					iteminfo			= 14;	// 累计道具信息
	repeated PBSkillInfo				skillinfo			= 15;	// 被动技能
}
//*************************************************神殿冒险结束***************************

//*************************************************系统开启开始***************************
//系统开启
message PBPlayerSysteSwitch
{	
	repeated uint32	 					systemid			= 1;	// 开启的ID
	repeated PBU32U32					opentime			= 2;	// 开启时间
	repeated uint32						prize				= 3;	// 已经获取的开启系统奖励ID
	optional uint32						mark				= 4;	// 版本标识
}
//*************************************************系统开启结束***************************

//*************************************************超凡段位开始***************************

//超凡段位对手显示信息
message PBPlayerDanEnemy
{	
	optional 	PBPlayerDisplay	 		display				= 1;	// 对手显示
	optional 	uint32	 				fightpower1			= 2;	// 队伍一战力
	optional 	uint32	 				fightpower2			= 3;	// 队伍2战力
}

//超凡段位记录
message PBPlayerDanRecord
{	
	repeated 	uint64	 				battlesn			= 1;	// 战斗sn
	optional	PBPlayerDisplay			left				= 2;	// 左边display
	optional	PBPlayerDisplay			right				= 3;	// 右边display
	optional	uint32					leftrank			= 4;	// 左边排名
	optional	uint32					rightrank			= 5;	// 右边排名
	optional	uint32					leftdan				= 6;	// 左边段位
	optional	uint32					rightdan			= 7;	// 右边段位
	optional	uint32					winner				= 8;	// 胜利方0左边1右边
	optional	uint32					type				= 9;	// BattleType_Dan/BattleType_DanKing
	optional 	uint32					time				= 10;	// 时间
}

//超凡段位战绩
message PBPlayerDanResult
{	
	optional 	uint32	 				seasonid			= 1;	// 赛季ID
	optional 	uint32	 				curdanid			= 2;	// 当前段位ID
	optional 	uint32	 				maxdanid			= 3;	// 历史最高段位ID
	optional	int32					exp					= 4;	// 当前经验
	optional	int32					cacheexp			= 5;	// 缓冲经验
	optional	uint32					score				= 6;	// 积分(服务器排序匹配用)
	optional	uint32					maxscore			= 7;	// 最大积分
	optional 	uint32	 				normalsuccount		= 8;	// 常规赛胜场
	optional 	uint32	 				normaltotalcount	= 9;	// 常规赛总场数
	optional 	uint32	 				kingsuccount		= 10;	// 王者赛胜场
	optional 	uint32	 				kingtotalcount		= 11;	// 王者赛总场数
	optional 	uint64	 				maxdamage			= 12;	// 单场最大伤害值
	optional 	uint32	 				maxcontinuewin		= 13;	// 最大连胜场次
	optional 	uint32	 				mvpmaxpet			= 14;	// MVP次数最多英雄
	repeated 	PBU32U32 				mvppet				= 15;	// MVP次数英雄
	optional 	PBPlayerDanEnemy	 	maxenemy			= 16;	// 最强对手
}
//超凡段位
message PBPlayerDan
{	
	optional 	uint32	 				curseasonid			= 1;	// 赛季ID
	optional 	uint32	 				seasonstate			= 2;	// 赛季状态
	optional 	uint32	 				fightcount			= 3;	// 挑战次数
	optional 	uint32	 				buycount			= 4;	// 购买次数
	optional 	uint32	 				prizedanid			= 5;	// 领奖的段位ID
	optional 	uint32	 				continuewincount	= 6;	// 当前连胜场次
	repeated 	uint32	 				protmoteresult		= 7;	// 晋级赛结果
	optional 	PBPlayerDanResult	 	totalresult			= 8;	// 总战绩
	repeated 	PBPlayerDanResult	 	seasonresult		= 9;	// 赛季战绩
	repeated	PBPlayerDanRecord		records				= 10;	// 个人战斗记录
	optional	bool					inkingmatch			= 11;	// 是否在王者赛中
}
//*************************************************超凡段位结束***************************

//*************************************************跨服天梯数据开始***************************
// 跨服天梯记录
message PBPlayerLadderRecord
{
	optional uint64 				battlesn			= 1;	//战斗流水号
	optional uint32 				result				= 2;	//战斗结果 _emBattleResult
	optional PBPlayerDisplay 		display				= 3;	//显示信息
	optional uint32 				fightpower			= 4;	//战斗力
	optional uint32 				oldrank				= 5;	//老排名
	optional uint32 				newrank				= 6;	//新排名
	optional uint32 				beggintime			= 7;	//时间
}

// 跨服天梯信息
message PBPlayerLadder
{
	optional uint32 				dayentercount		= 1;	//进入次数
	optional uint32 				daybuycount			= 2;	//购买次数
	optional uint32 				maxrank				= 3;	//最高名次
	repeated uint32 				refreshrank			= 4;	//刷新的名次
	repeated PBPlayerLadderRecord 	record				= 5;	//我的记录
	repeated uint32					likeplayers			= 6;	//点赞的玩家id
	repeated uint32					likerobots			= 7;	//点赞的机器人id
}
//*************************************************跨服天梯数据结束***************************


//*************************************************冠军赛数据开始***************************
//我的比赛记录
message PBChampionFightRecordInfo
{
	optional uint64					battlesn		= 1;//战斗SN
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					addscore		= 3;//增加的积分
	optional PBPlayerDisplay		selfdisplay		= 4;//自己显示
	optional PBPlayerDisplay		tardisplay		= 5;//目标显示
	optional uint32					result			= 6;//战斗结果	_emBattleResult
	optional uint32					time			= 7;//时间
}
//我的比赛记录
message PBChampionFightRecord
{
	repeated PBChampionFightRecordInfo	record		= 1;//记录
}
//我的竞猜记录
message PBChampionGuessRecordInfo
{
	optional uint64					battlesn		= 1;//战斗SN
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional int32					addguesscoin	= 3;//增加竞猜币(负数表示失去)
	optional PBPlayerDisplay		windisplay		= 4;//胜利者显示
	optional PBPlayerDisplay		faildisplay		= 5;//失败者显示
}
//正在竞猜记录
message PBChampionGuessRecordIng
{
	optional uint64					battlesn		= 1;//战斗SN
	optional uint32					round			= 2;//回合ID	_emChampionRound
	optional uint32					guesscoin		= 3;//竞猜币
	optional PBPlayerDisplay		leftdisplay		= 4;//左边显示
	optional PBPlayerDisplay		rightdisplay	= 5;//右边显示
	optional uint32					playerid		= 6;//竞猜玩家
}
//我的竞猜记录
message PBChampionGuessRecord
{
	repeated PBChampionGuessRecordInfo	record		= 1;//记录
	optional PBChampionGuessRecordIng	recording	= 2;//正在竞猜记录
}

// 冠军赛数据
message PBChampionData
{
	optional uint32					order		= 1;	//当前排行
	optional uint32					score		= 2;	//当前积分
	optional uint32					fightscore	= 3;	//战斗积分
	optional PBBattlePet			defense		= 4;	//防守阵容
	optional uint32					guesscoin	= 5;	//竞猜币
	optional PBChampionGuessRecord 	guessrecord	= 6;	//我的竞猜记录
	optional PBChampionFightRecord 	fightrecord	= 7;	//我的比赛记录
	optional uint32 				maxrank		= 8;	//历史最高名次
	optional bool					issynresult	= 9;	//结果通知
	optional bool					issyntop	= 10;	//是否通知排行
	optional uint32					lastround	= 11;	//最后存在的轮次
}

//*************************************************圣物数据开始***************************
// 圣物具体数据
message PBPlayerHolyInfo
{
	optional uint32	 				pettype				= 1;	// 类型
	optional uint32	 				level				= 2;	// 等级
	optional uint32	 				exp					= 3;	// 当前经验
	optional uint32	 				advance				= 4;	// 进阶
}
// 神器数据
message PBPlayerHoly
{
	repeated PBPlayerHolyInfo		info				= 1;	// 圣物具体数据
}
//*************************************************圣物数据结束***************************
//*************************************************录像数据开始***************************
// 录像数据
message PBPlayerVideo
{
	repeated uint64	 				daylikevideo		= 1;	// 点赞的录像
	repeated uint64	 				collectvideo		= 2;	// 收藏的录像
}
//*************************************************录像数据结束***************************
//***********************************************特权数据开始***************************
//vip数据
message PBPrivilegeVip
{
	optional uint32 exp						= 1;	//vip经验
	repeated uint32 buyvippacket			= 2;	//购买的vip礼包
}
//特权商店数据
message PBPrivilegeShopBuy
{
	optional uint32 index				= 1;	//index
	optional uint32 buycount			= 2;	//购买个数
}
//特权卡
message PBPrivilegeCard
{
	optional uint32 cardid				= 1;	//特权卡ID _emPrivilegeCard
	optional uint32 expiretime			= 2;	//失效时间(0永久)
}
//特权卡充值记录
message PBPrivilegeCharge
{
	optional uint32 cardid				= 1;	//特权卡ID _emPrivilegeCard
	optional uint32 totalcharge			= 2;	//累计充值
	optional uint32 expiretime			= 3;	//0未激活
}
//每日奖励
message PBPrivilegeDailyPrize
{
	optional uint32 packetid			= 1;	//礼包ID _emPrivilegeDailyPacket
	optional uint32 prizetime			= 2;	//领奖时间
}
//特权数据
message PBPlayerPrivilege
{
	optional PBPrivilegeVip 		vip			= 1;	//vip数据
	repeated PBPrivilegeShopBuy 	shopbuy		= 2;	//特权商店
	repeated PBPrivilegeDailyPrize	dailyprize	= 3;	//每日奖励
	repeated PBPrivilegeCard 		card		= 4;	//特权卡
	repeated PBPrivilegeCharge 		charge		= 5;	//特权卡充值记录	
	optional uint32 				IsCompensation = 6;	//是否已验证补偿过	
}
//************************************************特权数据结束***************************
//***********************************************福利数据开始***************************
//签到数据
message PBPlayerSignin
{
	optional uint32 			signinDays 			= 1; 					// 签到天数
	optional uint32 			signinState 		= 2 [default = 1]; 		// 签到状态
}
//点石成金数据
message PBPlayerClickGoldInfo
{
	optional uint32				type 		= 1; //类型
	optional uint32				times 		= 2; //点击的次数
}
//点石成金数据
message PBPlayerClickGold
{
	optional uint32					resettime	= 1; //下次重置时间
	repeated PBPlayerClickGoldInfo	info		= 2; //点石成金
}
//点石成金数据
message PBPlayerGift
{
	optional uint32					index		= 1; //index
	optional uint32					count		= 2; //个数
	optional uint32					time		= 3; //购买时间
}

//离线找回数据
message PBFindBackData
{
	optional uint32		ResourceID	= 1;// 领取玩法ID see @ENMResourceID 
	repeated PBU32U32	Reward		= 2;//奖励物品, key：ItemID , value: 数量
	optional uint32		Status		= 3;//领取状态  see@ DrawStaus
	optional uint32 	SubDiamond  = 4;//完美找回扣除钻石数
	//optional uint32		Discount	= 4;//免费找回折扣
}
//资源找回
message PBFindBackDatas
{
	optional uint32 		 OfflineDay		= 1; //收集离线数据天数
	optional uint32			 FindBackDay 	= 2; //玩家找回天数 
	repeated PBFindBackData	 FindBackData	= 3; //离线找回数据
	optional uint32 		 LastOnLoginTime = 4; //上次Onlogin时间
}

//福利数据
message PBPlayerWeal
{
	optional PBPlayerSignin 		signin 					= 1; // 签到数据
	optional PBPlayerClickGold  	clickgold   			= 2; // 点石成金数据
	optional PBPlayerFanli			fanli   				= 3; // 返利数据
	optional uint32 				onlineprize				= 4; // 在线奖励数据
	repeated PBPlayerGift			gift 					= 5; // 礼包
	optional PBFindBackDatas		FindBack				= 6; //离线找回数据
}


//返利数据
message PBPlayerFanli
{
	optional uint32					money	= 1; //充值金额
	optional uint32					state	= 2; //状态 player_FanLi_State
}
//***********************************************福利数据结束***************************

//********************************************孵化屋数据开始*****************************
// 孵蛋
message PBIncubateEgg
{
	optional uint32 Index 				= 1; //正在孵化Index
	optional uint32 TotalStep 			= 2; //总的步数
	optional uint32 CurrStep			= 3; //当前步数
	optional uint32 Speed 				= 4; //当前速度
	optional uint32 LastStepTime 		= 5; //上次更新步数时间 
	optional uint32 BikeEndTime			= 6[default = 0]; //使用自行车开始时间
	optional bool 	IsUseSubTotalStep 	= 7[default = false]; //是否使用过暖暖石
}

//孵蛋屋
message PBIncubateEggData
{
	repeated PBIncubateEgg IncubateEggs = 1; //正在孵化蛋数据
}
//********************************************孵化屋数据结束*****************************
//***********************************************活动数据开始***************************
//针对每一个奖励的存储
message PBPlayerActivityIndexData
{
	optional uint32 					index 		= 1;	// 索引
    repeated PBU32U32 					data  		= 2;    // 数值
}
//活动存储数据
message PBPlayerActivityData
{
	optional uint32 					id 			= 1;	// 活动ID
	optional uint32						resettime	= 2;	// 上次重置时间
	repeated uint32						acquired 	= 3;	// 已经获得的奖励索引
    repeated PBU32U32 					data  		= 4;    // 数值
	repeated PBPlayerActivityIndexData	indexdata	= 5;	// 针对每个奖励索引数值
}
//活动数据
message PBPlayerActivity
{
	repeated PBPlayerActivityData activitydata  = 1; //活动数据
}
//***********************************************活动数据结束***************************
//***********************************************平台和充值数据开始***************************
//商品购买信息
message PBChargeInfo
{
	optional uint32 groupid					= 1;	//商品组id
	optional uint32 firstbuytime			= 2;	//第一次购买时间
	optional uint32 lastbuytime				= 3;	//最近一次购买时间
	optional uint32 buycount				= 4;	//总购买次数
}
// 充值信息
message PBRechargeInfo
{
	optional uint32					worldid		= 1;	//服务器ID
	optional uint32					playerid	= 2;	//角色ID
	optional int32					rmb			= 3;	//人民币
	optional uint32					time		= 4;	//时间
	optional string					account		= 5;	//账号
	optional string					sn			= 6;	//流水号
	optional uint32					buyid		= 7;	//购买id
	optional uint32					type		= 8;	//增加类型
	optional uint32					param		= 9;	//增加参数
	optional string					rechargemode= 10;	//充值方式
 	
}
//平台信息
message PBPlayerPlatform
{
	repeated PBChargeInfo info				= 1;	//商品购买信息
}
//************************************************平台和充值数据结束***************************
//***********************************************聊天数据开始***************************
//  频道信息
message PBGMTalkForbid
{
	optional uint32			channel		= 1;			//类型 _emBroadcast_Channel(-1代表所有频道)
	optional uint32			forbidtime	= 2;			//gm禁言解封时间(0的话代表没有被禁言)
}

//  频道信息
message PBTalkChannel
{
	optional uint32			channel		= 1;			//类型 _emBroadcast_Channel
	optional uint32			lasttime	= 2;			//最后一次发言时间(聊天冷却使用)
	optional uint32			forbidtime	= 3;			//gm禁言解封时间(0的话代表没有被禁言)
	optional uint32			dailycount	= 4;			//当天发言次数
}
//玩家聊天
message PBPlayerTalk
{
	repeated PBTalkChannel talk			= 1;			// 频道信息

}
//***********************************************聊天数据结束***************************
//***********************************************探宝数据开始***************************
//探宝类型数据
message PBPlayerTreasureData
{
	optional uint32 type 			= 1; //类型
	repeated uint32 luckyitems 		= 2; //已经得到的幸运兑换物品index
	optional uint32	freecount 		= 3; //已经使用的免费刷新次数
	optional uint32	nextresettime	= 4; //免费次数下次重置时间,0无需重置
	repeated uint32	displayitems	= 5; //轮盘上的物品index
	repeated uint32	displayitemsnum	= 6; //轮盘上的物品的已经获得了的数量,和displayItems位置对应
	repeated uint32 displayrand		= 7; //轮盘上物品的随机值(第几个随机物品,从0开始)，和displayItems位置对应
}
//探宝数据
message PBPlayerTreasure
{
	repeated PBPlayerTreasureData data = 1; //探宝数据
}

// 抽獎数据
message PBPlayerLotteryData
{
	optional uint32 type 			= 1; // 类型值，
	optional uint32 time 			= 2; // 本次许愿时间，当第一次使用时更新此值	
	optional uint32	freecount 		= 3; // 已经使用的免费刷新次数
	optional uint32 count 			= 4; // 本次已许愿次数
	optional uint32 location		= 5; // 许愿奖励序号，默认为第一个
	repeated PBU32U32 petHitCount 	= 6; // 每只精灵对应的点击数量
}
// 抽獎数据列表
message PBPlayerLottery
{
	repeated PBPlayerLotteryData data = 1; // 抽獎数据
}

//***********************************************探宝数据结束***************************
//***********************************************天界副本数据开始***************************
//天界副本关卡数据
message PBPlayerHeavenDungeonStage
{
	optional uint32 index = 1; // 索引
	repeated uint32 stars = 2; // 点亮的星星(保存完成了的，第几个星星条件，从0开始)
	optional bool	first = 3; // 是否还是第一次都没打过
}
//天界副本章节数据
message PBPlayerHeavenDungeonChapter
{
	optional uint32 chapter 						= 1; // 类型
	repeated uint32 rewards 						= 2; // 已经获取的章节奖励
	repeated PBPlayerHeavenDungeonStage stages	 	= 3; // 关卡数据
}
//天界副本神像数据
message PBPlayerHeavenDungeonStatue
{
	optional uint32 	index 	= 1; 	// 神像索引
	repeated PBU32U32 	rewards = 2; 	// 自己经获得的奖励记录
	optional uint32 	times	= 3;	// 祈祷了多少次了
}
//天界副本数据
message PBPlayerHeavenDungeon
{
	optional uint32 count 								= 1; // 当前次数
	optional uint32 buycount 							= 2; // 已经用了的购买次数
	optional uint32 prayfreecount 						= 3; // 已经用了的祈祷免费次数
	repeated PBPlayerHeavenDungeonChapter 	chapters 	= 4; // 章节数据
	repeated PBPlayerHeavenDungeonStatue 	statues 	= 5; // 神像数据
}
//***********************************************天界副本数据结束***************************
//***********************************************跨服竞技场数据开始***************************

//跨服竞技场队伍数据
message PBPlayerCrossChallengeTeamInfo
{
	optional PBBattlePet			team1			= 1;    // 队伍1
    optional PBBattlePet			team2			= 2;    // 队伍2
    optional PBBattlePet			team3			= 3;    // 队伍3
    optional bool                   hideteam1       = 4;    // 是否隐藏队伍1
    optional bool                   hideteam2       = 5;    // 是否隐藏队伍2
    optional bool                   hideteam3       = 6;    // 是否隐藏队伍3
}

// 跨服竞技场玩家信息
message PBCrossChallengeInfo
{
	optional uint32								id			= 1;	// id
	optional PBPlayerDisplay					display 	= 2;	// 玩家显示
	optional PBPlayerCrossChallengeTeamInfo		team 		= 3;	// 队伍
	optional uint32								order 		= 4;	// 名次
	optional uint32								score 		= 5;	// 积分
	optional uint32								scoretime 	= 6;	// 获得积分的时间
	optional uint32								like		= 7;	// 点赞数
	optional uint32								power		= 8;	// 战斗力
	optional bool								robot		= 9;	// 是否是机器人
	optional string								faction 	= 10;	// 公会名
}

//跨服竞技场数据
message PBPlayerCrossChallenge
{
	optional uint32 	count 			= 1; // 当天挑战次数
	optional uint32		continuecount	= 2; // 连胜次数
	repeated bool       hideteam       	= 3; // 是否隐藏队伍
	repeated uint32		likeplayer		= 4; // 今天点了赞的玩家，每日清理
	repeated uint32		curdailyprize	= 5; // 今天领取了的宝箱，每日清理
	repeated PBCrossChallengeInfo refreshinfo = 6; //跨服竞技场对手
	optional uint32		historyrank		= 7;	// 历史最高排名
	optional uint32		seasonindex		= 8;	// 赛季
}
//***********************************************跨服竞技场数据结束***************************
//***********************************************晶碑数据开始***************************
//阵位数据
message PBPlayerTabletPosition
{
	optional uint32 	pos 	= 1; // 位置
	optional uint64		sn		= 2; // pet sn
}
//晶碑数据
message PBPlayerTablet
{
	optional uint32						magicjuice		= 1; // 产生魔液个数
	optional uint64       				exp       		= 2; // 剩余经验
	optional uint32						level			= 3[default = 1]; // 晶碑等级
	optional uint32						nextproducetime = 4; // 下次提炼的时间
	repeated PBPlayerTabletPosition 	position		= 5; // 阵位
	repeated PBU64U32					heros			= 6; // 临时英雄
}
//***********************************************晶碑数据结束***************************
//***********************************************周冠军赛数据开始***************************
//周冠军赛数据
message PBPlayerWeekChampion
{
	repeated uint32						likeplayers		= 1; // 点赞的玩家
}
//***********************************************周冠军赛数据结束***************************
//***********************************************组队征战数据开始***************************

//组队征战英雄状态,没有的为满血
message PBTeamCampaignPetState
{
	optional uint64 				sn			= 1;	//sn
	optional uint64 				curhp		= 2;	//当前血量0死亡
	optional uint64 				maxhp		= 3;	//最大hp
}

//组队征战数据
message PBPlayerTeamCampaign
{
	optional uint32						fightpower		= 1;	//战斗力
	optional uint32 					difficulty 		= 2;	//当前难度
	optional uint32 					stage 			= 3;	//当前关卡
	repeated uint32						targets			= 4;	//当天的敌人
	repeated uint32 					passed 			= 7;	//通关的难度
	repeated uint32 					extraprize 		= 8;	//未选择的额外奖励
	repeated uint32 					skill 			= 9;	//当前的技能
	repeated PBTeamCampaignPetState 	petstate 		= 10;	//玩家英雄状态
	repeated PBTeamCampaignPetState		stagestate		= 11;	//当前关卡状态
	repeated uint32						prize 			= 12;	//今日选过的奖励
}

//***********************************************组队征战数据结束***************************

//***********************************************个人空间数据开始***************************

//玩家邀请奖励
message PBPlayerInvitePrize
{
	optional uint32 id 		= 1; //成就ID
	optional uint32 num 	= 2; //可领取数量
	optional uint32 gotnum	= 3; //已经领取数量
}

// 个人空间
message PBPlayerPrivateSpace
{
	repeated uint32					fans			= 1; // 粉丝们的player id
	repeated uint32					follow			= 2; // 自己关注的玩家 player id
	optional uint32					background		= 3; // 背景图
	repeated uint64					showpets		= 4; // 展示的英雄
	optional bool					needconfirm 	= 5; // 切磋需要验证
	optional string					invitecode		= 6; // 自己的邀请码
	optional PBU32U32				invite 			= 7; // 邀请自己的玩家 world id, player id
	repeated PBU32U32				inviteplayers 	= 8;// 接受邀请的玩家 world id, player id
	repeated PBPlayerInvitePrize 	inviteprize 	= 9;// 邀请奖励
	repeated uint32					surveyprize 	= 10;// 是否领取问卷奖励
}

//***********************************************个人空间数据结束***************************

//***********************************************龙珠数据开始***************************

//龙珠
message PBPlayerDragonBall
{
	optional uint32 type 	= 1; //类型
	optional uint32 level 	= 2; //等级
}

// 龙珠数据
message PBPlayerDragonBallData
{
	repeated PBPlayerDragonBall balls = 1;//龙珠们
}

//***********************************************龙珠数据结束***************************

//***********************************************common数据开始***************************

// common数据
message PBPlayerCommonData
{
	repeated uint32 prize = 1;//简单奖励
}

//***********************************************common数据结束***************************

//***********************************************契约数据开始***************************

// 契约数据
message PBPlayerConvenantData
{
	optional uint32		level 	= 1;//等级 0 未解锁 >0 实际等级
	repeated PBU32U32 	parts 	= 2;//部位状态(id, attr index 0 未生效 1 2 3属性索引)
}

//***********************************************契约数据结束***************************
// 用户系统功能数据
message PBPlayerSystem
{
	optional uint32 				saveorder		= 1;	//序列号
	optional PBPlayerZhenfa			zhenfa			= 3;	//阵法信息
	optional PBPlayerCopymap		copymap			= 4;	//副本信息
	optional PBPlayerFight			fight			= 5;	//战斗信息
	optional PBPlayerTask			task			= 6;	//任务信息
	optional PBPlayerChallenge		challenge		= 7;	//竞技场信息
	optional PBPlayerFaction		faction			= 8;	//帮派信息
	optional PBPlayerCall			call			= 9;	//召唤信息
	optional PBPlayerSail			sail			= 10;	//远航数据
	optional PBPlayerHook			hook			= 11;	//挂机数据
	optional PBPlayerArtifact		artifact		= 12;	//神器数据
	optional PBPlayerShop			shop			= 13;	//商店数据
	optional PBPlayerTrain			train			= 14;	//试炼数据
	optional PBPlayerAchieve		achieve			= 15;	//成就数据
	optional PBPlayerExpedition		expedition		= 16;	//远征数据
	optional PBPlayerShape			shape			= 17;	//外形数据
	optional PBPlayerTemple			temple			= 18;	//神殿数据
	optional PBPlayerElement		element			= 19;	//元素数据
	optional PBPlayerRisk			risk			= 20;	//冒险数据
	optional PBPlayerSysteSwitch	systemswitch	= 21;	//系统开启数据
	optional PBPlayerDan			dan				= 22;	//超凡段位
	optional PBPlayerLadder			ladder			= 23;	//跨服天梯信息
	optional PBPlayerGodEquipSuit	godsuit			= 24;	//神装套装
	optional PBPlayerHoly			holy			= 25;	//圣物数据
	optional PBPlayerVideo			video			= 26;	//录像数据
	optional PBPlayerPrivilege		privilege		= 27;	//特权数据
	optional PBPlayerWeal			weal			= 28;	//福利数据
	optional PBPlayerActivity		activity		= 29;	//活动数据
	optional PBPlayerPlatform		platform		= 30;	//平台数据
	optional PBPlayerTalk			talk			= 31;	//聊天数据
	optional PBPlayerTreasure		treasure 		= 32;	//探宝数据
	optional PBPlayerHeavenDungeon	heaven			= 33;	//天界副本数据
	optional PBPlayerCrossChallenge crosschallenge 	= 34;	//跨服竞技场
	optional PBPlayerRoomData		room		 	= 35;	//家园数据
	optional PBPlayerTablet			tablet			= 36;	//晶碑数据
	optional PBElfData				elf				= 37;	//精灵数据
	optional PBPlayerToplist		toplist			= 38;	//game排行榜数据
	optional PBPlayerWeekChampion	weekchampion	= 39;	//周冠军赛数据
	optional PBPlayerTeamCampaign	teamCampaign 	= 40;	//组队征战数据
	optional PBPlayerPrivateSpace	privatespace 	= 41;	//个人空间
	optional PBPlayerDragonBallData	dragonball 		= 42;	//龙珠数据
	optional PBPlayerCommonData		common 			= 43;	//common数据
	optional PBPlayerConvenantData	convenant 		= 44;	//契约数据
	optional PBPlayerLottery      	lottery 		= 45;	//抽獎数据
	optional PBPlayerIllustration   illustration 	= 46;	//图鉴数据
	optional PBPlayerRedEnvelope   	redEnvelope 	= 47;	//红包数据
	optional PBPlayerJoyousLinkup   joyousLinkup 	= 48;	//连连看
	optional PBPlayerGuess		   	guess		 	= 49;	//猜猜猜数据
	optional PBPlayerDefend		   	defend		 	= 50;	//守护数据
	optional PBPlayerResonance	   	resonance		= 51;	//共鸣数据
	optional PBIncubateEggData 		incubateegg 	= 52;	//孵化蛋
	optional PBActivityBossData 	activityboss 	= 53;	//活动boss

}

// 扩展数据标识位
enum _emPlayerSystemExtFlag
{
	PlayerSystemExtFlag_Train	= 0x1;	//试炼数据
	PlayerSystemExtFlag_CrossChallenge	= 0x2;	//跨服数据
};

// 用户系统功能数据,用于扩展PBPlayerSystem包大小，目前只把PBPlayerTrain数据移到这个扩展结构中
message PBPlayerSystemExt
{
	optional uint32             saveorder       = 1;    //序列号
	optional uint32             flag            = 2;    //扩展功能标识 _emPlayerSystemExtFlag
	optional PBPlayerTrain      train           = 3;    //试炼数据
	optional PBPlayerCrossChallenge crosschallenge 	= 4; //跨服竞技场
	optional PBPlayerOrderData		orderdata		= 5; //角色订单管数据
}


// 前端数据存储
message PBClientData
{
	optional uint32 					saveorder		= 1;	// 序列号
	optional string	 					clientdata		= 2;	// 前端数据
}

//game排行榜数据
message PBPlayerToplistData
{
	optional uint32 					uType		= 1;	// 类型
	optional uint64						uValue		= 2;	//值
	optional uint64						uSubValue	= 3;	//字值
	optional uint32						uTime		= 4;	//时间
	optional bool						bUpdate		= 5;	//是否更新
}

//game排行榜数据
message PBPlayerToplist
{
	repeated PBPlayerToplistData		toplistData = 1;	//排行榜数据
}

// 任务数据
message PBPlayerQuest
{
	optional uint32 					saveorder		= 1;	// 序列号
	optional bytes	 					clientdata		= 2;	// 前端数据
}
//*************************************************邮件数据开始***************************
message PBMail
{
	optional uint32	worldid						= 1;	//世界ID
	optional uint32	playerid					= 2;	//玩家ID
	optional uint32	mailid						= 3;	//编号
	optional uint32 type						= 4;	//类型		_emMailType
	optional uint32	sendtime					= 5;	//发送时间
	optional uint32	expiretime					= 6;	//过期时间
	optional string	title						= 7;	//标题
	optional string	text						= 8;	//正文
	optional uint32	state						= 9;	//已读标记 (0代表未读,其他已读) _emMailState
	optional uint32	doingtype					= 10;	//操作类型	_emDoingType
	repeated PBItem item						= 11;	//道具
	repeated uint32 param						= 12;	//参数
	optional string	backmailid					= 13;	//后台邮件ID 
}

// 邮件数据
message PBPlayerMail
{
	optional uint32 					saveorder		= 1;	// 序列号
	repeated PBMail	 					mail			= 2;	// 邮件数据
}
//*************************************************邮件数据结束***************************


//*************************************************背包数据开始***************************
// 物品（装备）
message PBItem
{
	optional uint64 		itemsn			= 1;			// 物品流水号
	optional uint32 		itemid			= 2;			// 物品ID
	optional uint32			itemcount		= 3;			// 物品数量	
	optional uint32 		flag			= 4;			// 标识
	repeated PBSkillInfo 	skillinfo		= 5;			// 被动技能数据
	repeated PBAttrBaseInfo randattr		= 6;			// 随机属性
	repeated PBSkillInfo 	refineskill		= 7;			// 重铸的被动技能数据
	repeated PBAttrBaseInfo refineattr		= 8;			// 随机属性
	optional uint32 		godrefinecount	= 9;			// 神装洗练次数
	optional uint64 		equippetsn		= 10;			// 穿戴伙伴SN
	optional uint32			time 			= 11;			// 获得时间
}
// 装备合成记录
message PBEquipCompoundLog
{
	optional uint32 		time			= 1;			// 时间
	repeated PBItemInfo		item			= 2;			// 合成物品	
	repeated PBItemInfo 	expend			= 3;			// 消耗
}

// 用户背包
message PBPlayerBag
{
	optional uint32				saveorder				= 1;			// 序列号
	repeated PBItem				itembag					= 2;			// 道具背包
	repeated PBItem				equipitem				= 3;			// 穿戴的道具
	repeated PBEquipCompoundLog	equiplog				= 4;			// 装备合成记录
}

// 用户背包 扩展
message PBPlayerBagExt
{
	optional uint32				saveorder				= 1;			// 序列号
	repeated PBItem				itembag					= 2;			// 道具背包
	repeated PBItem				equipitem				= 3;			// 穿戴的道具
}


//*************************************************背包数据结束***************************

//*************************************************好友数据结束***************************
// 好友支援英雄
message PBPlayerSupportHero
{
	optional uint32				type 	= 1; // _emFriendSupportType
	optional PBBattlePetInfo 	pet 	= 2; // 支援英雄数据
}

// 好友信息
message PBPlayerFriendInfo
{
	optional PBPlayerDisplay 			display				= 1;	// 好友显示
	optional uint32	 					fightpower			= 2;	// 战力
	optional uint32	 					offlinetime			= 3;	// 离线时间
	repeated PBPlayerSupportHero		support				= 4;	// 支援英雄
}
// 已经使用的支援英雄
message PBFriendSupport
{
	optional uint32 type 		= 1;
	optional uint32 friendid 	= 2;
	optional uint64 sn 			= 3;
}
// 好友系统
message PBPlayerFriend
{
	optional uint32 					saveorder		= 1;	// 序列号
	repeated PBPlayerFriendInfo 		friendlist		= 2;	// 好友列表
	repeated PBPlayerFriendInfo			applylist		= 3;	// 申请列表
	repeated PBPlayerFriendInfo			blacklist		= 4;	// 黑名单列表
	repeated uint32	 					sendprize		= 5;	// 送取的礼物好友ID
	repeated uint32	 					recieveprize	= 6;	// 收到的礼物好友ID
	repeated uint32	 					addprize		= 7;	// 已经领取的礼物好友ID
	repeated PBPlayerSupportHero		support			= 8;	// 自己的支援
	repeated PBFriendSupport			hiredsupport	= 9;	// 已雇佣的支援
	repeated PBFriendSupport			usedsupport 	= 10;	// 已使用的支援
}
//*************************************************好友数据结束***************************

//用户信息
message PBPlayerData
{
	optional PBAccount		accountinfo 		= 1;	// 角色账号数据
	optional PBPlayerBase		playerbase		= 2;	// 角色基础数据
	optional PBPlayerSystem		playersystem 		= 3;	// 角色功能数据
	optional PBPlayerSystemExt	playersystem2 		= 4;	// 角色功能数据
	optional PBPlayerBag 		playerbag 		= 5;	// 玩家背包
	optional PBPlayerBagExt 	playerbag2 		= 6;	// 玩家背包 扩展 
	optional PBClientData		clientdata		= 7;	// 角色前端数据
	optional PBPlayerPet		playerpet		= 8;	// 伙伴数据
	optional PBPlayerPetExt		playerpet2		= 9;	// 伙伴数据 扩展 
	optional PBPlayerMail		playermail		= 10;	// 邮件数据
	optional PBPlayerFriend		playerfriend		= 11;	// 好友系统
	optional PBPlayerFaction	playerfaction		= 12;	// 帮会数据
	optional PBPlayerPetExt		playerpet3		= 13;	// 伙伴数据3
}
//*************************************************世界公共数据开始***************************
//*************************************************神殿数据开始***************************
// 神殿挑战记录
message PBTempleRecord
{
	optional uint32				battlesn		= 1;			// 战斗sn
	optional PBBattleDisplay	battledisplay	= 2;			// 归属外显
	optional uint32				evolvecount		= 3;			// 进化次数
	optional uint32				time			= 4;			// 挑战时间
}
// 神殿基本数据
message PBTempleInfoBase
{
	optional uint32				id				= 1;			// 神殿ID
	optional PBPlayerDisplay	ownerdisplay	= 2;			// 归属外显
	optional uint32				evolvecount		= 3;			// 进化次数	
}
// 神殿数据信息
message PBWorldTempleInfo
{
	optional uint32				id				= 1;			// 神殿ID
	optional PBPlayerDisplay	ownerdisplay	= 2;			// 归属外显
	optional uint32				evolvecount		= 3;			// 进化次数	
	repeated PBTempleRecord 	record			= 4;			// 挑战记录
}
// 神殿数据
message PBWorldDataTemple
{
	repeated PBWorldTempleInfo	info			= 1;			// 神殿数据信息
}
//*************************************************神殿数据结束***************************

//*************************************************世界基础数据开始***************************
//伙伴最大评分
message PBPetScoreInfo
{
	optional uint32					petid				= 1;	//伙伴ID
	optional uint32					totalscore			= 2;	//总计评分
	optional uint32					levelscore			= 3;	//等级评分
	optional uint32					equipscore			= 4;	//装备评分
	optional uint32					starscore			= 5;	//星级评分
	optional uint32					advancescore		= 6;	//进阶评分
	optional uint32					artifactscore		= 7;	//神器评分
	optional uint32					factionskillscore	= 8;	//公会技能评分
	optional uint32					runescore			= 9;	//符文评分
}

// 世界服获得道具记录
message PBWorldItemLogData
{
	optional uint32 	playerid 	= 1; // 玩家ID
	optional string		playername 	= 2; // 玩家名字
	repeated PBU32U32 	item 		= 3; // 物品 key 物品ID value 物品数量
	optional uint32 	gettime		= 4; // 取得时间
}
// 物品记录
message PBWorldItemLogs
{
	optional uint32 			type 	= 1; // 记录类型
	repeated PBWorldItemLogData items 	= 2; // 物品记录
}
//竞技场数据
message PBWorldChallengeData
{
	optional uint32				dayprizetime 	= 1;	//每日领取时间(包含七日)
	optional uint32				seasoncleartime = 2;	//赛季清除
}
// 世界基础数据
message PBWorldDataBase
{
	optional uint32					starttime			= 1;	//开服时间
	repeated PBPetScoreInfo			petscore			= 2;	//伙伴评分
	repeated PBWorldItemLogs		itemlogs 			= 3;	//物品记录
	optional uint32					cleardaytime		= 4;	//日清理时间
	optional PBWorldChallengeData	challengeData		= 5;	//挑战数据
	optional string					mergeserverlist		= 6;	//合服的服务器id列表 逗号分隔
	optional uint32					mergetime			= 7;	//合服时间
}

//*************************************************世界基础数据结束***************************

//*************************************************世界排行榜数据开始***************************
// 神殿基础数据
message PBWorldDataTopList
{
	repeated PBU32U32				cleartime	= 1;	//排行榜清除时间 类型_时间
	repeated PBU32U32				resetcount	= 2;	//重置次数 类型_次数
	repeated uint32					systemflag	= 3;	//储存是否开启类型 _emSystemSwitchType
}
//*************************************************世界排行榜数据结束***************************
//*************************************************世界活动数据开始***************************
//活动数据项
message PBWorldActivityDataEntry
{
	optional uint32		index	= 1; // 索引
	repeated PBU32U32 	data	= 2; // 活动数据
}
//活动数据
message PBWorldActivityData
{
	optional uint32						id				= 1; // 活动ID
	optional uint32						starttime		= 2; // 开始时间
	optional uint32						resettime 		= 3; // 上次重置的时间
	repeated PBWorldActivityDataEntry 	entry			= 4; // 活动数据
	repeated PBRedEnvelopeReceiveList	redEnvelopeInfo = 5; //	红包活动领取数据
	
}
//活动数据
message PBWorldActivity
{
	repeated PBWorldActivityData activitydata = 1; // 活动数据
}
//*************************************************世界活动数据结束***************************
// 世界服的数据
message PBWorldServerData
{
	optional PBWorldDataBase 		base 		= 1;//基础数据
	optional PBWorldDataTemple 		temple 		= 2;//神殿数据
	optional PBWorldDataTopList		toplist		= 3;//排行榜数据
	optional PBWorldActivity		activity	= 6;//活动数据
}
//*************************************************世界公共数据结束***************************

//*************************************************用户全局开始***************************
// 神器显示数据
message PBGlobalCommonDisplay
{
	optional uint32	 				offlinetime			= 1;	//离线时间
	optional uint32	 				danid				= 2;	//超凡段位
	optional uint32					fightpower			= 3;	//战斗力
	repeated PBPlayerBadge 			badgedisplay		= 4;	//徽章展示
}
// 神器显示数据
message PBGlobalArtifactDisplay
{
	optional uint32	 				id					= 1;	//神器ID
	optional uint32	 				shapeid				= 2;	//幻化ID
	optional uint32	 				refinelevel			= 3;	//精炼等级
	repeated PBSkillInfo 			skill				= 4;	//技能数据
	repeated PBAttrBaseInfo 		attr				= 5;	//属性
}
// 荣誉显示数据
message PBGlobalHonorDisplay
{
	optional uint32	 					honorpoint		= 1;	//荣誉点数
	repeated PBPlayerBadge 				badge			= 2;	//徽章

}
// 战斗阵容显示数据
message PBGlobalBattleDisplay
{
	optional uint32						zhenfaid		= 1;	//阵法ID
	repeated PBBattlePetInfo 			battlepet		= 3;	//战斗伙伴信息
}
// 帮派显示数据
message PBGlobalFactionDisplay
{
	optional uint32						factionid		= 1;	//帮派ID
	optional string						factionname		= 2;	//帮派名称
	repeated PBPlayerFactionSkill		skill			= 3;	//帮派技能
}
// 圣物显示数据
message PBGlobalHolyDisplay
{
	repeated PBPlayerHolyInfo			holy			= 1;	//圣物显示数据
}

// 帮派副本数据
message PBGlobalCopymapDisplay
{
	repeated uint32						copymapAward	= 1;	//帮派副本奖励
}

// 个人空间数据
message PBGlobalPrivateSpace
{
	optional uint32						background		= 1;	//背景
	optional uint32						fansnum			= 2;	//粉丝数量
	repeated PBBattlePetInfo			showpets		= 3;	//展示的英雄
	optional bool						fightconfirm	= 4;	//是否需要验证
}

// 用户全局功能基础数据
message PBPlayerGlobalBase
{
	optional PBGlobalCommonDisplay 		commondisplay	= 1;	//通用
	optional PBPlayerDisplay 			playerdisplay	= 2;	//用户标记
	optional PBGlobalHonorDisplay 		honordisplay	= 3;	//荣誉显示数据
	optional PBGlobalBattleDisplay		battledisplay	= 4;	//战斗阵容显示数据
	optional PBGlobalArtifactDisplay	artifactdisplay	= 5;	//神器数据
	optional PBGlobalFactionDisplay 	factiondisplay	= 6;	//帮派显示数据
	optional PBGlobalHolyDisplay		holydisplay		= 7;	//圣物显示数据
	optional PBGlobalCopymapDisplay		copymapDisplay	= 8;	//帮派副本奖励
	optional PBGlobalPrivateSpace		privatespace 	= 9;	//个人空间
	optional PBGlobalDefendDisplay		defenddisplay	= 10;	//守护信息
	optional PBBattleFactionPVPSkill	pvpskill		= 11;	//公会pvp技能信息
}
// 排行榜数据
message PBTopListInfo
{
	optional uint32	type					= 1;	//排行类型 _emTopListType
	optional uint32	rank					= 2;	//名次
	optional uint64	value					= 3;	//排行值
	optional uint64 subvalue				= 4;	//排行子值
	optional uint32 time					= 5;	//时间
	optional uint32 lastrank				= 6;	//上次名次
	optional string factionname				= 7;	//公会名
}
// 排行系统
message PBPlayerGlobalTopList
{
	repeated PBTopListInfo	toplist 	= 1;	//排行系统
}
// 竞技场数据
message PBChallengeData
{
	optional uint32			order		= 1;	// 当前排行
	optional uint32			score		= 2;	// 当前积分
	optional PBBattlePet	defense		= 3;	// 防守阵容
	optional uint32			like		= 4;	// 点赞次数
	optional uint32			scoretime= 5;	// 加积分时间
}

//周冠军赛竞猜记录
message PBWeekChampionBetRecord
{
	optional uint32				round		= 1;	//轮次
	optional PBPlayerDisplay 	left  		= 2;	//左边选手
	optional PBPlayerDisplay	right		= 3;	//右边选手
	optional uint32 			betside 	= 4;	//下注哪边
	optional uint32 			winner 		= 5;	//胜利方
	optional int32				coin		= 6;	//下注的竞猜币/得到的竞猜币
	optional uint64				battlesn	= 7;	//战斗sn
}

//周冠军赛数据
message PBWeekChampion
{
	optional uint32								coin		= 1; // 高级竞猜币
	repeated PBWeekChampionBetRecord 			guessrecord = 2; // 竞猜记录
	optional uint32								maxorder 	= 3; // 最高排名
}

// 用户全局功能数据(保存数据库 用)
message PBPlayerGlobalData
{
	optional uint32 		 			 saveorder			= 1;	//保存序列号
	optional PBPlayerGlobalBase 		 baseinfo			= 2;	//基础数据
	optional PBPlayerGlobalTopList		 toplist 			= 3;	//排行系统
	optional PBChallengeData			 challenge 			= 4;	//竞技场
	optional PBChampionData			 	 champion 			= 5;	//冠军赛
	optional PBRoomData			 		 room	 			= 6;	//家圆系统
	optional PBWeekChampion				 weekchampion		= 7;	//周冠军赛
}

//*************************************************用户全局结束***************************

// 帮派基础 客户端用
message PBFactionBase
{
	optional string 				name				= 1;		//帮派名
	optional uint32 				factionid			= 2;		//帮派ID
	optional uint32 				leader				= 3;		//帮主ID
	optional uint32 				worldid				= 4;		//世界ID
	optional uint32					level				= 5;		//帮派等级
	optional uint32					exp					= 6;		//帮派经验
	optional string					declaration			= 7;		//宣言
	optional uint32			isauto			= 8;		//是否验证 0不验证
	optional uint32			joinneedlevel	= 9;		//加入需要的玩家等级
}
// 帮派信息展示
message PBFactionDisplay
{
	optional PBFactionBase		base			= 1;		//帮派数据
	optional PBPlayerDisplay	leaderdisplay	= 2;		//帮主信息
	optional uint32				people			= 3;		//现帮会人数
	optional uint32				peoplemax		= 4;		//现帮会最大人数
	optional bool				isleaderonline	= 5;		//帮主是否在线
	optional uint32				needplayerlevel	= 6;		//需要玩家等级
	optional uint64				totalfightpower	= 7;		//总战力

}
// 排行信息
message PBFactionTop
{
	optional PBFactionDisplay		display		= 1;		//显示
	optional uint32					rank		= 2;		//排名
}

// 玩家个人空间展示
message PBPrivateSpaceDisplay
{
	optional uint32 		background 	= 1;
	optional uint32 		fansnum 	= 2;
	repeated PBPetDisplay 	showpets 	= 3;
}

// 查询玩家返回
message PBG2CQueryPlayerViewAck
{
	optional uint32 				viewtype		= 1;// 查询类型 _emQueryPlayerViewType
	optional PBPlayerView 			main			= 2;// 主界面
	optional PBGlobalHonorDisplay 	honor			= 3;// 荣誉
	optional PBPrivateSpaceDisplay	privatespace	= 4;// 个人空间
}

//家具数据
message PBFurniture
{
	optional uint32					type		= 1;//类型
	optional uint32					id			= 2;//家具id，唯一id
	optional uint32					state 		= 3;//状态，使用状态和非使用状态 参考 _emAccountMark
	optional uint32					position	= 4;//位置
	optional uint32					floorNum	= 5;//第几层
}

// world家园数据
message PBRoomData
{
	repeated PBFurniture  			furniture		= 1;// 家具
	repeated uint32					callOn			= 2;//拜访
	repeated uint32					callOnPlayer	= 3;//拜访的人
}

//宠物物品
message PBPetItem
{
	optional uint32					type		= 1;//类型
	optional uint32					num			= 2;//数量
}

// gameServer家园数据
message PBPlayerRoomData
{
	repeated PBPetItem				pet		= 1;// 宠物
}


//孵化数据
message PBHatchElfData
{
	optional uint32					hatchElfID		= 1;//孵化id
	optional uint32					hatchElfTatol	= 2;//孵化总点数
	optional uint32					hatchElfSpeed	= 3;//孵化速度--没秒减少多少
}


//精灵数据
message PBElfData
{
  optional PBHatchElfData      hatchElfData  = 1; //孵化数据
}

//位置数据
message PBPositionElfData
{
	optional uint32					uElfID		= 1;//id
	optional uint32					isUnLock	= 2;//是否解锁	0：没有解锁，1：解锁
}

// 图鉴数据
message PBPlayerIllustration
{
	repeated PBPlayerPetInfo data 	= 1 ; //图鉴精灵数据
	optional uint32 historyPower	= 2 ; //历史最高战力
}

//角色身上红包数据
message PBPlayerRedEnvelope
{
	repeated PBRedEnvelopeInfo 	data 		= 1 ; //红包数据
}
//单个红包数据
message PBRedEnvelopeInfo
{
	optional uint32 	index 			= 1; //红包索引
	optional uint32 	receiveTime  	= 2; //红包领取时间
	optional uint32 	status			= 3; //红包领取状态 0可领取 1未开启 2已领取
	repeated PBItemInfo	award			= 4; //红包领取物品
}
//服务器红包领取列表
message PBRedEnvelopeReceiveList
{
	optional uint32 			index  		= 1;	//红包索引
	repeated PBRedEnvelopeData 	data  		= 2;	
	
}
//领取红包奖励数据
message PBRedEnvelopeData
{
	optional uint32 	index 			= 1; //红包索引
	optional uint32		headid			= 2; //头像ID
	optional uint32 	receiveTime  	= 3; //红包领取时间
	optional string		name			= 4; //玩家名字
	repeated PBItemInfo	award			= 5; //红包领取物品
	optional uint32		level			= 6; //玩家等级
}

//连连看
message PBPlayerJoyousLinkup
{
	optional uint32 	layerId 		= 1; //关卡
	optional uint32		maxScore		= 2; //最高积分
}

//角色身上猜猜猜数据
message PBPlayerGuess
{
	optional uint32 	totalScore		= 1; //最高得分
	optional uint32		curRank			= 2; //当前排名
}

//活动boss数据
message PBActivityBossData
{
	optional uint64 	lastdamage		= 1; //最后伤害
	optional uint64 	totaldamage		= 2; //总伤害
	optional uint32 	buycount		= 3; //已购买次数
	optional uint32 	challengecount	= 4; //已挑战次数
	optional uint32 	index			= 5; //boss index
}

//槽位数据
message PBDefendPetSlot
{
	optional uint32 	index			= 1; //槽位索引
	optional uint64		petSnID			= 2; //英雄id
}

//方案数据
message PBDefendPlan
{
	optional uint32 			index		= 1; //方案索引
	repeated PBDefendPetSlot	pets		= 2; //英雄列表
	repeated PBDefendPetSlot	skills		= 3; //技能顺序列表
}

//守护数据
message PBPlayerDefend
{
	optional uint32 	level		= 1; //等级
	optional uint32		rank		= 2; //阶级
	optional uint32		planIndex	= 3; //当前方案索引
	repeated PBDefendPlan	plans	= 4; //方案列表
}

//守护技能数据
message PBDefendSkill
{
	optional uint32 		index		= 1; //索引
	optional PBSkillInfo 	skill		= 2; //技能
	optional uint32 		petID		= 3; //英雄id
}

//战斗显示信息
message PBGlobalDefendDisplay
{
	optional uint32 		level		= 1; //等级
	optional uint32			rank		= 2; //阶级
	repeated PBDefendSkill 	skills 		= 3; //技能顺序
	repeated PBAttrInfo 	attr		= 4; //战斗属性
	optional uint32 		unitid		= 5; //对象ID

}

//共鸣格子数据
message PBPlayerResonanceGrid
{
	optional uint32 		grididx		= 1; //格子索引
	optional uint64			petsn		= 2; //宠物snid
	optional uint32 		value		= 3; //旧的数据值
	optional uint32 		cdtime		= 4; //冷却时间
}

//共鸣列表数据
message PBPlayerResonanceInfo
{
	optional uint32 				type			= 1; //类型
	repeated PBPlayerResonanceGrid 	grid			= 2; //格子数据
	optional uint32 				maxgrididx		= 3; //已开启最大格子数
	repeated uint64 				petlist			= 4; //共鸣主体
}

//共鸣系统数据
message PBPlayerResonance
{
	repeated PBPlayerResonanceInfo 	resonanceinfo		= 1; //共鸣数据
}

//角色地址信息
message PBAddrInfo
{
	optional  uint32 id       = 1 ; //地址序号
	optional  string name     = 2 ; //收件人
	optional  string number   = 3 ; //联系方式
	optional  string addr     = 4 ; //地址信息
}
//角色订单信息
message PBOrderInfo
{
	optional  string ordersn       	= 1 ; //游戏订单流水
	optional  uint32 type     		= 2 ; //订单类型 _emOrderType
	optional  uint32 status     	= 3 ; //0未确认地址，1已确认地址
	optional  uint32 completedtime   = 4 ; //确认时间
	optional  uint32 ordertime     	= 5 ; //游戏订单时间
	optional  uint32 chargeid   	= 6 ; //商品id
	optional  string chargename   	= 7 ; //商品名字
	optional  uint32 chargeamount   	= 8 ; //商品金额
	optional PBAddrInfo addrinfo	= 9 ; //地址信息 PBAddrInfo
}

//角色订单管理数据
message PBPlayerOrderData
{
	repeated  PBAddrInfo 	addrinfo   	= 1 ; //地址信息
	repeated  PBOrderInfo 	orderinfo   = 2 ; //订单信息
	optional  uint32		defaultid 	= 3 ; //默认地址id
}

//*************************************************redis数据***************************
// 角色跨服简要信息（存redis）
message PBRedisPlayerSimpleInfo
{
	optional uint32 				id				= 1;	// 角色ID
	optional PBPlayerDisplay 		playerdisplay	= 2;	// 用户标记
	optional string 				factionname		= 3;	// 帮派名称
	optional uint32 				fightpower		= 4;	// 战斗力
	optional bool					robot			= 5;	// 是否是机器人
	optional uint32					accountid		= 6;	// 账号id
}
// 战斗阵容（存redis）
message PBRedisZhenfaInfo
{
	optional PBBattlePet				team = 1; //阵容
	optional bool						hideteam = 2; //是否隐藏队伍
}


//-------------------------------------------------------------
//------------------------------ 特权相关
enum _emResultPrivilege_31
{
	R_ResultPrivilege_Succeed			= 0; // 成功
	R_ResultPrivilege_Fail				= 1; // 失败
	R_ResultPrivilege_NeedItem			= 2; //扣除的道具不足
	R_ResultPrivilege_VIPLevel			= 3; //VIP 等级不够
	R_ResultPrivilege_AlreadyBought		= 4; //已经买过了
	R_ResultPrivilege_Time				= 5; //还不到时间
	R_ResultPrivilege_NeedCardID		= 6; //需要特权卡
	R_ResultPrivilege_HavePrize			= 7; //已经领取过
};
//----特权模块
enum _emC2S_Privilege_Protocol
{
	C2S_Privilege_BuyVipPacket			= 1 ; 	// 购买vip礼包			PBU32
	C2S_Privilege_ShopBuy				= 2 ; 	// 购买特权商店			PBU32
	C2S_Privilege_DailyPrize			= 3 ; 	// 领取每日奖励			PBU32		
	
}
//----特权模块
enum _emS2C_Privilege_Protocol
{
	S2C_Privilege_Common				= 0 ;	// 通用失败返回
	S2C_Privilege_UpVipExp				= 1 ;	// 新vip经验			PBU32
	S2C_Privilege_BuyVipPacket			= 2 ;	// 购买vip礼包返回 		PBU32
	S2C_Privilege_ShopBuy				= 3 ;	// 购买特权商店 		PBU32
	S2C_Privilege_DailyPrize			= 4 ;	// 领取每日奖励			PBU32
	S2C_Privilege_CardCharge			= 5 ;	// 同步特权卡充值		PBPrivilegeCharge
	S2C_Privilege_SynCard				= 6 ;	// 同步特权卡			PBPrivilegeCard
	S2C_Privilege_SynData				= 7 ; 	// 同步特权数据 	    PBPlayerPrivilege
}
//每日礼包
enum _emPrivilegeDailyPacket
{
	PrivilegeDailyPacket_FreeDaily			= 1;	// 每日免费
	PrivilegeDailyPacket_VipZZMonth			= 2;	// vip至尊月卡
	PrivilegeDailyPacket_RRMonth			= 3;	// 荣耀月卡
	PrivilegeDailyPacket_ZZMonth			= 4;	// 至尊月卡
	PrivilegeDailyPacket_DailyCharge		= 5;	// 每日充值
}
//-------------------------------------------------------------
//------------------------------ 红包
enum _emResultRedEnvelope_47
{
	R_ResultRedEnvelope_Succeed			= 0; // 成功
	R_ResultRedEnvelope_Fail			= 1; // 失败
	R_ResultRedEnvelope_TimeErr			= 2; // 未到领取时间
};
//----客户端到服务器
enum _emC2S_RedEnvelope_Protocol
{
	C2S_RedEnvelope_OpenAsk			= 1	;//打开红包 PBC2GOpenRedEnvelopeAsk
	
};
//----服务器到客户端
enum _emS2C_RedEnvelope_Protocol
{
	S2C_RedEnvelope_Common_Ack			= 0	;//失败才返回
	S2C_RedEnvelope_OpenAck				= 1	;//开启红包 PBG2COpenRedEnvelopeAck
	S2C_RedEnvelope_Refresh				= 2	;//刷新/重置红包 PBG2CRedEnvelopeRefresh
};

//打开红包
message PBC2GOpenRedEnvelopeAsk
{
	optional uint32 index			= 1 ;// 红包索引
};

//打开红包返回
message PBG2COpenRedEnvelopeAck
{
	optional uint32 	index 				= 1; //红包索引
	optional uint32 	receiveTime  		= 2; //红包领取时间
	optional uint32 	status				= 3; //红包领取状态 0可领取 1未开启 2已领取
	repeated PBItemInfo	award				= 4; //红包领取物品
	repeated PBRedEnvelopeData 	data  		= 5; //其他人获取列表
	optional uint32 			newFlag     = 6; //新红包标识 0旧红包 1新红包 
};
//刷新/重置红包	
message PBG2CRedEnvelopeRefresh
{
	repeated PBRefreshInfo 	data 			= 1; //刷新/重置数据
}
//刷新/重置
message PBRefreshInfo
{
	optional uint32 	index 			= 1; //红包索引
	optional uint32 	status			= 2; //红包领取状态  0可领取 1未开启 2已领取 
}


//-------------------------------------------------------------
//------------------------------ 共鸣
//----共鸣的返回
enum _emResultResonance_51
{
	R_Resonance_Succeed			        = 0; // 成功
	R_Resonance_Fail				    = 1; // 失败
	R_Resonance_GridAllOpen				= 2; // 格子已全部开启
	R_Resonance_NeedItem				= 3; // 道具不足
	R_Resonance_Condition				= 4; // 条件不满足
	R_Resonance_NoCD					= 5; // 冷却已重置
	R_Resonance_CDTime					= 6; // 格子处于冷却中
	R_Resonance_HasPet					= 7; // 格子已上阵英雄
	R_Resonance_GridNoOpen				= 8; // 格子未开启
};

//----共鸣类型
enum _emResonanceType
{
	Resonance_Type_Level			    = 1; // 等级
	Resonance_Type_Star				    = 2; // 星级
};

//----共鸣条件类型
enum _emResonanceCondType
{
	Resonance_Cond_DefendLevel			= 1; // 守护等级
};

//----共鸣请求
enum _emC2S_Resonance_Protocol
{
	C2S_Resonance_OpenGrid	            = 1; 	// 开启格子			PBC2GResonanceOpenGrid
	C2S_Resonance_ResetCD	            = 2; 	// 重置冷却			PBC2GResonanceResetCD
    C2S_Resonance_PlaceGrid	        	= 3; 	// 放置共鸣			PBC2GResonancePlaceGrid
	C2S_Resonance_UpStar	        	= 4; 	// 星级共鸣升星 	 PBC2GResonanceUpStar
}

//开启格子
message PBC2GResonanceOpenGrid
{
	optional uint32		type			= 1;	//_emResonanceType
}

//重置cd
message PBC2GResonanceResetCD
{
	optional uint32		type			= 1;	//_emResonanceType
	optional uint32		grididx			= 2;	//格子索引id
}

//放置共鸣
message PBC2GResonancePlaceGrid
{
	optional uint32		type			= 1;	//_emResonanceType
	optional uint32		grididx			= 2;	//格子索引id
	optional uint64		petsn			= 3;	//宠物id
}

//星级共鸣升星
message PBC2GResonanceUpStar
{
		optional uint32		grididx		= 1;	//格子索引id
}

//----共鸣返回
enum _emS2C_Resonance_Protocol
{
	S2C_Resonance_OpenGrid	    	= 1; 	// 开启格子返回 PBG2CResonanceOpenGrid
    S2C_Resonance_ResetCD		    = 2; 	// 重置冷却 PBG2CResonanceGridChg
    S2C_Resonance_PlaceGrid	    	= 3; 	// 放置共鸣 PBG2CResonanceGridChg
	S2C_Resonance_SystemOpen	   	= 4; 	// 某个共鸣开启 PBPlayerResonanceInfo
	S2C_Resonance_MainPetSn	   		= 5; 	// 共鸣主体更新 PBG2CResonanceMainPetSn
	S2C_Resonance_UpStar   			= 6; 	// 升星返回 PBG2CResonanceUpStar
}

//开启格子返回
message PBG2CResonanceOpenGrid
{
	optional uint32 				type			= 1; //类型
	optional uint32 				maxgrididx		= 3; //已开启最大格子数
}

//格子更新
message PBG2CResonanceGridChg
{
	optional uint32 				type			= 1; //类型
	optional PBPlayerResonanceGrid 	grid			= 2; //格子数据
}

//共鸣主体更新
message PBG2CResonanceMainPetSn
{
	optional uint32 				type			= 1; //类型
	repeated uint64 				petlist			= 2; //共鸣主体
}

//升星的返回
message PBG2CResonanceUpStar
{
	optional uint32 				oldstar			= 1; //旧的星级
	optional uint64 				petsn			= 2; //宠物sn
}
//-------------------------------------------------------------
//------------------------------ 资源找回

//资源副本ID
enum EnmResourceID
{
	ENM_FAST_BATTLE				= 1; //快速作战 ...
	//ENM_ARENA					= 2; //竞技场
	//ENM_ELEMENT_ISLAND			= 3; //元素之岛
	//ENM_FAIRYLAND				= 4; //海岛乐园
	ENM_MASTER_AGAINST_TOWER	= 2; //大师对战塔
	ENM_AGAINST_TOWER			= 3; //对战塔
	ENM_GOLD_MAP				= 4; //金币副本
	ENM_EXP_MAP					= 5; //经验副本
	ENM_SPIRIT_MAP				= 6; //精灵副本
	ENM_TOTEM_MAP				= 7; //图腾副本
	ENM_GEM_MAP					= 8; //宝石副本
	//ENM_HUNING_MAP				= 9; //狩猎副本
}

//资源领取状态
enum EnmDrawStaus
{
	ENM_STATUS_CAN_NOT_DRAW	= 0; //不可领
	ENM_STATUS_CAN_DRAW		= 1; //可领取状态
	ENM_STATUS_DRAW_FREE	= 2; //已领取免费档
	ENM_STATUS_DRAW_PAY		= 3; //已领取付费档
}

enum EnmSubDiamondType
{
	ENM_SUB_DIAMOND_DAY = 0; //按天计算
	ENM_SUB_DIAMOND_COUNT = 1; //按次数计算
}

//领取资源方式
enum EnmDrawMode
{
	ENM_FREE_DRAW = 1;  //免费领取
	ENM_PAY_DRAW  = 2; //付费领取
}

//获取玩家离线找回数据REQ
message PBC2GResourceFindBackInfo
{
}
//RES
message PBG2CResourceFindBackInfo
{
	optional uint32 		OfflineDay  = 1; //玩家离线天数
	optional uint32			FindBackDay = 2; //玩家找回天数 
	repeated PBFindBackData FindBacks	= 3; //离线找回数据
}

//领取资源找回收益 REQ
message PBC2GDrawFindBack
{
	optional uint32 DrawMode   = 1; //see @EnmDrawMode
	optional uint32 ResourceID = 2; //默认 0 表示一键领取 see@EnmResourceID
}
//RES
message PBG2CDrawFindBack
{
	
}

//------------------------------ 冒险系统返回
enum _emResultRisk_24
{
	R_ResultRisk_Succeed						= 0; //成功
	R_ResultRisk_Fail							= 1; //失败
	R_ResultRisk_HaveSelect						= 2; //已经选择了英雄
	R_ResultRisk_NeedStage						= 3; //通关层数不对
	R_ResultRisk_NeedGuardIndex					= 4; //守卫索引不对
	R_ResultRisk_PetDead						= 5; //该伙伴已经死亡
	R_ResultRisk_GuardDead						= 6; //该守卫已经死亡
	R_ResultRisk_NeedPreGuardIndex				= 7; //需要前置守卫都通关
	R_ResultRisk_GridNoOpen						= 8; //击败附近守卫才可以探索
	R_ResultRisk_GuardNoDead					= 9; //守卫未死亡
	R_ResultRisk_NoTypeCollect					= 10; //该格子无东西可以探索
	R_ResultRisk_NoGuardPrize					= 11; //无奖励可以领取
	R_ResultRisk_NeedHpDrup						= 12; //生命药剂不足
	R_ResultRisk_PetMaxHp						= 13; //伙伴血量已满
	R_ResultRisk_MaxUseHpDrup					= 14; //生命药剂最大使用数量
	R_ResultRisk_NeedKillDrup					= 15; //驱魂药剂不足
	R_ResultRisk_MaxUseKillDrup					= 16; //驱魂药剂最大使用数量
	R_ResultRisk_NeedItem						= 17; //道具不足
	R_ResultRisk_NoTrader						= 18; //无召唤商人
	R_ResultRisk_RefreshTypeError				= 19; //刷新类型错误
	R_ResultRisk_GridStatSee					= 20; //格子已经探索，或者已经删除
	R_ResultRisk_HaveQuestion					= 21; //已经答了此题
	R_ResultRisk_ShopHaveBuyPos					= 22; //此位置道具已经购买
}
//----冒险模块
enum _emC2S_Risk_Protocol
{
	C2S_Risk_SelectPet			= 1	;//选择英雄				PBC2GRiskSelectPet	
	C2S_Risk_Open				= 2	;//打开界面
	C2S_Risk_OpenGrid			= 3	;//开启格子				PBU32
	C2S_Risk_CollectGrid		= 4	;//拾取格子				PBC2GRiskCoolectGridAsk
	C2S_Risk_AutoCollectGrid	= 5	;//自动拾取(守卫索引)	PBU32
	C2S_Risk_EnterNextStage		= 6	;//进入下一层
	C2S_Risk_GuardPrize			= 7	;//领取守卫奖励
	C2S_Risk_UseHpDrug			= 8	;//使用生命药剂			PBU64
	C2S_Risk_UseKillDrug		= 9	;//使用驱魂药剂			PBU32
	C2S_Risk_UseTrader			= 10;//使用召唤商人
	C2S_Risk_Question			= 11;//答题					PBC2GRiskQuestionAsk
	C2S_Risk_ShopOpen			= 12;//打开商店
	C2S_Risk_ShopBuy			= 13;//商店购买(索引)		PBU32
	C2S_Risk_OpenSkill			= 14;//查询被动技能
}
//----冒险模块
enum _emS2C_Risk_Protocol
{
	S2C_Risk_CommonAck		= 1	;//通用返回(失败才返回)
	S2C_Risk_SynAll			= 2	;//同步所有信息 	PBG2CSynAll
	S2C_Risk_AddGrid		= 3	;//新增格子信息 	PBG2CRiskSynGrid
	S2C_Risk_CollectGrid	= 4	;//拾取格子返回		PBPlayerRiskGrid
	S2C_Risk_EnterNextStage	= 5	;//进入下一层		PBG2CRiskEnterNextStage
	S2C_Risk_GuardPrize		= 6	;//领取守卫奖励		PBU32
	S2C_Risk_SynPetHp		= 7	;//同步伙伴血量 	PBPetHp
	S2C_Risk_SynGuardHp		= 8	;//同步守卫血量 	PBU32U64
	S2C_Risk_SynHpDrug		= 9;//同步生命药剂 		PBG2CRiskSynHpDrug
	S2C_Risk_SynKillDrug	= 10;//同步驱魂药剂 	PBG2CRiskSynKillDrug
	S2C_Risk_SynKillGuard	= 11;//同步击杀守卫个数 PBU32
	S2C_Risk_SynTrader		= 12;//同步召唤商人数量 PBU32
	S2C_Risk_UseTrader		= 13;//使用召唤商人 	PBG2CRiskUseTrader	
	S2C_Risk_QuestionAck	= 14;//答题返回			PBG2CRiskQuestionAck
	S2C_Risk_ShopOpenAck	= 15;//打开商店			PBG2CRiskShopOpenAck
	S2C_Risk_ShopBuyAck		= 16;//商店购买(位置1开始)	PBU32
	S2C_Risk_SynCollectSkill= 17;//同步被动技能 	PBG2CRiskCollectSkill
}
//-------------------------------------------------------------
//------------------------------ 冒险组随机类型
enum _emRiskRandType
{
	RiskRandType_Single				= 1;	//单个随机
	RiskRandType_Group				= 2;	//组随机
	RiskRandType_Fix				= 3;	//固定
};
//-------------------------------------------------------------
//------------------------------ 冒险格子开启类型
enum _emRiskGridOpenState
{
	RiskGridOpenState_None				= 0;	//默认
	RiskGridOpenState_OpenNoSee			= 1;	//开启
	RiskGridOpenState_OpenSee			= 2;	//固定
	RiskGridOpenState_HaveCollect		= 3;	//已经拾取
};
//-------------------------------------------------------------
//------------------------------ 冒险组随机类型
enum _emRiskRefreshType
{
	RiskRefreshType_Gold			= 1;	//金币
	RiskRefreshType_Rune			= 2;	//符文精华
	RiskRefreshType_GodStone		= 3;	//炼神石
	RiskRefreshType_Key				= 4;	//钥匙
	RiskRefreshType_Box				= 5;	//宝箱
	RiskRefreshType_Finger			= 6;	//猜拳
	RiskRefreshType_Shop			= 7;	//商店
	RiskRefreshType_Trader			= 8;	//召唤商人
	RiskRefreshType_Question		= 9;	//答题
	RiskRefreshType_Dialog			= 10;	//对话
	RiskRefreshType_Event			= 11;	//神秘事件
	RiskRefreshType_Skill			= 12;	//被动技能
	RiskRefreshType_HpDrup			= 13;	//生命药剂
	RiskRefreshType_KillDrug		= 14;	//驱魂药剂
	RiskRefreshType_GuardNormal1	= 15;	//普通守卫1
	RiskRefreshType_GuardNormal2	= 16;	//普通守卫2
	RiskRefreshType_GuardNormal3	= 17;	//普通守卫3
	RiskRefreshType_GuardNormal4	= 18;	//普通守卫4
	RiskRefreshType_GuardBoss		= 19;	//BOSS守卫
	RiskRefreshType_Transfer		= 20;	//传送门
};
//-------------------------------------------------------------
//------------------------------ 猜拳结果
enum _emRiskFingerResult
{
	RiskFingerResult_Equal			= 0;	//平局
	RiskFingerResult_Success		= 1;	//胜利
	RiskFingerResult_Fail			= 2;	//失败
};
//-------------------------------------------------------------
//------------------------------ 结果
enum _emRiskQuestionResult
{
	RiskQuestionResult_None			= 0;	//默认
	RiskQuestionResult_Success		= 1;	//胜利
	RiskQuestionResult_Fail			= 2;	//失败
};
//-------------------------------------------------------------
//------------------------------ 冒险伙伴显示
message PBRiskPetDisplay
{
	optional PBPetDisplay				petdisplay			= 1;	// 伙伴显示信息
	optional uint64	 					curhp				= 2;	// 当前血量
	optional uint64	 					maxhp				= 3;	// 最大血量
	optional uint32	 					fightpower			= 4;	// 战斗力
};
// 同步所有信息
message PBG2CSynAll
{
	optional uint32	 					curstage			= 1;	// 当前层数
	optional uint32	 					killguardcount		= 2;	// 已经击杀守卫个数
	optional uint32	 					guardprize			= 3;	// 领取的奖励ID
	optional uint32	 					hpdrupcount			= 4;	// 生命药剂数量
	optional uint32	 					usehpdrupcount		= 5;	// 使用生命药剂数量
	optional uint32	 					killdrupcount		= 6;	// 驱魂药剂数量
	optional uint32	 					usekilldrupcount	= 7;	// 使用驱魂药剂数量
	optional uint32	 					tradercount			= 8;	// 召唤商人数量
	repeated PBPlayerRiskGrid	 		gridinfo			= 9;	// 开启的格子信息
	repeated PBU32U64	 				guardhp				= 10;	// 守卫血量(位置12345)
	repeated PBRiskPetDisplay			petdisplay			= 11;	// 伙伴显示信息
}
// 拾取格子请求
message PBC2GRiskCoolectGridAsk
{
	optional uint32	 				grid		= 1;	// 格子ID
	optional uint32	 				param1		= 2;	// 参数1
	optional uint32	 				param2		= 3;	// 参数2
}
// 同步被动技能
message PBG2CRiskCollectSkill
{
	repeated PBSkillInfo				skillinfo			= 16;	// 被动技能
}
// 打开商店返回
message PBG2CRiskShopOpenAck
{
	repeated PBU32U32	 			shopindex	= 1;	// 冒险商店
	repeated uint32	 				shopbuypos	= 2;	// 冒险商店购买的索引
}
// 答题返回
message PBG2CRiskQuestionAck
{
	optional uint32	 				grid		= 1;	// 格子
	optional uint32	 				index		= 2;	// 答题索引
	optional uint32	 				option		= 3;	// 选项123
	optional uint32	 				result		= 4;	// 正确答案
}
// 答题请求
message PBC2GRiskQuestionAsk
{
	optional uint32	 				grid		= 1;	// 格子
	optional uint32	 				index		= 2;	// 答题索引
	optional uint32	 				option		= 3;	// 选项123
}
// 使用召唤商人
message PBG2CRiskUseTrader
{
	repeated PBU32U32	 			shopindex		= 1;	// 商品信息
	optional uint32	 				tradercount		= 2;	// 当前召唤商人数量
}
// 同步生命药剂
message PBG2CRiskSynHpDrug
{
	optional uint32	 				hpdrupcount		= 1;	// 生命药剂数量
	optional uint32	 				usehpdrupcount	= 2;	// 使用生命药剂数量
}
// 同步驱魂药剂
message PBG2CRiskSynKillDrug
{
	optional uint32	 				killdrupcount	= 1;	// 驱魂药剂数量
	optional uint32	 				usekilldrupcount= 2;	// 使用驱魂药剂数量
}
// 选择英雄
message PBC2GRiskSelectPet
{
	repeated uint64	 				petsn			= 1;	// 伙伴sn
}
// 同步格子信息
message PBG2CRiskSynGrid
{
	repeated PBPlayerRiskGrid	 	gridinfo		= 1;	// 格子信息
}
// 同步血量
message PBG2CRiskSynHp
{
	repeated PBPetHp	 			pethp			= 1;	// 伙伴血量
	repeated PBPetHp	 			guardhp			= 2;	// 守卫血量
}
// 进入下一层
message PBG2CRiskEnterNextStage
{
	optional uint32	 				curstage		= 1;	// 当前层数
	repeated PBItemInfo				iteminfo		= 2;	// 累计道具信息
}
//-------------------------------------------------------------
//------------------------------ 家圆相关
enum _emResultRoom_39
{
	R_ResultRoom_success = 0;	//成功
	R_ResultRoom_fail	 = 1;	//失败
};
//----客户端到服务器
enum _emC2S_Room_Protocol
{
	C2S_Room_placeFurniture			= 1	;//放置家具 PBPlaceFurniture
	C2S_Room_addFurniture			= 2	;//增加家具 PBU32
	C2S_Room_callOnRoom				= 3	;//拜访 PBU32
};
//----服务器到客户端
enum _emS2C_Room_Protocol
{
	S2C_Room_placeFurnitureInfo		= 1;//增加、放置家具,拜访返回 PBFurnitureInfo
};

//放置家具
message PBPlaceFurniture
{
	optional bool	isPlace					= 1;// true:放置 2:false收回
	optional uint32 owner					= 2;//当前房屋主人
	optional uint32 id						= 3;//唯一id
	optional uint32 position				= 4;//位置
}

//家具信息
message PBFurnitureInfo
{
	optional uint32 owner					= 1;//当前房屋主人
	repeated PBFurniture	furnitureData	= 2;//家具信息
	optional bool	updateAll				= 3;//是否全更新 true:：全更新  fale:增量更新
}

//-------------------------------------------------------------
//------------------------------ 远航相关
enum _emResultSail_13
{
	R_ResultSail_Succeed			= 0; // 成功
	R_ResultSail_Fail				= 1; // 失败
	R_ResultSail_NeedItem			= 2; //扣除的道具不足
	R_ResultSail_NeedVipLevel		= 3; //vip等级不足
	R_ResultSail_NoFreeCount		= 4; //无免费次数
	R_ResultSail_NeedDiamond		= 5; //需要钻石
	R_ResultSail_NoSail				= 6; //无此情报
	R_ResultSail_NeedSailPoint		= 7; //需要情报
	R_ResultSail_NeedPetStar		= 8; //伙伴星星数不足
	R_ResultSail_NeedPetType		= 9; //伙伴种族不满足
	R_ResultSail_PetHaveUse			= 10; //该伙伴已经被使用
	R_ResultSail_CoolTime			= 11; //冷却中
	R_ResultSail_NoTime				= 12; //无冷却时间
	R_ResultSail_AwardAllNoData		= 13; //目前没有可领取的奖励
};
//----远航模块
enum _emC2S_Sail_Protocol
{
	C2S_Sail_Refresh			= 1 ; 	// 刷新
	C2S_Sail_Accpet				= 2 ; 	// 接取		PBPlayerSailInfo
	C2S_Sail_BuyHour			= 3 ; 	// 购买时间	PBU32
	C2S_Sail_Complete			= 4 ; 	// 完成		PBU32
	C2S_Sail_CompleteAll		= 5 ; 	// 领取所有
}
//----远航模块
enum _emS2C_Sail_Protocol
{
	S2C_Sail_Common					= 0 ;	// 通用错误返回
	S2C_Sail_Refresh				= 1 ;	// 刷新返回 	PBG2CSailRefresh
	S2C_Sail_Accpet					= 2 ;	// 接取返回		PBPlayerSailInfo
	S2C_Sail_DelAccpet				= 3 ;	// 完成返回		PBU32
}

// 刷新的数据
message PBG2CSailRefresh
{
	optional uint32	 					dayfreecount		= 1;	// 免费次数
	optional uint32	 					daybuycount			= 2;	// 购买次数
	repeated PBPlayerSailIndex			refresh				= 3;	// 刷新的数据
}



//------------------------------ 外形系统返回
enum _emResultShape_20
{
	R_ResultShape_Succeed							= 0; //成功
	R_ResultShape_Fail								= 1; //失败
	R_ResultShape_NoCity							= 2; //不存在此城市
	R_ResultShape_NotActive							= 3; //未激活
	R_ResultShape_NeedCondition						= 4; //条件不满足
	R_ResultShape_HaveActive						= 5; //已经激活
}
//----外形模块
enum _emC2S_Shape_Protocol
{
	C2S_Shape_SetProvince		= 1	;//设置省份 PBU32U32
	C2S_Shape_OpenHead			= 2	;//打开头像
	C2S_Shape_SetHead			= 3	;//设置头像 PBU32
	C2S_Shape_OpenHeadIcon		= 4	;//打开头像框
	C2S_Shape_SetHeadIcon		= 5	;//设置头像框 PBU32
	C2S_Shape_OpenRisk			= 6	;//打开冒险形象
	C2S_Shape_SetRisk			= 7	;//设置冒险形象 PBU32
	C2S_Shape_OpenTitle			= 8	;//打开称号
	C2S_Shape_SetTitle			= 9	;//设置称号 PBU32
	C2S_Shape_ActiveTitle		= 10;//激活称号 PBU32
	C2S_Shape_ActiveHeadIcon	= 11;//激活头像框 PBU32
	C2S_Shape_BadgeDisplay		= 12;//徽章展示 PBCAGBadgeDisplay
}
//----外形模块
enum _emS2C_Shape_Protocol
{
	S2C_Shape_CommonAck			= 1	;//通用返回(失败才返回)
	S2C_Shape_AddTitle			= 2	;//增加称号			PBPlayerTitle
	S2C_Shape_DelTitle			= 3	;//删除称号 		PBU32
	S2C_Shape_SynProvince		= 4	;//同步省份 		PBU32U32
	S2C_Shape_SetHeadAck		= 5	;//设置头像返回 	PBU32
	S2C_Shape_SynAllHead		= 6	;//同步所有头像 	PBG2CShapeSynAllHead
	S2C_Shape_SetHeadIconAck	= 7	;//设置头像框返回 	PBU32
	S2C_Shape_SynAllHeadIcon	= 8	;//同步所有头像框 	PBG2CShapeSynAllHeadIcon
	S2C_Shape_SetRiskAck		= 9	;//设置冒险形象返回	PBU32
	S2C_Shape_SynAllRisk		= 10;//同步所有冒险形象 PBG2CShapeSynAllRisk
	S2C_Shape_SetTitleAck		= 11;//设置称号 		PBU32
	S2C_Shape_SynAllTitle		= 12;//同步所有称号 	PBG2CShapeSynAllTitle
	S2C_Shape_SynTitle			= 13;//同步称号 		PBPlayerTitle
	S2C_Shape_AddHeadIcon		= 14;//增加头像框		PBPlayerHeadIcon
	S2C_Shape_SynHeadIcon		= 15;//同步头像框 		PBPlayerHeadIcon
	S2C_Shape_DelTHeadIcon		= 16;//删除头像框 		PBU32
	S2C_Shape_DelPetSkin		= 17;//删除皮肤 		PBU32
	S2C_Shape_AddBadge			= 18;//增加徽章 		PBPlayerBadge
	S2C_Shape_SynHonorPoint		= 19;//同步荣誉值 		PBU32
	S2C_Shape_BadgeDisplay		= 20;//徽章展示 		PBCAGBadgeDisplay
}
// 徽章展示
message PBCAGBadgeDisplay
{
	repeated uint32	 				id		= 1;	// 徽章ID
}
// 同步所有头像
message PBG2CShapeSynAllHead
{
	repeated uint32	 				headid		= 1;	// 头像ID
}
// 同步所有头像框
message PBG2CShapeSynAllHeadIcon
{
	repeated PBPlayerHeadIcon	 	headicon	= 1;	// 头像框
}
// 同步所有冒险形象
message PBG2CShapeSynAllRisk
{
	optional uint32	 				useriskid	= 1;	// 当前使用的冒险形象
	repeated uint32					activerisk	= 2;	// 已经激活的冒险形象
	repeated PBPlayerRiskShape	 	risk		= 3;	// 冒险形象未激活的
}

// 同步所有称号
message PBG2CShapeSynAllTitle
{
	optional uint32	 				usetitleid	= 1;	// 当前使用的称号
	repeated PBPlayerTitle	 		title		= 2;	// 头像框
}

//-------------------------------------------------------------
//------------------------------ 商店相关
enum _emResultShop_16
{
	R_ResultShop_Succeed			= 0; // 成功
	R_ResultShop_Fail				= 1; // 失败
	R_ResultShop_NeedVipLevel		= 2; //vip等级不足
	R_ResultShop_NeedBuyCount		= 3; //购买次数不足
	R_ResultShop_NeedItem			= 4; //道具不足
	R_ResultShop_NoSellItem			= 5; //无此道具可出售
	R_ResultShop_NoReset			= 6; //没有购买任何英雄，无需重置
	R_ResultShop_NeedGodPoint		= 7; //神格积分不足
	R_ResultShop_MaxRefreshCount	= 8; //最大刷新次数
	R_ResultShop_TowerShopNoOpen	= 9;//未满足商店开放关卡层数
};
//----商店模块
enum _emC2S_Shop_Protocol
{
	C2S_Shop_Buy				= 1 ; 	// 购买		PBCAGShopBuy
	C2S_Shop_Reset				= 2 ; 	// 重置		PBU32
	C2S_Shop_Refresh			= 3 ; 	// 刷新		PBU32
}
//----商店模块
enum _emS2C_Shop_Protocol
{
	S2C_Shop_Common					= 0 ;	// 通用错误返回
	S2C_Shop_Buy					= 1 ;	// 购买返回 			PBCAGShopBuy
	S2C_Shop_Reset					= 2 ;	// 重置返回				PBPlayerFixShop
	S2C_Shop_Refresh				= 3 ;	// 刷新返回				PBPlayerRandShop
	S2C_Shop_SynRandRefreshCount	= 4 ;	// 同步随机商店刷新次数	PBG2CSynRandRefreshCount
}
// 神器数据
message PBCAGShopBuy
{
	optional uint32	shoptype		= 1;	// 商店类型
	optional uint32	id				= 2;	// 固定表示index, 随机商店表示pos(0开始)
	optional uint32	buycount		= 3;	// 购买次数
}
// 同步随机商店刷新次数
message PBG2CSynRandRefreshCount
{
	optional uint32	 					shoptype			= 1;	// 商店类型
	optional uint32						freeleftcount		= 2;	// 免费刷新剩余次数
	optional uint32						nextfreetime		= 3;	// 下次免费刷新时间
}

//------------------------------ 聊天系统返回
enum _emResultTalk_35
{
	R_ResultTalk_Succeed					= 0; //成功
	R_ResultTalk_Fail						= 1; //失败
	R_ResultTalk_NeedPlayerLevel			= 2; //需要玩家等级
	R_ResultTalk_TalkNeedStep				= 3; //发言过快
	R_ResultTalk_TalkForbid					= 4; //发言违规
};
//----聊天功能模块
enum _emC2S_Talk_Protocol
{
	C2S_Talk_Talk				= 1;//聊天  			PBC2GTalkAsk
	C2S_Talk_ClearPlayerTalk		= 2;//删除私聊记录		PBU32
	C2S_Talk_Report				= 3; // 举报			PBC2GReportAsk
}

//----聊天功能模块
enum _emS2C_Talk_Protocol
{
	S2C_Talk_Talk					= 1;//聊天  		PBG2CTalkAck
	S2C_Talk_SynSaveChat			= 2;//同步聊天缓存	PBG2CTalk_SynSaveChat
	S2C_Talk_ChatRecall				= 3;//撤回聊天 PBG2CRecall 
}
// 同步聊天缓存
message PBG2CTalk_SynSaveChat
{
	repeated PBG2CTalkAck  worldmsg 	= 1;//世界聊天缓存
	repeated PBG2CTalkAck  crossmsg 	= 2;//跨服聊天缓存
	repeated PBG2CTalkAck  provincemsg 	= 3;//同省聊天
	repeated PBG2CTalkAck  factionmsg 	= 4;//帮会聊天
	repeated PBG2CTalkAck  playermsg 	= 5;//私人聊天
}

// 聊天协议
message PBC2GTalkAsk
{
	optional uint32				channel			= 1;// 频道
	optional string	 			data			= 2;// 聊天内容
	optional string	 			dataext			= 3;// 聊天内容扩展
	optional PBPlayerDisplay	targetdisplay	= 4;// 指定玩家 只有私人聊天有用
	optional string				taraccountname	= 5;// 目标的账号名
	optional uint32				playerid		= 6;// 发起者ID
	optional string				senderip		= 7;// 发起者的ip
	optional uint64				order			= 8;// 索引
	optional uint32				time			= 9;// 时间
}
// 聊天协议
message PBG2CTalkAck
{
	optional PBPlayerDisplay	playerdisplay	= 1;// 说话人 playerid==0代表是 系统
	optional uint32				channel			= 2;// 频道
	optional string	 			data			= 3;// 聊天内容
	optional string	 			dataext			= 4;// 聊天内容扩展
	optional PBPlayerDisplay	targetdisplay	= 5;// 目标玩家 私聊信息使用
	optional uint32				order			= 6;// 聊天消息序号，用于撤回
}

// 聊天协议
message PBC2GReportAsk
{
	optional string				accout			= 1;// 举报者账号
	optional uint32	 			playerid		= 2;// 举报者玩家ID
	optional string	 			playername		= 3;// 举报者角色名
	optional string				serverid		= 4;// 举报者服务器id
	optional uint32				rptplayerid		= 5;// 被举报者玩家id
	optional string				rptplayername	= 6;// 被举报者角色名
	optional uint32				rptserverid		= 7;// 被举报者服务器id
	repeated uint32				resons			= 8;// 举报标签
	optional string				explain			= 9;// 举报说明
	optional string				proof			= 10;// 举报例证	
}

// 聊天协议
message PBG2CRecall
{
	optional uint32				channel			= 1;// 频道
	optional uint32	 			order			= 2;// 消息序号
	optional uint32	 			senderid		= 3;// 发送人id
}


//-------------------------------------------------------------
//------------------------------ 任务相关
enum _emResultTask_6
{
	R_ResultTask_Succeed			= 0; // 成功
	R_ResultTask_Fail				= 1; // 失败
	R_ResultTask_NoComplete			= 2; // 任务没有完成
};

//----任务客户端请求
enum _emC2S_Task_Protocol
{
	C2S_Task_Complete				= 0 ; 	// 完成任务			PBC2GTaskCompleteAsk

}
//----任务服务器返回
enum _emS2C_Task_Protocol
{
	S2C_Task_CompleteAck			= 0 ; 	// 完成任务返回		失败才返回
	S2C_Task_Add					= 1 ;	// 新增任务			PBG2CTaskUpdate
	S2C_Task_Syn					= 2 ;	// 更新任务参数		PBG2CTaskUpdate
}
// 完成任务请求
message PBC2GTaskCompleteAsk
{
	optional uint32 taskid			= 1;//任务ID
}

// 任务同步
message PBG2CTaskUpdate
{
	optional uint32 taskid		= 1;	//任务ID
	optional uint32 param		= 2;	//当前完成参数
}

//-----------------------------------------------------------------------------------------------------

//------------------------------ 队伍系统返回
enum _emResultTeam_11
{
	R_ResultTeam_Succeed				= 0; //成功
	R_ResultTeam_Fail					= 1; //失败
	R_ResultTeam_HaveTeam				= 2; //已有队伍
	R_ResultTeam_NoTeam					= 3; //没有队伍
	R_ResultTeam_NotLeader				= 4; //不是队长
	R_ResultTeam_MemberFull				= 5; //队伍已满
	R_ResultTeam_HaveDelete				= 6; //队伍已经删除
	R_ResultTeam_InBattle				= 7; //战斗中
	R_ResultTeam_NoEnterCount			= 8; //进入次数不足
}

//----队伍系统
enum _emC2S_Team_Protocol
{
	C2S_Team_Create						= 0;	// 创建队伍 			PBC2GTeamCreate	
	C2S_Team_List						= 1;	// 查看队伍列表			PBC2GTeamList
	C2S_Team_Exit						= 2;	// 离开队伍				无内容
	C2S_Team_Kick						= 3;	// 踢人					PBU32
	C2S_Team_Join						= 4;	// 加入队伍				PBC2GTeamJoin
	C2S_Team_AutoJoin					= 5;	// 快速加入队伍			PBC2GTeamJoin
	C2S_Team_SetStatus					= 6;	// 设置队伍状态			PBCAGTeamSetStatus
	
	C2S_Team_Start						= 7;	// 开始挑战				无内容
	C2S_Team_ReadyStart					= 8;	// 准备挑战				服务器用	PBPlayerBattleInfo
}

//----队伍系统
enum _emS2C_Team_Protocol
{
	S2C_Team_Common						= 0;	// 通用				通用失败才返回
	S2C_Team_List						= 1;	// 返回队伍列表		PBG2CTeamList
	S2C_Team_SynData					= 2;	// 同步队伍信息		PBTeamData
	S2C_Team_Exit						= 3;	// 离开队伍返回
	S2C_Team_SetStatus					= 4;	// 设置队伍状态返回	PBCAGTeamSetStatus
};

// 队员信息
message PBTeamMember
{
	optional PBPlayerDisplay		displayer		= 1;	//角色信息
	optional uint64					fightpower		= 2;	//战力
}
// 队伍信息
message PBTeamData
{
	optional uint32					teamid			= 1;	//队伍ID
	optional uint32					targettype		= 2;	//目标类型
	optional uint32					targetid		= 3;	//队伍目标
	optional uint32					leaderid		= 4;	//队长ID
	optional bool					fullauto		= 5;	//是否队员满自动开启
	optional bool					timeauto		= 6;	//是否时间到自动开启
	repeated PBTeamMember			members			= 7;	//成员列表
}
// 队伍基本信息
message PBTeamBase
{
	optional uint32					teamid			= 1;	//队伍ID
	optional uint32					teamtype		= 2;	//队伍类型
	optional uint32					targetid		= 3;	//队伍目标
	optional PBTeamMember			leader			= 4;	//成员列表
	optional uint32					membercount		= 5;	//队伍人数
}
// 创建队伍	
message PBC2GTeamCreate
{
	optional uint32	teamtype		= 1;	//队伍类型
	optional uint32	targetid		= 2;	//目标ID
}
// 加入队伍	
message PBC2GTeamJoin
{
	optional uint32					teamid			= 1;	//队伍ID
	optional uint32					teamtype		= 2;	//队伍类型
	optional uint32					targetid		= 3;	//队伍目标
}
// 查看所有队伍	
message PBC2GTeamList
{
	optional uint32		teamtype		= 1;	//队伍类型
}
// 队伍列表	G -> C
message PBG2CTeamList
{
	repeated PBTeamBase	teamlist		= 1;	//队伍列表
}
// 设置队伍状态	
message PBCAGTeamSetStatus
{
	optional bool		fullauto		= 1;	//是否队员满自动开启
	optional bool		timeauto		= 2;	//是否时间到自动开启
}

//-------------------------------------------------------------
//------------------------------ 组队征战
enum _emResultTeamCampaign_42
{
	R_ResultTeamCampaign_Succeed						= 0; //成功
	R_ResultTeamCampaign_Fail							= 1; //失败
	R_ResultTeamCampaign_HavePrize						= 2; //奖励已经领取
	R_ResultTeamCampaign_NeedStageID					= 3; //未通关此关卡
	R_ResultTeamCampaign_NeedSelect						= 4; //需要选择难度	
	R_ResultTeamCampaign_HaveSelect						= 5; //今日已经选择难度
	R_ResultTeamCampaign_NeedFightPower					= 6; //战力不足
	R_ResultTeamCampaign_StageHaveFight					= 7; //关卡已经挑战
	R_ResultTeamCampaign_NeedPreStage					= 8; //请先通关前置关卡
	R_ResultTeamCampaign_PetHaveDead					= 9; //伙伴已经死亡
	R_ResultTeamCampaign_NeedDifficulty					= 10; //请通关上一个难度
	R_ResultTeamCampaign_SupportCount					= 11; //超过可雇佣支援数量
	R_ResultTeamCampaign_AlreadySupport					= 12; //已经雇佣过了
	R_ResultTeamCampaign_NotSupport						= 13; //还未雇佣不可上场
	R_ResultTeamCampaign_UsedSupport					= 14; //已经使用过了
	R_ResultTeamCampaign_SupportPower					= 15; //雇佣支援英雄战斗力不在范围内
	R_ResultTeamCampaign_SupportNotExist				= 16; //支援不存在
	R_ResultTeamCampaign_FixedPos						= 17; //固定位置
	R_ResultTeamCampaign_Condition						= 18; //未达到参与条件
};

//----远航模块
enum _emC2S_TeamCampaign_Protocol
{
	C2S_TeamCampaign_Select			    = 1	;//选择难度(难度 1~10)			PBU32
	C2S_TeamCampaign_SelectExtraPrize	= 2	;//领取额外奖励(序号0 1 2)		PBU32
	C2S_TeamCampaign_QueryPetState		= 3	;//查询伙伴状态
    C2S_TeamCampaign_QueryStageState    = 4	;//查询关卡状态
	C2S_TeamCampaign_QueryStageTarget   = 5	;//查询敌人数据(stage)	PBU32
	C2S_TeamCampaign_xxxxxxxxxx		    = 6	;//废弃
}
//----远航模块
enum _emS2C_TeamCampaign_Protocol
{
	S2C_TeamCampaign_CommonAck		    = 1	;//通用返回(失败才返回)
	S2C_TeamCampaign_Select		        = 2	;//选择难度返回			PBU32
    S2C_TeamCampaign_ExtraPrize         = 3 ;//给出三个额外奖励     PBG2CTeamCampaignExtraPrize
	S2C_TeamCampaign_SelectExtraPrize	= 4	;//领取奖励返回 		PBU32
	S2C_TeamCampaign_SyncPet		    = 5	;//同步伙伴状态 	    PBG2CTeamCampaignState
	S2C_TeamCampaign_SyncStage	        = 6	;//同步关卡状态 		PBG2CTeamCampaignStage
	S2C_TeamCampaign_SyncSkill	        = 7 ;//同步技能		        PBG2CTeamCampaignSkill
	S2C_TeamCampaign_SyncTarget	        = 8 ;//同步敌人数据		    PBG2CTeamCampaignTarget
	S2C_TeamCampaign_xxxxxxxxx		    = 9 ;//废弃
	S2C_TeamCampaign_xxxxxxxxxxxxxx	    = 10 ;//废弃
}

// pet状态同步
message PBG2CTeamCampaignState
{
	repeated PBTeamCampaignPetState state = 1; // 状态,没有的为满血
}

// 敌人显示数据
message PBTeamCampaignPetDisplay
{
	optional PBPetDisplay 			display		= 1;	//伙伴显示
	optional uint64					maxhp		= 2;	//最大血量
	optional uint64 				curhp		= 3;	//当前血量0死亡
	optional uint32					pos 		= 4;	//位置
}

// 敌人信息
message PBG2CTeamCampaignTarget
{
	optional uint32						stage				= 1;	// 关卡stage
	optional uint32	 					fightpower			= 2;	// 战力
	optional PBPlayerDisplay			display				= 3;	// 显示数据
	repeated PBTeamCampaignPetDisplay 	petdisplay			= 4;	// 关卡显示
}

// 关卡同步
message PBG2CTeamCampaignStage
{
	optional uint32			        	difficulty		= 1;	// 当前难度
	optional uint32			        	stage			= 2;	// 当前的关卡
	repeated uint32						passed			= 3;	// 已经通过的难度
}

// 额外奖励         
message PBG2CTeamCampaignExtraPrize
{
	repeated uint32	prize	= 1;	// 额外奖励index
}

// 技能同步
message PBG2CTeamCampaignSkill
{
	repeated uint32 skill = 1; // skill index
}


//------------------------------ 外形系统返回
enum _emResultTemple_21
{
	R_ResultTemple_Succeed							= 0; //成功
	R_ResultTemple_Fail								= 1; //失败
	R_ResultTemple_NeedTime							= 2; //挑战时间未到
	R_ResultTemple_BeFighting						= 3; //正在被攻击
	R_ResultTemple_InTemple							= 4; //你已经占领此神殿
	
}
//----外形模块
enum _emC2S_Temple_Protocol
{
	C2S_Temple_Open			= 1	;//打开界面 无内容
	C2S_Temple_QueryRecord	= 2	;//查看记录	PBU32
	
	//以下服务器用
	C2S_Temple_Fight		= 10;//战斗
}
//----外形模块
enum _emS2C_Temple_Protocol
{
	S2C_Temple_CommonAck	= 1	;//通用返回(失败才返回)
	S2C_Temple_SynAll		= 2	;//同步所有信息			PBG2CTempleSynAll
	S2C_Temple_QueryRecord	= 3	;//查看记录返回 		PBG2CTempleQueryRecord
	S2C_Temple_Syn			= 4	;//同步数据 			PBPlayerTemple
}

// 同步所有信息
message PBG2CTempleSynAll
{
	repeated PBTempleInfoBase	baseinfo		= 1;		//神殿基本数据	
}
// 同步记录
message PBG2CTempleQueryRecord
{
	optional uint32				id				= 1;			// 神殿ID
	repeated PBTempleRecord 	record			= 2;			// 挑战记录
}


//-------------------------------------------------------------
//------------------------------ 排行榜相关
enum _emResultTopList_8
{
	R_ResultTopList_Succeed			= 0; // 成功
	R_ResultTopList_Fail			= 1; // 失败
	R_ResultTopList_NoPlayer		= 2; // 无此玩家
};
//----排行榜
enum _emC2S_TopList_Protocol
{
	C2S_TopList_List	 			= 0	;//请求排行榜列表 PBC2GTopListList
	C2S_TopList_WorldAll	 		= 1	;//请求所有世界排行
	C2S_TopList_BWAll	 			= 2	;//请求所有跨服排行
	C2S_TopList_GetSelf	 			= 3	;//请求自己排名信息 PBC2GGetSelf
	C2S_TopList_RewardID         	= 4 ;//请求奖励索引	PBC2GGetSelf
}
//----排行榜
enum _emS2C_TopList_Protocol
{
	S2C_TopList_List_Ack			= 0	;//排行榜列表返回	PBS2CTopListList	
	S2C_TopList_FactionList_Ack		= 1	;//帮派排行榜列表返回	PBS2CFactionTopList
	S2C_TopList_WorldAll_Ack	 	= 2	;//所有世界排行	PBS2CAllTopList
	S2C_TopList_BWAll_Ack	 		= 3	;//所有跨服排行	PBS2CAllTopList
	S2C_TopList_GetSelf_Ack	 		= 4	;//自己排名信息	PBTopListDetail
	S2C_TopList_RewardID          	= 5 ;//返回奖励索引	PBS2CRewardID 
}
// 请求所有排行榜返回
message PBS2CAllTopList
{
	repeated PBTopListDetail 	detail		= 1;	//所有排行信息
	optional PBFactionTop		factiontop	= 2;	//帮派信息 
}

//排行榜公共数据
message PBTopListCommonData
{
	optional uint32				fightpower			= 1;	//战斗力
}

//竞技场数据
message PBTopListChallengeData
{
	optional uint32				likeNum			= 1;	//点赞次数
}

//排行信息
message PBTopListDetail
{
	optional PBPlayerDisplay 			playerdisplay	= 1;	//用户标记
	optional PBTopListInfo				info			= 2;	//排行数值
	optional PBTopListCommonData		commonData		= 3;	//一些公用数据
	optional PBTopListChallengeData		challengeData	= 4;	//竞技场数据
}
// 请求排行榜列表
message PBC2GTopListList
{
	optional uint32	type				= 1;	//排行类型 _emTopListType
	optional uint32 beginorder			= 2;	//开始排行
	optional uint32 count				= 3;	//请求数量
	optional uint32 playerid			= 4;	//玩家ID
	optional uint32 worldid				= 5;	//世界ID
	optional uint32 factionid			= 6;	//帮派ID
	optional uint32	param				= 7;	//param
}

// 请求自己排名信息
message PBC2GGetSelf
{
	optional uint32	type				= 1;	//排行类型 _emTopListType
}

//请求排行榜列表 返回
message PBS2CTopListList
{
	optional PBC2GTopListList	ask			= 1;	//前端发过来的请求信息(方便前端 做界面处理)
	optional uint32				allcount	= 2;	//入榜的全部角色数量
	repeated PBTopListDetail	list		= 3;	//角色列表
	optional PBTopListDetail	selfinfo	= 4;	//自己信息
}
//跨服排行信息
message PBBWTopListDetail
{
	optional PBPlayerDisplay 		playerdisplay	= 1;	//用户标记
	optional uint32					value			= 2;	//排行数值
	optional uint32					rank			= 3;	//排行
	optional uint32					toptype			= 4;	//排行类型
	optional PBTopListCommonData 	commondata		= 5;	//一些公用数据
}
//跨服同步排行榜 返回
message PBW2BWSynTopList
{
	optional uint32				type	= 1;	//排行类型 _emTopListType
	optional uint32				worldid	= 2;	//世界ID
	repeated PBBWTopListDetail	list	= 3;	//角色列表
}
//查询所有排行
message PBW2BWQueryAllTopList
{
	optional uint32 playerid			= 1;	//玩家ID
	optional uint32 worldid				= 2;	//世界ID
}
//所在榜单排名奖励ID
message PBS2CRewardID
{
	optional uint32 type				= 1;	//排行类型 _emTopListType
	optional uint32 RewardID			= 2;	//榜单奖励索引
}

//------------------------------ 试炼系统返回
enum _emResultTrain_17
{
	R_ResultTrain_Succeed							= 0; //成功
	R_ResultTrain_Fail								= 1; //失败
	R_ResultTrain_HavePrize							= 2; //奖励已经领取
	R_ResultTrain_NeedStageID						= 3; //未通关此关卡
	R_ResultTrain_NeedItem							= 4; //道具不足	
	R_ResultTrain_MaxEnterCount						= 5; //达到最大进入次数
	R_ResultTrain_NeedPreStage						= 6; //需要通关上一关卡
	R_ResultTrain_NeedEnterCount					= 7; //进入次数不足
	R_ResultTrain_NoStagePrize						= 8; //无奖励可以领取
	R_ResultTrain_NoBuff							= 9; //无此buff可以选择
	R_ResultTrain_AlreadySupport					= 10; //今日已经选择过支援了
	R_ResultTrain_SupportNotExist					= 11; //支援好友不存在
	R_ResultTrain_NotSupport						= 12; //没有支援
	R_ResultTrain_SupportLevel						= 13; //支援等级超过范围
	R_ResultTrain_UsedSupport						= 14; //今日已经使用过支援了
	R_ResultTrain_AlreadyHaveBuff					= 15; //buff已经买过了
	R_ResultTrain_BuyCount							= 16; //达到最大购买次数	
	R_ResultTrain_PeakBuff							= 17; //buff不存在
	R_ResultTrain_PeakDay							= 18; //只能挑战当天的boss
	R_ResultTrain_Clear								= 19; //已通关
	R_ResultTrain_OverTime							= 20; //已过挑战时间
}
//----试炼模块
enum _emC2S_Train_Protocol
{
	C2S_Train_TowerSweep		= 1	;//试练塔扫荡			PBU32
	C2S_Train_TowerPrize		= 2	;//试练塔领奖			PBU32
	C2S_Train_TowerBuyCount		= 3	;//试练塔购买次数		PBU32
	C2S_Train_EndlessPrize		= 4	;//无尽试炼领奖			PBU32
	C2S_Train_xxxxxxxxxxxxxx	= 5	;//废弃
	C2S_Train_EndlessBuff		= 6	;//无尽试炼选择buff返回	PBU32
	C2S_Train_QueryTowerVideo	= 7	;//查询试练塔录像		PBU32
	C2S_Train_xxxxxxxxxxxxxxx	= 8	;//废弃
	C2S_Train_PeakBuyBuff		= 9	;//购买buff(技能index)		PBU32
	C2S_Train_PeakBuyCount		= 10;//购买次数
}
//----试炼模块
enum _emS2C_Train_Protocol
{
	S2C_Train_CommonAck			= 1	;//通用返回(失败才返回)
	S2C_Train_TowerBuyCount		= 2	;//练塔购买次数返回(类型，次数)	PBU32U32
	S2C_Train_TowerPrize		= 3	;//试练塔领奖返回 			PBU32
	S2C_Train_TowerFightCount	= 4	;//试练塔挑战次数 			PBG2CTowerFightCount
	S2C_Train_EndlessPrize		= 5	;//无尽试炼领奖				PBU32
	S2C_Train_EndlessBuff		= 6	;//无尽试炼选择buff返回		PBU32
	S2C_Train_EndlessBuffGroup 	= 7	;//无尽试炼通知buff组		PBU32
	S2C_Train_SynEndlessInfo 	= 8	;//无尽试炼同步信息			PBPlayerTrainEndless
	S2C_Train_QueryTowerVideoAck= 9	;//查询试练塔录像返回		PBWorldStageVideoInfo
	S2C_Train_xxxxxxxxxxx 		= 10;//废弃
	S2C_Train_xxxxxxxxxx 		= 11;//废弃
	S2C_Train_xxxxxxxxx 		= 12; //废弃
	S2C_Train_PeakBuyBuff 		= 13; //购买buff返回			PBU32			
	S2C_Train_PeakBuyCount 		= 14; //购买次数返回(fight count, buy count) PBU32U32
}
// 登录返回玩家角色列表
message PBG2CTowerFightCount
{
	optional uint32			stageid				= 1;	// 关卡ID
	optional uint32			daybuycount			= 2;	// 今日购买次数
	optional uint32			dayfightcount		= 3;	// 今日挑战次数
	optional uint32			type 				= 4;	// 类型
}	


//-------------------------------------------------------------
//------------------------------ 探宝相关
//----探宝返回
enum _emResultTreasure_36
{
	R_ResultTreasure_Succeed			= 0; // 成功
	R_ResultTreasure_Fail				= 1; // 失败
	R_ResultTreasure_NeedItem			= 2; // 需要物品不足
	R_ResultTreasure_NeedVIP			= 3; // 需要VIP等级不足
	R_ResultTreasure_AlreadyTake		= 4; // 已经拿了
	R_ResultTreasure_NeedLevel			= 5; // 玩家等级不足
};

//----探宝模块
enum _emC2S_Treasure_Protocol
{
	C2S_Treasure_Refresh			= 1 ; 	// 刷新(type)                   		PBU32
	C2S_Treasure_Hunt				= 2 ; 	// 探宝(cost index)             		PBC2GTreasureHunt
	C2S_Treasure_Lucky			    = 3 ; 	// 幸运值兑换物品(index)	     		 PBU32
}

//----探宝模块
enum _emS2C_Treasure_Protocol
{
	S2C_Treasure_Common					= 0 ;	// 通用错误返回
	S2C_Treasure_Refresh				= 1 ;	// 刷新返回				PBG2CTreasureRefresh
	S2C_Treasure_Hunt					= 2 ;	// 探宝返回				PBG2CTreasureHunt
	S2C_Treasure_Lucky				    = 3 ;	// 幸运值兑换物品返回 	 PBG2CTreasureLucky
}

// 探宝的请求
message PBC2GTreasureHunt
{
	optional uint32 index		= 1;	// 消耗索引
	optional bool 	oncemore	= 2;	// 是否是再来一次(仅供客户端使用)
}

// 刷新的数据
message PBG2CTreasureRefresh
{
	optional uint32 type		= 1;	// 类型
	repeated uint32 items		= 2;	// 刷新出来的物品index(也就是displayItems)，先后顺序对应位置
	repeated uint32 rand		= 3;	// 刷出来随机物品（hunt表中index条目的第几个随机物品，从0开始），位置与items对应
	optional uint32 resettime 	= 4;	// 下次免费刷新的重置时间
}

// 探宝的数据
message PBG2CTreasureHunt
{
	optional uint32 type		= 1;	// 类型
	repeated uint32 items		= 2;	// 得到的物品position(在displayitems里的位置，从0开始的),先后顺序对应第几次摇出
	optional bool 	oncemone	= 3;	// 是否是再来一次(仅供客户端使用)
	optional bool	broadcast	= 4;	// 是否有需要广播的物品
}

// 幸运兑换的数据
message PBG2CTreasureLucky
{
	optional uint32 index		= 1; // 索引
	optional bool 	reset		= 2; // 是否重置
}

//-------------------------------------------------------------
//------------------------------ 录像相关
enum _emResultVideo_30
{
	R_ResultVideo_Succeed			= 0; //成功
	R_ResultVideo_Fail				= 1; //失败
	R_ResultVideo_HaveLike			= 2; //已经点赞过
	R_ResultVideo_NeedLikeCount		= 3; //需要点赞次数
	R_ResultVideo_ExpireTime		= 4; //录像已经过期
	R_ResultVideo_HaveCollect		= 5; //录像已经收藏
	R_ResultVideo_NoCollect			= 6; //录像未收藏
	R_ResultVideo_MaxCollect		= 7; //录像收藏已满
};
//----录像模块
enum _emC2S_Video_Protocol
{
	C2S_Video_QuerySystem			= 0	;//查询系统录像		PBU32
	C2S_Video_Like					= 1	;//点赞				PBC2GVideoActionAsk
	C2S_Video_PlaySystem			= 2	;//播放系统录像		PBC2GVideoPlayerAsk
	C2S_Video_PlayPlayer			= 3	;//播放玩家录像		PBC2GVideoPlayerAsk
	C2S_Video_Share					= 4	;//分享				PBC2GVideoActionAsk
	C2S_Video_Collect				= 5	;//收藏				PBU64
	C2S_Video_UnCollect				= 6	;//取消收藏			PBU64
	C2S_Video_QueryDamageData		= 7	;//查询战斗数据		PBC2GVideoActionAsk
	C2S_Video_QueryBattlePet		= 8	;//查询录像伙伴数据	PBC2GQueryBattlePet
	C2S_Video_QuerySingle			= 9 ;//查询单个录像		PBU64
	C2S_Video_QueryHook				= 10 ;//查询挂机录像录像	PBU32
	C2S_Video_QueryTower			= 11;//查询试练塔录像	PBU32
	C2S_Video_QueryPlayerRecord		= 12;//查询玩家录像记录	PBC2GQueryPlayerRecord
	C2S_Video_QueryMutiple			= 13;//查询多个录像		PBC2GQueryMutileVideo
	C2S_Video_QueryMutipleBW		= 14;//查询跨服录像多个	PBC2GQueryMutileVideoBW
	C2S_Video_QueryDamageDataBW		= 15;//查询跨服伤害数据(video type, sn) PBU32U64
	C2S_Video_QueryBattlePetBW		= 16;//查询跨服伙伴数据 PBC2GQueryBattlePetBW
	C2S_Video_PlayBW				= 17;//播放跨服录像(video type, sn) PBU32U64

	//以下服务器用
	C2S_Video_QueryCollect			= 100;//查询个人收藏	PBC2GQueryCollect
	C2S_Video_QuerySelfRecord		= 101;//查询个人记录	PBU32
	C2S_Video_QueryTowerToWorld		= 102 ;//查询挂机录像录像	PBWorldStageVideoInfo
	C2S_Video_AddOfflineRecord		= 103;//添加离线记录	PBFightResult
	C2S_Video_ClearPlayerType		= 104;//清除玩家录像(录像类型)	PBU32
}

//----录像模块
enum _emS2C_Video_Protocol
{
	S2C_Video_Common					= 0 ;//通用错误返回
	S2C_Video_QuerySystemAck			= 1	;//查询系统录像返回		PBG2CVideoQuerySystemAck		
	S2C_Video_LikeCountAck				= 2	;//点赞次数返回			PBG2CVideoActionAck
	S2C_Video_PlayCountAck				= 3	;//播放次数返回			PBG2CVideoActionAck
	S2C_Video_ShareCountAck				= 4	;//分享次数返回			PBG2CVideoActionAck
	S2C_Video_QueryDamageDataAck		= 5	;//查询战斗数据返回		PBG2CVideoDamageDataAck
	S2C_Video_QueryBattlePetAck			= 6	;//查询录像数据返回		PBPlayerPetView
	S2C_Video_Play						= 7	;//播放录像				PBFightResult
	S2C_Video_QuerySingleAck			= 8	;//查询单个录像返回		PBVideoDisplay
	S2C_Video_SynInfo					= 9	;//同步信息				PBPlayerVideo
	S2C_Video_QueryHookAck				= 10;//查询挂机录像返回		PBWorldStageVideoInfo
	S2C_Video_QueryTowerAck				= 11;//查询试练塔录像返回	PBWorldStageVideoInfo
	S2C_Video_PlayerRecordAck			= 12;//查询玩家录像返回		PBG2CVideoQuerySystemAck
	S2C_Video_PlayerChallengeAck		= 13;//查询竞技场录像返回	PBG2CVideoPlayerRecordAck
	S2C_Video_QueryMutiple				= 14;//查询多个录像返回		PBG2CQueryMutileVideo
	S2C_Video_QueryMutipleBW			= 15;//查询跨服录像多个返回	PBG2CQueryMutileVideo
	S2C_Video_QueryDamageDataBW			= 16;//查询跨服伤害数据返回 PBG2CVideoDamageDataAck
	S2C_Video_QueryBattlePetBW			= 17;//查询跨服伙伴数据返回 PBPlayerPetView
	S2C_Video_PlayBW					= 18;//播放跨服录像返回		PBFightResult
}
//系统录像显示
message PBVideoDisplay
{
	optional uint64				battlesn		= 1;	//流水ID
	optional uint32				battletype		= 2;	//战斗类型	_emBattleType
	optional uint32				id				= 3;	//挑战ID
	optional uint32				param			= 4;	//挑战ID
	optional uint32 			maxround		= 5;	//最大回合数
	optional uint32 			curround		= 6;	//当前回合数
	optional uint32 			begintime		= 7;	//战斗时间
	optional uint32 			result			= 8;	//战斗结果	_emCampType
	optional PBBattleDisplay 	leftdisplay		= 9;	//左边显示
	optional PBBattleDisplay 	rightdisplay	= 10;	//右边显示
	optional uint32				likecount		= 11;	//点赞次数
	optional uint32				playcount		= 12;	//播放次数
	optional uint32				sharecount		= 13;	//分享次数
	optional uint32				friendrank		= 14;	//友方名次
	optional uint32				enermyrank		= 15;	//敌方名次
	optional uint32 			danType			= 16;	//当前赛程（选拔赛、总决赛这种
	optional PBC2SPatVideoData	leftDan			= 17;	//超凡段位左边数据
	optional PBC2SPatVideoData	rightDan		= 18;	//超凡段位右边数据
}

//超凡段位赛数据
message PBC2SPatVideoData
{
	optional uint32 			danData		= 1;	//段位
	optional uint32 			danScore	= 2;	//积分
}

//查询玩家录像记录
message PBC2GQueryPlayerRecord
{
	optional uint32 			videotype		= 1;	//录像类型_emVideoType
	optional uint32 			param			= 2;	//参数(表示关卡)
}
//查询个人收藏
message PBC2GQueryCollect
{
	repeated uint64 			battlesn		= 1;	//流水ID
}
//查询录像伙伴数据
message PBC2GQueryBattlePet
{
	optional uint64 			battlesn		= 1;	//流水ID
	optional uint64 			petsn			= 2;	//伙伴SN
	optional uint64 			videotype		= 3;	//录像类型
}
//录像数据
message PBBattlePetDamageData
{
	optional PBPetDisplay 		petdisplay		= 1;	//伙伴显示
	optional uint32 			damage			= 2;	//伤害值
	optional uint32 			cure			= 3;	//治疗值
}
//查询录像数据返回
message PBG2CVideoDamageDataAck
{
	optional PBFightResult				fightResult		= 1;	//战斗信息		
}
//查询系统录像返回
message PBG2CVideoQuerySystemAck
{
	optional uint32 					videotype		= 1;	//录像类型
	repeated PBVideoDisplay 			display			= 2;	//系统录像显示
}
//录像操作类型
message PBC2GVideoPlayerAsk
{
	optional uint32 			videotype		= 1;	//系统录像类型
	optional uint64 			battlesn		= 2;	//流水ID
	optional uint32 			key				= 3;	//挂机/试练塔表示层数,玩家的录像表示玩家ID
}
//录像操作类型
message PBC2GVideoActionAsk
{
	optional uint32 			videotype		= 1;	//系统录像类型
	optional uint64 			battlesn		= 2;	//流水ID
}
//录像操作类型
message PBG2CVideoActionAck
{
	optional uint32 			videotype		= 1;	//系统录像类型
	optional uint64 			battlesn		= 2;	//流水ID
	optional uint32 			count			= 3;	//次数
}
// 通关录像
message PBPlayerVideoDisplay
{
	optional PBPlayerDisplay		display			= 1;	//显示
	optional uint32					param			= 2;	//参数
	optional uint64					battlesn		= 3;	//战斗流水
}
// 通关录像
message PBWorldStageVideoInfo
{
	optional uint32					stageid			= 1;	//关卡
	optional PBPlayerVideoDisplay	fast			= 2;	//最快
	optional PBPlayerVideoDisplay	fightpower		= 3;	//最小战力
	optional PBPlayerVideoDisplay	lately			= 4;	//最近/我的通关录像
}

// 查询多个录像
message PBC2GQueryMutileVideo
{
	optional uint32 type 				= 1;	//视频类型 _emVideoType
	repeated uint64	battlesn			= 2;	//战斗sn
}

// 查询多个录像
message PBC2GQueryMutileVideoBW
{
	optional uint32 type 				= 1;	//视频类型 _emVideoType
	repeated uint64	battlesn			= 2;	//战斗sn
}

// 查询多个录像BW
message PBQueryMutileVideoBW
{
	optional uint32 worldid 			= 1;	//world id
	optional uint32	playerid 			= 2;	//player id
	optional uint32 type 				= 3;	//类型
	repeated uint64	battlesn			= 4;	//战斗sn
}

// 查询多个录像返回
message PBG2CQueryMutileVideo
{
	optional uint32 		type 		= 1;	//视频类型 _emVideoType
	repeated PBVideoDisplay	display		= 2;	//录像显示
}

//查询录像伙伴数据
message PBPlayerVideoBW
{
	optional uint32 			worldid 		= 1;	//world id
	optional uint32				playerid 		= 2;	//player id
	optional uint32				type			= 3;	//视频类型 _emVideoType
	optional uint64 			battlesn		= 4;	//战斗sn
}

//查询录像伙伴数据
message PBC2GQueryBattlePetBW
{
	optional uint32				type			= 1;	//视频类型 _emVideoType
	optional uint64 			battlesn		= 2;	//战斗sn
	optional uint64 			petsn			= 3;	//伙伴SN
}

//查询录像伙伴数据BW
message PBQueryBattlePetBW
{
	optional uint32 			worldid 		= 1;	//world id
	optional uint32				playerid 		= 2;	//player id
	optional uint32				type			= 3;	//视频类型 _emVideoType
	optional uint64 			battlesn		= 4;	//战斗sn
	optional uint64 			petsn			= 5;	//伙伴SN
}

//录像点赞数据表
message PBRedisVideoOptData
{
	optional uint32 			sharecount  		= 1;	//分享次数
	optional uint32				likecount 			= 2;	//点赞次数
	optional uint32				playcount			= 3;	//播放次数
	optional uint32 			mark				= 4;	//录像标记
}

//关卡类型录像管理
message PBRedisVideoStageData
{
	optional uint32 			stageid  		= 1;	//关卡id
	optional uint64				fastsn 			= 2;	//最快通关战斗sn
	optional uint32				fastvalue		= 3;	//最快通关战斗时间
	optional uint64				fightpowersn 	= 4;	//最小战力通关战斗sn
	optional uint64				fightpower		= 5;	//最小战力战斗战力
	optional uint64				latelysn		= 6;	//最近通关战斗sn
}

//单类录像
message PBRedisVideoSn
{
	optional uint32 			videotype  		= 1;	//录像类型
	repeated uint64 			battlesn  		= 2;	//战斗sn
}

//录像信息管理
message PBRedisVideoData
{
	repeated PBRedisVideoSn 	video  			= 1;	//录像
}



//-------------------------------------------------------------
//------------------------------ 福利相关
//----福利返回
enum _emResultWeal_32
{
	R_ResultWeal_Succeed			= 0; // 成功
	R_ResultWeal_Fail				= 1; // 失败
	R_ResultWeal_HaveSign			= 2; // 已经签到
	R_ResultWeal_SignNoCharge		= 3; // 未充值不能领取奖励
	R_ResultWeal_ClickGoldTimes		= 4; // 点金没有次数了
	R_ResultWeal_ClickGoldCost		= 5; // 点金消耗不足
	R_ResultWeal_FanliAwardSucceed	= 6; // 返利领取成功
	R_ResultWeal_FanliAwardFail		= 7; // 返利领取失败
	R_ResultWeal_PrizeAlreadyGot	= 8; // 已经得到奖励了
	R_ResultWeal_PrizeOnlineTime	= 9; // 时间未达到
	R_ResultWeal_PrizePrivious		= 10; // 先领取前面的奖励
	R_ResultWeal_NotInCycle			= 11; // 不在本次循环内
	R_ResultWeal_Bought				= 12; // 已经购买
	R_ResultWeal_NeedItem			= 13; // 所需道具不足
	RET_CODE_FIND_BACK_CAN_NOT_DRAW = 14; // 该玩法未达到领取条件
	RET_CODE_DIAMOND_NOT_ENOUGH		= 15; //钻石不足，无法领取
	RET_CODE_NOT_FOUND_RESOURCE		= 16; //未找到该玩法资源

};

//----福利模块
enum _emC2S_Weal_Protocol
{
	C2S_Weal_Signin					= 1; 	// 签到
	C2S_Weal_ClickGold				= 2;	// 点石成金获取奖励 PBU32
	C2S_Weal_GetFanLiAward			= 3;	// 获取返利奖励
	C2S_Weal_CDK					= 4;	// cdk验证	PBString
	C2S_Weal_OnlinePrize			= 5;	// 领取在线奖励	PBU32
	C2S_Weal_GetGift				= 6;	// 领取礼包	PBU32
	C2S_ResourceFindBack_GetInfo	= 7;	//获取找回资源数据 PBC2GResourceFindBackInfo
	C2S_ResourceFindBack_Draw		= 8;	//领取找回资源  PBC2GDrawFindBack
}
//----福利模块
enum _emS2C_Weal_Protocol
{
	S2C_Weal_Common_ACK				= 1; 	// 福利通用返回
	S2C_Weal_Signin					= 2;	// 签到返回 返回当前的状态		PBU32
	S2C_Weal_ClickGold				= 3;	// 点石成金获取奖励返回			PBG2CClickGold
	S2C_Weal_ClickGoldReset			= 4;	// 点石成金重置次数通知			PBU32
	S2C_Weal_FanliResult			= 5;	// 返回返利结果			PBFanliInfo
	S2C_Weal_CDK					= 26;	// cdk验证返回	PBU32String
	S2C_Weal_OnlinePrize			= 7;	// 领取在线奖励返回	PBU32
	S2C_Weal_GetGift				= 30;	// 领取礼包返回	PBU32
	S2C_ResourceFindBack_GetInfo	= 8;	//获取找回资源数据返回  PBG2CResourceFindBackInfo
	S2C_ResourceFindBack_Draw		= 9;	//领取找回资源 	PBG2CDrawFindBack
}

//----充值返利状态
enum player_FanLi_State
{
	FanLi_State_Init				= 0;	//初始化状态	
	Fanli_state_CanAward			= 1;	//可以领取奖励	表示已经获得玩家的充值数据
	Fanli_state_Awarded				= 2;	//已经领取奖励	玩家有充值数据，并且已经领取了
}


//----月卡信息
message PBG2CMonthCard
{
	optional uint32 type		= 1;	// 类型
	optional uint32 gettime 	= 2;	// 获取的时间，0是没有获取到这种月卡
	optional uint32 recharge	= 3;	// 自失效以来，累计充值额度
	optional bool 	reward		= 4;	// 当天奖励是否获取
}
//----返回点石成金信息
message PBG2CClickGold
{
	optional uint32 type	= 1;	// 类型
	optional uint32 times	= 2;	// 点击次数
}

//----充值返利信息
message PBFanliInfo
{
	optional uint32 money	= 1;	// 充值金额
	optional uint32 state	= 2;	// 状态 参考player_FanLi_State
}

//----客户端到服务器
enum _emC2S_WeekChampion_Protocol
{
	C2S_WeekChampion_SelfGuessAsk		= 1	;//我的竞猜 	无内容
	C2S_WeekChampion_QueryGuessAsk		= 2	;//查询竞猜		无内容
	C2S_WeekChampion_GuessAsk			= 3	;//竞猜下注		PBC2GChampionGuessAsk
	C2S_WeekChampion_Query32List		= 4	;//查询32强		PBU32
	C2S_WeekChampion_Query4List			= 5	;//查询4强	
	C2S_WeekChampion_GuessRecordAsk		= 6	;//我的竞猜记录		
	C2S_WeekChampion_FightRecordAsk		= 7	;//我的战斗记录	
	C2S_WeekChampion_SendDanmuAsk		= 8	;//发送弹幕		PBC2GChampionSendDanmuAsk
	C2S_WeekChampion_QueryDanmuAsk		= 9	;//请求查询弹幕 PBC2GChampionQueryDanmu	
	C2S_WeekChampion_QueryOddsAsk		= 10;//查询下注信息	
	C2S_WeekChampion_OpenAsk			= 11;//打开	
	C2S_WeekChampion_QueryBattleInfo	= 12;//查看对战信息	PBC2GChampionQueryBattleInfo	
	C2S_WeekChampion_QueryRound			= 13;//查询对应回合玩家		PBC2GChampionQueryRound
	C2S_WeekChampion_Like					= 14;//点赞		PBC2GChampionLike

	/*------------------服务器专用----------------------------------------*/
	C2S_WeekChampion_GmOpt				= 30;//gm开启活动		PBC2GChampionGM
	C2S_WeekChampion_FightResult		= 31;//战斗结果返回		

};
//----服务器到客户端
enum _emS2C_WeekChampion_Protocol
{
	S2C_WeekChampion_Common_Ack		= 0;//失败才返回
	S2C_WeekChampion_SelfGuessAck	= 1;//我的竞猜返回		PBG2CChampionSelfGuessAck
	S2C_WeekChampion_QueryGuessAck	= 2;//查询竞猜返回		PBG2CChampionQueryGuessAck
	S2C_WeekChampion_SysGuessAck	= 3;//竞猜下注同步返回	PBG2CChampionSynGuessAck
	S2C_WeekChampion_Query32ListAck	= 4;//查询32强返回		PBG2CChampionQuery32ListAck
	S2C_WeekChampion_Query4ListAck	= 5;//查询4强返回		PBG2CChampionQuery4ListAck
	S2C_WeekChampion_GuessRecordAck	= 6;//我的竞猜记录		PBChampionGuessRecord
	S2C_WeekChampion_FightRecordAck	= 7;//我的战斗记录		PBChampionFightRecord
	S2C_WeekChampion_SendDanmuAck	= 8;//发送弹幕返回		无内容
	S2C_WeekChampion_GuessReusltAck	= 9;//竞猜结果			PBG2CChampionGuessResultAck
	S2C_WeekChampion_QueryDanmuAck	= 10;//查询弹幕返回		PBG2CChampionQueryDanmuAck
	S2C_WeekChampion_OpenAck		= 11;//打开返回			PBG2CChampionOpenAck
	S2C_WeekChampion_EndResultAck	= 12;//我的结算结果		PBG2CChampionEndResultAck
	S2C_WeekChampion_QueryBattleInfo= 13;//查看对战信息		PBChampionBattle
	S2C_WeekChampion_SynState		= 14;//同步状态			PBG2CChampionSynState
	S2C_WeekChampion_SynTopResult	= 15;//同步排行结果		PBG2CChampionSynTopResult
	S2C_WeekChampion_QueryRoundAck	= 16;//查询对应回合数据	PBG2CChampionQueryRoundAck
	S2C_WeekChampion_Like				= 17;//点赞返回			PBU32U32
};

//冠军赛回合
enum _emWeekChampionRound
{
    _emWeekChampionRound_None       = 0;//没有比赛
	_emWeekChampionRound_Trials1	= 1;//选拔赛回合1
	_emWeekChampionRound_Trials2	= 2;//选拔赛回合2
	_emWeekChampionRound_Trials3	= 3;//选拔赛回合3
	_emWeekChampionRound_Trials4	= 4;//选拔赛回合4
	_emWeekChampionRound_Trials5	= 5;//选拔赛回合5
	_emWeekChampionRound_Trials6	= 6;//选拔赛回合6
	_emWeekChampionRound_TOP64		= 7;//64强
	_emWeekChampionRound_TOP32		= 8;//32强
	_emWeekChampionRound_TOP16		= 9;//16强
	_emWeekChampionRound_TOP8		= 10;//8强
	_emWeekChampionRound_TOP4		= 11;//半决赛
    _emWeekChampionRound_TOP2		= 12;//决赛
};
//-------------------------------------------------------------
//------------------------------ 晶碑相关

//------------------------------ 晶碑系统返回
enum _emResultTablet_40
{
	R_ResultTablet_Succeed						= 0; //成功
	R_ResultTablet_Fail							= 1; //失败
    R_ResultTablet_NeedItem					    = 2; //需要道具不足
    R_ResultTablet_NoHarvest					= 3; //没有魔液可收取
    R_ResultTablet_Star							= 4; //星数不足
    R_ResultTablet_CreateStar				    = 5; //晶碑星数不足，不能开启赋能创造
    R_ResultTablet_Exp				            = 6; //还有剩余经验值，需要先取回
    R_ResultTablet_ExpValue				        = 7; //经验值不是整数倍数
    R_ResultTablet_NoExp				        = 8; //没有剩余经验
    R_ResultTablet_NoHero				        = 9; //没有该英雄
    R_ResultTablet_HeroStar				        = 10; //英雄星数不够
    R_ResultTablet_HeroTmp				        = 11; //临时英雄不能放入
    R_ResultTablet_NoSkill				        = 12; //没有该天赋技能
    R_ResultTablet_SkillStar				    = 13; //星数不够天赋技能未开放
    R_ResultTablet_CreateCount				    = 14; //创造次数不足
    R_ResultTablet_Limit				        = 15; //超过提炼上限
    R_ResultTablet_Position				        = 16; //位置错误
}

//----晶碑模块
enum _emC2S_Tablet_Protocol
{
	C2S_Tablet_PutExp				= 1; 	// 放入经验(exp)            PBU64 
	C2S_Tablet_GetMagicJuice		= 2;	// 收获魔液
	C2S_Tablet_PutHero				= 3;	// 放置英雄,空位sn填0(pos, pet Sn)    PBU32U64 
	C2S_Tablet_Upgrade			    = 4;	// 升级晶碑	
    C2S_Tablet_Create			    = 5;	// 创造英雄                 PBC2SCreateHero
    C2S_Tablet_MagicJuice			= 6;	// 请求魔液状态
    C2S_Tablet_GetBackExp			= 7; 	// 取回经验
}

//----晶碑模块
enum _emS2C_Tablet_Protocol
{
	S2C_Tablet_PutExp			= 1; 	// 放入经验返回                 PBMagicJuiceState
	S2C_Tablet_GetMagicJuice	= 2;	// 收获魔液返回                 PBMagicJuiceState
	S2C_Tablet_PutHero			= 3;	// 放置英雄返回(pos, pet sn)	PBU32U64
	S2C_Tablet_Upgrade			= 4;	// 升级晶碑返回(level)		    PBU32
	S2C_Tablet_Create			= 5;	// 创造英雄返回(pet sn)		    PBU64
    S2C_Tablet_MagicJuice       = 6;    // 请求魔液状态返回             PBMagicJuiceState
    S2C_Tablet_GetBackExp       = 7;    // 取回经验(魔液,exp)           PBU32U64
}

// 赋能创造请求
message PBC2SCreateHero
{
    optional uint64     sn       = 1; // 英雄sn
    repeated PBU32U32   skill    = 2; // 天赋技能
}

// 魔液状态
message PBMagicJuiceState
{
    optional uint64 exp     = 1;    //剩余经验
    optional uint32 time    = 2;    //下次提取的时间
    optional uint32 juice   = 3;    //炼好的魔液
    optional uint32 level   = 4;    //当前提炼等级
}

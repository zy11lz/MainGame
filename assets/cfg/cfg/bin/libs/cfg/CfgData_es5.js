var cfg; (function (cfg) {
var BroadCastTimeMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastTimeMsgBaseCfgData () {
	}
	BroadCastTimeMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastTimeMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastTimeMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "desc");
		};
		 /**  说明 */
		 BroadCastTimeMsgBaseCfgData.getDescByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  索引ID */
		 BroadCastTimeMsgBaseCfgData.getIDByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  时间点 */
		 BroadCastTimeMsgBaseCfgData.getBeginTimeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.beginTime;
			}
			return ""
		};
		 /**  显示聊天频道频道 */
		 BroadCastTimeMsgBaseCfgData.getChanelByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chanel;
			}
			return 0;
		};
		 /**  公告类型 */
		 BroadCastTimeMsgBaseCfgData.getNoticeTypeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  内容(按照{0}{1}拼写) */
		 BroadCastTimeMsgBaseCfgData.getContentByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastTimeMsgBaseCfgData
}());
	
cfg.BroadCastTimeMsgBaseCfgData = BroadCastTimeMsgBaseCfgData;
var BroadCastCastMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastCastMsgBaseCfgData () {
	}
	BroadCastCastMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastCastMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastCastMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  广播id */
		 BroadCastCastMsgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型 */
		 BroadCastCastMsgBaseCfgData.getNoticeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  频道 */
		 BroadCastCastMsgBaseCfgData.getChannelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  公告显示位置 */
		 BroadCastCastMsgBaseCfgData.getNoticeShowPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeShowPos;
			}
			return 0;
		};
		 /**  滚动次数 */
		 BroadCastCastMsgBaseCfgData.getShowTimesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTimes;
			}
			return 0;
		};
		 /**  说明 */
		 BroadCastCastMsgBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内容 */
		 BroadCastCastMsgBaseCfgData.getContentByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastCastMsgBaseCfgData
}());
	
cfg.BroadCastCastMsgBaseCfgData = BroadCastCastMsgBaseCfgData;
var BroadCastCastMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastCastMsgBaseCfgData () {
	}
	BroadCastCastMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastCastMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastCastMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  广播id */
		 BroadCastCastMsgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型 */
		 BroadCastCastMsgBaseCfgData.getNoticeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  频道 */
		 BroadCastCastMsgBaseCfgData.getChannelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  公告显示位置 */
		 BroadCastCastMsgBaseCfgData.getNoticeShowPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeShowPos;
			}
			return 0;
		};
		 /**  滚动次数 */
		 BroadCastCastMsgBaseCfgData.getShowTimesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTimes;
			}
			return 0;
		};
		 /**  说明 */
		 BroadCastCastMsgBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内容 */
		 BroadCastCastMsgBaseCfgData.getContentByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastCastMsgBaseCfgData
}());
	
cfg.BroadCastCastMsgBaseCfgData = BroadCastCastMsgBaseCfgData;
var BroadCastTimeMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastTimeMsgBaseCfgData () {
	}
	BroadCastTimeMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastTimeMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastTimeMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "desc");
		};
		 /**  说明 */
		 BroadCastTimeMsgBaseCfgData.getDescByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  索引ID */
		 BroadCastTimeMsgBaseCfgData.getIDByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  时间点 */
		 BroadCastTimeMsgBaseCfgData.getBeginTimeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.beginTime;
			}
			return ""
		};
		 /**  显示聊天频道频道 */
		 BroadCastTimeMsgBaseCfgData.getChanelByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chanel;
			}
			return 0;
		};
		 /**  公告类型 */
		 BroadCastTimeMsgBaseCfgData.getNoticeTypeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  内容(按照{0}{1}拼写) */
		 BroadCastTimeMsgBaseCfgData.getContentByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastTimeMsgBaseCfgData
}());
	
cfg.BroadCastTimeMsgBaseCfgData = BroadCastTimeMsgBaseCfgData;
var BroadCastTimeMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastTimeMsgBaseCfgData () {
	}
	BroadCastTimeMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastTimeMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastTimeMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "desc");
		};
		 /**  说明 */
		 BroadCastTimeMsgBaseCfgData.getDescByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  索引ID */
		 BroadCastTimeMsgBaseCfgData.getIDByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  时间点 */
		 BroadCastTimeMsgBaseCfgData.getBeginTimeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.beginTime;
			}
			return ""
		};
		 /**  显示聊天频道频道 */
		 BroadCastTimeMsgBaseCfgData.getChanelByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chanel;
			}
			return 0;
		};
		 /**  公告类型 */
		 BroadCastTimeMsgBaseCfgData.getNoticeTypeByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  内容(按照{0}{1}拼写) */
		 BroadCastTimeMsgBaseCfgData.getContentByDesc = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastTimeMsgBaseCfgData
}());
	
cfg.BroadCastTimeMsgBaseCfgData = BroadCastTimeMsgBaseCfgData;
var BroadCastCastMsgBaseCfgData  = /** @class */ (function () {
	function BroadCastCastMsgBaseCfgData () {
	}
	BroadCastCastMsgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BroadCastCastMsgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BroadCastCastMsgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  广播id */
		 BroadCastCastMsgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型 */
		 BroadCastCastMsgBaseCfgData.getNoticeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  频道 */
		 BroadCastCastMsgBaseCfgData.getChannelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  公告显示位置 */
		 BroadCastCastMsgBaseCfgData.getNoticeShowPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeShowPos;
			}
			return 0;
		};
		 /**  滚动次数 */
		 BroadCastCastMsgBaseCfgData.getShowTimesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTimes;
			}
			return 0;
		};
		 /**  说明 */
		 BroadCastCastMsgBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内容 */
		 BroadCastCastMsgBaseCfgData.getContentByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return BroadCastCastMsgBaseCfgData
}());
	
cfg.BroadCastCastMsgBaseCfgData = BroadCastCastMsgBaseCfgData;
var ErrorCodeErrorCodeBaseCfgData  = /** @class */ (function () {
	function ErrorCodeErrorCodeBaseCfgData () {
	}
	ErrorCodeErrorCodeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ErrorCodeErrorCodeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ErrorCodeErrorCodeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  序号 */
		 ErrorCodeErrorCodeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  主协议号 */
		 ErrorCodeErrorCodeBaseCfgData.getMainProtocolById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProtocol;
			}
			return 0;
		};
		 /**  返回码 */
		 ErrorCodeErrorCodeBaseCfgData.getEventFlagById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eventFlag;
			}
			return 0;
		};
		 /**  程序解释 */
		 ErrorCodeErrorCodeBaseCfgData.getErrorById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.error;
			}
			return ""
		};

	return ErrorCodeErrorCodeBaseCfgData
}());
	
cfg.ErrorCodeErrorCodeBaseCfgData = ErrorCodeErrorCodeBaseCfgData;
var ErrorCodeErrorCodeBaseCfgData  = /** @class */ (function () {
	function ErrorCodeErrorCodeBaseCfgData () {
	}
	ErrorCodeErrorCodeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ErrorCodeErrorCodeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ErrorCodeErrorCodeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  序号 */
		 ErrorCodeErrorCodeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  主协议号 */
		 ErrorCodeErrorCodeBaseCfgData.getMainProtocolById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProtocol;
			}
			return 0;
		};
		 /**  返回码 */
		 ErrorCodeErrorCodeBaseCfgData.getEventFlagById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eventFlag;
			}
			return 0;
		};
		 /**  程序解释 */
		 ErrorCodeErrorCodeBaseCfgData.getErrorById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.error;
			}
			return ""
		};

	return ErrorCodeErrorCodeBaseCfgData
}());
	
cfg.ErrorCodeErrorCodeBaseCfgData = ErrorCodeErrorCodeBaseCfgData;
var ErrorCodeErrorCodeBaseCfgData  = /** @class */ (function () {
	function ErrorCodeErrorCodeBaseCfgData () {
	}
	ErrorCodeErrorCodeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ErrorCodeErrorCodeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ErrorCodeErrorCodeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  序号 */
		 ErrorCodeErrorCodeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  主协议号 */
		 ErrorCodeErrorCodeBaseCfgData.getMainProtocolById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProtocol;
			}
			return 0;
		};
		 /**  返回码 */
		 ErrorCodeErrorCodeBaseCfgData.getEventFlagById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eventFlag;
			}
			return 0;
		};
		 /**  程序解释 */
		 ErrorCodeErrorCodeBaseCfgData.getErrorById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.error;
			}
			return ""
		};

	return ErrorCodeErrorCodeBaseCfgData
}());
	
cfg.ErrorCodeErrorCodeBaseCfgData = ErrorCodeErrorCodeBaseCfgData;
var GmBaseCfgData  = /** @class */ (function () {
	function GmBaseCfgData () {
	}
	GmBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GmBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GmBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GmBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  命令功能 */
		 GmBaseCfgData.getDesById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  命令 */
		 GmBaseCfgData.getCodeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.code;
			}
			return ""
		};
		 /**  参数1 */
		 GmBaseCfgData.getValue1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value1;
			}
			return ""
		};
		 /**  参数2 */
		 GmBaseCfgData.getValue2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value2;
			}
			return ""
		};

	return GmBaseCfgData
}());
	
cfg.GmBaseCfgData = GmBaseCfgData;
var GmBaseCfgData  = /** @class */ (function () {
	function GmBaseCfgData () {
	}
	GmBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GmBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GmBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GmBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  命令功能 */
		 GmBaseCfgData.getDesById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  命令 */
		 GmBaseCfgData.getCodeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.code;
			}
			return ""
		};
		 /**  参数1 */
		 GmBaseCfgData.getValue1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value1;
			}
			return ""
		};
		 /**  参数2 */
		 GmBaseCfgData.getValue2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value2;
			}
			return ""
		};

	return GmBaseCfgData
}());
	
cfg.GmBaseCfgData = GmBaseCfgData;
var GmBaseCfgData  = /** @class */ (function () {
	function GmBaseCfgData () {
	}
	GmBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GmBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GmBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GmBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  命令功能 */
		 GmBaseCfgData.getDesById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  命令 */
		 GmBaseCfgData.getCodeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.code;
			}
			return ""
		};
		 /**  参数1 */
		 GmBaseCfgData.getValue1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value1;
			}
			return ""
		};
		 /**  参数2 */
		 GmBaseCfgData.getValue2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value2;
			}
			return ""
		};

	return GmBaseCfgData
}());
	
cfg.GmBaseCfgData = GmBaseCfgData;
var HelpSpriteBaseCfgData  = /** @class */ (function () {
	function HelpSpriteBaseCfgData () {
	}
	HelpSpriteBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HelpSpriteBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HelpSpriteBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id索引 */
		 HelpSpriteBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  1 终生提示一次；   2 单次登陆提示一次；   3 单日提示一次；   4 循环提示（每次随机都参与）；   5 条件触发（触发就提示）；    */
		 HelpSpriteBaseCfgData.getNoticeTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  小人动作 */
		 HelpSpriteBaseCfgData.getRoleActionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAction;
			}
			return ""
		};
		 /**  气泡文本 */
		 HelpSpriteBaseCfgData.getNoticTxtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticTxt;
			}
			return ""
		};
		 /**  语音 */
		 HelpSpriteBaseCfgData.getSoundById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sound;
			}
			return ""
		};
		 /**  点击小人之后执行什么操作1.打开某个ui */
		 HelpSpriteBaseCfgData.getActionTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionType;
			}
			return ""
		};
		 /**  点击之后执行动作的参数actionType为1的配置uiconfig里uiopen的id */
		 HelpSpriteBaseCfgData.getActionParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionParm;
			}
			return ""
		};
		 /**  开启条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量≥参数；   6 免费抽卡次数≥参数7 公会副本次数≥参数8 背包中有指定道具指定数量≥参数   9 服务器时间   （时间戳）≥参数10 特定充值的当前剩余次数（取charge表）   ≥参数------配置为触发类型时--------1 等级大于 参数1 每参数2等级触发2  关卡进度大于 参数1 每 参数2 关卡触发 */
		 HelpSpriteBaseCfgData.getOpenTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openType;
			}
			return 0;
		};
		 /**  开启条件参数 */
		 HelpSpriteBaseCfgData.getOpenParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openParm;
			}
			return 0;
		};
		 /**  开启条件补充参数 */
		 HelpSpriteBaseCfgData.getOpenExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openExt;
			}
			return ""
		};
		 /**  关闭条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量<参数；   6 免费抽卡次数<参数  7 公会副本次数<参数8 背包中有指定道具指定数量<参数9 服务器时间     （时间戳<参数10 特定充值的当前剩余次数（取charge表）   <参数 */
		 HelpSpriteBaseCfgData.getCloseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeType;
			}
			return 0;
		};
		 /**  关闭条件参数 */
		 HelpSpriteBaseCfgData.getCloseParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeParm;
			}
			return 0;
		};
		 /**  关闭条件补充参数 */
		 HelpSpriteBaseCfgData.getCloseExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeExt;
			}
			return ""
		};

	return HelpSpriteBaseCfgData
}());
	
cfg.HelpSpriteBaseCfgData = HelpSpriteBaseCfgData;
var HelpSpriteBaseCfgData  = /** @class */ (function () {
	function HelpSpriteBaseCfgData () {
	}
	HelpSpriteBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HelpSpriteBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HelpSpriteBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id索引 */
		 HelpSpriteBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  1 终生提示一次；   2 单次登陆提示一次；   3 单日提示一次；   4 循环提示（每次随机都参与）；   5 条件触发（触发就提示）；    */
		 HelpSpriteBaseCfgData.getNoticeTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  小人动作 */
		 HelpSpriteBaseCfgData.getRoleActionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAction;
			}
			return ""
		};
		 /**  气泡文本 */
		 HelpSpriteBaseCfgData.getNoticTxtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticTxt;
			}
			return ""
		};
		 /**  语音 */
		 HelpSpriteBaseCfgData.getSoundById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sound;
			}
			return ""
		};
		 /**  点击小人之后执行什么操作1.打开某个ui */
		 HelpSpriteBaseCfgData.getActionTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionType;
			}
			return ""
		};
		 /**  点击之后执行动作的参数actionType为1的配置uiconfig里uiopen的id */
		 HelpSpriteBaseCfgData.getActionParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionParm;
			}
			return ""
		};
		 /**  开启条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量≥参数；   6 免费抽卡次数≥参数7 公会副本次数≥参数8 背包中有指定道具指定数量≥参数   9 服务器时间   （时间戳）≥参数10 特定充值的当前剩余次数（取charge表）   ≥参数------配置为触发类型时--------1 等级大于 参数1 每参数2等级触发2  关卡进度大于 参数1 每 参数2 关卡触发 */
		 HelpSpriteBaseCfgData.getOpenTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openType;
			}
			return 0;
		};
		 /**  开启条件参数 */
		 HelpSpriteBaseCfgData.getOpenParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openParm;
			}
			return 0;
		};
		 /**  开启条件补充参数 */
		 HelpSpriteBaseCfgData.getOpenExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openExt;
			}
			return ""
		};
		 /**  关闭条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量<参数；   6 免费抽卡次数<参数  7 公会副本次数<参数8 背包中有指定道具指定数量<参数9 服务器时间     （时间戳<参数10 特定充值的当前剩余次数（取charge表）   <参数 */
		 HelpSpriteBaseCfgData.getCloseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeType;
			}
			return 0;
		};
		 /**  关闭条件参数 */
		 HelpSpriteBaseCfgData.getCloseParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeParm;
			}
			return 0;
		};
		 /**  关闭条件补充参数 */
		 HelpSpriteBaseCfgData.getCloseExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeExt;
			}
			return ""
		};

	return HelpSpriteBaseCfgData
}());
	
cfg.HelpSpriteBaseCfgData = HelpSpriteBaseCfgData;
var HelpSpriteBaseCfgData  = /** @class */ (function () {
	function HelpSpriteBaseCfgData () {
	}
	HelpSpriteBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HelpSpriteBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HelpSpriteBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id索引 */
		 HelpSpriteBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  1 终生提示一次；   2 单次登陆提示一次；   3 单日提示一次；   4 循环提示（每次随机都参与）；   5 条件触发（触发就提示）；    */
		 HelpSpriteBaseCfgData.getNoticeTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticeType;
			}
			return 0;
		};
		 /**  小人动作 */
		 HelpSpriteBaseCfgData.getRoleActionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAction;
			}
			return ""
		};
		 /**  气泡文本 */
		 HelpSpriteBaseCfgData.getNoticTxtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noticTxt;
			}
			return ""
		};
		 /**  语音 */
		 HelpSpriteBaseCfgData.getSoundById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sound;
			}
			return ""
		};
		 /**  点击小人之后执行什么操作1.打开某个ui */
		 HelpSpriteBaseCfgData.getActionTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionType;
			}
			return ""
		};
		 /**  点击之后执行动作的参数actionType为1的配置uiconfig里uiopen的id */
		 HelpSpriteBaseCfgData.getActionParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.actionParm;
			}
			return ""
		};
		 /**  开启条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量≥参数；   6 免费抽卡次数≥参数7 公会副本次数≥参数8 背包中有指定道具指定数量≥参数   9 服务器时间   （时间戳）≥参数10 特定充值的当前剩余次数（取charge表）   ≥参数------配置为触发类型时--------1 等级大于 参数1 每参数2等级触发2  关卡进度大于 参数1 每 参数2 关卡触发 */
		 HelpSpriteBaseCfgData.getOpenTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openType;
			}
			return 0;
		};
		 /**  开启条件参数 */
		 HelpSpriteBaseCfgData.getOpenParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openParm;
			}
			return 0;
		};
		 /**  开启条件补充参数 */
		 HelpSpriteBaseCfgData.getOpenExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openExt;
			}
			return ""
		};
		 /**  关闭条件类型1 玩家等级≥参数；   2 玩家累积充值额度≥参数；   3 玩家当日充值额度≥参数；   4 玩家主线关卡进度≥参数；   5 玩家钻石数量<参数；   6 免费抽卡次数<参数  7 公会副本次数<参数8 背包中有指定道具指定数量<参数9 服务器时间     （时间戳<参数10 特定充值的当前剩余次数（取charge表）   <参数 */
		 HelpSpriteBaseCfgData.getCloseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeType;
			}
			return 0;
		};
		 /**  关闭条件参数 */
		 HelpSpriteBaseCfgData.getCloseParmById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeParm;
			}
			return 0;
		};
		 /**  关闭条件补充参数 */
		 HelpSpriteBaseCfgData.getCloseExtById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.closeExt;
			}
			return ""
		};

	return HelpSpriteBaseCfgData
}());
	
cfg.HelpSpriteBaseCfgData = HelpSpriteBaseCfgData;
var LoginWindowsLoginWindowsBaseCfgData  = /** @class */ (function () {
	function LoginWindowsLoginWindowsBaseCfgData () {
	}
	LoginWindowsLoginWindowsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LoginWindowsLoginWindowsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LoginWindowsLoginWindowsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 LoginWindowsLoginWindowsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  跳转链接 */
		 LoginWindowsLoginWindowsBaseCfgData.getJumpLinkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jumpLink;
			}
			return ""
		};
		 /**  背景图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getBackgroundPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backgroundPic;
			}
			return ""
		};
		 /**  按钮图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getButtonPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonPic;
			}
			return ""
		};
		 /**  推送顺序 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushOrderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushOrder;
			}
			return 0;
		};
		 /**  推送渠道 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  推送等级 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushLevel;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeType;
			}
			return 0;
		};
		 /**  弹出类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPopupTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.popupTybe;
			}
			return 0;
		};
		 /**  推送时间 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTime;
			}
			return ""
		};
		 /**  推送开关 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushSwitch;
			}
			return 0;
		};

	return LoginWindowsLoginWindowsBaseCfgData
}());
	
cfg.LoginWindowsLoginWindowsBaseCfgData = LoginWindowsLoginWindowsBaseCfgData;
var LoginWindowsLoginWindowsBaseCfgData  = /** @class */ (function () {
	function LoginWindowsLoginWindowsBaseCfgData () {
	}
	LoginWindowsLoginWindowsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LoginWindowsLoginWindowsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LoginWindowsLoginWindowsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 LoginWindowsLoginWindowsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  跳转链接 */
		 LoginWindowsLoginWindowsBaseCfgData.getJumpLinkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jumpLink;
			}
			return ""
		};
		 /**  背景图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getBackgroundPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backgroundPic;
			}
			return ""
		};
		 /**  按钮图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getButtonPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonPic;
			}
			return ""
		};
		 /**  推送顺序 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushOrderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushOrder;
			}
			return 0;
		};
		 /**  推送渠道 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  推送等级 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushLevel;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeType;
			}
			return 0;
		};
		 /**  弹出类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPopupTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.popupTybe;
			}
			return 0;
		};
		 /**  推送时间 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTime;
			}
			return ""
		};
		 /**  推送开关 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushSwitch;
			}
			return 0;
		};

	return LoginWindowsLoginWindowsBaseCfgData
}());
	
cfg.LoginWindowsLoginWindowsBaseCfgData = LoginWindowsLoginWindowsBaseCfgData;
var LoginWindowsLoginWindowsBaseCfgData  = /** @class */ (function () {
	function LoginWindowsLoginWindowsBaseCfgData () {
	}
	LoginWindowsLoginWindowsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LoginWindowsLoginWindowsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LoginWindowsLoginWindowsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 LoginWindowsLoginWindowsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  跳转链接 */
		 LoginWindowsLoginWindowsBaseCfgData.getJumpLinkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jumpLink;
			}
			return ""
		};
		 /**  背景图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getBackgroundPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backgroundPic;
			}
			return ""
		};
		 /**  按钮图片 */
		 LoginWindowsLoginWindowsBaseCfgData.getButtonPicByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonPic;
			}
			return ""
		};
		 /**  推送顺序 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushOrderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushOrder;
			}
			return 0;
		};
		 /**  推送渠道 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  推送等级 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushLevel;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeType;
			}
			return 0;
		};
		 /**  弹出类型 */
		 LoginWindowsLoginWindowsBaseCfgData.getPopupTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.popupTybe;
			}
			return 0;
		};
		 /**  推送时间 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTime;
			}
			return ""
		};
		 /**  推送开关 */
		 LoginWindowsLoginWindowsBaseCfgData.getPushSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushSwitch;
			}
			return 0;
		};

	return LoginWindowsLoginWindowsBaseCfgData
}());
	
cfg.LoginWindowsLoginWindowsBaseCfgData = LoginWindowsLoginWindowsBaseCfgData;
var QuestionBaseCfgData  = /** @class */ (function () {
	function QuestionBaseCfgData () {
	}
	QuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	QuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		QuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 QuestionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  问卷ID */
		 QuestionBaseCfgData.getQuestionnaireIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.questionnaireID;
			}
			return 0;
		};
		 /**  题型 */
		 QuestionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  题目 */
		 QuestionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  选择题选项（|分隔） */
		 QuestionBaseCfgData.getChoiceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.choice;
			}
			return ""
		};

	return QuestionBaseCfgData
}());
	
cfg.QuestionBaseCfgData = QuestionBaseCfgData;
var QuestionBaseCfgData  = /** @class */ (function () {
	function QuestionBaseCfgData () {
	}
	QuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	QuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		QuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 QuestionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  问卷ID */
		 QuestionBaseCfgData.getQuestionnaireIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.questionnaireID;
			}
			return 0;
		};
		 /**  题型 */
		 QuestionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  题目 */
		 QuestionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  选择题选项（|分隔） */
		 QuestionBaseCfgData.getChoiceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.choice;
			}
			return ""
		};

	return QuestionBaseCfgData
}());
	
cfg.QuestionBaseCfgData = QuestionBaseCfgData;
var QuestionBaseCfgData  = /** @class */ (function () {
	function QuestionBaseCfgData () {
	}
	QuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	QuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		QuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 QuestionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  问卷ID */
		 QuestionBaseCfgData.getQuestionnaireIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.questionnaireID;
			}
			return 0;
		};
		 /**  题型 */
		 QuestionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  题目 */
		 QuestionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  选择题选项（|分隔） */
		 QuestionBaseCfgData.getChoiceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.choice;
			}
			return ""
		};

	return QuestionBaseCfgData
}());
	
cfg.QuestionBaseCfgData = QuestionBaseCfgData;
var UiRoleSayBaseCfgData  = /** @class */ (function () {
	function UiRoleSayBaseCfgData () {
	}
	UiRoleSayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiRoleSayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiRoleSayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "uiType");
		};
		 /**  ui面板类型1：背包2：祭献3:召唤4:先知圣殿5:精灵商店 */
		 UiRoleSayBaseCfgData.getUiTypeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uiType;
			}
			return 0;
		};
		 /**  间隔时间（毫秒） */
		 UiRoleSayBaseCfgData.getGapTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gapTime;
			}
			return 0;
		};
		 /**  显示时间（毫秒） */
		 UiRoleSayBaseCfgData.getShowTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTime;
			}
			return 0;
		};
		 /**  说话随机列表 |  竖线分割 */
		 UiRoleSayBaseCfgData.getSayTxtByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sayTxt;
			}
			return ""
		};
		 /**  玩成事件触发文字 */
		 UiRoleSayBaseCfgData.getEventSayByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.event_say;
			}
			return ""
		};

	return UiRoleSayBaseCfgData
}());
	
cfg.UiRoleSayBaseCfgData = UiRoleSayBaseCfgData;
var UiRoleSayBaseCfgData  = /** @class */ (function () {
	function UiRoleSayBaseCfgData () {
	}
	UiRoleSayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiRoleSayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiRoleSayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "uiType");
		};
		 /**  ui面板类型1：背包2：祭献3:召唤4:先知圣殿5:精灵商店 */
		 UiRoleSayBaseCfgData.getUiTypeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uiType;
			}
			return 0;
		};
		 /**  间隔时间（毫秒） */
		 UiRoleSayBaseCfgData.getGapTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gapTime;
			}
			return 0;
		};
		 /**  显示时间（毫秒） */
		 UiRoleSayBaseCfgData.getShowTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTime;
			}
			return 0;
		};
		 /**  说话随机列表 |  竖线分割 */
		 UiRoleSayBaseCfgData.getSayTxtByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sayTxt;
			}
			return ""
		};
		 /**  玩成事件触发文字 */
		 UiRoleSayBaseCfgData.getEventSayByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.event_say;
			}
			return ""
		};

	return UiRoleSayBaseCfgData
}());
	
cfg.UiRoleSayBaseCfgData = UiRoleSayBaseCfgData;
var UiRoleSayBaseCfgData  = /** @class */ (function () {
	function UiRoleSayBaseCfgData () {
	}
	UiRoleSayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiRoleSayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiRoleSayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "uiType");
		};
		 /**  ui面板类型1：背包2：祭献3:召唤4:先知圣殿5:精灵商店 */
		 UiRoleSayBaseCfgData.getUiTypeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uiType;
			}
			return 0;
		};
		 /**  间隔时间（毫秒） */
		 UiRoleSayBaseCfgData.getGapTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gapTime;
			}
			return 0;
		};
		 /**  显示时间（毫秒） */
		 UiRoleSayBaseCfgData.getShowTimeByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showTime;
			}
			return 0;
		};
		 /**  说话随机列表 |  竖线分割 */
		 UiRoleSayBaseCfgData.getSayTxtByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sayTxt;
			}
			return ""
		};
		 /**  玩成事件触发文字 */
		 UiRoleSayBaseCfgData.getEventSayByUiType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.event_say;
			}
			return ""
		};

	return UiRoleSayBaseCfgData
}());
	
cfg.UiRoleSayBaseCfgData = UiRoleSayBaseCfgData;
var AchieveConstBaseCfgData  = /** @class */ (function () {
	function AchieveConstBaseCfgData () {
	}
	AchieveConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "warOrderDuration");
		};
		 /**  战令持续时间 */
		 AchieveConstBaseCfgData.getWarOrderDurationByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderDuration;
			}
			return 0;
		};
		 /**  战令开始时间 */
		 AchieveConstBaseCfgData.getWarOrderOpenDayByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderOpenDay;
			}
			return 0;
		};
		 /**  战令周任务天数 */
		 AchieveConstBaseCfgData.getWarOrderWeekDaysByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderWeekDays;
			}
			return ""
		};
		 /**  进阶奖励预览 */
		 AchieveConstBaseCfgData.getAdvPrizePreviewByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advPrizePreview;
			}
			return ""
		};

	return AchieveConstBaseCfgData
}());
	
cfg.AchieveConstBaseCfgData = AchieveConstBaseCfgData;
var AchieveActivityLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessBaseCfgData () {
	}
	AchieveActivityLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveActivityLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveActivityLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveActivityLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveActivityLivenessBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveActivityLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessBaseCfgData
}());
	
cfg.AchieveActivityLivenessBaseCfgData = AchieveActivityLivenessBaseCfgData;
var AchieveTypeBaseCfgData  = /** @class */ (function () {
	function AchieveTypeBaseCfgData () {
	}
	AchieveTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveType");
		};
		 /**  成就类型 */
		 AchieveTypeBaseCfgData.getAchieveTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTypeBaseCfgData.getAchieveSubTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  是否累加值 */
		 AchieveTypeBaseCfgData.getIsAddByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAdd;
			}
			return 0;
		};
		 /**  UIOpen表对应ID */
		 AchieveTypeBaseCfgData.getUIOpenIDByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};

	return AchieveTypeBaseCfgData
}());
	
cfg.AchieveTypeBaseCfgData = AchieveTypeBaseCfgData;
var AchieveLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessPrizeBaseCfgData () {
	}
	AchieveLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessPrizeBaseCfgData
}());
	
cfg.AchieveLivenessPrizeBaseCfgData = AchieveLivenessPrizeBaseCfgData;
var AchieveRoadBaseCfgData  = /** @class */ (function () {
	function AchieveRoadBaseCfgData () {
	}
	AchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveRoadBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveRoadBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveRoadBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveRoadBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveRoadBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveRoadBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveRoadBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveRoadBaseCfgData
}());
	
cfg.AchieveRoadBaseCfgData = AchieveRoadBaseCfgData;
var AchieveActivityLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessBaseCfgData () {
	}
	AchieveActivityLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveActivityLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveActivityLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveActivityLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveActivityLivenessBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveActivityLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessBaseCfgData
}());
	
cfg.AchieveActivityLivenessBaseCfgData = AchieveActivityLivenessBaseCfgData;
var AchieveTrainBaseCfgData  = /** @class */ (function () {
	function AchieveTrainBaseCfgData () {
	}
	AchieveTrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveTrainBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  历练类型_emAchieveTrainType1;//竞技历练2;//战斗历练3;//特殊历练 */
		 AchieveTrainBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveTrainBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveTrainBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTrainBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveTrainBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveTrainBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveTrainBaseCfgData
}());
	
cfg.AchieveTrainBaseCfgData = AchieveTrainBaseCfgData;
var AchieveWarOrderBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderBaseCfgData () {
	}
	AchieveWarOrderBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWarOrderBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emWarOrderType */
		 AchieveWarOrderBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWarOrderBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  进度描述 */
		 AchieveWarOrderBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWarOrderBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWarOrderBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWarOrderBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWarOrderBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWarOrderBaseCfgData
}());
	
cfg.AchieveWarOrderBaseCfgData = AchieveWarOrderBaseCfgData;
var AchieveWeekLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessPrizeBaseCfgData () {
	}
	AchieveWeekLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveWeekLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveWeekLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveWeekLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessPrizeBaseCfgData
}());
	
cfg.AchieveWeekLivenessPrizeBaseCfgData = AchieveWeekLivenessPrizeBaseCfgData;
var AchieveWeekLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessBaseCfgData () {
	}
	AchieveWeekLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWeekLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWeekLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWeekLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWeekLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessBaseCfgData
}());
	
cfg.AchieveWeekLivenessBaseCfgData = AchieveWeekLivenessBaseCfgData;
var AchieveActivityLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessPrizeBaseCfgData () {
	}
	AchieveActivityLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveActivityLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveActivityLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveActivityLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessPrizeBaseCfgData
}());
	
cfg.AchieveActivityLivenessPrizeBaseCfgData = AchieveActivityLivenessPrizeBaseCfgData;
var AchieveFactionLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveFactionLivenessBaseCfgData () {
	}
	AchieveFactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveFactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveFactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveFactionLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveFactionLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  重置类型 */
		 AchieveFactionLivenessBaseCfgData.getAchiveResetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achiveResetType;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveFactionLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  增加活跃度 */
		 AchieveFactionLivenessBaseCfgData.getAddLivenessByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addLiveness;
			}
			return 0;
		};

	return AchieveFactionLivenessBaseCfgData
}());
	
cfg.AchieveFactionLivenessBaseCfgData = AchieveFactionLivenessBaseCfgData;
var AchieveLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessPrizeBaseCfgData () {
	}
	AchieveLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessPrizeBaseCfgData
}());
	
cfg.AchieveLivenessPrizeBaseCfgData = AchieveLivenessPrizeBaseCfgData;
var AchieveWeekLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessBaseCfgData () {
	}
	AchieveWeekLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWeekLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWeekLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWeekLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWeekLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessBaseCfgData
}());
	
cfg.AchieveWeekLivenessBaseCfgData = AchieveWeekLivenessBaseCfgData;
var AchieveRoadBaseCfgData  = /** @class */ (function () {
	function AchieveRoadBaseCfgData () {
	}
	AchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveRoadBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveRoadBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveRoadBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveRoadBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveRoadBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveRoadBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveRoadBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveRoadBaseCfgData
}());
	
cfg.AchieveRoadBaseCfgData = AchieveRoadBaseCfgData;
var AchieveConstBaseCfgData  = /** @class */ (function () {
	function AchieveConstBaseCfgData () {
	}
	AchieveConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "warOrderDuration");
		};
		 /**  战令持续时间 */
		 AchieveConstBaseCfgData.getWarOrderDurationByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderDuration;
			}
			return 0;
		};
		 /**  战令开始时间 */
		 AchieveConstBaseCfgData.getWarOrderOpenDayByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderOpenDay;
			}
			return 0;
		};
		 /**  战令周任务天数 */
		 AchieveConstBaseCfgData.getWarOrderWeekDaysByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderWeekDays;
			}
			return ""
		};
		 /**  进阶奖励预览 */
		 AchieveConstBaseCfgData.getAdvPrizePreviewByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advPrizePreview;
			}
			return ""
		};

	return AchieveConstBaseCfgData
}());
	
cfg.AchieveConstBaseCfgData = AchieveConstBaseCfgData;
var AchieveRoadBaseCfgData  = /** @class */ (function () {
	function AchieveRoadBaseCfgData () {
	}
	AchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveRoadBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveRoadBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveRoadBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveRoadBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveRoadBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveRoadBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveRoadBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveRoadBaseCfgData
}());
	
cfg.AchieveRoadBaseCfgData = AchieveRoadBaseCfgData;
var AchieveTrainBaseCfgData  = /** @class */ (function () {
	function AchieveTrainBaseCfgData () {
	}
	AchieveTrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveTrainBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  历练类型_emAchieveTrainType1;//竞技历练2;//战斗历练3;//特殊历练 */
		 AchieveTrainBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveTrainBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveTrainBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTrainBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveTrainBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveTrainBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveTrainBaseCfgData
}());
	
cfg.AchieveTrainBaseCfgData = AchieveTrainBaseCfgData;
var AchieveActivityLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessPrizeBaseCfgData () {
	}
	AchieveActivityLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveActivityLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveActivityLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveActivityLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessPrizeBaseCfgData
}());
	
cfg.AchieveActivityLivenessPrizeBaseCfgData = AchieveActivityLivenessPrizeBaseCfgData;
var AchieveWarOrderPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderPrizeBaseCfgData () {
	}
	AchieveWarOrderPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 AchieveWarOrderPrizeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  到下一级的经验 */
		 AchieveWarOrderPrizeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAdvAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advAddItem;
			}
			return ""
		};

	return AchieveWarOrderPrizeBaseCfgData
}());
	
cfg.AchieveWarOrderPrizeBaseCfgData = AchieveWarOrderPrizeBaseCfgData;
var AchieveWarOrderBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderBaseCfgData () {
	}
	AchieveWarOrderBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWarOrderBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emWarOrderType */
		 AchieveWarOrderBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWarOrderBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  进度描述 */
		 AchieveWarOrderBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWarOrderBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWarOrderBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWarOrderBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWarOrderBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWarOrderBaseCfgData
}());
	
cfg.AchieveWarOrderBaseCfgData = AchieveWarOrderBaseCfgData;
var AchieveWeekLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessPrizeBaseCfgData () {
	}
	AchieveWeekLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveWeekLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveWeekLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveWeekLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessPrizeBaseCfgData
}());
	
cfg.AchieveWeekLivenessPrizeBaseCfgData = AchieveWeekLivenessPrizeBaseCfgData;
var AchieveWeekLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessBaseCfgData () {
	}
	AchieveWeekLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWeekLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWeekLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWeekLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWeekLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWeekLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessBaseCfgData
}());
	
cfg.AchieveWeekLivenessBaseCfgData = AchieveWeekLivenessBaseCfgData;
var AchieveActivityLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessPrizeBaseCfgData () {
	}
	AchieveActivityLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveActivityLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveActivityLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveActivityLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessPrizeBaseCfgData
}());
	
cfg.AchieveActivityLivenessPrizeBaseCfgData = AchieveActivityLivenessPrizeBaseCfgData;
var AchieveActivityLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveActivityLivenessBaseCfgData () {
	}
	AchieveActivityLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveActivityLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveActivityLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveActivityLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveActivityLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveActivityLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveActivityLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveActivityLivenessBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveActivityLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveActivityLivenessBaseCfgData
}());
	
cfg.AchieveActivityLivenessBaseCfgData = AchieveActivityLivenessBaseCfgData;
var AchieveTrainBaseCfgData  = /** @class */ (function () {
	function AchieveTrainBaseCfgData () {
	}
	AchieveTrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveTrainBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  历练类型_emAchieveTrainType1;//竞技历练2;//战斗历练3;//特殊历练 */
		 AchieveTrainBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveTrainBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveTrainBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTrainBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveTrainBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveTrainBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveTrainBaseCfgData
}());
	
cfg.AchieveTrainBaseCfgData = AchieveTrainBaseCfgData;
var AchieveConstBaseCfgData  = /** @class */ (function () {
	function AchieveConstBaseCfgData () {
	}
	AchieveConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "warOrderDuration");
		};
		 /**  战令持续时间 */
		 AchieveConstBaseCfgData.getWarOrderDurationByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderDuration;
			}
			return 0;
		};
		 /**  战令开始时间 */
		 AchieveConstBaseCfgData.getWarOrderOpenDayByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderOpenDay;
			}
			return 0;
		};
		 /**  战令周任务天数 */
		 AchieveConstBaseCfgData.getWarOrderWeekDaysByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.warOrderWeekDays;
			}
			return ""
		};
		 /**  进阶奖励预览 */
		 AchieveConstBaseCfgData.getAdvPrizePreviewByWarOrderDuration = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advPrizePreview;
			}
			return ""
		};

	return AchieveConstBaseCfgData
}());
	
cfg.AchieveConstBaseCfgData = AchieveConstBaseCfgData;
var AchieveWarOrderPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderPrizeBaseCfgData () {
	}
	AchieveWarOrderPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 AchieveWarOrderPrizeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  到下一级的经验 */
		 AchieveWarOrderPrizeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAdvAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advAddItem;
			}
			return ""
		};

	return AchieveWarOrderPrizeBaseCfgData
}());
	
cfg.AchieveWarOrderPrizeBaseCfgData = AchieveWarOrderPrizeBaseCfgData;
var AchieveWarOrderBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderBaseCfgData () {
	}
	AchieveWarOrderBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveWarOrderBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emWarOrderType */
		 AchieveWarOrderBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveWarOrderBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  进度描述 */
		 AchieveWarOrderBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveWarOrderBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveWarOrderBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveWarOrderBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveWarOrderBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWarOrderBaseCfgData
}());
	
cfg.AchieveWarOrderBaseCfgData = AchieveWarOrderBaseCfgData;
var AchieveWeekLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWeekLivenessPrizeBaseCfgData () {
	}
	AchieveWeekLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWeekLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWeekLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveWeekLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveWeekLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveWeekLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveWeekLivenessPrizeBaseCfgData
}());
	
cfg.AchieveWeekLivenessPrizeBaseCfgData = AchieveWeekLivenessPrizeBaseCfgData;
var AchieveMainAchieveBaseCfgData  = /** @class */ (function () {
	function AchieveMainAchieveBaseCfgData () {
	}
	AchieveMainAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveMainAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveMainAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveMainAchieveBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  成就大类型1; //主线成就2; //每日活跃3; //公会成就4; //图腾成就 */
		 AchieveMainAchieveBaseCfgData.getAchieveBigTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveBigType;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveMainAchieveBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  等级 */
		 AchieveMainAchieveBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveMainAchieveBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveMainAchieveBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveMainAchieveBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  后置成就ID */
		 AchieveMainAchieveBaseCfgData.getNextIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nextID;
			}
			return 0;
		};
		 /**  分组起始ID */
		 AchieveMainAchieveBaseCfgData.getGroupFirstIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupFirstId;
			}
			return 0;
		};

	return AchieveMainAchieveBaseCfgData
}());
	
cfg.AchieveMainAchieveBaseCfgData = AchieveMainAchieveBaseCfgData;
var AchieveTypeBaseCfgData  = /** @class */ (function () {
	function AchieveTypeBaseCfgData () {
	}
	AchieveTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveType");
		};
		 /**  成就类型 */
		 AchieveTypeBaseCfgData.getAchieveTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTypeBaseCfgData.getAchieveSubTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  是否累加值 */
		 AchieveTypeBaseCfgData.getIsAddByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAdd;
			}
			return 0;
		};
		 /**  UIOpen表对应ID */
		 AchieveTypeBaseCfgData.getUIOpenIDByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};

	return AchieveTypeBaseCfgData
}());
	
cfg.AchieveTypeBaseCfgData = AchieveTypeBaseCfgData;
var AchieveLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessBaseCfgData () {
	}
	AchieveLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessBaseCfgData
}());
	
cfg.AchieveLivenessBaseCfgData = AchieveLivenessBaseCfgData;
var AchieveMainAchieveBaseCfgData  = /** @class */ (function () {
	function AchieveMainAchieveBaseCfgData () {
	}
	AchieveMainAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveMainAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveMainAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveMainAchieveBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  成就大类型1; //主线成就2; //每日活跃3; //公会成就4; //图腾成就 */
		 AchieveMainAchieveBaseCfgData.getAchieveBigTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveBigType;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveMainAchieveBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  等级 */
		 AchieveMainAchieveBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveMainAchieveBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveMainAchieveBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveMainAchieveBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  后置成就ID */
		 AchieveMainAchieveBaseCfgData.getNextIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nextID;
			}
			return 0;
		};
		 /**  分组起始ID */
		 AchieveMainAchieveBaseCfgData.getGroupFirstIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupFirstId;
			}
			return 0;
		};

	return AchieveMainAchieveBaseCfgData
}());
	
cfg.AchieveMainAchieveBaseCfgData = AchieveMainAchieveBaseCfgData;
var AchieveWarOrderPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveWarOrderPrizeBaseCfgData () {
	}
	AchieveWarOrderPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveWarOrderPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveWarOrderPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 AchieveWarOrderPrizeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  到下一级的经验 */
		 AchieveWarOrderPrizeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励 */
		 AchieveWarOrderPrizeBaseCfgData.getAdvAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advAddItem;
			}
			return ""
		};

	return AchieveWarOrderPrizeBaseCfgData
}());
	
cfg.AchieveWarOrderPrizeBaseCfgData = AchieveWarOrderPrizeBaseCfgData;
var AchieveTypeBaseCfgData  = /** @class */ (function () {
	function AchieveTypeBaseCfgData () {
	}
	AchieveTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveType");
		};
		 /**  成就类型 */
		 AchieveTypeBaseCfgData.getAchieveTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveTypeBaseCfgData.getAchieveSubTypeByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  是否累加值 */
		 AchieveTypeBaseCfgData.getIsAddByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAdd;
			}
			return 0;
		};
		 /**  UIOpen表对应ID */
		 AchieveTypeBaseCfgData.getUIOpenIDByAchieveType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};

	return AchieveTypeBaseCfgData
}());
	
cfg.AchieveTypeBaseCfgData = AchieveTypeBaseCfgData;
var AchieveFactionLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveFactionLivenessBaseCfgData () {
	}
	AchieveFactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveFactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveFactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveFactionLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveFactionLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  重置类型 */
		 AchieveFactionLivenessBaseCfgData.getAchiveResetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achiveResetType;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveFactionLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  增加活跃度 */
		 AchieveFactionLivenessBaseCfgData.getAddLivenessByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addLiveness;
			}
			return 0;
		};

	return AchieveFactionLivenessBaseCfgData
}());
	
cfg.AchieveFactionLivenessBaseCfgData = AchieveFactionLivenessBaseCfgData;
var AchieveLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessBaseCfgData () {
	}
	AchieveLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessBaseCfgData
}());
	
cfg.AchieveLivenessBaseCfgData = AchieveLivenessBaseCfgData;
var AchieveFactionLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveFactionLivenessBaseCfgData () {
	}
	AchieveFactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveFactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveFactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveFactionLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveFactionLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  重置类型 */
		 AchieveFactionLivenessBaseCfgData.getAchiveResetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achiveResetType;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveFactionLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveFactionLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  增加活跃度 */
		 AchieveFactionLivenessBaseCfgData.getAddLivenessByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addLiveness;
			}
			return 0;
		};

	return AchieveFactionLivenessBaseCfgData
}());
	
cfg.AchieveFactionLivenessBaseCfgData = AchieveFactionLivenessBaseCfgData;
var AchieveLivenessBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessBaseCfgData () {
	}
	AchieveLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveLivenessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveLivenessBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  成就类型 */
		 AchieveLivenessBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveLivenessBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveLivenessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveLivenessBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessBaseCfgData
}());
	
cfg.AchieveLivenessBaseCfgData = AchieveLivenessBaseCfgData;
var AchieveLivenessPrizeBaseCfgData  = /** @class */ (function () {
	function AchieveLivenessPrizeBaseCfgData () {
	}
	AchieveLivenessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveLivenessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveLivenessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 AchieveLivenessPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要活跃度 */
		 AchieveLivenessPrizeBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 AchieveLivenessPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return AchieveLivenessPrizeBaseCfgData
}());
	
cfg.AchieveLivenessPrizeBaseCfgData = AchieveLivenessPrizeBaseCfgData;
var AchieveMainAchieveBaseCfgData  = /** @class */ (function () {
	function AchieveMainAchieveBaseCfgData () {
	}
	AchieveMainAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	AchieveMainAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		AchieveMainAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  成就ID */
		 AchieveMainAchieveBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  成就大类型1; //主线成就2; //每日活跃3; //公会成就4; //图腾成就 */
		 AchieveMainAchieveBaseCfgData.getAchieveBigTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveBigType;
			}
			return 0;
		};
		 /**  名称 */
		 AchieveMainAchieveBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  等级 */
		 AchieveMainAchieveBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  成就类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 AchieveMainAchieveBaseCfgData.getAchieveSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 AchieveMainAchieveBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 AchieveMainAchieveBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  奖励道具 */
		 AchieveMainAchieveBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  后置成就ID */
		 AchieveMainAchieveBaseCfgData.getNextIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nextID;
			}
			return 0;
		};
		 /**  分组起始ID */
		 AchieveMainAchieveBaseCfgData.getGroupFirstIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupFirstId;
			}
			return 0;
		};

	return AchieveMainAchieveBaseCfgData
}());
	
cfg.AchieveMainAchieveBaseCfgData = AchieveMainAchieveBaseCfgData;
var ActivityExchangeBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeBaseCfgData () {
	}
	ActivityExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  特殊道具需求 */
		 ActivityExchangeBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  是否显示超值 */
		 ActivityExchangeBaseCfgData.getShowBargainByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showBargain;
			}
			return 0;
		};
		 /**  消耗道具 */
		 ActivityExchangeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  消耗精灵 */
		 ActivityExchangeBaseCfgData.getNeedPetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPet;
			}
			return ""
		};

	return ActivityExchangeBaseCfgData
}());
	
cfg.ActivityExchangeBaseCfgData = ActivityExchangeBaseCfgData;
var ActivityShortTermGiftBaseCfgData  = /** @class */ (function () {
	function ActivityShortTermGiftBaseCfgData () {
	}
	ActivityShortTermGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityShortTermGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityShortTermGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityShortTermGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityShortTermGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityShortTermGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};
		 /**  触发类型 */
		 ActivityShortTermGiftBaseCfgData.getTriggerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trigger;
			}
			return 0;
		};
		 /**  触发参数 */
		 ActivityShortTermGiftBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  持续时间(分钟) */
		 ActivityShortTermGiftBaseCfgData.getDurationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  页签按钮文字 */
		 ActivityShortTermGiftBaseCfgData.getTabNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabName;
			}
			return ""
		};
		 /**  显示返利比例 */
		 ActivityShortTermGiftBaseCfgData.getRebateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebate;
			}
			return 0;
		};
		 /**  描述文字 */
		 ActivityShortTermGiftBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityShortTermGiftBaseCfgData
}());
	
cfg.ActivityShortTermGiftBaseCfgData = ActivityShortTermGiftBaseCfgData;
var ActivityCommonGroupPageBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupPageBaseCfgData () {
	}
	ActivityCommonGroupPageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupPageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupPageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "indexID");
		};
		 /**  索引ID唯一索引 */
		 ActivityCommonGroupPageBaseCfgData.getIndexIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indexID;
			}
			return 0;
		};
		 /**  界面组ID填写common_group中的分组ID */
		 ActivityCommonGroupPageBaseCfgData.getGroupIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  子类型1://限购礼包类型2://充值返利类型3://连冲活动类型4：//心愿抽卡5：//成就之路6：//胡帕抽卡7：//进化抽卡8：//小游戏兑换9：//兑换商店10：//定制礼包11://专属英雄12://兑换（多兑一）13：//限时挑战（活动boss） */
		 ActivityCommonGroupPageBaseCfgData.getTypeByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关联的活动列表 */
		 ActivityCommonGroupPageBaseCfgData.getActivityIdsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityIds;
			}
			return ""
		};
		 /**  切页图标 */
		 ActivityCommonGroupPageBaseCfgData.getPageIconByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageIcon;
			}
			return ""
		};
		 /**  切页名称填写切页名称 */
		 ActivityCommonGroupPageBaseCfgData.getPageNameByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageName;
			}
			return ""
		};
		 /**  banner图填写banner图名称，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  banner上的文字提示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bannerTips;
			}
			return ""
		};
		 /**  帮助描述信息帮助信息文本，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getHelpTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.helpTips;
			}
			return ""
		};

	return ActivityCommonGroupPageBaseCfgData
}());
	
cfg.ActivityCommonGroupPageBaseCfgData = ActivityCommonGroupPageBaseCfgData;
var ActivityCommonGroupBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupBaseCfgData () {
	}
	ActivityCommonGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  界面组ID */
		 ActivityCommonGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示7:6.1活动组8：端午活动组 */
		 ActivityCommonGroupBaseCfgData.getMainPositionTypeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  是否在挂机界面显示 */
		 ActivityCommonGroupBaseCfgData.getHookShowByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookShow;
			}
			return 0;
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCommonGroupBaseCfgData.getMainIconByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCommonGroupBaseCfgData.getMainEffByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};
		 /**  是否是合服活动 */
		 ActivityCommonGroupBaseCfgData.getIsMergeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityCommonGroupBaseCfgData
}());
	
cfg.ActivityCommonGroupBaseCfgData = ActivityCommonGroupBaseCfgData;
var ActivityWarOrderLevelBaseCfgData  = /** @class */ (function () {
	function ActivityWarOrderLevelBaseCfgData () {
	}
	ActivityWarOrderLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWarOrderLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWarOrderLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityWarOrderLevelBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级 */
		 ActivityWarOrderLevelBaseCfgData.getLevelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级所需积分 */
		 ActivityWarOrderLevelBaseCfgData.getScoreByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddSpecialItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpecialItem;
			}
			return ""
		};

	return ActivityWarOrderLevelBaseCfgData
}());
	
cfg.ActivityWarOrderLevelBaseCfgData = ActivityWarOrderLevelBaseCfgData;
var ActivityWarOrderLevelBaseCfgData  = /** @class */ (function () {
	function ActivityWarOrderLevelBaseCfgData () {
	}
	ActivityWarOrderLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWarOrderLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWarOrderLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityWarOrderLevelBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级 */
		 ActivityWarOrderLevelBaseCfgData.getLevelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级所需积分 */
		 ActivityWarOrderLevelBaseCfgData.getScoreByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddSpecialItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpecialItem;
			}
			return ""
		};

	return ActivityWarOrderLevelBaseCfgData
}());
	
cfg.ActivityWarOrderLevelBaseCfgData = ActivityWarOrderLevelBaseCfgData;
var ActivityRewardPoolBaseCfgData  = /** @class */ (function () {
	function ActivityRewardPoolBaseCfgData () {
	}
	ActivityRewardPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRewardPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRewardPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRewardPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机池 */
		 ActivityRewardPoolBaseCfgData.getPoolTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolType;
			}
			return 0;
		};
		 /**  权重 */
		 ActivityRewardPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 ActivityRewardPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityRewardPoolBaseCfgData
}());
	
cfg.ActivityRewardPoolBaseCfgData = ActivityRewardPoolBaseCfgData;
var ActivityRedEnvelopeBaseCfgData  = /** @class */ (function () {
	function ActivityRedEnvelopeBaseCfgData () {
	}
	ActivityRedEnvelopeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRedEnvelopeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRedEnvelopeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRedEnvelopeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID（暂定） */
		 ActivityRedEnvelopeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityRedEnvelopeBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  红包角色图 */
		 ActivityRedEnvelopeBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  红包类型（2每天重置） */
		 ActivityRedEnvelopeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  领取时间 */
		 ActivityRedEnvelopeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return ""
		};
		 /**  打开红包描述 */
		 ActivityRedEnvelopeBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityRedEnvelopeBaseCfgData
}());
	
cfg.ActivityRedEnvelopeBaseCfgData = ActivityRedEnvelopeBaseCfgData;
var ActivityExchangeExBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeExBaseCfgData () {
	}
	ActivityExchangeExBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeExBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeExBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeExBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeExBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  兑换物品/精灵 */
		 ActivityExchangeExBaseCfgData.getFromItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fromItemID;
			}
			return 0;
		};
		 /**  数量 */
		 ActivityExchangeExBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  消耗类型(1=道具，2=精灵) */
		 ActivityExchangeExBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeExBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeExBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ActivityExchangeExBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityExchangeExBaseCfgData
}());
	
cfg.ActivityExchangeExBaseCfgData = ActivityExchangeExBaseCfgData;
var ActivityLimitDayGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitDayGiftBaseCfgData () {
	}
	ActivityLimitDayGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitDayGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitDayGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityLimitDayGiftBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityLimitDayGiftBaseCfgData.getNameByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityLimitDayGiftBaseCfgData.getDayByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  礼包列表 */
		 ActivityLimitDayGiftBaseCfgData.getGiftsByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gifts;
			}
			return ""
		};
		 /**  一键购买礼包id */
		 ActivityLimitDayGiftBaseCfgData.getQuickbuyByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quickbuy;
			}
			return 0;
		};
		 /**  折扣 */
		 ActivityLimitDayGiftBaseCfgData.getDiscountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityLimitDayGiftBaseCfgData
}());
	
cfg.ActivityLimitDayGiftBaseCfgData = ActivityLimitDayGiftBaseCfgData;
var ActivityAchieveRoadBaseCfgData  = /** @class */ (function () {
	function ActivityAchieveRoadBaseCfgData () {
	}
	ActivityAchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchieveRoadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchieveRoadBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchieveRoadBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchieveRoadBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchieveRoadBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(对应成就表内achieve_road) */
		 ActivityAchieveRoadBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchieveRoadBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchieveRoadBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchieveRoadBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchieveRoadBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchieveRoadBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchieveRoadBaseCfgData
}());
	
cfg.ActivityAchieveRoadBaseCfgData = ActivityAchieveRoadBaseCfgData;
var ActivityCommonGroupBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupBaseCfgData () {
	}
	ActivityCommonGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  界面组ID */
		 ActivityCommonGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示7:6.1活动组8：端午活动组 */
		 ActivityCommonGroupBaseCfgData.getMainPositionTypeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  是否在挂机界面显示 */
		 ActivityCommonGroupBaseCfgData.getHookShowByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookShow;
			}
			return 0;
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCommonGroupBaseCfgData.getMainIconByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCommonGroupBaseCfgData.getMainEffByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};
		 /**  是否是合服活动 */
		 ActivityCommonGroupBaseCfgData.getIsMergeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityCommonGroupBaseCfgData
}());
	
cfg.ActivityCommonGroupBaseCfgData = ActivityCommonGroupBaseCfgData;
var ActivityCommonGroupPageBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupPageBaseCfgData () {
	}
	ActivityCommonGroupPageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupPageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupPageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "indexID");
		};
		 /**  索引ID唯一索引 */
		 ActivityCommonGroupPageBaseCfgData.getIndexIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indexID;
			}
			return 0;
		};
		 /**  界面组ID填写common_group中的分组ID */
		 ActivityCommonGroupPageBaseCfgData.getGroupIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  子类型1://限购礼包类型2://充值返利类型3://连冲活动类型4：//心愿抽卡5：//成就之路6：//胡帕抽卡7：//进化抽卡8：//小游戏兑换9：//兑换商店10：//定制礼包11://专属英雄12://兑换（多兑一）13：//限时挑战（活动boss） */
		 ActivityCommonGroupPageBaseCfgData.getTypeByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关联的活动列表 */
		 ActivityCommonGroupPageBaseCfgData.getActivityIdsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityIds;
			}
			return ""
		};
		 /**  切页图标 */
		 ActivityCommonGroupPageBaseCfgData.getPageIconByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageIcon;
			}
			return ""
		};
		 /**  切页名称填写切页名称 */
		 ActivityCommonGroupPageBaseCfgData.getPageNameByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageName;
			}
			return ""
		};
		 /**  banner图填写banner图名称，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  banner上的文字提示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bannerTips;
			}
			return ""
		};
		 /**  帮助描述信息帮助信息文本，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getHelpTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.helpTips;
			}
			return ""
		};

	return ActivityCommonGroupPageBaseCfgData
}());
	
cfg.ActivityCommonGroupPageBaseCfgData = ActivityCommonGroupPageBaseCfgData;
var ActivityBaseCfgData  = /** @class */ (function () {
	function ActivityBaseCfgData () {
	}
	ActivityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  活动ID */
		 ActivityBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动类型 */
		 ActivityBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  选项(选项类型后跟参数用_隔开，多个选项用;号隔开) */
		 ActivityBaseCfgData.getOptionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option;
			}
			return ""
		};
		 /**  组id(组id相同互斥) */
		 ActivityBaseCfgData.getGroupIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupId;
			}
			return 0;
		};
		 /**  子类型 */
		 ActivityBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  配置失效时间 */
		 ActivityBaseCfgData.getInvalidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalidTime;
			}
			return 0;
		};
		 /**  生效时间 */
		 ActivityBaseCfgData.getValidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.validTime;
			}
			return 0;
		};
		 /**  开启时间 */
		 ActivityBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  重置时间 */
		 ActivityBaseCfgData.getRefreshTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshTime;
			}
			return ""
		};
		 /**  参数 */
		 ActivityBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  开启状态 */
		 ActivityBaseCfgData.getOpenStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openState;
			}
			return 0;
		};
		 /**  榜单类型 */
		 ActivityBaseCfgData.getTopListTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListType;
			}
			return 0;
		};
		 /**  活动参数 */
		 ActivityBaseCfgData.getIsMergeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityBaseCfgData
}());
	
cfg.ActivityBaseCfgData = ActivityBaseCfgData;
var ActivityChargeAmountBaseCfgData  = /** @class */ (function () {
	function ActivityChargeAmountBaseCfgData () {
	}
	ActivityChargeAmountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeAmountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeAmountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeAmountBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeAmountBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计金额 */
		 ActivityChargeAmountBaseCfgData.getChargeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeAmountBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeAmountBaseCfgData
}());
	
cfg.ActivityChargeAmountBaseCfgData = ActivityChargeAmountBaseCfgData;
var ActivityChargeDaysBaseCfgData  = /** @class */ (function () {
	function ActivityChargeDaysBaseCfgData () {
	}
	ActivityChargeDaysBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeDaysBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeDaysBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeDaysBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeDaysBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计天数 */
		 ActivityChargeDaysBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeDaysBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeDaysBaseCfgData
}());
	
cfg.ActivityChargeDaysBaseCfgData = ActivityChargeDaysBaseCfgData;
var ActivityLevelupBaseCfgData  = /** @class */ (function () {
	function ActivityLevelupBaseCfgData () {
	}
	ActivityLevelupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLevelupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLevelupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLevelupBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLevelupBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityLevelupBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityLevelupBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  数量 */
		 ActivityLevelupBaseCfgData.getNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.num;
			}
			return 0;
		};

	return ActivityLevelupBaseCfgData
}());
	
cfg.ActivityLevelupBaseCfgData = ActivityLevelupBaseCfgData;
var ActivityTimesBaseCfgData  = /** @class */ (function () {
	function ActivityTimesBaseCfgData () {
	}
	ActivityTimesBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityTimesBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityTimesBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityTimesBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityTimesBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  次数需求 */
		 ActivityTimesBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityTimesBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityTimesBaseCfgData
}());
	
cfg.ActivityTimesBaseCfgData = ActivityTimesBaseCfgData;
var ActivityFirstChargeBaseCfgData  = /** @class */ (function () {
	function ActivityFirstChargeBaseCfgData () {
	}
	ActivityFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFirstChargeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFirstChargeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值金额 */
		 ActivityFirstChargeBaseCfgData.getAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.amount;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFirstChargeBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFirstChargeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFirstChargeBaseCfgData
}());
	
cfg.ActivityFirstChargeBaseCfgData = ActivityFirstChargeBaseCfgData;
var ActivityWeekendBaseCfgData  = /** @class */ (function () {
	function ActivityWeekendBaseCfgData () {
	}
	ActivityWeekendBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWeekendBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWeekendBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityWeekendBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityWeekendBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  周几（周日0） */
		 ActivityWeekendBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWeekendBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityWeekendBaseCfgData
}());
	
cfg.ActivityWeekendBaseCfgData = ActivityWeekendBaseCfgData;
var ActivityLimitGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitGiftBaseCfgData () {
	}
	ActivityLimitGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLimitGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLimitGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  全服限购 */
		 ActivityLimitGiftBaseCfgData.getAllCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.allCount;
			}
			return 0;
		};
		 /**  每人限购 */
		 ActivityLimitGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  单人限购刷新天数 */
		 ActivityLimitGiftBaseCfgData.getRefreshDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshDay;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityLimitGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};

	return ActivityLimitGiftBaseCfgData
}());
	
cfg.ActivityLimitGiftBaseCfgData = ActivityLimitGiftBaseCfgData;
var ActivityZeroBuyBaseCfgData  = /** @class */ (function () {
	function ActivityZeroBuyBaseCfgData () {
	}
	ActivityZeroBuyBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityZeroBuyBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityZeroBuyBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityZeroBuyBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityZeroBuyBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要等级 */
		 ActivityZeroBuyBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要VIP */
		 ActivityZeroBuyBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  开服天数 */
		 ActivityZeroBuyBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  返还天数 */
		 ActivityZeroBuyBaseCfgData.getReturnDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnDay;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityZeroBuyBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityZeroBuyBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  礼包图标 */
		 ActivityZeroBuyBaseCfgData.getTabIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabIcon;
			}
			return ""
		};
		 /**  名字 */
		 ActivityZeroBuyBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  banner图 */
		 ActivityZeroBuyBaseCfgData.getBannerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  总入口图标配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getMainIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  界面标题图片配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getTitleIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.titleIcon;
			}
			return ""
		};

	return ActivityZeroBuyBaseCfgData
}());
	
cfg.ActivityZeroBuyBaseCfgData = ActivityZeroBuyBaseCfgData;
var ActivityRankBaseCfgData  = /** @class */ (function () {
	function ActivityRankBaseCfgData () {
	}
	ActivityRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRankBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityRankBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityRankBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityRankBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  个数 */
		 ActivityRankBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return ActivityRankBaseCfgData
}());
	
cfg.ActivityRankBaseCfgData = ActivityRankBaseCfgData;
var ActivityGrowFundBaseCfgData  = /** @class */ (function () {
	function ActivityGrowFundBaseCfgData () {
	}
	ActivityGrowFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityGrowFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityGrowFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityGrowFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityGrowFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityGrowFundBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityGrowFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityGrowFundBaseCfgData
}());
	
cfg.ActivityGrowFundBaseCfgData = ActivityGrowFundBaseCfgData;
var ActivityAchievementBaseCfgData  = /** @class */ (function () {
	function ActivityAchievementBaseCfgData () {
	}
	ActivityAchievementBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchievementBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchievementBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchievementBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchievementBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchievementBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchievementBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchievementBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(成就ID不为0的要花钻石买) */
		 ActivityAchievementBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchievementBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchievementBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchievementBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchievementBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchievementBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchievementBaseCfgData
}());
	
cfg.ActivityAchievementBaseCfgData = ActivityAchievementBaseCfgData;
var ActivityFundBaseCfgData  = /** @class */ (function () {
	function ActivityFundBaseCfgData () {
	}
	ActivityFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFundBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  是否加入首页预览 */
		 ActivityFundBaseCfgData.getIsPreviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isPreview;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFundBaseCfgData
}());
	
cfg.ActivityFundBaseCfgData = ActivityFundBaseCfgData;
var ActivityRankBaseCfgData  = /** @class */ (function () {
	function ActivityRankBaseCfgData () {
	}
	ActivityRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRankBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityRankBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityRankBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityRankBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  个数 */
		 ActivityRankBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return ActivityRankBaseCfgData
}());
	
cfg.ActivityRankBaseCfgData = ActivityRankBaseCfgData;
var ActivityZeroBuyBaseCfgData  = /** @class */ (function () {
	function ActivityZeroBuyBaseCfgData () {
	}
	ActivityZeroBuyBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityZeroBuyBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityZeroBuyBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityZeroBuyBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityZeroBuyBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要等级 */
		 ActivityZeroBuyBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要VIP */
		 ActivityZeroBuyBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  开服天数 */
		 ActivityZeroBuyBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  返还天数 */
		 ActivityZeroBuyBaseCfgData.getReturnDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnDay;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityZeroBuyBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityZeroBuyBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  礼包图标 */
		 ActivityZeroBuyBaseCfgData.getTabIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabIcon;
			}
			return ""
		};
		 /**  名字 */
		 ActivityZeroBuyBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  banner图 */
		 ActivityZeroBuyBaseCfgData.getBannerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  总入口图标配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getMainIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  界面标题图片配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getTitleIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.titleIcon;
			}
			return ""
		};

	return ActivityZeroBuyBaseCfgData
}());
	
cfg.ActivityZeroBuyBaseCfgData = ActivityZeroBuyBaseCfgData;
var ActivityExchangeBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeBaseCfgData () {
	}
	ActivityExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  特殊道具需求 */
		 ActivityExchangeBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  是否显示超值 */
		 ActivityExchangeBaseCfgData.getShowBargainByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showBargain;
			}
			return 0;
		};
		 /**  消耗道具 */
		 ActivityExchangeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  消耗精灵 */
		 ActivityExchangeBaseCfgData.getNeedPetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPet;
			}
			return ""
		};

	return ActivityExchangeBaseCfgData
}());
	
cfg.ActivityExchangeBaseCfgData = ActivityExchangeBaseCfgData;
var ActivityLoginBaseCfgData  = /** @class */ (function () {
	function ActivityLoginBaseCfgData () {
	}
	ActivityLoginBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLoginBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLoginBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLoginBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLoginBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityLoginBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityLoginBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityLoginBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字提示 */
		 ActivityLoginBaseCfgData.getButtonTipsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonTips;
			}
			return ""
		};

	return ActivityLoginBaseCfgData
}());
	
cfg.ActivityLoginBaseCfgData = ActivityLoginBaseCfgData;
var ActivityFundBaseCfgData  = /** @class */ (function () {
	function ActivityFundBaseCfgData () {
	}
	ActivityFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFundBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  是否加入首页预览 */
		 ActivityFundBaseCfgData.getIsPreviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isPreview;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFundBaseCfgData
}());
	
cfg.ActivityFundBaseCfgData = ActivityFundBaseCfgData;
var ActivityAchievementBaseCfgData  = /** @class */ (function () {
	function ActivityAchievementBaseCfgData () {
	}
	ActivityAchievementBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchievementBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchievementBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchievementBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchievementBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchievementBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchievementBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchievementBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(成就ID不为0的要花钻石买) */
		 ActivityAchievementBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchievementBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchievementBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchievementBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchievementBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchievementBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchievementBaseCfgData
}());
	
cfg.ActivityAchievementBaseCfgData = ActivityAchievementBaseCfgData;
var ActivityBaseCfgData  = /** @class */ (function () {
	function ActivityBaseCfgData () {
	}
	ActivityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  活动ID */
		 ActivityBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动类型 */
		 ActivityBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  选项(选项类型后跟参数用_隔开，多个选项用;号隔开) */
		 ActivityBaseCfgData.getOptionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option;
			}
			return ""
		};
		 /**  组id(组id相同互斥) */
		 ActivityBaseCfgData.getGroupIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupId;
			}
			return 0;
		};
		 /**  子类型 */
		 ActivityBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  配置失效时间 */
		 ActivityBaseCfgData.getInvalidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalidTime;
			}
			return 0;
		};
		 /**  生效时间 */
		 ActivityBaseCfgData.getValidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.validTime;
			}
			return 0;
		};
		 /**  开启时间 */
		 ActivityBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  重置时间 */
		 ActivityBaseCfgData.getRefreshTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshTime;
			}
			return ""
		};
		 /**  参数 */
		 ActivityBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  开启状态 */
		 ActivityBaseCfgData.getOpenStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openState;
			}
			return 0;
		};
		 /**  榜单类型 */
		 ActivityBaseCfgData.getTopListTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListType;
			}
			return 0;
		};
		 /**  活动参数 */
		 ActivityBaseCfgData.getIsMergeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityBaseCfgData
}());
	
cfg.ActivityBaseCfgData = ActivityBaseCfgData;
var ActivityLimitGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitGiftBaseCfgData () {
	}
	ActivityLimitGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLimitGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLimitGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  全服限购 */
		 ActivityLimitGiftBaseCfgData.getAllCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.allCount;
			}
			return 0;
		};
		 /**  每人限购 */
		 ActivityLimitGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  单人限购刷新天数 */
		 ActivityLimitGiftBaseCfgData.getRefreshDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshDay;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityLimitGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};

	return ActivityLimitGiftBaseCfgData
}());
	
cfg.ActivityLimitGiftBaseCfgData = ActivityLimitGiftBaseCfgData;
var ActivityWarOrderLevelBaseCfgData  = /** @class */ (function () {
	function ActivityWarOrderLevelBaseCfgData () {
	}
	ActivityWarOrderLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWarOrderLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWarOrderLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityWarOrderLevelBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级 */
		 ActivityWarOrderLevelBaseCfgData.getLevelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级所需积分 */
		 ActivityWarOrderLevelBaseCfgData.getScoreByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  进阶奖励物品 */
		 ActivityWarOrderLevelBaseCfgData.getAddSpecialItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpecialItem;
			}
			return ""
		};

	return ActivityWarOrderLevelBaseCfgData
}());
	
cfg.ActivityWarOrderLevelBaseCfgData = ActivityWarOrderLevelBaseCfgData;
var ActivityShortTermGiftBaseCfgData  = /** @class */ (function () {
	function ActivityShortTermGiftBaseCfgData () {
	}
	ActivityShortTermGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityShortTermGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityShortTermGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityShortTermGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityShortTermGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityShortTermGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};
		 /**  触发类型 */
		 ActivityShortTermGiftBaseCfgData.getTriggerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trigger;
			}
			return 0;
		};
		 /**  触发参数 */
		 ActivityShortTermGiftBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  持续时间(分钟) */
		 ActivityShortTermGiftBaseCfgData.getDurationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  页签按钮文字 */
		 ActivityShortTermGiftBaseCfgData.getTabNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabName;
			}
			return ""
		};
		 /**  显示返利比例 */
		 ActivityShortTermGiftBaseCfgData.getRebateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebate;
			}
			return 0;
		};
		 /**  描述文字 */
		 ActivityShortTermGiftBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityShortTermGiftBaseCfgData
}());
	
cfg.ActivityShortTermGiftBaseCfgData = ActivityShortTermGiftBaseCfgData;
var ActivityLoginBaseCfgData  = /** @class */ (function () {
	function ActivityLoginBaseCfgData () {
	}
	ActivityLoginBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLoginBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLoginBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLoginBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLoginBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityLoginBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityLoginBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityLoginBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字提示 */
		 ActivityLoginBaseCfgData.getButtonTipsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonTips;
			}
			return ""
		};

	return ActivityLoginBaseCfgData
}());
	
cfg.ActivityLoginBaseCfgData = ActivityLoginBaseCfgData;
var ActivityExchangeExBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeExBaseCfgData () {
	}
	ActivityExchangeExBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeExBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeExBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeExBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeExBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  兑换物品/精灵 */
		 ActivityExchangeExBaseCfgData.getFromItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fromItemID;
			}
			return 0;
		};
		 /**  数量 */
		 ActivityExchangeExBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  消耗类型(1=道具，2=精灵) */
		 ActivityExchangeExBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeExBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeExBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ActivityExchangeExBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityExchangeExBaseCfgData
}());
	
cfg.ActivityExchangeExBaseCfgData = ActivityExchangeExBaseCfgData;
var ActivityCommonGroupPageBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupPageBaseCfgData () {
	}
	ActivityCommonGroupPageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupPageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupPageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "indexID");
		};
		 /**  索引ID唯一索引 */
		 ActivityCommonGroupPageBaseCfgData.getIndexIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indexID;
			}
			return 0;
		};
		 /**  界面组ID填写common_group中的分组ID */
		 ActivityCommonGroupPageBaseCfgData.getGroupIDByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  子类型1://限购礼包类型2://充值返利类型3://连冲活动类型4：//心愿抽卡5：//成就之路6：//胡帕抽卡7：//进化抽卡8：//小游戏兑换9：//兑换商店10：//定制礼包11://专属英雄12://兑换（多兑一）13：//限时挑战（活动boss） */
		 ActivityCommonGroupPageBaseCfgData.getTypeByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关联的活动列表 */
		 ActivityCommonGroupPageBaseCfgData.getActivityIdsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityIds;
			}
			return ""
		};
		 /**  切页图标 */
		 ActivityCommonGroupPageBaseCfgData.getPageIconByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageIcon;
			}
			return ""
		};
		 /**  切页名称填写切页名称 */
		 ActivityCommonGroupPageBaseCfgData.getPageNameByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pageName;
			}
			return ""
		};
		 /**  banner图填写banner图名称，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  banner上的文字提示 */
		 ActivityCommonGroupPageBaseCfgData.getBannerTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bannerTips;
			}
			return ""
		};
		 /**  帮助描述信息帮助信息文本，不配不显示 */
		 ActivityCommonGroupPageBaseCfgData.getHelpTipsByIndexID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.helpTips;
			}
			return ""
		};

	return ActivityCommonGroupPageBaseCfgData
}());
	
cfg.ActivityCommonGroupPageBaseCfgData = ActivityCommonGroupPageBaseCfgData;
var ActivityCommonGroupBaseCfgData  = /** @class */ (function () {
	function ActivityCommonGroupBaseCfgData () {
	}
	ActivityCommonGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCommonGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCommonGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  界面组ID */
		 ActivityCommonGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示7:6.1活动组8：端午活动组 */
		 ActivityCommonGroupBaseCfgData.getMainPositionTypeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  是否在挂机界面显示 */
		 ActivityCommonGroupBaseCfgData.getHookShowByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookShow;
			}
			return 0;
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCommonGroupBaseCfgData.getMainIconByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCommonGroupBaseCfgData.getMainEffByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};
		 /**  是否是合服活动 */
		 ActivityCommonGroupBaseCfgData.getIsMergeByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityCommonGroupBaseCfgData
}());
	
cfg.ActivityCommonGroupBaseCfgData = ActivityCommonGroupBaseCfgData;
var ActivityRewardPoolBaseCfgData  = /** @class */ (function () {
	function ActivityRewardPoolBaseCfgData () {
	}
	ActivityRewardPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRewardPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRewardPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRewardPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机池 */
		 ActivityRewardPoolBaseCfgData.getPoolTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolType;
			}
			return 0;
		};
		 /**  权重 */
		 ActivityRewardPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 ActivityRewardPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityRewardPoolBaseCfgData
}());
	
cfg.ActivityRewardPoolBaseCfgData = ActivityRewardPoolBaseCfgData;
var ActivityRedEnvelopeBaseCfgData  = /** @class */ (function () {
	function ActivityRedEnvelopeBaseCfgData () {
	}
	ActivityRedEnvelopeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRedEnvelopeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRedEnvelopeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRedEnvelopeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID（暂定） */
		 ActivityRedEnvelopeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityRedEnvelopeBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  红包角色图 */
		 ActivityRedEnvelopeBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  红包类型（2每天重置） */
		 ActivityRedEnvelopeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  领取时间 */
		 ActivityRedEnvelopeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return ""
		};
		 /**  打开红包描述 */
		 ActivityRedEnvelopeBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityRedEnvelopeBaseCfgData
}());
	
cfg.ActivityRedEnvelopeBaseCfgData = ActivityRedEnvelopeBaseCfgData;
var ActivityExchangeExBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeExBaseCfgData () {
	}
	ActivityExchangeExBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeExBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeExBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeExBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeExBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  兑换物品/精灵 */
		 ActivityExchangeExBaseCfgData.getFromItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fromItemID;
			}
			return 0;
		};
		 /**  数量 */
		 ActivityExchangeExBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  消耗类型(1=道具，2=精灵) */
		 ActivityExchangeExBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeExBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeExBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ActivityExchangeExBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityExchangeExBaseCfgData
}());
	
cfg.ActivityExchangeExBaseCfgData = ActivityExchangeExBaseCfgData;
var ActivityLimitDayGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitDayGiftBaseCfgData () {
	}
	ActivityLimitDayGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitDayGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitDayGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityLimitDayGiftBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityLimitDayGiftBaseCfgData.getNameByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityLimitDayGiftBaseCfgData.getDayByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  礼包列表 */
		 ActivityLimitDayGiftBaseCfgData.getGiftsByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gifts;
			}
			return ""
		};
		 /**  一键购买礼包id */
		 ActivityLimitDayGiftBaseCfgData.getQuickbuyByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quickbuy;
			}
			return 0;
		};
		 /**  折扣 */
		 ActivityLimitDayGiftBaseCfgData.getDiscountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityLimitDayGiftBaseCfgData
}());
	
cfg.ActivityLimitDayGiftBaseCfgData = ActivityLimitDayGiftBaseCfgData;
var ActivityAchieveRoadBaseCfgData  = /** @class */ (function () {
	function ActivityAchieveRoadBaseCfgData () {
	}
	ActivityAchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchieveRoadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchieveRoadBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchieveRoadBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchieveRoadBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchieveRoadBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(对应成就表内achieve_road) */
		 ActivityAchieveRoadBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchieveRoadBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchieveRoadBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchieveRoadBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchieveRoadBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchieveRoadBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchieveRoadBaseCfgData
}());
	
cfg.ActivityAchieveRoadBaseCfgData = ActivityAchieveRoadBaseCfgData;
var ActivityWeekendBaseCfgData  = /** @class */ (function () {
	function ActivityWeekendBaseCfgData () {
	}
	ActivityWeekendBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWeekendBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWeekendBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityWeekendBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityWeekendBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  周几（周日0） */
		 ActivityWeekendBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWeekendBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityWeekendBaseCfgData
}());
	
cfg.ActivityWeekendBaseCfgData = ActivityWeekendBaseCfgData;
var ActivityLimitGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitGiftBaseCfgData () {
	}
	ActivityLimitGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLimitGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLimitGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  全服限购 */
		 ActivityLimitGiftBaseCfgData.getAllCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.allCount;
			}
			return 0;
		};
		 /**  每人限购 */
		 ActivityLimitGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  单人限购刷新天数 */
		 ActivityLimitGiftBaseCfgData.getRefreshDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshDay;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityLimitGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};

	return ActivityLimitGiftBaseCfgData
}());
	
cfg.ActivityLimitGiftBaseCfgData = ActivityLimitGiftBaseCfgData;
var ActivityZeroBuyBaseCfgData  = /** @class */ (function () {
	function ActivityZeroBuyBaseCfgData () {
	}
	ActivityZeroBuyBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityZeroBuyBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityZeroBuyBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityZeroBuyBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityZeroBuyBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要等级 */
		 ActivityZeroBuyBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要VIP */
		 ActivityZeroBuyBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  开服天数 */
		 ActivityZeroBuyBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  返还天数 */
		 ActivityZeroBuyBaseCfgData.getReturnDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnDay;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityZeroBuyBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityZeroBuyBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  礼包图标 */
		 ActivityZeroBuyBaseCfgData.getTabIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabIcon;
			}
			return ""
		};
		 /**  名字 */
		 ActivityZeroBuyBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  banner图 */
		 ActivityZeroBuyBaseCfgData.getBannerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.banner;
			}
			return ""
		};
		 /**  总入口图标配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getMainIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  界面标题图片配置读取每个活动的第一个即可 */
		 ActivityZeroBuyBaseCfgData.getTitleIconByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.titleIcon;
			}
			return ""
		};

	return ActivityZeroBuyBaseCfgData
}());
	
cfg.ActivityZeroBuyBaseCfgData = ActivityZeroBuyBaseCfgData;
var ActivityRankBaseCfgData  = /** @class */ (function () {
	function ActivityRankBaseCfgData () {
	}
	ActivityRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRankBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityRankBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityRankBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityRankBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  个数 */
		 ActivityRankBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return ActivityRankBaseCfgData
}());
	
cfg.ActivityRankBaseCfgData = ActivityRankBaseCfgData;
var ActivityAchievementBaseCfgData  = /** @class */ (function () {
	function ActivityAchievementBaseCfgData () {
	}
	ActivityAchievementBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchievementBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchievementBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchievementBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchievementBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchievementBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchievementBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchievementBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(成就ID不为0的要花钻石买) */
		 ActivityAchievementBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchievementBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchievementBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchievementBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchievementBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchievementBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchievementBaseCfgData
}());
	
cfg.ActivityAchievementBaseCfgData = ActivityAchievementBaseCfgData;
var ActivityShortTermGiftBaseCfgData  = /** @class */ (function () {
	function ActivityShortTermGiftBaseCfgData () {
	}
	ActivityShortTermGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityShortTermGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityShortTermGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityShortTermGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityShortTermGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  商品ID */
		 ActivityShortTermGiftBaseCfgData.getProductIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.productID;
			}
			return 0;
		};
		 /**  触发类型 */
		 ActivityShortTermGiftBaseCfgData.getTriggerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trigger;
			}
			return 0;
		};
		 /**  触发参数 */
		 ActivityShortTermGiftBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  持续时间(分钟) */
		 ActivityShortTermGiftBaseCfgData.getDurationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  页签按钮文字 */
		 ActivityShortTermGiftBaseCfgData.getTabNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tabName;
			}
			return ""
		};
		 /**  显示返利比例 */
		 ActivityShortTermGiftBaseCfgData.getRebateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebate;
			}
			return 0;
		};
		 /**  描述文字 */
		 ActivityShortTermGiftBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityShortTermGiftBaseCfgData
}());
	
cfg.ActivityShortTermGiftBaseCfgData = ActivityShortTermGiftBaseCfgData;
var ActivityChargeAmountBaseCfgData  = /** @class */ (function () {
	function ActivityChargeAmountBaseCfgData () {
	}
	ActivityChargeAmountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeAmountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeAmountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeAmountBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeAmountBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计金额 */
		 ActivityChargeAmountBaseCfgData.getChargeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeAmountBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeAmountBaseCfgData
}());
	
cfg.ActivityChargeAmountBaseCfgData = ActivityChargeAmountBaseCfgData;
var ActivityLevelupBaseCfgData  = /** @class */ (function () {
	function ActivityLevelupBaseCfgData () {
	}
	ActivityLevelupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLevelupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLevelupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLevelupBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLevelupBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityLevelupBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityLevelupBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  数量 */
		 ActivityLevelupBaseCfgData.getNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.num;
			}
			return 0;
		};

	return ActivityLevelupBaseCfgData
}());
	
cfg.ActivityLevelupBaseCfgData = ActivityLevelupBaseCfgData;
var ActivityChargeDaysBaseCfgData  = /** @class */ (function () {
	function ActivityChargeDaysBaseCfgData () {
	}
	ActivityChargeDaysBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeDaysBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeDaysBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeDaysBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeDaysBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计天数 */
		 ActivityChargeDaysBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeDaysBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeDaysBaseCfgData
}());
	
cfg.ActivityChargeDaysBaseCfgData = ActivityChargeDaysBaseCfgData;
var ActivityRedEnvelopeBaseCfgData  = /** @class */ (function () {
	function ActivityRedEnvelopeBaseCfgData () {
	}
	ActivityRedEnvelopeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRedEnvelopeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRedEnvelopeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRedEnvelopeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID（暂定） */
		 ActivityRedEnvelopeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityRedEnvelopeBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  红包角色图 */
		 ActivityRedEnvelopeBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  红包类型（2每天重置） */
		 ActivityRedEnvelopeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  领取时间 */
		 ActivityRedEnvelopeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return ""
		};
		 /**  打开红包描述 */
		 ActivityRedEnvelopeBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ActivityRedEnvelopeBaseCfgData
}());
	
cfg.ActivityRedEnvelopeBaseCfgData = ActivityRedEnvelopeBaseCfgData;
var ActivityRewardPoolBaseCfgData  = /** @class */ (function () {
	function ActivityRewardPoolBaseCfgData () {
	}
	ActivityRewardPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityRewardPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityRewardPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityRewardPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机池 */
		 ActivityRewardPoolBaseCfgData.getPoolTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolType;
			}
			return 0;
		};
		 /**  权重 */
		 ActivityRewardPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 ActivityRewardPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityRewardPoolBaseCfgData
}());
	
cfg.ActivityRewardPoolBaseCfgData = ActivityRewardPoolBaseCfgData;
var ActivityBaseCfgData  = /** @class */ (function () {
	function ActivityBaseCfgData () {
	}
	ActivityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  活动ID */
		 ActivityBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动类型 */
		 ActivityBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  选项(选项类型后跟参数用_隔开，多个选项用;号隔开) */
		 ActivityBaseCfgData.getOptionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option;
			}
			return ""
		};
		 /**  组id(组id相同互斥) */
		 ActivityBaseCfgData.getGroupIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupId;
			}
			return 0;
		};
		 /**  子类型 */
		 ActivityBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  配置失效时间 */
		 ActivityBaseCfgData.getInvalidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalidTime;
			}
			return 0;
		};
		 /**  生效时间 */
		 ActivityBaseCfgData.getValidTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.validTime;
			}
			return 0;
		};
		 /**  开启时间 */
		 ActivityBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  重置时间 */
		 ActivityBaseCfgData.getRefreshTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshTime;
			}
			return ""
		};
		 /**  参数 */
		 ActivityBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  开启状态 */
		 ActivityBaseCfgData.getOpenStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openState;
			}
			return 0;
		};
		 /**  榜单类型 */
		 ActivityBaseCfgData.getTopListTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListType;
			}
			return 0;
		};
		 /**  活动参数 */
		 ActivityBaseCfgData.getIsMergeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isMerge;
			}
			return 0;
		};

	return ActivityBaseCfgData
}());
	
cfg.ActivityBaseCfgData = ActivityBaseCfgData;
var ActivityTimesBaseCfgData  = /** @class */ (function () {
	function ActivityTimesBaseCfgData () {
	}
	ActivityTimesBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityTimesBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityTimesBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityTimesBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityTimesBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  次数需求 */
		 ActivityTimesBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityTimesBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityTimesBaseCfgData
}());
	
cfg.ActivityTimesBaseCfgData = ActivityTimesBaseCfgData;
var ActivityGrowFundBaseCfgData  = /** @class */ (function () {
	function ActivityGrowFundBaseCfgData () {
	}
	ActivityGrowFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityGrowFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityGrowFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityGrowFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityGrowFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityGrowFundBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityGrowFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityGrowFundBaseCfgData
}());
	
cfg.ActivityGrowFundBaseCfgData = ActivityGrowFundBaseCfgData;
var ActivityFirstChargeBaseCfgData  = /** @class */ (function () {
	function ActivityFirstChargeBaseCfgData () {
	}
	ActivityFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFirstChargeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFirstChargeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值金额 */
		 ActivityFirstChargeBaseCfgData.getAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.amount;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFirstChargeBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFirstChargeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFirstChargeBaseCfgData
}());
	
cfg.ActivityFirstChargeBaseCfgData = ActivityFirstChargeBaseCfgData;
var ActivityExchangeBaseCfgData  = /** @class */ (function () {
	function ActivityExchangeBaseCfgData () {
	}
	ActivityExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityExchangeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityExchangeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  特殊道具需求 */
		 ActivityExchangeBaseCfgData.getNeedAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAmount;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityExchangeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  限购数量 */
		 ActivityExchangeBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  是否显示超值 */
		 ActivityExchangeBaseCfgData.getShowBargainByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showBargain;
			}
			return 0;
		};
		 /**  消耗道具 */
		 ActivityExchangeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  消耗精灵 */
		 ActivityExchangeBaseCfgData.getNeedPetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPet;
			}
			return ""
		};

	return ActivityExchangeBaseCfgData
}());
	
cfg.ActivityExchangeBaseCfgData = ActivityExchangeBaseCfgData;
var ActivityTimesBaseCfgData  = /** @class */ (function () {
	function ActivityTimesBaseCfgData () {
	}
	ActivityTimesBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityTimesBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityTimesBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityTimesBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityTimesBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  次数需求 */
		 ActivityTimesBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityTimesBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityTimesBaseCfgData
}());
	
cfg.ActivityTimesBaseCfgData = ActivityTimesBaseCfgData;
var ActivityLevelupBaseCfgData  = /** @class */ (function () {
	function ActivityLevelupBaseCfgData () {
	}
	ActivityLevelupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLevelupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLevelupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLevelupBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLevelupBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityLevelupBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityLevelupBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  数量 */
		 ActivityLevelupBaseCfgData.getNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.num;
			}
			return 0;
		};

	return ActivityLevelupBaseCfgData
}());
	
cfg.ActivityLevelupBaseCfgData = ActivityLevelupBaseCfgData;
var ActivityFirstChargeBaseCfgData  = /** @class */ (function () {
	function ActivityFirstChargeBaseCfgData () {
	}
	ActivityFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFirstChargeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFirstChargeBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值金额 */
		 ActivityFirstChargeBaseCfgData.getAmountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.amount;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFirstChargeBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFirstChargeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFirstChargeBaseCfgData
}());
	
cfg.ActivityFirstChargeBaseCfgData = ActivityFirstChargeBaseCfgData;
var ActivityChargeAmountBaseCfgData  = /** @class */ (function () {
	function ActivityChargeAmountBaseCfgData () {
	}
	ActivityChargeAmountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeAmountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeAmountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeAmountBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeAmountBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计金额 */
		 ActivityChargeAmountBaseCfgData.getChargeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeAmountBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeAmountBaseCfgData
}());
	
cfg.ActivityChargeAmountBaseCfgData = ActivityChargeAmountBaseCfgData;
var ActivityLimitDayGiftBaseCfgData  = /** @class */ (function () {
	function ActivityLimitDayGiftBaseCfgData () {
	}
	ActivityLimitDayGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLimitDayGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLimitDayGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityLimitDayGiftBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityLimitDayGiftBaseCfgData.getNameByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityLimitDayGiftBaseCfgData.getDayByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  礼包列表 */
		 ActivityLimitDayGiftBaseCfgData.getGiftsByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gifts;
			}
			return ""
		};
		 /**  一键购买礼包id */
		 ActivityLimitDayGiftBaseCfgData.getQuickbuyByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quickbuy;
			}
			return 0;
		};
		 /**  折扣 */
		 ActivityLimitDayGiftBaseCfgData.getDiscountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return ActivityLimitDayGiftBaseCfgData
}());
	
cfg.ActivityLimitDayGiftBaseCfgData = ActivityLimitDayGiftBaseCfgData;
var ActivityFundBaseCfgData  = /** @class */ (function () {
	function ActivityFundBaseCfgData () {
	}
	ActivityFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityFundBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  是否加入首页预览 */
		 ActivityFundBaseCfgData.getIsPreviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isPreview;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityFundBaseCfgData
}());
	
cfg.ActivityFundBaseCfgData = ActivityFundBaseCfgData;
var ActivityGrowFundBaseCfgData  = /** @class */ (function () {
	function ActivityGrowFundBaseCfgData () {
	}
	ActivityGrowFundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityGrowFundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityGrowFundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityGrowFundBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityGrowFundBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  等级需求 */
		 ActivityGrowFundBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityGrowFundBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityGrowFundBaseCfgData
}());
	
cfg.ActivityGrowFundBaseCfgData = ActivityGrowFundBaseCfgData;
var ActivityAchieveRoadBaseCfgData  = /** @class */ (function () {
	function ActivityAchieveRoadBaseCfgData () {
	}
	ActivityAchieveRoadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityAchieveRoadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityAchieveRoadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityAchieveRoadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityAchieveRoadBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  名称 */
		 ActivityAchieveRoadBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  天数 */
		 ActivityAchieveRoadBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  分组 */
		 ActivityAchieveRoadBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  成就ID(对应成就表内achieve_road) */
		 ActivityAchieveRoadBaseCfgData.getAchievementByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achievement;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityAchieveRoadBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 ActivityAchieveRoadBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要VIP */
		 ActivityAchieveRoadBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};
		 /**  数量限制 */
		 ActivityAchieveRoadBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  原价 */
		 ActivityAchieveRoadBaseCfgData.getOldPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};

	return ActivityAchieveRoadBaseCfgData
}());
	
cfg.ActivityAchieveRoadBaseCfgData = ActivityAchieveRoadBaseCfgData;
var ActivityWeekendBaseCfgData  = /** @class */ (function () {
	function ActivityWeekendBaseCfgData () {
	}
	ActivityWeekendBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityWeekendBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityWeekendBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityWeekendBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityWeekendBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  周几（周日0） */
		 ActivityWeekendBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励物品 */
		 ActivityWeekendBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityWeekendBaseCfgData
}());
	
cfg.ActivityWeekendBaseCfgData = ActivityWeekendBaseCfgData;
var ActivityLoginBaseCfgData  = /** @class */ (function () {
	function ActivityLoginBaseCfgData () {
	}
	ActivityLoginBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityLoginBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityLoginBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityLoginBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityLoginBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  天数 */
		 ActivityLoginBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivityLoginBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励物品 */
		 ActivityLoginBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字提示 */
		 ActivityLoginBaseCfgData.getButtonTipsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buttonTips;
			}
			return ""
		};

	return ActivityLoginBaseCfgData
}());
	
cfg.ActivityLoginBaseCfgData = ActivityLoginBaseCfgData;
var ActivityChargeDaysBaseCfgData  = /** @class */ (function () {
	function ActivityChargeDaysBaseCfgData () {
	}
	ActivityChargeDaysBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityChargeDaysBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityChargeDaysBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityChargeDaysBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityChargeDaysBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  累计天数 */
		 ActivityChargeDaysBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityChargeDaysBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityChargeDaysBaseCfgData
}());
	
cfg.ActivityChargeDaysBaseCfgData = ActivityChargeDaysBaseCfgData;
var ActivityConstantConstantBaseCfgData  = /** @class */ (function () {
	function ActivityConstantConstantBaseCfgData () {
	}
	ActivityConstantConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityConstantConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityConstantConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityConstantConstantBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  推送渠道 */
		 ActivityConstantConstantBaseCfgData.getPushChannelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};

	return ActivityConstantConstantBaseCfgData
}());
	
cfg.ActivityConstantConstantBaseCfgData = ActivityConstantConstantBaseCfgData;
var ActivityConstantConstantBaseCfgData  = /** @class */ (function () {
	function ActivityConstantConstantBaseCfgData () {
	}
	ActivityConstantConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityConstantConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityConstantConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityConstantConstantBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  推送渠道 */
		 ActivityConstantConstantBaseCfgData.getPushChannelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};

	return ActivityConstantConstantBaseCfgData
}());
	
cfg.ActivityConstantConstantBaseCfgData = ActivityConstantConstantBaseCfgData;
var ActivityConstantConstantBaseCfgData  = /** @class */ (function () {
	function ActivityConstantConstantBaseCfgData () {
	}
	ActivityConstantConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityConstantConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityConstantConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 ActivityConstantConstantBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  推送渠道 */
		 ActivityConstantConstantBaseCfgData.getPushChannelByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};

	return ActivityConstantConstantBaseCfgData
}());
	
cfg.ActivityConstantConstantBaseCfgData = ActivityConstantConstantBaseCfgData;
var ActivityCustomInBaseCfgData  = /** @class */ (function () {
	function ActivityCustomInBaseCfgData () {
	}
	ActivityCustomInBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCustomInBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCustomInBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "inId");
		};
		 /**  入口id */
		 ActivityCustomInBaseCfgData.getInIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inId;
			}
			return 0;
		};
		 /**  活动id */
		 ActivityCustomInBaseCfgData.getActivityIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityId;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示 */
		 ActivityCustomInBaseCfgData.getMainPositionTypeByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  开启界面(问程序) */
		 ActivityCustomInBaseCfgData.getOpenMediatorByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openMediator;
			}
			return ""
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCustomInBaseCfgData.getMainIconByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  uiPanel地址(问程序,简单的资源修改直接Mediator处理，复杂的才需要新建多个uiPanel，不涉及多个uiPanel的可以不配) */
		 ActivityCustomInBaseCfgData.getUIPanelByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIPanel;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCustomInBaseCfgData.getMainEffByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};

	return ActivityCustomInBaseCfgData
}());
	
cfg.ActivityCustomInBaseCfgData = ActivityCustomInBaseCfgData;
var ActivityCustomInBaseCfgData  = /** @class */ (function () {
	function ActivityCustomInBaseCfgData () {
	}
	ActivityCustomInBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCustomInBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCustomInBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "inId");
		};
		 /**  入口id */
		 ActivityCustomInBaseCfgData.getInIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inId;
			}
			return 0;
		};
		 /**  活动id */
		 ActivityCustomInBaseCfgData.getActivityIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityId;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示 */
		 ActivityCustomInBaseCfgData.getMainPositionTypeByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  开启界面(问程序) */
		 ActivityCustomInBaseCfgData.getOpenMediatorByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openMediator;
			}
			return ""
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCustomInBaseCfgData.getMainIconByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  uiPanel地址(问程序,简单的资源修改直接Mediator处理，复杂的才需要新建多个uiPanel，不涉及多个uiPanel的可以不配) */
		 ActivityCustomInBaseCfgData.getUIPanelByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIPanel;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCustomInBaseCfgData.getMainEffByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};

	return ActivityCustomInBaseCfgData
}());
	
cfg.ActivityCustomInBaseCfgData = ActivityCustomInBaseCfgData;
var ActivityCustomInBaseCfgData  = /** @class */ (function () {
	function ActivityCustomInBaseCfgData () {
	}
	ActivityCustomInBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityCustomInBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityCustomInBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "inId");
		};
		 /**  入口id */
		 ActivityCustomInBaseCfgData.getInIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inId;
			}
			return 0;
		};
		 /**  活动id */
		 ActivityCustomInBaseCfgData.getActivityIdByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityId;
			}
			return 0;
		};
		 /**  界面位置类型1://左侧竖图标2：//顶部第一排图标3：//顶部第二排图标4：//顶部第三排图标5：//顶部展开气泡图标6：//小游戏气泡图标大于6时，主界面不显示 */
		 ActivityCustomInBaseCfgData.getMainPositionTypeByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPositionType;
			}
			return 0;
		};
		 /**  开启界面(问程序) */
		 ActivityCustomInBaseCfgData.getOpenMediatorByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openMediator;
			}
			return ""
		};
		 /**  主界面图标配置图标位置和名称 */
		 ActivityCustomInBaseCfgData.getMainIconByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainIcon;
			}
			return ""
		};
		 /**  uiPanel地址(问程序,简单的资源修改直接Mediator处理，复杂的才需要新建多个uiPanel，不涉及多个uiPanel的可以不配) */
		 ActivityCustomInBaseCfgData.getUIPanelByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIPanel;
			}
			return ""
		};
		 /**  特效类型ui_timeLimitActBtn  //一键牛逼特效circle //转圈特效 */
		 ActivityCustomInBaseCfgData.getMainEffByInId = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainEff;
			}
			return ""
		};

	return ActivityCustomInBaseCfgData
}());
	
cfg.ActivityCustomInBaseCfgData = ActivityCustomInBaseCfgData;
var ActivityEggLuckyEggBaseCfgData  = /** @class */ (function () {
	function ActivityEggLuckyEggBaseCfgData () {
	}
	ActivityEggLuckyEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityEggLuckyEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityEggLuckyEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityEggLuckyEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityEggLuckyEggBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  领取天数（周*） */
		 ActivityEggLuckyEggBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityEggLuckyEggBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityEggLuckyEggBaseCfgData
}());
	
cfg.ActivityEggLuckyEggBaseCfgData = ActivityEggLuckyEggBaseCfgData;
var ActivityEggLuckyEggBaseCfgData  = /** @class */ (function () {
	function ActivityEggLuckyEggBaseCfgData () {
	}
	ActivityEggLuckyEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityEggLuckyEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityEggLuckyEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityEggLuckyEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityEggLuckyEggBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  领取天数（周*） */
		 ActivityEggLuckyEggBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityEggLuckyEggBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityEggLuckyEggBaseCfgData
}());
	
cfg.ActivityEggLuckyEggBaseCfgData = ActivityEggLuckyEggBaseCfgData;
var ActivityEggLuckyEggBaseCfgData  = /** @class */ (function () {
	function ActivityEggLuckyEggBaseCfgData () {
	}
	ActivityEggLuckyEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivityEggLuckyEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivityEggLuckyEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ActivityEggLuckyEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 ActivityEggLuckyEggBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  领取天数（周*） */
		 ActivityEggLuckyEggBaseCfgData.getDayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励 */
		 ActivityEggLuckyEggBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ActivityEggLuckyEggBaseCfgData
}());
	
cfg.ActivityEggLuckyEggBaseCfgData = ActivityEggLuckyEggBaseCfgData;
var ActivitybossBuyCountBaseCfgData  = /** @class */ (function () {
	function ActivitybossBuyCountBaseCfgData () {
	}
	ActivitybossBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ActivitybossBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivitybossBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ActivitybossBuyCountBaseCfgData
}());
	
cfg.ActivitybossBuyCountBaseCfgData = ActivitybossBuyCountBaseCfgData;
var ActivitybossMonsterNewBaseCfgData  = /** @class */ (function () {
	function ActivitybossMonsterNewBaseCfgData () {
	}
	ActivitybossMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  Index */
		 ActivitybossMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物名称 */
		 ActivitybossMonsterNewBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  展示皮肤ID */
		 ActivitybossMonsterNewBaseCfgData.getSkinIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 ActivitybossMonsterNewBaseCfgData.getShowScaleByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  参与奖励 */
		 ActivitybossMonsterNewBaseCfgData.getDamagePrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  奖励预览 */
		 ActivitybossMonsterNewBaseCfgData.getAwardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awards;
			}
			return ""
		};

	return ActivitybossMonsterNewBaseCfgData
}());
	
cfg.ActivitybossMonsterNewBaseCfgData = ActivitybossMonsterNewBaseCfgData;
var ActivitybossMonsterNewBaseCfgData  = /** @class */ (function () {
	function ActivitybossMonsterNewBaseCfgData () {
	}
	ActivitybossMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  Index */
		 ActivitybossMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物名称 */
		 ActivitybossMonsterNewBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  展示皮肤ID */
		 ActivitybossMonsterNewBaseCfgData.getSkinIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 ActivitybossMonsterNewBaseCfgData.getShowScaleByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  参与奖励 */
		 ActivitybossMonsterNewBaseCfgData.getDamagePrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  奖励预览 */
		 ActivitybossMonsterNewBaseCfgData.getAwardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awards;
			}
			return ""
		};

	return ActivitybossMonsterNewBaseCfgData
}());
	
cfg.ActivitybossMonsterNewBaseCfgData = ActivitybossMonsterNewBaseCfgData;
var ActivitybossConstantBaseCfgData  = /** @class */ (function () {
	function ActivitybossConstantBaseCfgData () {
	}
	ActivitybossConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "challengeCount");
		};
		 /**  每日挑战次数 */
		 ActivitybossConstantBaseCfgData.getChallengeCountByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.challengeCount;
			}
			return 0;
		};
		 /**  血条单位 */
		 ActivitybossConstantBaseCfgData.getBloodUnitByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bloodUnit;
			}
			return 0;
		};

	return ActivitybossConstantBaseCfgData
}());
	
cfg.ActivitybossConstantBaseCfgData = ActivitybossConstantBaseCfgData;
var ActivitybossBuyCountBaseCfgData  = /** @class */ (function () {
	function ActivitybossBuyCountBaseCfgData () {
	}
	ActivitybossBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ActivitybossBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivitybossBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ActivitybossBuyCountBaseCfgData
}());
	
cfg.ActivitybossBuyCountBaseCfgData = ActivitybossBuyCountBaseCfgData;
var ActivitybossConstantBaseCfgData  = /** @class */ (function () {
	function ActivitybossConstantBaseCfgData () {
	}
	ActivitybossConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "challengeCount");
		};
		 /**  每日挑战次数 */
		 ActivitybossConstantBaseCfgData.getChallengeCountByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.challengeCount;
			}
			return 0;
		};
		 /**  血条单位 */
		 ActivitybossConstantBaseCfgData.getBloodUnitByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bloodUnit;
			}
			return 0;
		};

	return ActivitybossConstantBaseCfgData
}());
	
cfg.ActivitybossConstantBaseCfgData = ActivitybossConstantBaseCfgData;
var ActivitybossBuyCountBaseCfgData  = /** @class */ (function () {
	function ActivitybossBuyCountBaseCfgData () {
	}
	ActivitybossBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ActivitybossBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 ActivitybossBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ActivitybossBuyCountBaseCfgData
}());
	
cfg.ActivitybossBuyCountBaseCfgData = ActivitybossBuyCountBaseCfgData;
var ActivitybossConstantBaseCfgData  = /** @class */ (function () {
	function ActivitybossConstantBaseCfgData () {
	}
	ActivitybossConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "challengeCount");
		};
		 /**  每日挑战次数 */
		 ActivitybossConstantBaseCfgData.getChallengeCountByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.challengeCount;
			}
			return 0;
		};
		 /**  血条单位 */
		 ActivitybossConstantBaseCfgData.getBloodUnitByChallengeCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bloodUnit;
			}
			return 0;
		};

	return ActivitybossConstantBaseCfgData
}());
	
cfg.ActivitybossConstantBaseCfgData = ActivitybossConstantBaseCfgData;
var ActivitybossMonsterNewBaseCfgData  = /** @class */ (function () {
	function ActivitybossMonsterNewBaseCfgData () {
	}
	ActivitybossMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ActivitybossMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ActivitybossMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  Index */
		 ActivitybossMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物名称 */
		 ActivitybossMonsterNewBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  展示皮肤ID */
		 ActivitybossMonsterNewBaseCfgData.getSkinIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 ActivitybossMonsterNewBaseCfgData.getShowScaleByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  参与奖励 */
		 ActivitybossMonsterNewBaseCfgData.getDamagePrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  奖励预览 */
		 ActivitybossMonsterNewBaseCfgData.getAwardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awards;
			}
			return ""
		};

	return ActivitybossMonsterNewBaseCfgData
}());
	
cfg.ActivitybossMonsterNewBaseCfgData = ActivitybossMonsterNewBaseCfgData;
var ArtifactBaseCfgData  = /** @class */ (function () {
	function ArtifactBaseCfgData () {
	}
	ArtifactBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  id */
		 ArtifactBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ArtifactBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能ID */
		 ArtifactBaseCfgData.getSkillIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能描述 */
		 ArtifactBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ArtifactBaseCfgData
}());
	
cfg.ArtifactBaseCfgData = ArtifactBaseCfgData;
var ArtifactSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactSkillUpgradeBaseCfgData () {
	}
	ArtifactSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactSkillUpgradeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  技能ID */
		 ArtifactSkillUpgradeBaseCfgData.getSkillIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactSkillUpgradeBaseCfgData.getSkillLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  需要神器等级 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedArtifactLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needArtifactLevel;
			}
			return 0;
		};
		 /**  升到此级需要道具 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  重置返还道具 */
		 ArtifactSkillUpgradeBaseCfgData.getReturnItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};
		 /**  增加属性(需要累加)属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactSkillUpgradeBaseCfgData.getAddScoreByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  觉醒增加属性属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAwakeAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAwakeAttr;
			}
			return ""
		};

	return ArtifactSkillUpgradeBaseCfgData
}());
	
cfg.ArtifactSkillUpgradeBaseCfgData = ArtifactSkillUpgradeBaseCfgData;
var ArtifactBaseCfgData  = /** @class */ (function () {
	function ArtifactBaseCfgData () {
	}
	ArtifactBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  id */
		 ArtifactBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ArtifactBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能ID */
		 ArtifactBaseCfgData.getSkillIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能描述 */
		 ArtifactBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ArtifactBaseCfgData
}());
	
cfg.ArtifactBaseCfgData = ArtifactBaseCfgData;
var ArtifactUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactUpgradeBaseCfgData () {
	}
	ArtifactUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ArtifactUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 ArtifactUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  最大刻印次数 */
		 ArtifactUpgradeBaseCfgData.getMaxStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStoneCount;
			}
			return 0;
		};
		 /**  每次需要刻印石数量 */
		 ArtifactUpgradeBaseCfgData.getNeedStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStoneCount;
			}
			return ""
		};
		 /**  需要道具 */
		 ArtifactUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|值|万分比; */
		 ArtifactUpgradeBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每点经验增加属性属性类型|属性值 */
		 ArtifactUpgradeBaseCfgData.getExpAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactUpgradeBaseCfgData.getSkillMaxLvByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillMaxLv;
			}
			return 0;
		};

	return ArtifactUpgradeBaseCfgData
}());
	
cfg.ArtifactUpgradeBaseCfgData = ArtifactUpgradeBaseCfgData;
var ArtifactActiveBaseCfgData  = /** @class */ (function () {
	function ArtifactActiveBaseCfgData () {
	}
	ArtifactActiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactActiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactActiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactActiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactActiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactActiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要道具 */
		 ArtifactActiveBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要成就ID */
		 ArtifactActiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactActiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactActiveBaseCfgData
}());
	
cfg.ArtifactActiveBaseCfgData = ArtifactActiveBaseCfgData;
var ArtifactYlstagerewardBaseCfgData  = /** @class */ (function () {
	function ArtifactYlstagerewardBaseCfgData () {
	}
	ArtifactYlstagerewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlstagerewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlstagerewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stage");
		};
		 /**  进度 */
		 ArtifactYlstagerewardBaseCfgData.getStageByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlstagerewardBaseCfgData.getAddPrizeByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlstagerewardBaseCfgData
}());
	
cfg.ArtifactYlstagerewardBaseCfgData = ArtifactYlstagerewardBaseCfgData;
var ArtifactActiveBaseCfgData  = /** @class */ (function () {
	function ArtifactActiveBaseCfgData () {
	}
	ArtifactActiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactActiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactActiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactActiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactActiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactActiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要道具 */
		 ArtifactActiveBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要成就ID */
		 ArtifactActiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactActiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactActiveBaseCfgData
}());
	
cfg.ArtifactActiveBaseCfgData = ArtifactActiveBaseCfgData;
var ArtifactUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactUpgradeBaseCfgData () {
	}
	ArtifactUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ArtifactUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 ArtifactUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  最大刻印次数 */
		 ArtifactUpgradeBaseCfgData.getMaxStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStoneCount;
			}
			return 0;
		};
		 /**  每次需要刻印石数量 */
		 ArtifactUpgradeBaseCfgData.getNeedStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStoneCount;
			}
			return ""
		};
		 /**  需要道具 */
		 ArtifactUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|值|万分比; */
		 ArtifactUpgradeBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每点经验增加属性属性类型|属性值 */
		 ArtifactUpgradeBaseCfgData.getExpAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactUpgradeBaseCfgData.getSkillMaxLvByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillMaxLv;
			}
			return 0;
		};

	return ArtifactUpgradeBaseCfgData
}());
	
cfg.ArtifactUpgradeBaseCfgData = ArtifactUpgradeBaseCfgData;
var ArtifactConstBaseCfgData  = /** @class */ (function () {
	function ArtifactConstBaseCfgData () {
	}
	ArtifactConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "fazhenAddItem");
		};
		 /**  法阵解锁奖励 */
		 ArtifactConstBaseCfgData.getFazhenAddItemByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fazhenAddItem;
			}
			return ""
		};
		 /**  法阵觉醒属性万分比加成(类型_万分比;) */
		 ArtifactConstBaseCfgData.getAwakeAddAttrByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeAddAttr;
			}
			return ""
		};

	return ArtifactConstBaseCfgData
}());
	
cfg.ArtifactConstBaseCfgData = ArtifactConstBaseCfgData;
var ArtifactActiveBaseCfgData  = /** @class */ (function () {
	function ArtifactActiveBaseCfgData () {
	}
	ArtifactActiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactActiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactActiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactActiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactActiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactActiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要道具 */
		 ArtifactActiveBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要成就ID */
		 ArtifactActiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactActiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactActiveBaseCfgData
}());
	
cfg.ArtifactActiveBaseCfgData = ArtifactActiveBaseCfgData;
var ArtifactYlstagerewardBaseCfgData  = /** @class */ (function () {
	function ArtifactYlstagerewardBaseCfgData () {
	}
	ArtifactYlstagerewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlstagerewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlstagerewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stage");
		};
		 /**  进度 */
		 ArtifactYlstagerewardBaseCfgData.getStageByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlstagerewardBaseCfgData.getAddPrizeByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlstagerewardBaseCfgData
}());
	
cfg.ArtifactYlstagerewardBaseCfgData = ArtifactYlstagerewardBaseCfgData;
var ArtifactYlactiveBaseCfgData  = /** @class */ (function () {
	function ArtifactYlactiveBaseCfgData () {
	}
	ArtifactYlactiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlactiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlactiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactYlactiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactYlactiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactYlactiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要成就ID */
		 ArtifactYlactiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlactiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlactiveBaseCfgData
}());
	
cfg.ArtifactYlactiveBaseCfgData = ArtifactYlactiveBaseCfgData;
var ArtifactSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactSkillUpgradeBaseCfgData () {
	}
	ArtifactSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactSkillUpgradeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  技能ID */
		 ArtifactSkillUpgradeBaseCfgData.getSkillIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactSkillUpgradeBaseCfgData.getSkillLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  需要神器等级 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedArtifactLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needArtifactLevel;
			}
			return 0;
		};
		 /**  升到此级需要道具 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  重置返还道具 */
		 ArtifactSkillUpgradeBaseCfgData.getReturnItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};
		 /**  增加属性(需要累加)属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactSkillUpgradeBaseCfgData.getAddScoreByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  觉醒增加属性属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAwakeAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAwakeAttr;
			}
			return ""
		};

	return ArtifactSkillUpgradeBaseCfgData
}());
	
cfg.ArtifactSkillUpgradeBaseCfgData = ArtifactSkillUpgradeBaseCfgData;
var ArtifactSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactSkillUpgradeBaseCfgData () {
	}
	ArtifactSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactSkillUpgradeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  技能ID */
		 ArtifactSkillUpgradeBaseCfgData.getSkillIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactSkillUpgradeBaseCfgData.getSkillLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  需要神器等级 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedArtifactLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needArtifactLevel;
			}
			return 0;
		};
		 /**  升到此级需要道具 */
		 ArtifactSkillUpgradeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  重置返还道具 */
		 ArtifactSkillUpgradeBaseCfgData.getReturnItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};
		 /**  增加属性(需要累加)属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactSkillUpgradeBaseCfgData.getAddScoreByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  觉醒增加属性属性类型|值|万分比; */
		 ArtifactSkillUpgradeBaseCfgData.getAddAwakeAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAwakeAttr;
			}
			return ""
		};

	return ArtifactSkillUpgradeBaseCfgData
}());
	
cfg.ArtifactSkillUpgradeBaseCfgData = ArtifactSkillUpgradeBaseCfgData;
var ArtifactUpgradeBaseCfgData  = /** @class */ (function () {
	function ArtifactUpgradeBaseCfgData () {
	}
	ArtifactUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ArtifactUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 ArtifactUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  最大刻印次数 */
		 ArtifactUpgradeBaseCfgData.getMaxStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStoneCount;
			}
			return 0;
		};
		 /**  每次需要刻印石数量 */
		 ArtifactUpgradeBaseCfgData.getNeedStoneCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStoneCount;
			}
			return ""
		};
		 /**  需要道具 */
		 ArtifactUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|值|万分比; */
		 ArtifactUpgradeBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每点经验增加属性属性类型|属性值 */
		 ArtifactUpgradeBaseCfgData.getExpAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};
		 /**  增加评分 */
		 ArtifactUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能等级 */
		 ArtifactUpgradeBaseCfgData.getSkillMaxLvByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillMaxLv;
			}
			return 0;
		};

	return ArtifactUpgradeBaseCfgData
}());
	
cfg.ArtifactUpgradeBaseCfgData = ArtifactUpgradeBaseCfgData;
var ArtifactConstBaseCfgData  = /** @class */ (function () {
	function ArtifactConstBaseCfgData () {
	}
	ArtifactConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "fazhenAddItem");
		};
		 /**  法阵解锁奖励 */
		 ArtifactConstBaseCfgData.getFazhenAddItemByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fazhenAddItem;
			}
			return ""
		};
		 /**  法阵觉醒属性万分比加成(类型_万分比;) */
		 ArtifactConstBaseCfgData.getAwakeAddAttrByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeAddAttr;
			}
			return ""
		};

	return ArtifactConstBaseCfgData
}());
	
cfg.ArtifactConstBaseCfgData = ArtifactConstBaseCfgData;
var ArtifactYlactiveBaseCfgData  = /** @class */ (function () {
	function ArtifactYlactiveBaseCfgData () {
	}
	ArtifactYlactiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlactiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlactiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactYlactiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactYlactiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactYlactiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要成就ID */
		 ArtifactYlactiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlactiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlactiveBaseCfgData
}());
	
cfg.ArtifactYlactiveBaseCfgData = ArtifactYlactiveBaseCfgData;
var ArtifactConstBaseCfgData  = /** @class */ (function () {
	function ArtifactConstBaseCfgData () {
	}
	ArtifactConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "fazhenAddItem");
		};
		 /**  法阵解锁奖励 */
		 ArtifactConstBaseCfgData.getFazhenAddItemByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fazhenAddItem;
			}
			return ""
		};
		 /**  法阵觉醒属性万分比加成(类型_万分比;) */
		 ArtifactConstBaseCfgData.getAwakeAddAttrByFazhenAddItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeAddAttr;
			}
			return ""
		};

	return ArtifactConstBaseCfgData
}());
	
cfg.ArtifactConstBaseCfgData = ArtifactConstBaseCfgData;
var ArtifactYlstagerewardBaseCfgData  = /** @class */ (function () {
	function ArtifactYlstagerewardBaseCfgData () {
	}
	ArtifactYlstagerewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlstagerewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlstagerewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stage");
		};
		 /**  进度 */
		 ArtifactYlstagerewardBaseCfgData.getStageByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlstagerewardBaseCfgData.getAddPrizeByStage = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlstagerewardBaseCfgData
}());
	
cfg.ArtifactYlstagerewardBaseCfgData = ArtifactYlstagerewardBaseCfgData;
var ArtifactYlactiveBaseCfgData  = /** @class */ (function () {
	function ArtifactYlactiveBaseCfgData () {
	}
	ArtifactYlactiveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactYlactiveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactYlactiveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ArtifactYlactiveBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 ArtifactYlactiveBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进度 */
		 ArtifactYlactiveBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要成就ID */
		 ArtifactYlactiveBaseCfgData.getNeedAchieveIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAchieveID;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ArtifactYlactiveBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ArtifactYlactiveBaseCfgData
}());
	
cfg.ArtifactYlactiveBaseCfgData = ArtifactYlactiveBaseCfgData;
var ArtifactBaseCfgData  = /** @class */ (function () {
	function ArtifactBaseCfgData () {
	}
	ArtifactBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ArtifactBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ArtifactBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  id */
		 ArtifactBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ArtifactBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能ID */
		 ArtifactBaseCfgData.getSkillIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能描述 */
		 ArtifactBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ArtifactBaseCfgData
}());
	
cfg.ArtifactBaseCfgData = ArtifactBaseCfgData;
var BattleTypeBaseCfgData  = /** @class */ (function () {
	function BattleTypeBaseCfgData () {
	}
	BattleTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  类型 */
		 BattleTypeBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  名称 */
		 BattleTypeBaseCfgData.getNameByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  战斗背景 */
		 BattleTypeBaseCfgData.getBattleSceneByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.battleScene;
			}
			return ""
		};

	return BattleTypeBaseCfgData
}());
	
cfg.BattleTypeBaseCfgData = BattleTypeBaseCfgData;
var BattleBaseCfgData  = /** @class */ (function () {
	function BattleBaseCfgData () {
	}
	BattleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  属性ID */
		 BattleBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  属性说明 */
		 BattleBaseCfgData.getDescByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  加评分 */
		 BattleBaseCfgData.getAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  万分比加评分 */
		 BattleBaseCfgData.getRateAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rateAddScore;
			}
			return 0;
		};

	return BattleBaseCfgData
}());
	
cfg.BattleBaseCfgData = BattleBaseCfgData;
var BattleBaseCfgData  = /** @class */ (function () {
	function BattleBaseCfgData () {
	}
	BattleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  属性ID */
		 BattleBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  属性说明 */
		 BattleBaseCfgData.getDescByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  加评分 */
		 BattleBaseCfgData.getAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  万分比加评分 */
		 BattleBaseCfgData.getRateAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rateAddScore;
			}
			return 0;
		};

	return BattleBaseCfgData
}());
	
cfg.BattleBaseCfgData = BattleBaseCfgData;
var BattleFormationAttrBaseCfgData  = /** @class */ (function () {
	function BattleFormationAttrBaseCfgData () {
	}
	BattleFormationAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleFormationAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleFormationAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 BattleFormationAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 BattleFormationAttrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  伙伴类型 */
		 BattleFormationAttrBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  类型个数 */
		 BattleFormationAttrBaseCfgData.getTypeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeCount;
			}
			return 0;
		};
		 /**  属性加成属性类型|万分比; */
		 BattleFormationAttrBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  阵型名称 */
		 BattleFormationAttrBaseCfgData.getTypeNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeName;
			}
			return ""
		};

	return BattleFormationAttrBaseCfgData
}());
	
cfg.BattleFormationAttrBaseCfgData = BattleFormationAttrBaseCfgData;
var BattleTypeRestrainBaseCfgData  = /** @class */ (function () {
	function BattleTypeRestrainBaseCfgData () {
	}
	BattleTypeRestrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeRestrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeRestrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackType");
		};
		 /**  攻击方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getAttackTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  防御方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getDefenseTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseType;
			}
			return 0;
		};
		 /**  伤害加成万分比 */
		 BattleTypeRestrainBaseCfgData.getDamageRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};
		 /**  命中加成分比 */
		 BattleTypeRestrainBaseCfgData.getHitRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hitRate;
			}
			return 0;
		};

	return BattleTypeRestrainBaseCfgData
}());
	
cfg.BattleTypeRestrainBaseCfgData = BattleTypeRestrainBaseCfgData;
var BattleBaseCfgData  = /** @class */ (function () {
	function BattleBaseCfgData () {
	}
	BattleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  属性ID */
		 BattleBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  属性说明 */
		 BattleBaseCfgData.getDescByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  加评分 */
		 BattleBaseCfgData.getAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  万分比加评分 */
		 BattleBaseCfgData.getRateAddScoreByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rateAddScore;
			}
			return 0;
		};

	return BattleBaseCfgData
}());
	
cfg.BattleBaseCfgData = BattleBaseCfgData;
var BattleTypeRestrainBaseCfgData  = /** @class */ (function () {
	function BattleTypeRestrainBaseCfgData () {
	}
	BattleTypeRestrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeRestrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeRestrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackType");
		};
		 /**  攻击方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getAttackTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  防御方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getDefenseTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseType;
			}
			return 0;
		};
		 /**  伤害加成万分比 */
		 BattleTypeRestrainBaseCfgData.getDamageRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};
		 /**  命中加成分比 */
		 BattleTypeRestrainBaseCfgData.getHitRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hitRate;
			}
			return 0;
		};

	return BattleTypeRestrainBaseCfgData
}());
	
cfg.BattleTypeRestrainBaseCfgData = BattleTypeRestrainBaseCfgData;
var BattleTypeBaseCfgData  = /** @class */ (function () {
	function BattleTypeBaseCfgData () {
	}
	BattleTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  类型 */
		 BattleTypeBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  名称 */
		 BattleTypeBaseCfgData.getNameByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  战斗背景 */
		 BattleTypeBaseCfgData.getBattleSceneByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.battleScene;
			}
			return ""
		};

	return BattleTypeBaseCfgData
}());
	
cfg.BattleTypeBaseCfgData = BattleTypeBaseCfgData;
var BattleTypeRestrainBaseCfgData  = /** @class */ (function () {
	function BattleTypeRestrainBaseCfgData () {
	}
	BattleTypeRestrainBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeRestrainBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeRestrainBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackType");
		};
		 /**  攻击方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getAttackTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  防御方1;//水2;//火3;//风4;//太阳5;//月亮 */
		 BattleTypeRestrainBaseCfgData.getDefenseTypeByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseType;
			}
			return 0;
		};
		 /**  伤害加成万分比 */
		 BattleTypeRestrainBaseCfgData.getDamageRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};
		 /**  命中加成分比 */
		 BattleTypeRestrainBaseCfgData.getHitRateByAttackType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hitRate;
			}
			return 0;
		};

	return BattleTypeRestrainBaseCfgData
}());
	
cfg.BattleTypeRestrainBaseCfgData = BattleTypeRestrainBaseCfgData;
var BattleFormationAttrBaseCfgData  = /** @class */ (function () {
	function BattleFormationAttrBaseCfgData () {
	}
	BattleFormationAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleFormationAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleFormationAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 BattleFormationAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 BattleFormationAttrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  伙伴类型 */
		 BattleFormationAttrBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  类型个数 */
		 BattleFormationAttrBaseCfgData.getTypeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeCount;
			}
			return 0;
		};
		 /**  属性加成属性类型|万分比; */
		 BattleFormationAttrBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  阵型名称 */
		 BattleFormationAttrBaseCfgData.getTypeNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeName;
			}
			return ""
		};

	return BattleFormationAttrBaseCfgData
}());
	
cfg.BattleFormationAttrBaseCfgData = BattleFormationAttrBaseCfgData;
var BattleTypeBaseCfgData  = /** @class */ (function () {
	function BattleTypeBaseCfgData () {
	}
	BattleTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrType");
		};
		 /**  类型 */
		 BattleTypeBaseCfgData.getAttrTypeByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  名称 */
		 BattleTypeBaseCfgData.getNameByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  战斗背景 */
		 BattleTypeBaseCfgData.getBattleSceneByAttrType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.battleScene;
			}
			return ""
		};

	return BattleTypeBaseCfgData
}());
	
cfg.BattleTypeBaseCfgData = BattleTypeBaseCfgData;
var BattleFormationAttrBaseCfgData  = /** @class */ (function () {
	function BattleFormationAttrBaseCfgData () {
	}
	BattleFormationAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BattleFormationAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BattleFormationAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 BattleFormationAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 BattleFormationAttrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  伙伴类型 */
		 BattleFormationAttrBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  类型个数 */
		 BattleFormationAttrBaseCfgData.getTypeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeCount;
			}
			return 0;
		};
		 /**  属性加成属性类型|万分比; */
		 BattleFormationAttrBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  阵型名称 */
		 BattleFormationAttrBaseCfgData.getTypeNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeName;
			}
			return ""
		};

	return BattleFormationAttrBaseCfgData
}());
	
cfg.BattleFormationAttrBaseCfgData = BattleFormationAttrBaseCfgData;
var BuffNewBuffStateBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffStateBaseCfgData () {
	}
	BuffNewBuffStateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffStateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffStateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newState");
		};
		 /**  新状态 */
		 BuffNewBuffStateBaseCfgData.getNewStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newState;
			}
			return 0;
		};
		 /**  删除老状态 */
		 BuffNewBuffStateBaseCfgData.getDelOldStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delOldState;
			}
			return ""
		};
		 /**  互斥状态 */
		 BuffNewBuffStateBaseCfgData.getCanAddByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canAdd;
			}
			return ""
		};
		 /**  名称 */
		 BuffNewBuffStateBaseCfgData.getNameByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return BuffNewBuffStateBaseCfgData
}());
	
cfg.BuffNewBuffStateBaseCfgData = BuffNewBuffStateBaseCfgData;
var BuffNewBuffStateBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffStateBaseCfgData () {
	}
	BuffNewBuffStateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffStateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffStateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newState");
		};
		 /**  新状态 */
		 BuffNewBuffStateBaseCfgData.getNewStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newState;
			}
			return 0;
		};
		 /**  删除老状态 */
		 BuffNewBuffStateBaseCfgData.getDelOldStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delOldState;
			}
			return ""
		};
		 /**  互斥状态 */
		 BuffNewBuffStateBaseCfgData.getCanAddByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canAdd;
			}
			return ""
		};
		 /**  名称 */
		 BuffNewBuffStateBaseCfgData.getNameByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return BuffNewBuffStateBaseCfgData
}());
	
cfg.BuffNewBuffStateBaseCfgData = BuffNewBuffStateBaseCfgData;
var BuffNewBuffGroupBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffGroupBaseCfgData () {
	}
	BuffNewBuffGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newGroup");
		};
		 /**  新加的buff的groupID */
		 BuffNewBuffGroupBaseCfgData.getNewGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newGroup;
			}
			return 0;
		};
		 /**  有影响的buff的GroupID */
		 BuffNewBuffGroupBaseCfgData.getOldGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldGroup;
			}
			return 0;
		};
		 /**  互斥类型 1;//丢弃 2;//替换 */
		 BuffNewBuffGroupBaseCfgData.getRepeatTypeByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.repeatType;
			}
			return 0;
		};

	return BuffNewBuffGroupBaseCfgData
}());
	
cfg.BuffNewBuffGroupBaseCfgData = BuffNewBuffGroupBaseCfgData;
var BuffNewBuffBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffBaseCfgData () {
	}
	BuffNewBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  编号 */
		 BuffNewBuffBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  buff名称 */
		 BuffNewBuffBaseCfgData.getBuffNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffName;
			}
			return ""
		};
		 /**  描述 */
		 BuffNewBuffBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  buff类型_emBuffType 1;//加属性   属性类型_属性值(可为负数)_属性万分比(可为负数) 2;//加状态   状态ID _emBuffControlType 3;//持续加消耗  加消耗  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 4;//分担伤害   伤害万分比 5;//法术反噬   施法者属性ID_施法者属性万分比 6;//受物理攻击加buff 概率万分比_buffid 7;//增加治疗护盾  8;//增加护盾   属性ID_属性万分比_属性来源（0=目标，1=施法者） 9;//反弹伤害   伤害万分比 10;//偷取目标的属性 施法者属性ID_施法者属性万分比 11;//被攻击掉血  施法者属性ID_施法者属性万分比 12;//持续掉血   自己属性ID_自己属性万分比_最大自己属性ID_最大自己属性万分比 13;//抵挡伤害   次数 14;//buff删除掉血  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 15;//伤害限制   属性类型_属性万分比 16;//普攻选目标  _emSkillCondition_参数1 17;//攻击吸血   伤害万分比 18;//只和加buff的人分担伤害 伤害万分比 */
		 BuffNewBuffBaseCfgData.getBuffTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffType;
			}
			return 0;
		};
		 /**  buff参数配置 */
		 BuffNewBuffBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  增加状态_emBuffControlType1;//冰冻 无法行动2;//眩晕 无法行动3;//沉睡 无法行动4;//禁止复活 无法行动5;//嘲讽6;//虚弱_emBuffControlType7;//混乱状态8;//石化9;//离间10;//麻痹11;//封印12;//禁疗13;//免疫14;//流血15;//灼烧16;//中毒17;//破甲18;//减速19;//速度提升20;//格挡盾21;//法术反噬22;//海蛇庇护23;//持续恢复24;//治疗盾25;//护盾26;//烈焰灼烧27;//沉默28;//偷取攻击29;//魔化30;//森林印记31;//感电32;//诅咒33;//死亡印记34;//灵魂印记35;//怒气36;//免疫控制37;//免疫负面效果 */
		 BuffNewBuffBaseCfgData.getAddStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addState;
			}
			return 0;
		};
		 /**  组cs_buff_group组ID_组等级 */
		 BuffNewBuffBaseCfgData.getGroupByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  效果类型_emBuffEffectType 1;//正面 2;//负面 3;//负面完全可驱散（不检测Mark驱散标记） 4;//负面控制 */
		 BuffNewBuffBaseCfgData.getEffectTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectType;
			}
			return 0;
		};
		 /**  叠加规则_emBuffSameRepeatType1丢弃2替换3叠加回合 */
		 BuffNewBuffBaseCfgData.getSameRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sameRepeatType;
			}
			return 0;
		};
		 /**  不同来源叠加规则_emBuffDiffRepeatType1;//丢弃2;//替换3;//共存 */
		 BuffNewBuffBaseCfgData.getDiffRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.diffRepeatType;
			}
			return 0;
		};
		 /**  持续回合数0表示永久Administrator:如果是战斗开始时被动释放，就需要增加1回合。 */
		 BuffNewBuffBaseCfgData.getExistRoundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.existRound;
			}
			return 0;
		};
		 /**  最大层数 */
		 BuffNewBuffBaseCfgData.getMaxLayerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLayer;
			}
			return 0;
		};
		 /**  Mark（多选；隔开）_emBuffMark1,不可驱散2;//死亡是否不删除3;//死亡可以加 */
		 BuffNewBuffBaseCfgData.getMarkByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  删除条件_emBuffDelCondition1;//被攻击 参数1:次数_概率万分比_次数_概率万分比2;//生效立即删除 */
		 BuffNewBuffBaseCfgData.getDelConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delCondition;
			}
			return ""
		};
		 /**  删除触发_emBuffDelAction1;//源头使用技能 技能ID */
		 BuffNewBuffBaseCfgData.getDelActionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAction;
			}
			return ""
		};
		 /**  buff图标 */
		 BuffNewBuffBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  buff特效id */
		 BuffNewBuffBaseCfgData.getEffectIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectId;
			}
			return ""
		};

	return BuffNewBuffBaseCfgData
}());
	
cfg.BuffNewBuffBaseCfgData = BuffNewBuffBaseCfgData;
var BuffNewBuffGroupBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffGroupBaseCfgData () {
	}
	BuffNewBuffGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newGroup");
		};
		 /**  新加的buff的groupID */
		 BuffNewBuffGroupBaseCfgData.getNewGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newGroup;
			}
			return 0;
		};
		 /**  有影响的buff的GroupID */
		 BuffNewBuffGroupBaseCfgData.getOldGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldGroup;
			}
			return 0;
		};
		 /**  互斥类型 1;//丢弃 2;//替换 */
		 BuffNewBuffGroupBaseCfgData.getRepeatTypeByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.repeatType;
			}
			return 0;
		};

	return BuffNewBuffGroupBaseCfgData
}());
	
cfg.BuffNewBuffGroupBaseCfgData = BuffNewBuffGroupBaseCfgData;
var BuffNewBuffBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffBaseCfgData () {
	}
	BuffNewBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  编号 */
		 BuffNewBuffBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  buff名称 */
		 BuffNewBuffBaseCfgData.getBuffNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffName;
			}
			return ""
		};
		 /**  描述 */
		 BuffNewBuffBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  buff类型_emBuffType 1;//加属性   属性类型_属性值(可为负数)_属性万分比(可为负数) 2;//加状态   状态ID _emBuffControlType 3;//持续加消耗  加消耗  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 4;//分担伤害   伤害万分比 5;//法术反噬   施法者属性ID_施法者属性万分比 6;//受物理攻击加buff 概率万分比_buffid 7;//增加治疗护盾  8;//增加护盾   属性ID_属性万分比_属性来源（0=目标，1=施法者） 9;//反弹伤害   伤害万分比 10;//偷取目标的属性 施法者属性ID_施法者属性万分比 11;//被攻击掉血  施法者属性ID_施法者属性万分比 12;//持续掉血   自己属性ID_自己属性万分比_最大自己属性ID_最大自己属性万分比 13;//抵挡伤害   次数 14;//buff删除掉血  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 15;//伤害限制   属性类型_属性万分比 16;//普攻选目标  _emSkillCondition_参数1 17;//攻击吸血   伤害万分比 18;//只和加buff的人分担伤害 伤害万分比 */
		 BuffNewBuffBaseCfgData.getBuffTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffType;
			}
			return 0;
		};
		 /**  buff参数配置 */
		 BuffNewBuffBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  增加状态_emBuffControlType1;//冰冻 无法行动2;//眩晕 无法行动3;//沉睡 无法行动4;//禁止复活 无法行动5;//嘲讽6;//虚弱_emBuffControlType7;//混乱状态8;//石化9;//离间10;//麻痹11;//封印12;//禁疗13;//免疫14;//流血15;//灼烧16;//中毒17;//破甲18;//减速19;//速度提升20;//格挡盾21;//法术反噬22;//海蛇庇护23;//持续恢复24;//治疗盾25;//护盾26;//烈焰灼烧27;//沉默28;//偷取攻击29;//魔化30;//森林印记31;//感电32;//诅咒33;//死亡印记34;//灵魂印记35;//怒气36;//免疫控制37;//免疫负面效果 */
		 BuffNewBuffBaseCfgData.getAddStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addState;
			}
			return 0;
		};
		 /**  组cs_buff_group组ID_组等级 */
		 BuffNewBuffBaseCfgData.getGroupByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  效果类型_emBuffEffectType 1;//正面 2;//负面 3;//负面完全可驱散（不检测Mark驱散标记） 4;//负面控制 */
		 BuffNewBuffBaseCfgData.getEffectTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectType;
			}
			return 0;
		};
		 /**  叠加规则_emBuffSameRepeatType1丢弃2替换3叠加回合 */
		 BuffNewBuffBaseCfgData.getSameRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sameRepeatType;
			}
			return 0;
		};
		 /**  不同来源叠加规则_emBuffDiffRepeatType1;//丢弃2;//替换3;//共存 */
		 BuffNewBuffBaseCfgData.getDiffRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.diffRepeatType;
			}
			return 0;
		};
		 /**  持续回合数0表示永久Administrator:如果是战斗开始时被动释放，就需要增加1回合。 */
		 BuffNewBuffBaseCfgData.getExistRoundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.existRound;
			}
			return 0;
		};
		 /**  最大层数 */
		 BuffNewBuffBaseCfgData.getMaxLayerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLayer;
			}
			return 0;
		};
		 /**  Mark（多选；隔开）_emBuffMark1,不可驱散2;//死亡是否不删除3;//死亡可以加 */
		 BuffNewBuffBaseCfgData.getMarkByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  删除条件_emBuffDelCondition1;//被攻击 参数1:次数_概率万分比_次数_概率万分比2;//生效立即删除 */
		 BuffNewBuffBaseCfgData.getDelConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delCondition;
			}
			return ""
		};
		 /**  删除触发_emBuffDelAction1;//源头使用技能 技能ID */
		 BuffNewBuffBaseCfgData.getDelActionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAction;
			}
			return ""
		};
		 /**  buff图标 */
		 BuffNewBuffBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  buff特效id */
		 BuffNewBuffBaseCfgData.getEffectIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectId;
			}
			return ""
		};

	return BuffNewBuffBaseCfgData
}());
	
cfg.BuffNewBuffBaseCfgData = BuffNewBuffBaseCfgData;
var BuffNewBuffGroupBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffGroupBaseCfgData () {
	}
	BuffNewBuffGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newGroup");
		};
		 /**  新加的buff的groupID */
		 BuffNewBuffGroupBaseCfgData.getNewGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newGroup;
			}
			return 0;
		};
		 /**  有影响的buff的GroupID */
		 BuffNewBuffGroupBaseCfgData.getOldGroupByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldGroup;
			}
			return 0;
		};
		 /**  互斥类型 1;//丢弃 2;//替换 */
		 BuffNewBuffGroupBaseCfgData.getRepeatTypeByNewGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.repeatType;
			}
			return 0;
		};

	return BuffNewBuffGroupBaseCfgData
}());
	
cfg.BuffNewBuffGroupBaseCfgData = BuffNewBuffGroupBaseCfgData;
var BuffNewBuffBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffBaseCfgData () {
	}
	BuffNewBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  编号 */
		 BuffNewBuffBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  buff名称 */
		 BuffNewBuffBaseCfgData.getBuffNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffName;
			}
			return ""
		};
		 /**  描述 */
		 BuffNewBuffBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  buff类型_emBuffType 1;//加属性   属性类型_属性值(可为负数)_属性万分比(可为负数) 2;//加状态   状态ID _emBuffControlType 3;//持续加消耗  加消耗  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 4;//分担伤害   伤害万分比 5;//法术反噬   施法者属性ID_施法者属性万分比 6;//受物理攻击加buff 概率万分比_buffid 7;//增加治疗护盾  8;//增加护盾   属性ID_属性万分比_属性来源（0=目标，1=施法者） 9;//反弹伤害   伤害万分比 10;//偷取目标的属性 施法者属性ID_施法者属性万分比 11;//被攻击掉血  施法者属性ID_施法者属性万分比 12;//持续掉血   自己属性ID_自己属性万分比_最大自己属性ID_最大自己属性万分比 13;//抵挡伤害   次数 14;//buff删除掉血  消耗类型_消耗值(可为负数)_施法者属性ID_施法者属性万分比(可为负数) 15;//伤害限制   属性类型_属性万分比 16;//普攻选目标  _emSkillCondition_参数1 17;//攻击吸血   伤害万分比 18;//只和加buff的人分担伤害 伤害万分比 */
		 BuffNewBuffBaseCfgData.getBuffTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffType;
			}
			return 0;
		};
		 /**  buff参数配置 */
		 BuffNewBuffBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  增加状态_emBuffControlType1;//冰冻 无法行动2;//眩晕 无法行动3;//沉睡 无法行动4;//禁止复活 无法行动5;//嘲讽6;//虚弱_emBuffControlType7;//混乱状态8;//石化9;//离间10;//麻痹11;//封印12;//禁疗13;//免疫14;//流血15;//灼烧16;//中毒17;//破甲18;//减速19;//速度提升20;//格挡盾21;//法术反噬22;//海蛇庇护23;//持续恢复24;//治疗盾25;//护盾26;//烈焰灼烧27;//沉默28;//偷取攻击29;//魔化30;//森林印记31;//感电32;//诅咒33;//死亡印记34;//灵魂印记35;//怒气36;//免疫控制37;//免疫负面效果 */
		 BuffNewBuffBaseCfgData.getAddStateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addState;
			}
			return 0;
		};
		 /**  组cs_buff_group组ID_组等级 */
		 BuffNewBuffBaseCfgData.getGroupByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  效果类型_emBuffEffectType 1;//正面 2;//负面 3;//负面完全可驱散（不检测Mark驱散标记） 4;//负面控制 */
		 BuffNewBuffBaseCfgData.getEffectTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectType;
			}
			return 0;
		};
		 /**  叠加规则_emBuffSameRepeatType1丢弃2替换3叠加回合 */
		 BuffNewBuffBaseCfgData.getSameRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sameRepeatType;
			}
			return 0;
		};
		 /**  不同来源叠加规则_emBuffDiffRepeatType1;//丢弃2;//替换3;//共存 */
		 BuffNewBuffBaseCfgData.getDiffRepeatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.diffRepeatType;
			}
			return 0;
		};
		 /**  持续回合数0表示永久Administrator:如果是战斗开始时被动释放，就需要增加1回合。 */
		 BuffNewBuffBaseCfgData.getExistRoundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.existRound;
			}
			return 0;
		};
		 /**  最大层数 */
		 BuffNewBuffBaseCfgData.getMaxLayerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLayer;
			}
			return 0;
		};
		 /**  Mark（多选；隔开）_emBuffMark1,不可驱散2;//死亡是否不删除3;//死亡可以加 */
		 BuffNewBuffBaseCfgData.getMarkByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  删除条件_emBuffDelCondition1;//被攻击 参数1:次数_概率万分比_次数_概率万分比2;//生效立即删除 */
		 BuffNewBuffBaseCfgData.getDelConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delCondition;
			}
			return ""
		};
		 /**  删除触发_emBuffDelAction1;//源头使用技能 技能ID */
		 BuffNewBuffBaseCfgData.getDelActionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAction;
			}
			return ""
		};
		 /**  buff图标 */
		 BuffNewBuffBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  buff特效id */
		 BuffNewBuffBaseCfgData.getEffectIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectId;
			}
			return ""
		};

	return BuffNewBuffBaseCfgData
}());
	
cfg.BuffNewBuffBaseCfgData = BuffNewBuffBaseCfgData;
var BuffNewBuffStateBaseCfgData  = /** @class */ (function () {
	function BuffNewBuffStateBaseCfgData () {
	}
	BuffNewBuffStateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	BuffNewBuffStateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		BuffNewBuffStateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "newState");
		};
		 /**  新状态 */
		 BuffNewBuffStateBaseCfgData.getNewStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newState;
			}
			return 0;
		};
		 /**  删除老状态 */
		 BuffNewBuffStateBaseCfgData.getDelOldStateByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delOldState;
			}
			return ""
		};
		 /**  互斥状态 */
		 BuffNewBuffStateBaseCfgData.getCanAddByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canAdd;
			}
			return ""
		};
		 /**  名称 */
		 BuffNewBuffStateBaseCfgData.getNameByNewState = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return BuffNewBuffStateBaseCfgData
}());
	
cfg.BuffNewBuffStateBaseCfgData = BuffNewBuffStateBaseCfgData;
var ChallengeFailPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeFailPrizeBaseCfgData () {
	}
	ChallengeFailPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeFailPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeFailPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeFailPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeFailPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeFailPrizeBaseCfgData
}());
	
cfg.ChallengeFailPrizeBaseCfgData = ChallengeFailPrizeBaseCfgData;
var ChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function ChallengeMonsterNewBaseCfgData () {
	}
	ChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ChallengeMonsterNewBaseCfgData
}());
	
cfg.ChallengeMonsterNewBaseCfgData = ChallengeMonsterNewBaseCfgData;
var ChallengeSeasonPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeSeasonPrizeBaseCfgData () {
	}
	ChallengeSeasonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeSeasonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeSeasonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeSeasonPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeSeasonPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeSeasonPrizeBaseCfgData
}());
	
cfg.ChallengeSeasonPrizeBaseCfgData = ChallengeSeasonPrizeBaseCfgData;
var ChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function ChallengeMonsterNewBaseCfgData () {
	}
	ChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ChallengeMonsterNewBaseCfgData
}());
	
cfg.ChallengeMonsterNewBaseCfgData = ChallengeMonsterNewBaseCfgData;
var ChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWinPrizeBaseCfgData () {
	}
	ChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeWinPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWinPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWinPrizeBaseCfgData
}());
	
cfg.ChallengeWinPrizeBaseCfgData = ChallengeWinPrizeBaseCfgData;
var ChallengeConstInfoBaseCfgData  = /** @class */ (function () {
	function ChallengeConstInfoBaseCfgData () {
	}
	ChallengeConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 ChallengeConstInfoBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  重置积分比例百分比 */
		 ChallengeConstInfoBaseCfgData.getResetScoreRateByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetScoreRate;
			}
			return 0;
		};
		 /**  每日免费次数 */
		 ChallengeConstInfoBaseCfgData.getDayFreeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFreeCount;
			}
			return 0;
		};
		 /**  奖励时间 */
		 ChallengeConstInfoBaseCfgData.getDailyPrizeTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyPrizeTime;
			}
		};
		 /**  成功奖励道具 */
		 ChallengeConstInfoBaseCfgData.getWinAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winAddItem;
			}
			return ""
		};
		 /**  失败奖励道具 */
		 ChallengeConstInfoBaseCfgData.getFailAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战斗跳过需要次数 */
		 ChallengeConstInfoBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 ChallengeConstInfoBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机机器人最低积分 */
		 ChallengeConstInfoBaseCfgData.getRandRobotScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randRobotScore;
			}
			return 0;
		};
		 /**  随机积分差 */
		 ChallengeConstInfoBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  进入需要的道具ID */
		 ChallengeConstInfoBaseCfgData.getEnterNeedItemIDByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enterNeedItemID;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 ChallengeConstInfoBaseCfgData.getLikePrizeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};

	return ChallengeConstInfoBaseCfgData
}());
	
cfg.ChallengeConstInfoBaseCfgData = ChallengeConstInfoBaseCfgData;
var ChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWinPrizeBaseCfgData () {
	}
	ChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeWinPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWinPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWinPrizeBaseCfgData
}());
	
cfg.ChallengeWinPrizeBaseCfgData = ChallengeWinPrizeBaseCfgData;
var ChallengeConstInfoBaseCfgData  = /** @class */ (function () {
	function ChallengeConstInfoBaseCfgData () {
	}
	ChallengeConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 ChallengeConstInfoBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  重置积分比例百分比 */
		 ChallengeConstInfoBaseCfgData.getResetScoreRateByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetScoreRate;
			}
			return 0;
		};
		 /**  每日免费次数 */
		 ChallengeConstInfoBaseCfgData.getDayFreeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFreeCount;
			}
			return 0;
		};
		 /**  奖励时间 */
		 ChallengeConstInfoBaseCfgData.getDailyPrizeTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyPrizeTime;
			}
		};
		 /**  成功奖励道具 */
		 ChallengeConstInfoBaseCfgData.getWinAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winAddItem;
			}
			return ""
		};
		 /**  失败奖励道具 */
		 ChallengeConstInfoBaseCfgData.getFailAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战斗跳过需要次数 */
		 ChallengeConstInfoBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 ChallengeConstInfoBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机机器人最低积分 */
		 ChallengeConstInfoBaseCfgData.getRandRobotScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randRobotScore;
			}
			return 0;
		};
		 /**  随机积分差 */
		 ChallengeConstInfoBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  进入需要的道具ID */
		 ChallengeConstInfoBaseCfgData.getEnterNeedItemIDByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enterNeedItemID;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 ChallengeConstInfoBaseCfgData.getLikePrizeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};

	return ChallengeConstInfoBaseCfgData
}());
	
cfg.ChallengeConstInfoBaseCfgData = ChallengeConstInfoBaseCfgData;
var ChallengeRobotBaseCfgData  = /** @class */ (function () {
	function ChallengeRobotBaseCfgData () {
	}
	ChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ChallengeRobotBaseCfgData
}());
	
cfg.ChallengeRobotBaseCfgData = ChallengeRobotBaseCfgData;
var ChallengeSeasonPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeSeasonPrizeBaseCfgData () {
	}
	ChallengeSeasonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeSeasonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeSeasonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeSeasonPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeSeasonPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeSeasonPrizeBaseCfgData
}());
	
cfg.ChallengeSeasonPrizeBaseCfgData = ChallengeSeasonPrizeBaseCfgData;
var ChallengeWeekPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWeekPrizeBaseCfgData () {
	}
	ChallengeWeekPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWeekPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWeekPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 ChallengeWeekPrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};
		 /**  需要挑战次数 */
		 ChallengeWeekPrizeBaseCfgData.getNeedFightCountByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightCount;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWeekPrizeBaseCfgData.getAddItemByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWeekPrizeBaseCfgData
}());
	
cfg.ChallengeWeekPrizeBaseCfgData = ChallengeWeekPrizeBaseCfgData;
var ChallengeConstInfoBaseCfgData  = /** @class */ (function () {
	function ChallengeConstInfoBaseCfgData () {
	}
	ChallengeConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 ChallengeConstInfoBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  重置积分比例百分比 */
		 ChallengeConstInfoBaseCfgData.getResetScoreRateByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetScoreRate;
			}
			return 0;
		};
		 /**  每日免费次数 */
		 ChallengeConstInfoBaseCfgData.getDayFreeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFreeCount;
			}
			return 0;
		};
		 /**  奖励时间 */
		 ChallengeConstInfoBaseCfgData.getDailyPrizeTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyPrizeTime;
			}
		};
		 /**  成功奖励道具 */
		 ChallengeConstInfoBaseCfgData.getWinAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winAddItem;
			}
			return ""
		};
		 /**  失败奖励道具 */
		 ChallengeConstInfoBaseCfgData.getFailAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战斗跳过需要次数 */
		 ChallengeConstInfoBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 ChallengeConstInfoBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机机器人最低积分 */
		 ChallengeConstInfoBaseCfgData.getRandRobotScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randRobotScore;
			}
			return 0;
		};
		 /**  随机积分差 */
		 ChallengeConstInfoBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  进入需要的道具ID */
		 ChallengeConstInfoBaseCfgData.getEnterNeedItemIDByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enterNeedItemID;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 ChallengeConstInfoBaseCfgData.getLikePrizeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};

	return ChallengeConstInfoBaseCfgData
}());
	
cfg.ChallengeConstInfoBaseCfgData = ChallengeConstInfoBaseCfgData;
var ChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWinPrizeBaseCfgData () {
	}
	ChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeWinPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWinPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWinPrizeBaseCfgData
}());
	
cfg.ChallengeWinPrizeBaseCfgData = ChallengeWinPrizeBaseCfgData;
var ChallengeFailPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeFailPrizeBaseCfgData () {
	}
	ChallengeFailPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeFailPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeFailPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeFailPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeFailPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeFailPrizeBaseCfgData
}());
	
cfg.ChallengeFailPrizeBaseCfgData = ChallengeFailPrizeBaseCfgData;
var ChallengeSeasonPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeSeasonPrizeBaseCfgData () {
	}
	ChallengeSeasonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeSeasonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeSeasonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeSeasonPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeSeasonPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeSeasonPrizeBaseCfgData
}());
	
cfg.ChallengeSeasonPrizeBaseCfgData = ChallengeSeasonPrizeBaseCfgData;
var ChallengeWeekPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWeekPrizeBaseCfgData () {
	}
	ChallengeWeekPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWeekPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWeekPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 ChallengeWeekPrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};
		 /**  需要挑战次数 */
		 ChallengeWeekPrizeBaseCfgData.getNeedFightCountByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightCount;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWeekPrizeBaseCfgData.getAddItemByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWeekPrizeBaseCfgData
}());
	
cfg.ChallengeWeekPrizeBaseCfgData = ChallengeWeekPrizeBaseCfgData;
var ChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function ChallengeMonsterNewBaseCfgData () {
	}
	ChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ChallengeMonsterNewBaseCfgData
}());
	
cfg.ChallengeMonsterNewBaseCfgData = ChallengeMonsterNewBaseCfgData;
var ChallengeFailPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeFailPrizeBaseCfgData () {
	}
	ChallengeFailPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeFailPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeFailPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 ChallengeFailPrizeBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeFailPrizeBaseCfgData.getAddItemByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeFailPrizeBaseCfgData
}());
	
cfg.ChallengeFailPrizeBaseCfgData = ChallengeFailPrizeBaseCfgData;
var ChallengeWeekPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeWeekPrizeBaseCfgData () {
	}
	ChallengeWeekPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeWeekPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeWeekPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 ChallengeWeekPrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};
		 /**  需要挑战次数 */
		 ChallengeWeekPrizeBaseCfgData.getNeedFightCountByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightCount;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeWeekPrizeBaseCfgData.getAddItemByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeWeekPrizeBaseCfgData
}());
	
cfg.ChallengeWeekPrizeBaseCfgData = ChallengeWeekPrizeBaseCfgData;
var ChallengeRobotBaseCfgData  = /** @class */ (function () {
	function ChallengeRobotBaseCfgData () {
	}
	ChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ChallengeRobotBaseCfgData
}());
	
cfg.ChallengeRobotBaseCfgData = ChallengeRobotBaseCfgData;
var ChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeDailyPrizeBaseCfgData () {
	}
	ChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeDailyPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeDailyPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeDailyPrizeBaseCfgData
}());
	
cfg.ChallengeDailyPrizeBaseCfgData = ChallengeDailyPrizeBaseCfgData;
var ChallengeRobotBaseCfgData  = /** @class */ (function () {
	function ChallengeRobotBaseCfgData () {
	}
	ChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ChallengeRobotBaseCfgData
}());
	
cfg.ChallengeRobotBaseCfgData = ChallengeRobotBaseCfgData;
var ChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeDailyPrizeBaseCfgData () {
	}
	ChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeDailyPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeDailyPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeDailyPrizeBaseCfgData
}());
	
cfg.ChallengeDailyPrizeBaseCfgData = ChallengeDailyPrizeBaseCfgData;
var ChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function ChallengeDailyPrizeBaseCfgData () {
	}
	ChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 ChallengeDailyPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChallengeDailyPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ChallengeDailyPrizeBaseCfgData
}());
	
cfg.ChallengeDailyPrizeBaseCfgData = ChallengeDailyPrizeBaseCfgData;
var ChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function ChampionConstInfoBaseCfgData () {
	}
	ChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 ChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 ChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 ChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 ChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要竞技场排名 */
		 ChampionConstInfoBaseCfgData.getNeedChallengeRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 ChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 ChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 ChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 ChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  初始赔率 */
		 ChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 ChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 ChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 ChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 ChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 ChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 ChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 ChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};

	return ChampionConstInfoBaseCfgData
}());
	
cfg.ChampionConstInfoBaseCfgData = ChampionConstInfoBaseCfgData;
var ChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function ChampionTopPrizeBaseCfgData () {
	}
	ChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 ChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 ChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return ChampionTopPrizeBaseCfgData
}());
	
cfg.ChampionTopPrizeBaseCfgData = ChampionTopPrizeBaseCfgData;
var ChampionRoundBaseCfgData  = /** @class */ (function () {
	function ChampionRoundBaseCfgData () {
	}
	ChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 ChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 ChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 ChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return ChampionRoundBaseCfgData
}());
	
cfg.ChampionRoundBaseCfgData = ChampionRoundBaseCfgData;
var ChampionRoundBaseCfgData  = /** @class */ (function () {
	function ChampionRoundBaseCfgData () {
	}
	ChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 ChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 ChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 ChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return ChampionRoundBaseCfgData
}());
	
cfg.ChampionRoundBaseCfgData = ChampionRoundBaseCfgData;
var ChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function ChampionConstInfoBaseCfgData () {
	}
	ChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 ChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 ChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 ChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 ChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要竞技场排名 */
		 ChampionConstInfoBaseCfgData.getNeedChallengeRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 ChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 ChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 ChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 ChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  初始赔率 */
		 ChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 ChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 ChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 ChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 ChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 ChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 ChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 ChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};

	return ChampionConstInfoBaseCfgData
}());
	
cfg.ChampionConstInfoBaseCfgData = ChampionConstInfoBaseCfgData;
var ChampionRoundBaseCfgData  = /** @class */ (function () {
	function ChampionRoundBaseCfgData () {
	}
	ChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 ChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 ChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 ChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return ChampionRoundBaseCfgData
}());
	
cfg.ChampionRoundBaseCfgData = ChampionRoundBaseCfgData;
var ChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function ChampionTopPrizeBaseCfgData () {
	}
	ChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 ChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 ChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return ChampionTopPrizeBaseCfgData
}());
	
cfg.ChampionTopPrizeBaseCfgData = ChampionTopPrizeBaseCfgData;
var ChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function ChampionConstInfoBaseCfgData () {
	}
	ChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 ChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 ChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 ChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 ChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要竞技场排名 */
		 ChampionConstInfoBaseCfgData.getNeedChallengeRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 ChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 ChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 ChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 ChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  初始赔率 */
		 ChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 ChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 ChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 ChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 ChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 ChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 ChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 ChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};

	return ChampionConstInfoBaseCfgData
}());
	
cfg.ChampionConstInfoBaseCfgData = ChampionConstInfoBaseCfgData;
var ChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function ChampionTopPrizeBaseCfgData () {
	}
	ChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 ChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 ChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return ChampionTopPrizeBaseCfgData
}());
	
cfg.ChampionTopPrizeBaseCfgData = ChampionTopPrizeBaseCfgData;
var ChargeBaseCfgData  = /** @class */ (function () {
	function ChargeBaseCfgData () {
	}
	ChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  商品ID */
		 ChargeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  商品名称（必填字段） */
		 ChargeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  平台类型_emPlatformType */
		 ChargeBaseCfgData.getPlatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.platType;
			}
			return 0;
		};
		 /**  购买的类型 */
		 ChargeBaseCfgData.getChargeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeType;
			}
			return 0;
		};
		 /**  子类型(根据不同的购买类型细分子类型) */
		 ChargeBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  是否绝版 */
		 ChargeBaseCfgData.getOutOfPrintByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.outOfPrint;
			}
			return 0;
		};
		 /**  扩展参数 */
		 ChargeBaseCfgData.getParamsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  所需的人民币(分) */
		 ChargeBaseCfgData.getNeedMoneyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  限购次数(0不限购) */
		 ChargeBaseCfgData.getMaxBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxBuyCount;
			}
			return 0;
		};
		 /**  限购周期 */
		 ChargeBaseCfgData.getLimitBuyPeriodByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyPeriod;
			}
			return 0;
		};
		 /**  组ID */
		 ChargeBaseCfgData.getGroupIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  分组前提条件 */
		 ChargeBaseCfgData.getNeedPreConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPreCondition;
			}
			return ""
		};
		 /**  开启时间 */
		 ChargeBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  循环开服天数 */
		 ChargeBaseCfgData.getCircleServerDayByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleServerDay;
			}
			return 0;
		};
		 /**  加道具 */
		 ChargeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首次额外赠送道具 */
		 ChargeBaseCfgData.getFirstAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  非首次额外赠送道具 */
		 ChargeBaseCfgData.getExtraAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddItem;
			}
			return ""
		};
		 /**  是否广播 */
		 ChargeBaseCfgData.getBroadCastByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};
		 /**  商品描述 */
		 ChargeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内购项ID */
		 ChargeBaseCfgData.getAppidByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid;
			}
			return ""
		};
		 /**  联运内购项ID */
		 ChargeBaseCfgData.getAppid3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid3;
			}
			return ""
		};
		 /**  联运内购项ID2 */
		 ChargeBaseCfgData.getAppid2122044ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid2122044;
			}
			return ""
		};

	return ChargeBaseCfgData
}());
	
cfg.ChargeBaseCfgData = ChargeBaseCfgData;
var ChargeBaseCfgData  = /** @class */ (function () {
	function ChargeBaseCfgData () {
	}
	ChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  商品ID */
		 ChargeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  商品名称（必填字段） */
		 ChargeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  平台类型_emPlatformType */
		 ChargeBaseCfgData.getPlatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.platType;
			}
			return 0;
		};
		 /**  购买的类型 */
		 ChargeBaseCfgData.getChargeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeType;
			}
			return 0;
		};
		 /**  子类型(根据不同的购买类型细分子类型) */
		 ChargeBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  是否绝版 */
		 ChargeBaseCfgData.getOutOfPrintByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.outOfPrint;
			}
			return 0;
		};
		 /**  扩展参数 */
		 ChargeBaseCfgData.getParamsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  所需的人民币(分) */
		 ChargeBaseCfgData.getNeedMoneyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  限购次数(0不限购) */
		 ChargeBaseCfgData.getMaxBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxBuyCount;
			}
			return 0;
		};
		 /**  限购周期 */
		 ChargeBaseCfgData.getLimitBuyPeriodByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyPeriod;
			}
			return 0;
		};
		 /**  组ID */
		 ChargeBaseCfgData.getGroupIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  分组前提条件 */
		 ChargeBaseCfgData.getNeedPreConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPreCondition;
			}
			return ""
		};
		 /**  开启时间 */
		 ChargeBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  循环开服天数 */
		 ChargeBaseCfgData.getCircleServerDayByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleServerDay;
			}
			return 0;
		};
		 /**  加道具 */
		 ChargeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首次额外赠送道具 */
		 ChargeBaseCfgData.getFirstAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  非首次额外赠送道具 */
		 ChargeBaseCfgData.getExtraAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddItem;
			}
			return ""
		};
		 /**  是否广播 */
		 ChargeBaseCfgData.getBroadCastByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};
		 /**  商品描述 */
		 ChargeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内购项ID */
		 ChargeBaseCfgData.getAppidByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid;
			}
			return ""
		};
		 /**  联运内购项ID */
		 ChargeBaseCfgData.getAppid3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid3;
			}
			return ""
		};
		 /**  联运内购项ID2 */
		 ChargeBaseCfgData.getAppid2122044ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid2122044;
			}
			return ""
		};

	return ChargeBaseCfgData
}());
	
cfg.ChargeBaseCfgData = ChargeBaseCfgData;
var ChargeBaseCfgData  = /** @class */ (function () {
	function ChargeBaseCfgData () {
	}
	ChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  商品ID */
		 ChargeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  商品名称（必填字段） */
		 ChargeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  平台类型_emPlatformType */
		 ChargeBaseCfgData.getPlatTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.platType;
			}
			return 0;
		};
		 /**  购买的类型 */
		 ChargeBaseCfgData.getChargeTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeType;
			}
			return 0;
		};
		 /**  子类型(根据不同的购买类型细分子类型) */
		 ChargeBaseCfgData.getSonTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sonType;
			}
			return 0;
		};
		 /**  是否绝版 */
		 ChargeBaseCfgData.getOutOfPrintByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.outOfPrint;
			}
			return 0;
		};
		 /**  扩展参数 */
		 ChargeBaseCfgData.getParamsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  所需的人民币(分) */
		 ChargeBaseCfgData.getNeedMoneyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  限购次数(0不限购) */
		 ChargeBaseCfgData.getMaxBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxBuyCount;
			}
			return 0;
		};
		 /**  限购周期 */
		 ChargeBaseCfgData.getLimitBuyPeriodByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyPeriod;
			}
			return 0;
		};
		 /**  组ID */
		 ChargeBaseCfgData.getGroupIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  分组前提条件 */
		 ChargeBaseCfgData.getNeedPreConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPreCondition;
			}
			return ""
		};
		 /**  开启时间 */
		 ChargeBaseCfgData.getOpenTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  循环开服天数 */
		 ChargeBaseCfgData.getCircleServerDayByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleServerDay;
			}
			return 0;
		};
		 /**  加道具 */
		 ChargeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首次额外赠送道具 */
		 ChargeBaseCfgData.getFirstAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  非首次额外赠送道具 */
		 ChargeBaseCfgData.getExtraAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddItem;
			}
			return ""
		};
		 /**  是否广播 */
		 ChargeBaseCfgData.getBroadCastByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};
		 /**  商品描述 */
		 ChargeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  内购项ID */
		 ChargeBaseCfgData.getAppidByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid;
			}
			return ""
		};
		 /**  联运内购项ID */
		 ChargeBaseCfgData.getAppid3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid3;
			}
			return ""
		};
		 /**  联运内购项ID2 */
		 ChargeBaseCfgData.getAppid2122044ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.appid2122044;
			}
			return ""
		};

	return ChargeBaseCfgData
}());
	
cfg.ChargeBaseCfgData = ChargeBaseCfgData;
var CommonChatBaseCfgData  = /** @class */ (function () {
	function CommonChatBaseCfgData () {
	}
	CommonChatBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonChatBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonChatBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "channel");
		};
		 /**  Channel_emBroadcast_Channel */
		 CommonChatBaseCfgData.getChannelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  名称 */
		 CommonChatBaseCfgData.getNameByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要玩家等级 */
		 CommonChatBaseCfgData.getNeedPlayerLevelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  聊天间隔 */
		 CommonChatBaseCfgData.getStepSecondByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepSecond;
			}
			return 0;
		};
		 /**  缓存数量 */
		 CommonChatBaseCfgData.getSaveCountByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.saveCount;
			}
			return 0;
		};

	return CommonChatBaseCfgData
}());
	
cfg.CommonChatBaseCfgData = CommonChatBaseCfgData;
var CommonSupportBaseCfgData  = /** @class */ (function () {
	function CommonSupportBaseCfgData () {
	}
	CommonSupportBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSupportBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSupportBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  支援类型 */
		 CommonSupportBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  可派遣个数 */
		 CommonSupportBaseCfgData.getSendCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sendCount;
			}
			return 0;
		};
		 /**  可雇佣个数 */
		 CommonSupportBaseCfgData.getHireCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hireCount;
			}
			return 0;
		};
		 /**  单场战斗最大上场个数 */
		 CommonSupportBaseCfgData.getFightCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCount;
			}
			return 0;
		};
		 /**  最大战力区间 */
		 CommonSupportBaseCfgData.getMaxPowerByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPower;
			}
			return 0;
		};
		 /**  是否可重复上场 */
		 CommonSupportBaseCfgData.getCanUseAgainByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canUseAgain;
			}
			return 0;
		};
		 /**  是否可解雇 */
		 CommonSupportBaseCfgData.getCanFireByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canFire;
			}
			return 0;
		};

	return CommonSupportBaseCfgData
}());
	
cfg.CommonSupportBaseCfgData = CommonSupportBaseCfgData;
var CommonChatBaseCfgData  = /** @class */ (function () {
	function CommonChatBaseCfgData () {
	}
	CommonChatBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonChatBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonChatBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "channel");
		};
		 /**  Channel_emBroadcast_Channel */
		 CommonChatBaseCfgData.getChannelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  名称 */
		 CommonChatBaseCfgData.getNameByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要玩家等级 */
		 CommonChatBaseCfgData.getNeedPlayerLevelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  聊天间隔 */
		 CommonChatBaseCfgData.getStepSecondByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepSecond;
			}
			return 0;
		};
		 /**  缓存数量 */
		 CommonChatBaseCfgData.getSaveCountByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.saveCount;
			}
			return 0;
		};

	return CommonChatBaseCfgData
}());
	
cfg.CommonChatBaseCfgData = CommonChatBaseCfgData;
var CommonInvitePrizeBaseCfgData  = /** @class */ (function () {
	function CommonInvitePrizeBaseCfgData () {
	}
	CommonInvitePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonInvitePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonInvitePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveID");
		};
		 /**  成就ID */
		 CommonInvitePrizeBaseCfgData.getAchieveIDByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveID;
			}
			return 0;
		};
		 /**  奖励 */
		 CommonInvitePrizeBaseCfgData.getAddItemByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CommonInvitePrizeBaseCfgData
}());
	
cfg.CommonInvitePrizeBaseCfgData = CommonInvitePrizeBaseCfgData;
var CommonInvitePrizeBaseCfgData  = /** @class */ (function () {
	function CommonInvitePrizeBaseCfgData () {
	}
	CommonInvitePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonInvitePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonInvitePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveID");
		};
		 /**  成就ID */
		 CommonInvitePrizeBaseCfgData.getAchieveIDByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveID;
			}
			return 0;
		};
		 /**  奖励 */
		 CommonInvitePrizeBaseCfgData.getAddItemByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CommonInvitePrizeBaseCfgData
}());
	
cfg.CommonInvitePrizeBaseCfgData = CommonInvitePrizeBaseCfgData;
var CommonSurveyConstantsBaseCfgData  = /** @class */ (function () {
	function CommonSurveyConstantsBaseCfgData () {
	}
	CommonSurveyConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSurveyConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSurveyConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 CommonSurveyConstantsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  推送开关 */
		 CommonSurveyConstantsBaseCfgData.getIndPushSwitchexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPushSwitchex;
			}
			return 0;
		};
		 /**  推送顺序 */
		 CommonSurveyConstantsBaseCfgData.getIndPuShorderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPuShorder;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 CommonSurveyConstantsBaseCfgData.getPushTimeTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeTybe;
			}
			return 0;
		};
		 /**  活动时间（开服前n天） */
		 CommonSurveyConstantsBaseCfgData.getOpenDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openDays;
			}
			return 0;
		};
		 /**  推送时间 */
		 CommonSurveyConstantsBaseCfgData.getPushtimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushtime;
			}
			return ""
		};
		 /**  推送渠道 */
		 CommonSurveyConstantsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  答题获得的奖励 */
		 CommonSurveyConstantsBaseCfgData.getPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};
		 /**  幸运奖励预览 */
		 CommonSurveyConstantsBaseCfgData.getLuckyPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.luckyPrize;
			}
			return ""
		};

	return CommonSurveyConstantsBaseCfgData
}());
	
cfg.CommonSurveyConstantsBaseCfgData = CommonSurveyConstantsBaseCfgData;
var CommonSupportBaseCfgData  = /** @class */ (function () {
	function CommonSupportBaseCfgData () {
	}
	CommonSupportBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSupportBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSupportBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  支援类型 */
		 CommonSupportBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  可派遣个数 */
		 CommonSupportBaseCfgData.getSendCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sendCount;
			}
			return 0;
		};
		 /**  可雇佣个数 */
		 CommonSupportBaseCfgData.getHireCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hireCount;
			}
			return 0;
		};
		 /**  单场战斗最大上场个数 */
		 CommonSupportBaseCfgData.getFightCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCount;
			}
			return 0;
		};
		 /**  最大战力区间 */
		 CommonSupportBaseCfgData.getMaxPowerByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPower;
			}
			return 0;
		};
		 /**  是否可重复上场 */
		 CommonSupportBaseCfgData.getCanUseAgainByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canUseAgain;
			}
			return 0;
		};
		 /**  是否可解雇 */
		 CommonSupportBaseCfgData.getCanFireByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canFire;
			}
			return 0;
		};

	return CommonSupportBaseCfgData
}());
	
cfg.CommonSupportBaseCfgData = CommonSupportBaseCfgData;
var CommonSurveyConstantsBaseCfgData  = /** @class */ (function () {
	function CommonSurveyConstantsBaseCfgData () {
	}
	CommonSurveyConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSurveyConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSurveyConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 CommonSurveyConstantsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  推送开关 */
		 CommonSurveyConstantsBaseCfgData.getIndPushSwitchexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPushSwitchex;
			}
			return 0;
		};
		 /**  推送顺序 */
		 CommonSurveyConstantsBaseCfgData.getIndPuShorderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPuShorder;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 CommonSurveyConstantsBaseCfgData.getPushTimeTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeTybe;
			}
			return 0;
		};
		 /**  活动时间（开服前n天） */
		 CommonSurveyConstantsBaseCfgData.getOpenDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openDays;
			}
			return 0;
		};
		 /**  推送时间 */
		 CommonSurveyConstantsBaseCfgData.getPushtimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushtime;
			}
			return ""
		};
		 /**  推送渠道 */
		 CommonSurveyConstantsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  答题获得的奖励 */
		 CommonSurveyConstantsBaseCfgData.getPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};
		 /**  幸运奖励预览 */
		 CommonSurveyConstantsBaseCfgData.getLuckyPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.luckyPrize;
			}
			return ""
		};

	return CommonSurveyConstantsBaseCfgData
}());
	
cfg.CommonSurveyConstantsBaseCfgData = CommonSurveyConstantsBaseCfgData;
var CommonInvitePrizeBaseCfgData  = /** @class */ (function () {
	function CommonInvitePrizeBaseCfgData () {
	}
	CommonInvitePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonInvitePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonInvitePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "achieveID");
		};
		 /**  成就ID */
		 CommonInvitePrizeBaseCfgData.getAchieveIDByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveID;
			}
			return 0;
		};
		 /**  奖励 */
		 CommonInvitePrizeBaseCfgData.getAddItemByAchieveID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CommonInvitePrizeBaseCfgData
}());
	
cfg.CommonInvitePrizeBaseCfgData = CommonInvitePrizeBaseCfgData;
var CommonChatBaseCfgData  = /** @class */ (function () {
	function CommonChatBaseCfgData () {
	}
	CommonChatBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonChatBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonChatBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "channel");
		};
		 /**  Channel_emBroadcast_Channel */
		 CommonChatBaseCfgData.getChannelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.channel;
			}
			return 0;
		};
		 /**  名称 */
		 CommonChatBaseCfgData.getNameByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要玩家等级 */
		 CommonChatBaseCfgData.getNeedPlayerLevelByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  聊天间隔 */
		 CommonChatBaseCfgData.getStepSecondByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepSecond;
			}
			return 0;
		};
		 /**  缓存数量 */
		 CommonChatBaseCfgData.getSaveCountByChannel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.saveCount;
			}
			return 0;
		};

	return CommonChatBaseCfgData
}());
	
cfg.CommonChatBaseCfgData = CommonChatBaseCfgData;
var CommonSurveyConstantsBaseCfgData  = /** @class */ (function () {
	function CommonSurveyConstantsBaseCfgData () {
	}
	CommonSurveyConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSurveyConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSurveyConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 CommonSurveyConstantsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  推送开关 */
		 CommonSurveyConstantsBaseCfgData.getIndPushSwitchexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPushSwitchex;
			}
			return 0;
		};
		 /**  推送顺序 */
		 CommonSurveyConstantsBaseCfgData.getIndPuShorderByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.indPuShorder;
			}
			return 0;
		};
		 /**  推送时间类型 */
		 CommonSurveyConstantsBaseCfgData.getPushTimeTybeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushTimeTybe;
			}
			return 0;
		};
		 /**  活动时间（开服前n天） */
		 CommonSurveyConstantsBaseCfgData.getOpenDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openDays;
			}
			return 0;
		};
		 /**  推送时间 */
		 CommonSurveyConstantsBaseCfgData.getPushtimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushtime;
			}
			return ""
		};
		 /**  推送渠道 */
		 CommonSurveyConstantsBaseCfgData.getPushChannelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pushChannel;
			}
			return ""
		};
		 /**  答题获得的奖励 */
		 CommonSurveyConstantsBaseCfgData.getPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};
		 /**  幸运奖励预览 */
		 CommonSurveyConstantsBaseCfgData.getLuckyPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.luckyPrize;
			}
			return ""
		};

	return CommonSurveyConstantsBaseCfgData
}());
	
cfg.CommonSurveyConstantsBaseCfgData = CommonSurveyConstantsBaseCfgData;
var CommonSupportBaseCfgData  = /** @class */ (function () {
	function CommonSupportBaseCfgData () {
	}
	CommonSupportBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CommonSupportBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CommonSupportBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  支援类型 */
		 CommonSupportBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  可派遣个数 */
		 CommonSupportBaseCfgData.getSendCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sendCount;
			}
			return 0;
		};
		 /**  可雇佣个数 */
		 CommonSupportBaseCfgData.getHireCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hireCount;
			}
			return 0;
		};
		 /**  单场战斗最大上场个数 */
		 CommonSupportBaseCfgData.getFightCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCount;
			}
			return 0;
		};
		 /**  最大战力区间 */
		 CommonSupportBaseCfgData.getMaxPowerByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPower;
			}
			return 0;
		};
		 /**  是否可重复上场 */
		 CommonSupportBaseCfgData.getCanUseAgainByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canUseAgain;
			}
			return 0;
		};
		 /**  是否可解雇 */
		 CommonSupportBaseCfgData.getCanFireByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.canFire;
			}
			return 0;
		};

	return CommonSupportBaseCfgData
}());
	
cfg.CommonSupportBaseCfgData = CommonSupportBaseCfgData;
var CompensatePlayerRankBaseCfgData  = /** @class */ (function () {
	function CompensatePlayerRankBaseCfgData () {
	}
	CompensatePlayerRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePlayerRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePlayerRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "worldID");
		};
		 /**  区服ID */
		 CompensatePlayerRankBaseCfgData.getWorldIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldID;
			}
			return 0;
		};
		 /**  账号ID */
		 CompensatePlayerRankBaseCfgData.getAccountIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.accountID;
			}
			return 0;
		};
		 /**  角色ID */
		 CompensatePlayerRankBaseCfgData.getPlayerIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.playerID;
			}
			return 0;
		};
		 /**  初始战力值 */
		 CompensatePlayerRankBaseCfgData.getPowValueByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.powValue;
			}
			return ""
		};

	return CompensatePlayerRankBaseCfgData
}());
	
cfg.CompensatePlayerRankBaseCfgData = CompensatePlayerRankBaseCfgData;
var CompensateItemExchangeBaseCfgData  = /** @class */ (function () {
	function CompensateItemExchangeBaseCfgData () {
	}
	CompensateItemExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateItemExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateItemExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 CompensateItemExchangeBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  邮件类型 */
		 CompensateItemExchangeBaseCfgData.getEmailTypeByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.emailType;
			}
			return 0;
		};
		 /**  物品ID */
		 CompensateItemExchangeBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  兑换成物品 */
		 CompensateItemExchangeBaseCfgData.getToItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toItem;
			}
			return ""
		};

	return CompensateItemExchangeBaseCfgData
}());
	
cfg.CompensateItemExchangeBaseCfgData = CompensateItemExchangeBaseCfgData;
var CompensateAddpetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensateAddpetCompensateBaseCfgData () {
	}
	CompensateAddpetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateAddpetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateAddpetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  精灵id */
		 CompensateAddpetCompensateBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进化道具数量 */
		 CompensateAddpetCompensateBaseCfgData.getEvolveItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensateAddpetCompensateBaseCfgData
}());
	
cfg.CompensateAddpetCompensateBaseCfgData = CompensateAddpetCompensateBaseCfgData;
var CompensatePlayerRankBaseCfgData  = /** @class */ (function () {
	function CompensatePlayerRankBaseCfgData () {
	}
	CompensatePlayerRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePlayerRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePlayerRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "worldID");
		};
		 /**  区服ID */
		 CompensatePlayerRankBaseCfgData.getWorldIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldID;
			}
			return 0;
		};
		 /**  账号ID */
		 CompensatePlayerRankBaseCfgData.getAccountIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.accountID;
			}
			return 0;
		};
		 /**  角色ID */
		 CompensatePlayerRankBaseCfgData.getPlayerIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.playerID;
			}
			return 0;
		};
		 /**  初始战力值 */
		 CompensatePlayerRankBaseCfgData.getPowValueByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.powValue;
			}
			return ""
		};

	return CompensatePlayerRankBaseCfgData
}());
	
cfg.CompensatePlayerRankBaseCfgData = CompensatePlayerRankBaseCfgData;
var CompensateItemExchangeBaseCfgData  = /** @class */ (function () {
	function CompensateItemExchangeBaseCfgData () {
	}
	CompensateItemExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateItemExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateItemExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 CompensateItemExchangeBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  邮件类型 */
		 CompensateItemExchangeBaseCfgData.getEmailTypeByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.emailType;
			}
			return 0;
		};
		 /**  物品ID */
		 CompensateItemExchangeBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  兑换成物品 */
		 CompensateItemExchangeBaseCfgData.getToItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toItem;
			}
			return ""
		};

	return CompensateItemExchangeBaseCfgData
}());
	
cfg.CompensateItemExchangeBaseCfgData = CompensateItemExchangeBaseCfgData;
var CompensatePetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensatePetCompensateBaseCfgData () {
	}
	CompensatePetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CompensatePetCompensateBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵id */
		 CompensatePetCompensateBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  星级 */
		 CompensatePetCompensateBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  返还本体id */
		 CompensatePetCompensateBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  返还超级百变怪数量 */
		 CompensatePetCompensateBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};
		 /**  重生道具数量 */
		 CompensatePetCompensateBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};
		 /**  进化道具数量 */
		 CompensatePetCompensateBaseCfgData.getEvolveItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensatePetCompensateBaseCfgData
}());
	
cfg.CompensatePetCompensateBaseCfgData = CompensatePetCompensateBaseCfgData;
var CompensateItemExchangeBaseCfgData  = /** @class */ (function () {
	function CompensateItemExchangeBaseCfgData () {
	}
	CompensateItemExchangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateItemExchangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateItemExchangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 CompensateItemExchangeBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  邮件类型 */
		 CompensateItemExchangeBaseCfgData.getEmailTypeByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.emailType;
			}
			return 0;
		};
		 /**  物品ID */
		 CompensateItemExchangeBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  兑换成物品 */
		 CompensateItemExchangeBaseCfgData.getToItemByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toItem;
			}
			return ""
		};

	return CompensateItemExchangeBaseCfgData
}());
	
cfg.CompensateItemExchangeBaseCfgData = CompensateItemExchangeBaseCfgData;
var CompensatePlayerRankBaseCfgData  = /** @class */ (function () {
	function CompensatePlayerRankBaseCfgData () {
	}
	CompensatePlayerRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePlayerRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePlayerRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "worldID");
		};
		 /**  区服ID */
		 CompensatePlayerRankBaseCfgData.getWorldIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldID;
			}
			return 0;
		};
		 /**  账号ID */
		 CompensatePlayerRankBaseCfgData.getAccountIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.accountID;
			}
			return 0;
		};
		 /**  角色ID */
		 CompensatePlayerRankBaseCfgData.getPlayerIDByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.playerID;
			}
			return 0;
		};
		 /**  初始战力值 */
		 CompensatePlayerRankBaseCfgData.getPowValueByWorldID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.powValue;
			}
			return ""
		};

	return CompensatePlayerRankBaseCfgData
}());
	
cfg.CompensatePlayerRankBaseCfgData = CompensatePlayerRankBaseCfgData;
var CompensateAddpetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensateAddpetCompensateBaseCfgData () {
	}
	CompensateAddpetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateAddpetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateAddpetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  精灵id */
		 CompensateAddpetCompensateBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进化道具数量 */
		 CompensateAddpetCompensateBaseCfgData.getEvolveItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensateAddpetCompensateBaseCfgData
}());
	
cfg.CompensateAddpetCompensateBaseCfgData = CompensateAddpetCompensateBaseCfgData;
var CompensateMailBaseCfgData  = /** @class */ (function () {
	function CompensateMailBaseCfgData () {
	}
	CompensateMailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateMailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateMailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 CompensateMailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 CompensateMailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 CompensateMailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 CompensateMailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return CompensateMailBaseCfgData
}());
	
cfg.CompensateMailBaseCfgData = CompensateMailBaseCfgData;
var CompensatePetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensatePetCompensateBaseCfgData () {
	}
	CompensatePetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CompensatePetCompensateBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵id */
		 CompensatePetCompensateBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  星级 */
		 CompensatePetCompensateBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  返还本体id */
		 CompensatePetCompensateBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  返还超级百变怪数量 */
		 CompensatePetCompensateBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};
		 /**  重生道具数量 */
		 CompensatePetCompensateBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};
		 /**  进化道具数量 */
		 CompensatePetCompensateBaseCfgData.getEvolveItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensatePetCompensateBaseCfgData
}());
	
cfg.CompensatePetCompensateBaseCfgData = CompensatePetCompensateBaseCfgData;
var CompensateMailBaseCfgData  = /** @class */ (function () {
	function CompensateMailBaseCfgData () {
	}
	CompensateMailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateMailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateMailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 CompensateMailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 CompensateMailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 CompensateMailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 CompensateMailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return CompensateMailBaseCfgData
}());
	
cfg.CompensateMailBaseCfgData = CompensateMailBaseCfgData;
var CompensateAddpetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensateAddpetCompensateBaseCfgData () {
	}
	CompensateAddpetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateAddpetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateAddpetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  精灵id */
		 CompensateAddpetCompensateBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  进化道具数量 */
		 CompensateAddpetCompensateBaseCfgData.getEvolveItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensateAddpetCompensateBaseCfgData
}());
	
cfg.CompensateAddpetCompensateBaseCfgData = CompensateAddpetCompensateBaseCfgData;
var CompensatePetCompensateBaseCfgData  = /** @class */ (function () {
	function CompensatePetCompensateBaseCfgData () {
	}
	CompensatePetCompensateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensatePetCompensateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensatePetCompensateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CompensatePetCompensateBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵id */
		 CompensatePetCompensateBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  星级 */
		 CompensatePetCompensateBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  返还本体id */
		 CompensatePetCompensateBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  返还超级百变怪数量 */
		 CompensatePetCompensateBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};
		 /**  重生道具数量 */
		 CompensatePetCompensateBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};
		 /**  进化道具数量 */
		 CompensatePetCompensateBaseCfgData.getEvolveItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolveItem;
			}
			return ""
		};

	return CompensatePetCompensateBaseCfgData
}());
	
cfg.CompensatePetCompensateBaseCfgData = CompensatePetCompensateBaseCfgData;
var CompensateMailBaseCfgData  = /** @class */ (function () {
	function CompensateMailBaseCfgData () {
	}
	CompensateMailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CompensateMailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CompensateMailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 CompensateMailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 CompensateMailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 CompensateMailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 CompensateMailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return CompensateMailBaseCfgData
}());
	
cfg.CompensateMailBaseCfgData = CompensateMailBaseCfgData;
var ConstantGamesPrizePreviewBaseCfgData  = /** @class */ (function () {
	function ConstantGamesPrizePreviewBaseCfgData () {
	}
	ConstantGamesPrizePreviewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantGamesPrizePreviewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantGamesPrizePreviewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  枚举值 */
		 ConstantGamesPrizePreviewBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  道具id列表 */
		 ConstantGamesPrizePreviewBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  功能开关Id */
		 ConstantGamesPrizePreviewBaseCfgData.getSystemSwitchIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 ConstantGamesPrizePreviewBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ConstantGamesPrizePreviewBaseCfgData
}());
	
cfg.ConstantGamesPrizePreviewBaseCfgData = ConstantGamesPrizePreviewBaseCfgData;
var ConstantGamesPrizePreviewBaseCfgData  = /** @class */ (function () {
	function ConstantGamesPrizePreviewBaseCfgData () {
	}
	ConstantGamesPrizePreviewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantGamesPrizePreviewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantGamesPrizePreviewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  枚举值 */
		 ConstantGamesPrizePreviewBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  道具id列表 */
		 ConstantGamesPrizePreviewBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  功能开关Id */
		 ConstantGamesPrizePreviewBaseCfgData.getSystemSwitchIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 ConstantGamesPrizePreviewBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ConstantGamesPrizePreviewBaseCfgData
}());
	
cfg.ConstantGamesPrizePreviewBaseCfgData = ConstantGamesPrizePreviewBaseCfgData;
var ConstantBaseCfgData  = /** @class */ (function () {
	function ConstantBaseCfgData () {
	}
	ConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ConstantBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  系统类型 */
		 ConstantBaseCfgData.getTypeIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeIndex;
			}
			return 0;
		};
		 /**  枚举类型 */
		 ConstantBaseCfgData.getEnumIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  枚举值 */
		 ConstantBaseCfgData.getConstantValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantBaseCfgData
}());
	
cfg.ConstantBaseCfgData = ConstantBaseCfgData;
var ConstantClientConstantBaseCfgData  = /** @class */ (function () {
	function ConstantClientConstantBaseCfgData () {
	}
	ConstantClientConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantClientConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantClientConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "enumIndex");
		};
		 /**  枚举值 */
		 ConstantClientConstantBaseCfgData.getEnumIndexByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  默认值 */
		 ConstantClientConstantBaseCfgData.getConstantValueByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantClientConstantBaseCfgData
}());
	
cfg.ConstantClientConstantBaseCfgData = ConstantClientConstantBaseCfgData;
var ConstantBaseCfgData  = /** @class */ (function () {
	function ConstantBaseCfgData () {
	}
	ConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ConstantBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  系统类型 */
		 ConstantBaseCfgData.getTypeIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeIndex;
			}
			return 0;
		};
		 /**  枚举类型 */
		 ConstantBaseCfgData.getEnumIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  枚举值 */
		 ConstantBaseCfgData.getConstantValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantBaseCfgData
}());
	
cfg.ConstantBaseCfgData = ConstantBaseCfgData;
var ConstantClientConstantBaseCfgData  = /** @class */ (function () {
	function ConstantClientConstantBaseCfgData () {
	}
	ConstantClientConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantClientConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantClientConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "enumIndex");
		};
		 /**  枚举值 */
		 ConstantClientConstantBaseCfgData.getEnumIndexByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  默认值 */
		 ConstantClientConstantBaseCfgData.getConstantValueByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantClientConstantBaseCfgData
}());
	
cfg.ConstantClientConstantBaseCfgData = ConstantClientConstantBaseCfgData;
var ConstantGamesPrizePreviewBaseCfgData  = /** @class */ (function () {
	function ConstantGamesPrizePreviewBaseCfgData () {
	}
	ConstantGamesPrizePreviewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantGamesPrizePreviewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantGamesPrizePreviewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  枚举值 */
		 ConstantGamesPrizePreviewBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  道具id列表 */
		 ConstantGamesPrizePreviewBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  功能开关Id */
		 ConstantGamesPrizePreviewBaseCfgData.getSystemSwitchIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 ConstantGamesPrizePreviewBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return ConstantGamesPrizePreviewBaseCfgData
}());
	
cfg.ConstantGamesPrizePreviewBaseCfgData = ConstantGamesPrizePreviewBaseCfgData;
var ConstantClientConstantBaseCfgData  = /** @class */ (function () {
	function ConstantClientConstantBaseCfgData () {
	}
	ConstantClientConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantClientConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantClientConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "enumIndex");
		};
		 /**  枚举值 */
		 ConstantClientConstantBaseCfgData.getEnumIndexByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  默认值 */
		 ConstantClientConstantBaseCfgData.getConstantValueByEnumIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantClientConstantBaseCfgData
}());
	
cfg.ConstantClientConstantBaseCfgData = ConstantClientConstantBaseCfgData;
var ConstantBaseCfgData  = /** @class */ (function () {
	function ConstantBaseCfgData () {
	}
	ConstantBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConstantBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConstantBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ConstantBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  系统类型 */
		 ConstantBaseCfgData.getTypeIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeIndex;
			}
			return 0;
		};
		 /**  枚举类型 */
		 ConstantBaseCfgData.getEnumIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.enumIndex;
			}
			return 0;
		};
		 /**  枚举值 */
		 ConstantBaseCfgData.getConstantValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.constantValue;
			}
			return 0;
		};

	return ConstantBaseCfgData
}());
	
cfg.ConstantBaseCfgData = ConstantBaseCfgData;
var ConvenantAttrBaseCfgData  = /** @class */ (function () {
	function ConvenantAttrBaseCfgData () {
	}
	ConvenantAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  契约部位ID */
		 ConvenantAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 ConvenantAttrBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  属性加成,多个用逗号隔开 */
		 ConvenantAttrBaseCfgData.getAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return ConvenantAttrBaseCfgData
}());
	
cfg.ConvenantAttrBaseCfgData = ConvenantAttrBaseCfgData;
var ConvenantLevelBaseCfgData  = /** @class */ (function () {
	function ConvenantLevelBaseCfgData () {
	}
	ConvenantLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ConvenantLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下级需要道具 */
		 ConvenantLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ConvenantLevelBaseCfgData
}());
	
cfg.ConvenantLevelBaseCfgData = ConvenantLevelBaseCfgData;
var ConvenantConstBaseCfgData  = /** @class */ (function () {
	function ConvenantConstBaseCfgData () {
	}
	ConvenantConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "unlockNeedItem");
		};
		 /**  解锁需要道具 */
		 ConvenantConstBaseCfgData.getUnlockNeedItemByUnlockNeedItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockNeedItem;
			}
			return ""
		};

	return ConvenantConstBaseCfgData
}());
	
cfg.ConvenantConstBaseCfgData = ConvenantConstBaseCfgData;
var ConvenantConstBaseCfgData  = /** @class */ (function () {
	function ConvenantConstBaseCfgData () {
	}
	ConvenantConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "unlockNeedItem");
		};
		 /**  解锁需要道具 */
		 ConvenantConstBaseCfgData.getUnlockNeedItemByUnlockNeedItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockNeedItem;
			}
			return ""
		};

	return ConvenantConstBaseCfgData
}());
	
cfg.ConvenantConstBaseCfgData = ConvenantConstBaseCfgData;
var ConvenantAttrBaseCfgData  = /** @class */ (function () {
	function ConvenantAttrBaseCfgData () {
	}
	ConvenantAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  契约部位ID */
		 ConvenantAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 ConvenantAttrBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  属性加成,多个用逗号隔开 */
		 ConvenantAttrBaseCfgData.getAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return ConvenantAttrBaseCfgData
}());
	
cfg.ConvenantAttrBaseCfgData = ConvenantAttrBaseCfgData;
var ConvenantAttrBaseCfgData  = /** @class */ (function () {
	function ConvenantAttrBaseCfgData () {
	}
	ConvenantAttrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantAttrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantAttrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  契约部位ID */
		 ConvenantAttrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 ConvenantAttrBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  属性加成,多个用逗号隔开 */
		 ConvenantAttrBaseCfgData.getAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return ConvenantAttrBaseCfgData
}());
	
cfg.ConvenantAttrBaseCfgData = ConvenantAttrBaseCfgData;
var ConvenantLevelBaseCfgData  = /** @class */ (function () {
	function ConvenantLevelBaseCfgData () {
	}
	ConvenantLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ConvenantLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下级需要道具 */
		 ConvenantLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ConvenantLevelBaseCfgData
}());
	
cfg.ConvenantLevelBaseCfgData = ConvenantLevelBaseCfgData;
var ConvenantLevelBaseCfgData  = /** @class */ (function () {
	function ConvenantLevelBaseCfgData () {
	}
	ConvenantLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 ConvenantLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下级需要道具 */
		 ConvenantLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ConvenantLevelBaseCfgData
}());
	
cfg.ConvenantLevelBaseCfgData = ConvenantLevelBaseCfgData;
var ConvenantConstBaseCfgData  = /** @class */ (function () {
	function ConvenantConstBaseCfgData () {
	}
	ConvenantConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ConvenantConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ConvenantConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "unlockNeedItem");
		};
		 /**  解锁需要道具 */
		 ConvenantConstBaseCfgData.getUnlockNeedItemByUnlockNeedItem = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockNeedItem;
			}
			return ""
		};

	return ConvenantConstBaseCfgData
}());
	
cfg.ConvenantConstBaseCfgData = ConvenantConstBaseCfgData;
var CopymapMonsterNewBaseCfgData  = /** @class */ (function () {
	function CopymapMonsterNewBaseCfgData () {
	}
	CopymapMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CopymapMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CopymapMonsterNewBaseCfgData
}());
	
cfg.CopymapMonsterNewBaseCfgData = CopymapMonsterNewBaseCfgData;
var CopymapBaseCfgData  = /** @class */ (function () {
	function CopymapBaseCfgData () {
	}
	CopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  副本ID */
		 CopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  副本名称 */
		 CopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  副本类型_emCopymapType */
		 CopymapBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  副本子类型_emCopymapSubType */
		 CopymapBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  需要玩家战力 */
		 CopymapBaseCfgData.getNeedFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 CopymapBaseCfgData.getNeedPlayerLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  副本日进入次数 */
		 CopymapBaseCfgData.getDailyEnterCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyEnterCount;
			}
			return 0;
		};
		 /**  怪物数据Index */
		 CopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  增加奖励 */
		 CopymapBaseCfgData.getAddPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  扫荡需要的道具 */
		 CopymapBaseCfgData.getSweepNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedItem;
			}
			return ""
		};
		 /**  难易程度 */
		 CopymapBaseCfgData.getNayiDuByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nayiDu;
			}
			return 0;
		};
		 /**  难度序号0代表不显示，否则显示难度+序号 */
		 CopymapBaseCfgData.getTypeIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeId;
			}
			return 0;
		};

	return CopymapBaseCfgData
}());
	
cfg.CopymapBaseCfgData = CopymapBaseCfgData;
var CopymapBaseCfgData  = /** @class */ (function () {
	function CopymapBaseCfgData () {
	}
	CopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  副本ID */
		 CopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  副本名称 */
		 CopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  副本类型_emCopymapType */
		 CopymapBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  副本子类型_emCopymapSubType */
		 CopymapBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  需要玩家战力 */
		 CopymapBaseCfgData.getNeedFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 CopymapBaseCfgData.getNeedPlayerLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  副本日进入次数 */
		 CopymapBaseCfgData.getDailyEnterCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyEnterCount;
			}
			return 0;
		};
		 /**  怪物数据Index */
		 CopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  增加奖励 */
		 CopymapBaseCfgData.getAddPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  扫荡需要的道具 */
		 CopymapBaseCfgData.getSweepNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedItem;
			}
			return ""
		};
		 /**  难易程度 */
		 CopymapBaseCfgData.getNayiDuByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nayiDu;
			}
			return 0;
		};
		 /**  难度序号0代表不显示，否则显示难度+序号 */
		 CopymapBaseCfgData.getTypeIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeId;
			}
			return 0;
		};

	return CopymapBaseCfgData
}());
	
cfg.CopymapBaseCfgData = CopymapBaseCfgData;
var CopymapBaseCfgData  = /** @class */ (function () {
	function CopymapBaseCfgData () {
	}
	CopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  副本ID */
		 CopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  副本名称 */
		 CopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  副本类型_emCopymapType */
		 CopymapBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  副本子类型_emCopymapSubType */
		 CopymapBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  需要玩家战力 */
		 CopymapBaseCfgData.getNeedFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 CopymapBaseCfgData.getNeedPlayerLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  副本日进入次数 */
		 CopymapBaseCfgData.getDailyEnterCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dailyEnterCount;
			}
			return 0;
		};
		 /**  怪物数据Index */
		 CopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  增加奖励 */
		 CopymapBaseCfgData.getAddPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  扫荡需要的道具 */
		 CopymapBaseCfgData.getSweepNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedItem;
			}
			return ""
		};
		 /**  难易程度 */
		 CopymapBaseCfgData.getNayiDuByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nayiDu;
			}
			return 0;
		};
		 /**  难度序号0代表不显示，否则显示难度+序号 */
		 CopymapBaseCfgData.getTypeIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeId;
			}
			return 0;
		};

	return CopymapBaseCfgData
}());
	
cfg.CopymapBaseCfgData = CopymapBaseCfgData;
var CopymapMonsterNewBaseCfgData  = /** @class */ (function () {
	function CopymapMonsterNewBaseCfgData () {
	}
	CopymapMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CopymapMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CopymapMonsterNewBaseCfgData
}());
	
cfg.CopymapMonsterNewBaseCfgData = CopymapMonsterNewBaseCfgData;
var CopymapMonsterNewBaseCfgData  = /** @class */ (function () {
	function CopymapMonsterNewBaseCfgData () {
	}
	CopymapMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CopymapMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CopymapMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CopymapMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CopymapMonsterNewBaseCfgData
}());
	
cfg.CopymapMonsterNewBaseCfgData = CopymapMonsterNewBaseCfgData;
var CrossChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeDailyPrizeBaseCfgData () {
	}
	CrossChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeDailyPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 CrossChallengeDailyPrizeBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeDailyPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeDailyPrizeBaseCfgData
}());
	
cfg.CrossChallengeDailyPrizeBaseCfgData = CrossChallengeDailyPrizeBaseCfgData;
var CrossChallengeRobotBaseCfgData  = /** @class */ (function () {
	function CrossChallengeRobotBaseCfgData () {
	}
	CrossChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 CrossChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return CrossChallengeRobotBaseCfgData
}());
	
cfg.CrossChallengeRobotBaseCfgData = CrossChallengeRobotBaseCfgData;
var CrossChallengeRobotBaseCfgData  = /** @class */ (function () {
	function CrossChallengeRobotBaseCfgData () {
	}
	CrossChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 CrossChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return CrossChallengeRobotBaseCfgData
}());
	
cfg.CrossChallengeRobotBaseCfgData = CrossChallengeRobotBaseCfgData;
var CrossChallengeLosePrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeLosePrizeBaseCfgData () {
	}
	CrossChallengeLosePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeLosePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeLosePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeLosePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeLosePrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeLosePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeLosePrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeLosePrizeBaseCfgData
}());
	
cfg.CrossChallengeLosePrizeBaseCfgData = CrossChallengeLosePrizeBaseCfgData;
var CrossChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeDailyPrizeBaseCfgData () {
	}
	CrossChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeDailyPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 CrossChallengeDailyPrizeBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeDailyPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeDailyPrizeBaseCfgData
}());
	
cfg.CrossChallengeDailyPrizeBaseCfgData = CrossChallengeDailyPrizeBaseCfgData;
var CrossChallengeConstantsBaseCfgData  = /** @class */ (function () {
	function CrossChallengeConstantsBaseCfgData () {
	}
	CrossChallengeConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 CrossChallengeConstantsBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  挑战消耗物品 */
		 CrossChallengeConstantsBaseCfgData.getNeedItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  开启时间 */
		 CrossChallengeConstantsBaseCfgData.getOpenTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  膜拜获得物品 */
		 CrossChallengeConstantsBaseCfgData.getLikeAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAddItem;
			}
			return ""
		};
		 /**  可跳过战斗次数 */
		 CrossChallengeConstantsBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 CrossChallengeConstantsBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机积分差 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  随机匹配次数 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreCount;
			}
			return 0;
		};
		 /**  战斗奖励个数 */
		 CrossChallengeConstantsBaseCfgData.getPrizeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeCount;
			}
			return 0;
		};
		 /**  名次隐藏队伍 */
		 CrossChallengeConstantsBaseCfgData.getRankHideByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankHide;
			}
			return ""
		};

	return CrossChallengeConstantsBaseCfgData
}());
	
cfg.CrossChallengeConstantsBaseCfgData = CrossChallengeConstantsBaseCfgData;
var CrossChallengeConstantsBaseCfgData  = /** @class */ (function () {
	function CrossChallengeConstantsBaseCfgData () {
	}
	CrossChallengeConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 CrossChallengeConstantsBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  挑战消耗物品 */
		 CrossChallengeConstantsBaseCfgData.getNeedItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  开启时间 */
		 CrossChallengeConstantsBaseCfgData.getOpenTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  膜拜获得物品 */
		 CrossChallengeConstantsBaseCfgData.getLikeAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAddItem;
			}
			return ""
		};
		 /**  可跳过战斗次数 */
		 CrossChallengeConstantsBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 CrossChallengeConstantsBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机积分差 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  随机匹配次数 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreCount;
			}
			return 0;
		};
		 /**  战斗奖励个数 */
		 CrossChallengeConstantsBaseCfgData.getPrizeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeCount;
			}
			return 0;
		};
		 /**  名次隐藏队伍 */
		 CrossChallengeConstantsBaseCfgData.getRankHideByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankHide;
			}
			return ""
		};

	return CrossChallengeConstantsBaseCfgData
}());
	
cfg.CrossChallengeConstantsBaseCfgData = CrossChallengeConstantsBaseCfgData;
var CrossChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeWinPrizeBaseCfgData () {
	}
	CrossChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeWinPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeWinPrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeWinPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeWinPrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeWinPrizeBaseCfgData
}());
	
cfg.CrossChallengeWinPrizeBaseCfgData = CrossChallengeWinPrizeBaseCfgData;
var CrossChallengeRobotBaseCfgData  = /** @class */ (function () {
	function CrossChallengeRobotBaseCfgData () {
	}
	CrossChallengeRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 CrossChallengeRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return CrossChallengeRobotBaseCfgData
}());
	
cfg.CrossChallengeRobotBaseCfgData = CrossChallengeRobotBaseCfgData;
var CrossChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeWinPrizeBaseCfgData () {
	}
	CrossChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeWinPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeWinPrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeWinPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeWinPrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeWinPrizeBaseCfgData
}());
	
cfg.CrossChallengeWinPrizeBaseCfgData = CrossChallengeWinPrizeBaseCfgData;
var CrossChallengeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeDailyPrizeBaseCfgData () {
	}
	CrossChallengeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeDailyPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 CrossChallengeDailyPrizeBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeDailyPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeDailyPrizeBaseCfgData
}());
	
cfg.CrossChallengeDailyPrizeBaseCfgData = CrossChallengeDailyPrizeBaseCfgData;
var CrossChallengeTopPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeTopPrizeBaseCfgData () {
	}
	CrossChallengeTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 CrossChallengeTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 CrossChallengeTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeTopPrizeBaseCfgData
}());
	
cfg.CrossChallengeTopPrizeBaseCfgData = CrossChallengeTopPrizeBaseCfgData;
var CrossChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function CrossChallengeMonsterNewBaseCfgData () {
	}
	CrossChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CrossChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CrossChallengeMonsterNewBaseCfgData
}());
	
cfg.CrossChallengeMonsterNewBaseCfgData = CrossChallengeMonsterNewBaseCfgData;
var CrossChallengeTopPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeTopPrizeBaseCfgData () {
	}
	CrossChallengeTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 CrossChallengeTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 CrossChallengeTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeTopPrizeBaseCfgData
}());
	
cfg.CrossChallengeTopPrizeBaseCfgData = CrossChallengeTopPrizeBaseCfgData;
var CrossChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function CrossChallengeMonsterNewBaseCfgData () {
	}
	CrossChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CrossChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CrossChallengeMonsterNewBaseCfgData
}());
	
cfg.CrossChallengeMonsterNewBaseCfgData = CrossChallengeMonsterNewBaseCfgData;
var CrossChallengeConstantsBaseCfgData  = /** @class */ (function () {
	function CrossChallengeConstantsBaseCfgData () {
	}
	CrossChallengeConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "initScore");
		};
		 /**  初始积分 */
		 CrossChallengeConstantsBaseCfgData.getInitScoreByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  挑战消耗物品 */
		 CrossChallengeConstantsBaseCfgData.getNeedItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  开启时间 */
		 CrossChallengeConstantsBaseCfgData.getOpenTimeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  膜拜获得物品 */
		 CrossChallengeConstantsBaseCfgData.getLikeAddItemByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAddItem;
			}
			return ""
		};
		 /**  可跳过战斗次数 */
		 CrossChallengeConstantsBaseCfgData.getSweepNeedCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sweepNeedCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 CrossChallengeConstantsBaseCfgData.getSeasonDaysByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  随机积分差 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreRangeByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreRange;
			}
			return 0;
		};
		 /**  随机匹配次数 */
		 CrossChallengeConstantsBaseCfgData.getRandScoreCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randScoreCount;
			}
			return 0;
		};
		 /**  战斗奖励个数 */
		 CrossChallengeConstantsBaseCfgData.getPrizeCountByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeCount;
			}
			return 0;
		};
		 /**  名次隐藏队伍 */
		 CrossChallengeConstantsBaseCfgData.getRankHideByInitScore = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankHide;
			}
			return ""
		};

	return CrossChallengeConstantsBaseCfgData
}());
	
cfg.CrossChallengeConstantsBaseCfgData = CrossChallengeConstantsBaseCfgData;
var CrossChallengeWinPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeWinPrizeBaseCfgData () {
	}
	CrossChallengeWinPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeWinPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeWinPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeWinPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeWinPrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeWinPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeWinPrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeWinPrizeBaseCfgData
}());
	
cfg.CrossChallengeWinPrizeBaseCfgData = CrossChallengeWinPrizeBaseCfgData;
var CrossChallengeLosePrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeLosePrizeBaseCfgData () {
	}
	CrossChallengeLosePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeLosePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeLosePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeLosePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeLosePrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeLosePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeLosePrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeLosePrizeBaseCfgData
}());
	
cfg.CrossChallengeLosePrizeBaseCfgData = CrossChallengeLosePrizeBaseCfgData;
var CrossChallengeTopPrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeTopPrizeBaseCfgData () {
	}
	CrossChallengeTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 CrossChallengeTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 CrossChallengeTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return CrossChallengeTopPrizeBaseCfgData
}());
	
cfg.CrossChallengeTopPrizeBaseCfgData = CrossChallengeTopPrizeBaseCfgData;
var CrossChallengeLosePrizeBaseCfgData  = /** @class */ (function () {
	function CrossChallengeLosePrizeBaseCfgData () {
	}
	CrossChallengeLosePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeLosePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeLosePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CrossChallengeLosePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  概率 */
		 CrossChallengeLosePrizeBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  奖励物品 */
		 CrossChallengeLosePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  购买需要物品 */
		 CrossChallengeLosePrizeBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return CrossChallengeLosePrizeBaseCfgData
}());
	
cfg.CrossChallengeLosePrizeBaseCfgData = CrossChallengeLosePrizeBaseCfgData;
var CrossChallengeMonsterNewBaseCfgData  = /** @class */ (function () {
	function CrossChallengeMonsterNewBaseCfgData () {
	}
	CrossChallengeMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CrossChallengeMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CrossChallengeMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 CrossChallengeMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return CrossChallengeMonsterNewBaseCfgData
}());
	
cfg.CrossChallengeMonsterNewBaseCfgData = CrossChallengeMonsterNewBaseCfgData;
var CustomGiftBaseCfgData  = /** @class */ (function () {
	function CustomGiftBaseCfgData () {
	}
	CustomGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CustomGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 CustomGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值ID */
		 CustomGiftBaseCfgData.getChargeIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeId;
			}
			return 0;
		};
		 /**  道具数量 */
		 CustomGiftBaseCfgData.getItemNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemNum;
			}
			return ""
		};
		 /**  限购数量 */
		 CustomGiftBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  定制池 */
		 CustomGiftBaseCfgData.getCustomPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.customPool;
			}
			return ""
		};

	return CustomGiftBaseCfgData
}());
	
cfg.CustomGiftBaseCfgData = CustomGiftBaseCfgData;
var CustomGiftGiftpoolBaseCfgData  = /** @class */ (function () {
	function CustomGiftGiftpoolBaseCfgData () {
	}
	CustomGiftGiftpoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftGiftpoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftGiftpoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  奖励序号 */
		 CustomGiftGiftpoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  池子ID */
		 CustomGiftGiftpoolBaseCfgData.getPoolIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolID;
			}
			return 0;
		};
		 /**  池子物品序号 */
		 CustomGiftGiftpoolBaseCfgData.getPoolItemIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolItemIndex;
			}
			return 0;
		};
		 /**  物品 */
		 CustomGiftGiftpoolBaseCfgData.getItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return CustomGiftGiftpoolBaseCfgData
}());
	
cfg.CustomGiftGiftpoolBaseCfgData = CustomGiftGiftpoolBaseCfgData;
var CustomGiftGiftpoolBaseCfgData  = /** @class */ (function () {
	function CustomGiftGiftpoolBaseCfgData () {
	}
	CustomGiftGiftpoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftGiftpoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftGiftpoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  奖励序号 */
		 CustomGiftGiftpoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  池子ID */
		 CustomGiftGiftpoolBaseCfgData.getPoolIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolID;
			}
			return 0;
		};
		 /**  池子物品序号 */
		 CustomGiftGiftpoolBaseCfgData.getPoolItemIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolItemIndex;
			}
			return 0;
		};
		 /**  物品 */
		 CustomGiftGiftpoolBaseCfgData.getItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return CustomGiftGiftpoolBaseCfgData
}());
	
cfg.CustomGiftGiftpoolBaseCfgData = CustomGiftGiftpoolBaseCfgData;
var CustomGiftBaseCfgData  = /** @class */ (function () {
	function CustomGiftBaseCfgData () {
	}
	CustomGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CustomGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 CustomGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值ID */
		 CustomGiftBaseCfgData.getChargeIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeId;
			}
			return 0;
		};
		 /**  道具数量 */
		 CustomGiftBaseCfgData.getItemNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemNum;
			}
			return ""
		};
		 /**  限购数量 */
		 CustomGiftBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  定制池 */
		 CustomGiftBaseCfgData.getCustomPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.customPool;
			}
			return ""
		};

	return CustomGiftBaseCfgData
}());
	
cfg.CustomGiftBaseCfgData = CustomGiftBaseCfgData;
var CustomGiftBaseCfgData  = /** @class */ (function () {
	function CustomGiftBaseCfgData () {
	}
	CustomGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 CustomGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  活动ID */
		 CustomGiftBaseCfgData.getActivityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  充值ID */
		 CustomGiftBaseCfgData.getChargeIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chargeId;
			}
			return 0;
		};
		 /**  道具数量 */
		 CustomGiftBaseCfgData.getItemNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemNum;
			}
			return ""
		};
		 /**  限购数量 */
		 CustomGiftBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};
		 /**  定制池 */
		 CustomGiftBaseCfgData.getCustomPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.customPool;
			}
			return ""
		};

	return CustomGiftBaseCfgData
}());
	
cfg.CustomGiftBaseCfgData = CustomGiftBaseCfgData;
var CustomGiftGiftpoolBaseCfgData  = /** @class */ (function () {
	function CustomGiftGiftpoolBaseCfgData () {
	}
	CustomGiftGiftpoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	CustomGiftGiftpoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		CustomGiftGiftpoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  奖励序号 */
		 CustomGiftGiftpoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  池子ID */
		 CustomGiftGiftpoolBaseCfgData.getPoolIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolID;
			}
			return 0;
		};
		 /**  池子物品序号 */
		 CustomGiftGiftpoolBaseCfgData.getPoolItemIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolItemIndex;
			}
			return 0;
		};
		 /**  物品 */
		 CustomGiftGiftpoolBaseCfgData.getItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return CustomGiftGiftpoolBaseCfgData
}());
	
cfg.CustomGiftGiftpoolBaseCfgData = CustomGiftGiftpoolBaseCfgData;
var DanTopPrizeBaseCfgData  = /** @class */ (function () {
	function DanTopPrizeBaseCfgData () {
	}
	DanTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DanTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  需要段位ID */
		 DanTopPrizeBaseCfgData.getNeedDanIDByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDanID;
			}
			return 0;
		};
		 /**  增加称号ID */
		 DanTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return DanTopPrizeBaseCfgData
}());
	
cfg.DanTopPrizeBaseCfgData = DanTopPrizeBaseCfgData;
var DanAreaBaseCfgData  = /** @class */ (function () {
	function DanAreaBaseCfgData () {
	}
	DanAreaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanAreaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanAreaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 DanAreaBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名称 */
		 DanAreaBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  区域图标id */
		 DanAreaBaseCfgData.getIconIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconId;
			}
			return ""
		};

	return DanAreaBaseCfgData
}());
	
cfg.DanAreaBaseCfgData = DanAreaBaseCfgData;
var DanFightPrizeBaseCfgData  = /** @class */ (function () {
	function DanFightPrizeBaseCfgData () {
	}
	DanFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "result");
		};
		 /**  结果0;//胜利1;//失败2;//平局 */
		 DanFightPrizeBaseCfgData.getResultByResult = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};

	return DanFightPrizeBaseCfgData
}());
	
cfg.DanFightPrizeBaseCfgData = DanFightPrizeBaseCfgData;
var DanBuyCountBaseCfgData  = /** @class */ (function () {
	function DanBuyCountBaseCfgData () {
	}
	DanBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 DanBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要vip等级 */
		 DanBuyCountBaseCfgData.getNeedVipLevelByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 DanBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DanBuyCountBaseCfgData
}());
	
cfg.DanBuyCountBaseCfgData = DanBuyCountBaseCfgData;
var DanUpgradeBaseCfgData  = /** @class */ (function () {
	function DanUpgradeBaseCfgData () {
	}
	DanUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "danID");
		};
		 /**  段位ID */
		 DanUpgradeBaseCfgData.getDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danID;
			}
			return 0;
		};
		 /**  段位名称 */
		 DanUpgradeBaseCfgData.getDanNameByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danName;
			}
			return ""
		};
		 /**  类型 */
		 DanUpgradeBaseCfgData.getTypeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大经验 */
		 DanUpgradeBaseCfgData.getMaxExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  缓冲经验 */
		 DanUpgradeBaseCfgData.getCacheExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cacheExp;
			}
			return 0;
		};
		 /**  首达奖励 */
		 DanUpgradeBaseCfgData.getFirstPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  段位奖励 */
		 DanUpgradeBaseCfgData.getDanPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danPrize;
			}
			return ""
		};
		 /**  继承段位ID */
		 DanUpgradeBaseCfgData.getInheritDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inheritDanID;
			}
			return 0;
		};
		 /**  晋级胜场数胜场_总场次 */
		 DanUpgradeBaseCfgData.getPromoteWinCountByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.promoteWinCount;
			}
			return ""
		};

	return DanUpgradeBaseCfgData
}());
	
cfg.DanUpgradeBaseCfgData = DanUpgradeBaseCfgData;
var DanConstBaseCfgData  = /** @class */ (function () {
	function DanConstBaseCfgData () {
	}
	DanConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 DanConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要世界等级 */
		 DanConstBaseCfgData.getNeedWorldLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needWorldLevel;
			}
			return 0;
		};
		 /**  开启第二队需要神器ID */
		 DanConstBaseCfgData.getTeam2NeedArifactByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.team2NeedArifact;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 DanConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  初始积分 */
		 DanConstBaseCfgData.getInitScoreByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  初始段位ID */
		 DanConstBaseCfgData.getInitDanIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initDanID;
			}
			return 0;
		};
		 /**  服务器个数 */
		 DanConstBaseCfgData.getServerCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 DanConstBaseCfgData.getSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  上半个赛季总天数 */
		 DanConstBaseCfgData.getUpSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upSeasonDays;
			}
			return 0;
		};
		 /**  下半个赛季总天数 */
		 DanConstBaseCfgData.getLowSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lowSeasonDays;
			}
			return 0;
		};
		 /**  王者赛开启天数 */
		 DanConstBaseCfgData.getKingOpenDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingOpenDays;
			}
			return 0;
		};
		 /**  王者赛准入段位 */
		 DanConstBaseCfgData.getKingNeedDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingNeedDan;
			}
			return 0;
		};
		 /**  匹配积分区间百分比 */
		 DanConstBaseCfgData.getMatchScoreRateByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchScoreRate;
			}
			return ""
		};
		 /**  胜利增加经验区间 */
		 DanConstBaseCfgData.getSucAddExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddExp;
			}
			return ""
		};
		 /**  失败失去经验区间 */
		 DanConstBaseCfgData.getFailDelExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failDelExp;
			}
			return ""
		};
		 /**  开启时间 */
		 DanConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  大师段位 */
		 DanConstBaseCfgData.getMasterDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterDan;
			}
			return 0;
		};
		 /**  个人记录数 */
		 DanConstBaseCfgData.getRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recordNum;
			}
			return 0;
		};
		 /**  大师记录数 */
		 DanConstBaseCfgData.getMasterRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterRecordNum;
			}
			return 0;
		};

	return DanConstBaseCfgData
}());
	
cfg.DanConstBaseCfgData = DanConstBaseCfgData;
var DanUpgradeBaseCfgData  = /** @class */ (function () {
	function DanUpgradeBaseCfgData () {
	}
	DanUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "danID");
		};
		 /**  段位ID */
		 DanUpgradeBaseCfgData.getDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danID;
			}
			return 0;
		};
		 /**  段位名称 */
		 DanUpgradeBaseCfgData.getDanNameByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danName;
			}
			return ""
		};
		 /**  类型 */
		 DanUpgradeBaseCfgData.getTypeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大经验 */
		 DanUpgradeBaseCfgData.getMaxExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  缓冲经验 */
		 DanUpgradeBaseCfgData.getCacheExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cacheExp;
			}
			return 0;
		};
		 /**  首达奖励 */
		 DanUpgradeBaseCfgData.getFirstPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  段位奖励 */
		 DanUpgradeBaseCfgData.getDanPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danPrize;
			}
			return ""
		};
		 /**  继承段位ID */
		 DanUpgradeBaseCfgData.getInheritDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inheritDanID;
			}
			return 0;
		};
		 /**  晋级胜场数胜场_总场次 */
		 DanUpgradeBaseCfgData.getPromoteWinCountByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.promoteWinCount;
			}
			return ""
		};

	return DanUpgradeBaseCfgData
}());
	
cfg.DanUpgradeBaseCfgData = DanUpgradeBaseCfgData;
var DanTopPrizeBaseCfgData  = /** @class */ (function () {
	function DanTopPrizeBaseCfgData () {
	}
	DanTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DanTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  需要段位ID */
		 DanTopPrizeBaseCfgData.getNeedDanIDByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDanID;
			}
			return 0;
		};
		 /**  增加称号ID */
		 DanTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return DanTopPrizeBaseCfgData
}());
	
cfg.DanTopPrizeBaseCfgData = DanTopPrizeBaseCfgData;
var DanAreaBaseCfgData  = /** @class */ (function () {
	function DanAreaBaseCfgData () {
	}
	DanAreaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanAreaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanAreaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 DanAreaBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名称 */
		 DanAreaBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  区域图标id */
		 DanAreaBaseCfgData.getIconIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconId;
			}
			return ""
		};

	return DanAreaBaseCfgData
}());
	
cfg.DanAreaBaseCfgData = DanAreaBaseCfgData;
var DanFightPrizeBaseCfgData  = /** @class */ (function () {
	function DanFightPrizeBaseCfgData () {
	}
	DanFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "result");
		};
		 /**  结果0;//胜利1;//失败2;//平局 */
		 DanFightPrizeBaseCfgData.getResultByResult = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};

	return DanFightPrizeBaseCfgData
}());
	
cfg.DanFightPrizeBaseCfgData = DanFightPrizeBaseCfgData;
var DanBuyCountBaseCfgData  = /** @class */ (function () {
	function DanBuyCountBaseCfgData () {
	}
	DanBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 DanBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要vip等级 */
		 DanBuyCountBaseCfgData.getNeedVipLevelByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 DanBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DanBuyCountBaseCfgData
}());
	
cfg.DanBuyCountBaseCfgData = DanBuyCountBaseCfgData;
var DanFightPrizeBaseCfgData  = /** @class */ (function () {
	function DanFightPrizeBaseCfgData () {
	}
	DanFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "result");
		};
		 /**  结果0;//胜利1;//失败2;//平局 */
		 DanFightPrizeBaseCfgData.getResultByResult = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};

	return DanFightPrizeBaseCfgData
}());
	
cfg.DanFightPrizeBaseCfgData = DanFightPrizeBaseCfgData;
var DanAreaBaseCfgData  = /** @class */ (function () {
	function DanAreaBaseCfgData () {
	}
	DanAreaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanAreaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanAreaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 DanAreaBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名称 */
		 DanAreaBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  区域图标id */
		 DanAreaBaseCfgData.getIconIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconId;
			}
			return ""
		};

	return DanAreaBaseCfgData
}());
	
cfg.DanAreaBaseCfgData = DanAreaBaseCfgData;
var DanTopPrizeBaseCfgData  = /** @class */ (function () {
	function DanTopPrizeBaseCfgData () {
	}
	DanTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DanTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  需要段位ID */
		 DanTopPrizeBaseCfgData.getNeedDanIDByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDanID;
			}
			return 0;
		};
		 /**  增加称号ID */
		 DanTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return DanTopPrizeBaseCfgData
}());
	
cfg.DanTopPrizeBaseCfgData = DanTopPrizeBaseCfgData;
var DanConstBaseCfgData  = /** @class */ (function () {
	function DanConstBaseCfgData () {
	}
	DanConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 DanConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要世界等级 */
		 DanConstBaseCfgData.getNeedWorldLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needWorldLevel;
			}
			return 0;
		};
		 /**  开启第二队需要神器ID */
		 DanConstBaseCfgData.getTeam2NeedArifactByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.team2NeedArifact;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 DanConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  初始积分 */
		 DanConstBaseCfgData.getInitScoreByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  初始段位ID */
		 DanConstBaseCfgData.getInitDanIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initDanID;
			}
			return 0;
		};
		 /**  服务器个数 */
		 DanConstBaseCfgData.getServerCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 DanConstBaseCfgData.getSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  上半个赛季总天数 */
		 DanConstBaseCfgData.getUpSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upSeasonDays;
			}
			return 0;
		};
		 /**  下半个赛季总天数 */
		 DanConstBaseCfgData.getLowSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lowSeasonDays;
			}
			return 0;
		};
		 /**  王者赛开启天数 */
		 DanConstBaseCfgData.getKingOpenDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingOpenDays;
			}
			return 0;
		};
		 /**  王者赛准入段位 */
		 DanConstBaseCfgData.getKingNeedDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingNeedDan;
			}
			return 0;
		};
		 /**  匹配积分区间百分比 */
		 DanConstBaseCfgData.getMatchScoreRateByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchScoreRate;
			}
			return ""
		};
		 /**  胜利增加经验区间 */
		 DanConstBaseCfgData.getSucAddExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddExp;
			}
			return ""
		};
		 /**  失败失去经验区间 */
		 DanConstBaseCfgData.getFailDelExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failDelExp;
			}
			return ""
		};
		 /**  开启时间 */
		 DanConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  大师段位 */
		 DanConstBaseCfgData.getMasterDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterDan;
			}
			return 0;
		};
		 /**  个人记录数 */
		 DanConstBaseCfgData.getRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recordNum;
			}
			return 0;
		};
		 /**  大师记录数 */
		 DanConstBaseCfgData.getMasterRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterRecordNum;
			}
			return 0;
		};

	return DanConstBaseCfgData
}());
	
cfg.DanConstBaseCfgData = DanConstBaseCfgData;
var DanBuyCountBaseCfgData  = /** @class */ (function () {
	function DanBuyCountBaseCfgData () {
	}
	DanBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 DanBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要vip等级 */
		 DanBuyCountBaseCfgData.getNeedVipLevelByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 DanBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DanBuyCountBaseCfgData
}());
	
cfg.DanBuyCountBaseCfgData = DanBuyCountBaseCfgData;
var DanConstBaseCfgData  = /** @class */ (function () {
	function DanConstBaseCfgData () {
	}
	DanConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 DanConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要世界等级 */
		 DanConstBaseCfgData.getNeedWorldLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needWorldLevel;
			}
			return 0;
		};
		 /**  开启第二队需要神器ID */
		 DanConstBaseCfgData.getTeam2NeedArifactByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.team2NeedArifact;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 DanConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  初始积分 */
		 DanConstBaseCfgData.getInitScoreByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initScore;
			}
			return 0;
		};
		 /**  初始段位ID */
		 DanConstBaseCfgData.getInitDanIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initDanID;
			}
			return 0;
		};
		 /**  服务器个数 */
		 DanConstBaseCfgData.getServerCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverCount;
			}
			return 0;
		};
		 /**  赛季天数 */
		 DanConstBaseCfgData.getSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.seasonDays;
			}
			return 0;
		};
		 /**  上半个赛季总天数 */
		 DanConstBaseCfgData.getUpSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upSeasonDays;
			}
			return 0;
		};
		 /**  下半个赛季总天数 */
		 DanConstBaseCfgData.getLowSeasonDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lowSeasonDays;
			}
			return 0;
		};
		 /**  王者赛开启天数 */
		 DanConstBaseCfgData.getKingOpenDaysByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingOpenDays;
			}
			return 0;
		};
		 /**  王者赛准入段位 */
		 DanConstBaseCfgData.getKingNeedDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.kingNeedDan;
			}
			return 0;
		};
		 /**  匹配积分区间百分比 */
		 DanConstBaseCfgData.getMatchScoreRateByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchScoreRate;
			}
			return ""
		};
		 /**  胜利增加经验区间 */
		 DanConstBaseCfgData.getSucAddExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddExp;
			}
			return ""
		};
		 /**  失败失去经验区间 */
		 DanConstBaseCfgData.getFailDelExpByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failDelExp;
			}
			return ""
		};
		 /**  开启时间 */
		 DanConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  大师段位 */
		 DanConstBaseCfgData.getMasterDanByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterDan;
			}
			return 0;
		};
		 /**  个人记录数 */
		 DanConstBaseCfgData.getRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recordNum;
			}
			return 0;
		};
		 /**  大师记录数 */
		 DanConstBaseCfgData.getMasterRecordNumByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterRecordNum;
			}
			return 0;
		};

	return DanConstBaseCfgData
}());
	
cfg.DanConstBaseCfgData = DanConstBaseCfgData;
var DanUpgradeBaseCfgData  = /** @class */ (function () {
	function DanUpgradeBaseCfgData () {
	}
	DanUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DanUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DanUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "danID");
		};
		 /**  段位ID */
		 DanUpgradeBaseCfgData.getDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danID;
			}
			return 0;
		};
		 /**  段位名称 */
		 DanUpgradeBaseCfgData.getDanNameByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danName;
			}
			return ""
		};
		 /**  类型 */
		 DanUpgradeBaseCfgData.getTypeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大经验 */
		 DanUpgradeBaseCfgData.getMaxExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  缓冲经验 */
		 DanUpgradeBaseCfgData.getCacheExpByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cacheExp;
			}
			return 0;
		};
		 /**  首达奖励 */
		 DanUpgradeBaseCfgData.getFirstPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  段位奖励 */
		 DanUpgradeBaseCfgData.getDanPrizeByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danPrize;
			}
			return ""
		};
		 /**  继承段位ID */
		 DanUpgradeBaseCfgData.getInheritDanIDByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.inheritDanID;
			}
			return 0;
		};
		 /**  晋级胜场数胜场_总场次 */
		 DanUpgradeBaseCfgData.getPromoteWinCountByDanID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.promoteWinCount;
			}
			return ""
		};

	return DanUpgradeBaseCfgData
}());
	
cfg.DanUpgradeBaseCfgData = DanUpgradeBaseCfgData;
var DefendSlotBaseCfgData  = /** @class */ (function () {
	function DefendSlotBaseCfgData () {
	}
	DefendSlotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSlotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSlotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "slot");
		};
		 /**  槽位 */
		 DefendSlotBaseCfgData.getSlotBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.slot;
			}
			return 0;
		};
		 /**  守护等级 */
		 DefendSlotBaseCfgData.getLevelBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  守护阶级 */
		 DefendSlotBaseCfgData.getRankBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  解锁条件说明 */
		 DefendSlotBaseCfgData.getUnlockDescBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDesc;
			}
			return ""
		};

	return DefendSlotBaseCfgData
}());
	
cfg.DefendSlotBaseCfgData = DefendSlotBaseCfgData;
var DefendPlanBaseCfgData  = /** @class */ (function () {
	function DefendPlanBaseCfgData () {
	}
	DefendPlanBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendPlanBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendPlanBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 DefendPlanBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  开启消耗 */
		 DefendPlanBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DefendPlanBaseCfgData
}());
	
cfg.DefendPlanBaseCfgData = DefendPlanBaseCfgData;
var DefendSkillBaseCfgData  = /** @class */ (function () {
	function DefendSkillBaseCfgData () {
	}
	DefendSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄id */
		 DefendSkillBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  英雄星级 */
		 DefendSkillBaseCfgData.getPetStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  技能id */
		 DefendSkillBaseCfgData.getSkillIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 DefendSkillBaseCfgData.getSkillLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能评分 */
		 DefendSkillBaseCfgData.getSkillScoreByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillScore;
			}
			return 0;
		};

	return DefendSkillBaseCfgData
}());
	
cfg.DefendSkillBaseCfgData = DefendSkillBaseCfgData;
var DefendRankBaseCfgData  = /** @class */ (function () {
	function DefendRankBaseCfgData () {
	}
	DefendRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  阶级 */
		 DefendRankBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  名字 */
		 DefendRankBaseCfgData.getNameByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  模型 */
		 DefendRankBaseCfgData.getModelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.model;
			}
			return ""
		};
		 /**  此等级上限 */
		 DefendRankBaseCfgData.getMaxLevelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  升阶需要道具最后一个为空 */
		 DefendRankBaseCfgData.getNeedItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  进阶提示 */
		 DefendRankBaseCfgData.getTipsByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tips;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendRankBaseCfgData.getBaseAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendRankBaseCfgData.getAddPetAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendRankBaseCfgData.getAddPercentByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendRankBaseCfgData
}());
	
cfg.DefendRankBaseCfgData = DefendRankBaseCfgData;
var DefendPlanBaseCfgData  = /** @class */ (function () {
	function DefendPlanBaseCfgData () {
	}
	DefendPlanBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendPlanBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendPlanBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 DefendPlanBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  开启消耗 */
		 DefendPlanBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DefendPlanBaseCfgData
}());
	
cfg.DefendPlanBaseCfgData = DefendPlanBaseCfgData;
var DefendSkillBaseCfgData  = /** @class */ (function () {
	function DefendSkillBaseCfgData () {
	}
	DefendSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄id */
		 DefendSkillBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  英雄星级 */
		 DefendSkillBaseCfgData.getPetStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  技能id */
		 DefendSkillBaseCfgData.getSkillIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 DefendSkillBaseCfgData.getSkillLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能评分 */
		 DefendSkillBaseCfgData.getSkillScoreByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillScore;
			}
			return 0;
		};

	return DefendSkillBaseCfgData
}());
	
cfg.DefendSkillBaseCfgData = DefendSkillBaseCfgData;
var DefendSlotBaseCfgData  = /** @class */ (function () {
	function DefendSlotBaseCfgData () {
	}
	DefendSlotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSlotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSlotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "slot");
		};
		 /**  槽位 */
		 DefendSlotBaseCfgData.getSlotBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.slot;
			}
			return 0;
		};
		 /**  守护等级 */
		 DefendSlotBaseCfgData.getLevelBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  守护阶级 */
		 DefendSlotBaseCfgData.getRankBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  解锁条件说明 */
		 DefendSlotBaseCfgData.getUnlockDescBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDesc;
			}
			return ""
		};

	return DefendSlotBaseCfgData
}());
	
cfg.DefendSlotBaseCfgData = DefendSlotBaseCfgData;
var DefendLevelBaseCfgData  = /** @class */ (function () {
	function DefendLevelBaseCfgData () {
	}
	DefendLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 DefendLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升需要道具最后一个为空 */
		 DefendLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendLevelBaseCfgData.getBaseAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendLevelBaseCfgData.getAddPetAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendLevelBaseCfgData.getAddPercentByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendLevelBaseCfgData
}());
	
cfg.DefendLevelBaseCfgData = DefendLevelBaseCfgData;
var DefendRankBaseCfgData  = /** @class */ (function () {
	function DefendRankBaseCfgData () {
	}
	DefendRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  阶级 */
		 DefendRankBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  名字 */
		 DefendRankBaseCfgData.getNameByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  模型 */
		 DefendRankBaseCfgData.getModelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.model;
			}
			return ""
		};
		 /**  此等级上限 */
		 DefendRankBaseCfgData.getMaxLevelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  升阶需要道具最后一个为空 */
		 DefendRankBaseCfgData.getNeedItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  进阶提示 */
		 DefendRankBaseCfgData.getTipsByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tips;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendRankBaseCfgData.getBaseAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendRankBaseCfgData.getAddPetAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendRankBaseCfgData.getAddPercentByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendRankBaseCfgData
}());
	
cfg.DefendRankBaseCfgData = DefendRankBaseCfgData;
var DefendLevelBaseCfgData  = /** @class */ (function () {
	function DefendLevelBaseCfgData () {
	}
	DefendLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 DefendLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升需要道具最后一个为空 */
		 DefendLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendLevelBaseCfgData.getBaseAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendLevelBaseCfgData.getAddPetAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendLevelBaseCfgData.getAddPercentByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendLevelBaseCfgData
}());
	
cfg.DefendLevelBaseCfgData = DefendLevelBaseCfgData;
var DefendLevelBaseCfgData  = /** @class */ (function () {
	function DefendLevelBaseCfgData () {
	}
	DefendLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 DefendLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升需要道具最后一个为空 */
		 DefendLevelBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendLevelBaseCfgData.getBaseAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendLevelBaseCfgData.getAddPetAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendLevelBaseCfgData.getAddPercentByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendLevelBaseCfgData
}());
	
cfg.DefendLevelBaseCfgData = DefendLevelBaseCfgData;
var DefendPlanBaseCfgData  = /** @class */ (function () {
	function DefendPlanBaseCfgData () {
	}
	DefendPlanBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendPlanBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendPlanBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  序号 */
		 DefendPlanBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  开启消耗 */
		 DefendPlanBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DefendPlanBaseCfgData
}());
	
cfg.DefendPlanBaseCfgData = DefendPlanBaseCfgData;
var DefendSkillBaseCfgData  = /** @class */ (function () {
	function DefendSkillBaseCfgData () {
	}
	DefendSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄id */
		 DefendSkillBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  英雄星级 */
		 DefendSkillBaseCfgData.getPetStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  技能id */
		 DefendSkillBaseCfgData.getSkillIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 DefendSkillBaseCfgData.getSkillLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能评分 */
		 DefendSkillBaseCfgData.getSkillScoreByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillScore;
			}
			return 0;
		};

	return DefendSkillBaseCfgData
}());
	
cfg.DefendSkillBaseCfgData = DefendSkillBaseCfgData;
var DefendSlotBaseCfgData  = /** @class */ (function () {
	function DefendSlotBaseCfgData () {
	}
	DefendSlotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendSlotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendSlotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "slot");
		};
		 /**  槽位 */
		 DefendSlotBaseCfgData.getSlotBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.slot;
			}
			return 0;
		};
		 /**  守护等级 */
		 DefendSlotBaseCfgData.getLevelBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  守护阶级 */
		 DefendSlotBaseCfgData.getRankBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  解锁条件说明 */
		 DefendSlotBaseCfgData.getUnlockDescBySlot = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDesc;
			}
			return ""
		};

	return DefendSlotBaseCfgData
}());
	
cfg.DefendSlotBaseCfgData = DefendSlotBaseCfgData;
var DefendRankBaseCfgData  = /** @class */ (function () {
	function DefendRankBaseCfgData () {
	}
	DefendRankBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DefendRankBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DefendRankBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  阶级 */
		 DefendRankBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  名字 */
		 DefendRankBaseCfgData.getNameByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  模型 */
		 DefendRankBaseCfgData.getModelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.model;
			}
			return ""
		};
		 /**  此等级上限 */
		 DefendRankBaseCfgData.getMaxLevelByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  升阶需要道具最后一个为空 */
		 DefendRankBaseCfgData.getNeedItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  进阶提示 */
		 DefendRankBaseCfgData.getTipsByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tips;
			}
			return ""
		};
		 /**  基础属性 */
		 DefendRankBaseCfgData.getBaseAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseAttr;
			}
			return ""
		};
		 /**  精灵加成(给战斗精灵加成) */
		 DefendRankBaseCfgData.getAddPetAttrByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPetAttr;
			}
			return ""
		};
		 /**  (属性|值|百分比;)（守护精灵给精灵球加的属性） */
		 DefendRankBaseCfgData.getAddPercentByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPercent;
			}
			return ""
		};

	return DefendRankBaseCfgData
}());
	
cfg.DefendRankBaseCfgData = DefendRankBaseCfgData;
var DipBaseCfgData  = /** @class */ (function () {
	function DipBaseCfgData () {
	}
	DipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DipBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};

	return DipBaseCfgData
}());
	
cfg.DipBaseCfgData = DipBaseCfgData;
var DipBaseCfgData  = /** @class */ (function () {
	function DipBaseCfgData () {
	}
	DipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DipBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};

	return DipBaseCfgData
}());
	
cfg.DipBaseCfgData = DipBaseCfgData;
var DipBaseCfgData  = /** @class */ (function () {
	function DipBaseCfgData () {
	}
	DipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 DipBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};

	return DipBaseCfgData
}());
	
cfg.DipBaseCfgData = DipBaseCfgData;
var DragonBallLevelBaseCfgData  = /** @class */ (function () {
	function DragonBallLevelBaseCfgData () {
	}
	DragonBallLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallLevelBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  等级 */
		 DragonBallLevelBaseCfgData.getLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下一级需要道具 */
		 DragonBallLevelBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成 */
		 DragonBallLevelBaseCfgData.getAttrByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return DragonBallLevelBaseCfgData
}());
	
cfg.DragonBallLevelBaseCfgData = DragonBallLevelBaseCfgData;
var DragonBallUnlockBaseCfgData  = /** @class */ (function () {
	function DragonBallUnlockBaseCfgData () {
	}
	DragonBallUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallUnlockBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  解锁需要道具 */
		 DragonBallUnlockBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DragonBallUnlockBaseCfgData
}());
	
cfg.DragonBallUnlockBaseCfgData = DragonBallUnlockBaseCfgData;
var DragonBallUnlockBaseCfgData  = /** @class */ (function () {
	function DragonBallUnlockBaseCfgData () {
	}
	DragonBallUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallUnlockBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  解锁需要道具 */
		 DragonBallUnlockBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DragonBallUnlockBaseCfgData
}());
	
cfg.DragonBallUnlockBaseCfgData = DragonBallUnlockBaseCfgData;
var DragonBallLevelBaseCfgData  = /** @class */ (function () {
	function DragonBallLevelBaseCfgData () {
	}
	DragonBallLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallLevelBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  等级 */
		 DragonBallLevelBaseCfgData.getLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下一级需要道具 */
		 DragonBallLevelBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成 */
		 DragonBallLevelBaseCfgData.getAttrByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return DragonBallLevelBaseCfgData
}());
	
cfg.DragonBallLevelBaseCfgData = DragonBallLevelBaseCfgData;
var DragonBallUnlockBaseCfgData  = /** @class */ (function () {
	function DragonBallUnlockBaseCfgData () {
	}
	DragonBallUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallUnlockBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  解锁需要道具 */
		 DragonBallUnlockBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return DragonBallUnlockBaseCfgData
}());
	
cfg.DragonBallUnlockBaseCfgData = DragonBallUnlockBaseCfgData;
var DragonBallLevelBaseCfgData  = /** @class */ (function () {
	function DragonBallLevelBaseCfgData () {
	}
	DragonBallLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DragonBallLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DragonBallLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 DragonBallLevelBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  等级 */
		 DragonBallLevelBaseCfgData.getLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升到下一级需要道具 */
		 DragonBallLevelBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成 */
		 DragonBallLevelBaseCfgData.getAttrByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return DragonBallLevelBaseCfgData
}());
	
cfg.DragonBallLevelBaseCfgData = DragonBallLevelBaseCfgData;
var DropDropGroupBaseCfgData  = /** @class */ (function () {
	function DropDropGroupBaseCfgData () {
	}
	DropDropGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  组ID */
		 DropDropGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};

	return DropDropGroupBaseCfgData
}());
	
cfg.DropDropGroupBaseCfgData = DropDropGroupBaseCfgData;
var DropDropBaseCfgData  = /** @class */ (function () {
	function DropDropBaseCfgData () {
	}
	DropDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dropID");
		};
		 /**  掉落ID */
		 DropDropBaseCfgData.getDropIDByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dropID;
			}
			return 0;
		};
		 /**  固定奖励 */
		 DropDropBaseCfgData.getAddItemByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return DropDropBaseCfgData
}());
	
cfg.DropDropBaseCfgData = DropDropBaseCfgData;
var DropDropBaseCfgData  = /** @class */ (function () {
	function DropDropBaseCfgData () {
	}
	DropDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dropID");
		};
		 /**  掉落ID */
		 DropDropBaseCfgData.getDropIDByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dropID;
			}
			return 0;
		};
		 /**  固定奖励 */
		 DropDropBaseCfgData.getAddItemByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return DropDropBaseCfgData
}());
	
cfg.DropDropBaseCfgData = DropDropBaseCfgData;
var DropDropGroupBaseCfgData  = /** @class */ (function () {
	function DropDropGroupBaseCfgData () {
	}
	DropDropGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  组ID */
		 DropDropGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};

	return DropDropGroupBaseCfgData
}());
	
cfg.DropDropGroupBaseCfgData = DropDropGroupBaseCfgData;
var DropDropBaseCfgData  = /** @class */ (function () {
	function DropDropBaseCfgData () {
	}
	DropDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dropID");
		};
		 /**  掉落ID */
		 DropDropBaseCfgData.getDropIDByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dropID;
			}
			return 0;
		};
		 /**  固定奖励 */
		 DropDropBaseCfgData.getAddItemByDropID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return DropDropBaseCfgData
}());
	
cfg.DropDropBaseCfgData = DropDropBaseCfgData;
var DropDropGroupBaseCfgData  = /** @class */ (function () {
	function DropDropGroupBaseCfgData () {
	}
	DropDropGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	DropDropGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		DropDropGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  组ID */
		 DropDropGroupBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};

	return DropDropGroupBaseCfgData
}());
	
cfg.DropDropGroupBaseCfgData = DropDropGroupBaseCfgData;
var ElementMonsterNewBaseCfgData  = /** @class */ (function () {
	function ElementMonsterNewBaseCfgData () {
	}
	ElementMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ElementMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 ElementMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return ElementMonsterNewBaseCfgData
}());
	
cfg.ElementMonsterNewBaseCfgData = ElementMonsterNewBaseCfgData;
var ElementOpentimeBaseCfgData  = /** @class */ (function () {
	function ElementOpentimeBaseCfgData () {
	}
	ElementOpentimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementOpentimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementOpentimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPetType */
		 ElementOpentimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  开启时间 */
		 ElementOpentimeBaseCfgData.getOpenTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  开启时间提示 */
		 ElementOpentimeBaseCfgData.getOpenTimeTipsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTimeTips;
			}
			return ""
		};
		 /**  名称 */
		 ElementOpentimeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return ElementOpentimeBaseCfgData
}());
	
cfg.ElementOpentimeBaseCfgData = ElementOpentimeBaseCfgData;
var ElementStageBaseCfgData  = /** @class */ (function () {
	function ElementStageBaseCfgData () {
	}
	ElementStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ElementStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  第几周 */
		 ElementStageBaseCfgData.getWeekByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.week;
			}
			return 0;
		};
		 /**  类型_emPetType */
		 ElementStageBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡 */
		 ElementStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要伙伴类型类型_个数 */
		 ElementStageBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  需要等级 */
		 ElementStageBaseCfgData.getNeedPlayerLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要战斗力 */
		 ElementStageBaseCfgData.getNeedFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementStageBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  圣殿威压技能 */
		 ElementStageBaseCfgData.getBossSkillIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossSkillId;
			}
			return 0;
		};
		 /**  怪物数据 */
		 ElementStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 ElementStageBaseCfgData.getFirstAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  通关奖励 */
		 ElementStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ElementStageBaseCfgData
}());
	
cfg.ElementStageBaseCfgData = ElementStageBaseCfgData;
var ElementBuyCountBaseCfgData  = /** @class */ (function () {
	function ElementBuyCountBaseCfgData () {
	}
	ElementBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ElementBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要钻石 */
		 ElementBuyCountBaseCfgData.getNeedDiamondByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return ElementBuyCountBaseCfgData
}());
	
cfg.ElementBuyCountBaseCfgData = ElementBuyCountBaseCfgData;
var ElementStageBaseCfgData  = /** @class */ (function () {
	function ElementStageBaseCfgData () {
	}
	ElementStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ElementStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  第几周 */
		 ElementStageBaseCfgData.getWeekByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.week;
			}
			return 0;
		};
		 /**  类型_emPetType */
		 ElementStageBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡 */
		 ElementStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要伙伴类型类型_个数 */
		 ElementStageBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  需要等级 */
		 ElementStageBaseCfgData.getNeedPlayerLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要战斗力 */
		 ElementStageBaseCfgData.getNeedFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementStageBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  圣殿威压技能 */
		 ElementStageBaseCfgData.getBossSkillIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossSkillId;
			}
			return 0;
		};
		 /**  怪物数据 */
		 ElementStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 ElementStageBaseCfgData.getFirstAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  通关奖励 */
		 ElementStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ElementStageBaseCfgData
}());
	
cfg.ElementStageBaseCfgData = ElementStageBaseCfgData;
var ElementStageBaseCfgData  = /** @class */ (function () {
	function ElementStageBaseCfgData () {
	}
	ElementStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ElementStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  第几周 */
		 ElementStageBaseCfgData.getWeekByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.week;
			}
			return 0;
		};
		 /**  类型_emPetType */
		 ElementStageBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡 */
		 ElementStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  需要伙伴类型类型_个数 */
		 ElementStageBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  需要等级 */
		 ElementStageBaseCfgData.getNeedPlayerLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要战斗力 */
		 ElementStageBaseCfgData.getNeedFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementStageBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  圣殿威压技能 */
		 ElementStageBaseCfgData.getBossSkillIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossSkillId;
			}
			return 0;
		};
		 /**  怪物数据 */
		 ElementStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 ElementStageBaseCfgData.getFirstAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddItem;
			}
			return ""
		};
		 /**  通关奖励 */
		 ElementStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return ElementStageBaseCfgData
}());
	
cfg.ElementStageBaseCfgData = ElementStageBaseCfgData;
var ElementBuyCountBaseCfgData  = /** @class */ (function () {
	function ElementBuyCountBaseCfgData () {
	}
	ElementBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ElementBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要钻石 */
		 ElementBuyCountBaseCfgData.getNeedDiamondByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return ElementBuyCountBaseCfgData
}());
	
cfg.ElementBuyCountBaseCfgData = ElementBuyCountBaseCfgData;
var ElementMonsterNewBaseCfgData  = /** @class */ (function () {
	function ElementMonsterNewBaseCfgData () {
	}
	ElementMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ElementMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 ElementMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return ElementMonsterNewBaseCfgData
}());
	
cfg.ElementMonsterNewBaseCfgData = ElementMonsterNewBaseCfgData;
var ElementOpentimeBaseCfgData  = /** @class */ (function () {
	function ElementOpentimeBaseCfgData () {
	}
	ElementOpentimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementOpentimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementOpentimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPetType */
		 ElementOpentimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  开启时间 */
		 ElementOpentimeBaseCfgData.getOpenTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  开启时间提示 */
		 ElementOpentimeBaseCfgData.getOpenTimeTipsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTimeTips;
			}
			return ""
		};
		 /**  名称 */
		 ElementOpentimeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return ElementOpentimeBaseCfgData
}());
	
cfg.ElementOpentimeBaseCfgData = ElementOpentimeBaseCfgData;
var ElementOpentimeBaseCfgData  = /** @class */ (function () {
	function ElementOpentimeBaseCfgData () {
	}
	ElementOpentimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementOpentimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementOpentimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPetType */
		 ElementOpentimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  开启时间 */
		 ElementOpentimeBaseCfgData.getOpenTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  开启时间提示 */
		 ElementOpentimeBaseCfgData.getOpenTimeTipsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTimeTips;
			}
			return ""
		};
		 /**  名称 */
		 ElementOpentimeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return ElementOpentimeBaseCfgData
}());
	
cfg.ElementOpentimeBaseCfgData = ElementOpentimeBaseCfgData;
var ElementMonsterNewBaseCfgData  = /** @class */ (function () {
	function ElementMonsterNewBaseCfgData () {
	}
	ElementMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ElementMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 ElementMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 ElementMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return ElementMonsterNewBaseCfgData
}());
	
cfg.ElementMonsterNewBaseCfgData = ElementMonsterNewBaseCfgData;
var ElementBuyCountBaseCfgData  = /** @class */ (function () {
	function ElementBuyCountBaseCfgData () {
	}
	ElementBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ElementBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ElementBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 ElementBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要钻石 */
		 ElementBuyCountBaseCfgData.getNeedDiamondByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return ElementBuyCountBaseCfgData
}());
	
cfg.ElementBuyCountBaseCfgData = ElementBuyCountBaseCfgData;
var ExpeditionStageTypeBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageTypeBaseCfgData () {
	}
	ExpeditionStageTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageType");
		};
		 /**  关卡 */
		 ExpeditionStageTypeBaseCfgData.getStageTypeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageType;
			}
			return 0;
		};
		 /**  需要战力 */
		 ExpeditionStageTypeBaseCfgData.getNeedFightPowerByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  奖励预览 */
		 ExpeditionStageTypeBaseCfgData.getAddPrizeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ExpeditionStageTypeBaseCfgData
}());
	
cfg.ExpeditionStageTypeBaseCfgData = ExpeditionStageTypeBaseCfgData;
var ExpeditionStageBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageBaseCfgData () {
	}
	ExpeditionStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ExpeditionStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 ExpeditionStageBaseCfgData.getStageIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  难度 */
		 ExpeditionStageBaseCfgData.getExpeditionTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expeditionType;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ExpeditionStageBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  宝箱奖励 */
		 ExpeditionStageBaseCfgData.getExtraPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraPrize;
			}
			return ""
		};
		 /**  战力区间百分比 */
		 ExpeditionStageBaseCfgData.getFightpowerRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightpowerRate;
			}
			return ""
		};

	return ExpeditionStageBaseCfgData
}());
	
cfg.ExpeditionStageBaseCfgData = ExpeditionStageBaseCfgData;
var ExpeditionRobotBaseCfgData  = /** @class */ (function () {
	function ExpeditionRobotBaseCfgData () {
	}
	ExpeditionRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ExpeditionRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ExpeditionRobotBaseCfgData
}());
	
cfg.ExpeditionRobotBaseCfgData = ExpeditionRobotBaseCfgData;
var ExpeditionMonsterNewBaseCfgData  = /** @class */ (function () {
	function ExpeditionMonsterNewBaseCfgData () {
	}
	ExpeditionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ExpeditionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ExpeditionMonsterNewBaseCfgData
}());
	
cfg.ExpeditionMonsterNewBaseCfgData = ExpeditionMonsterNewBaseCfgData;
var ExpeditionMonsterNewBaseCfgData  = /** @class */ (function () {
	function ExpeditionMonsterNewBaseCfgData () {
	}
	ExpeditionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ExpeditionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ExpeditionMonsterNewBaseCfgData
}());
	
cfg.ExpeditionMonsterNewBaseCfgData = ExpeditionMonsterNewBaseCfgData;
var ExpeditionStageTypeBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageTypeBaseCfgData () {
	}
	ExpeditionStageTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageType");
		};
		 /**  关卡 */
		 ExpeditionStageTypeBaseCfgData.getStageTypeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageType;
			}
			return 0;
		};
		 /**  需要战力 */
		 ExpeditionStageTypeBaseCfgData.getNeedFightPowerByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  奖励预览 */
		 ExpeditionStageTypeBaseCfgData.getAddPrizeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ExpeditionStageTypeBaseCfgData
}());
	
cfg.ExpeditionStageTypeBaseCfgData = ExpeditionStageTypeBaseCfgData;
var ExpeditionRobotBaseCfgData  = /** @class */ (function () {
	function ExpeditionRobotBaseCfgData () {
	}
	ExpeditionRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ExpeditionRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ExpeditionRobotBaseCfgData
}());
	
cfg.ExpeditionRobotBaseCfgData = ExpeditionRobotBaseCfgData;
var ExpeditionStageBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageBaseCfgData () {
	}
	ExpeditionStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ExpeditionStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 ExpeditionStageBaseCfgData.getStageIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  难度 */
		 ExpeditionStageBaseCfgData.getExpeditionTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expeditionType;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ExpeditionStageBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  宝箱奖励 */
		 ExpeditionStageBaseCfgData.getExtraPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraPrize;
			}
			return ""
		};
		 /**  战力区间百分比 */
		 ExpeditionStageBaseCfgData.getFightpowerRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightpowerRate;
			}
			return ""
		};

	return ExpeditionStageBaseCfgData
}());
	
cfg.ExpeditionStageBaseCfgData = ExpeditionStageBaseCfgData;
var ExpeditionRobotBaseCfgData  = /** @class */ (function () {
	function ExpeditionRobotBaseCfgData () {
	}
	ExpeditionRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 ExpeditionRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return ExpeditionRobotBaseCfgData
}());
	
cfg.ExpeditionRobotBaseCfgData = ExpeditionRobotBaseCfgData;
var ExpeditionMonsterNewBaseCfgData  = /** @class */ (function () {
	function ExpeditionMonsterNewBaseCfgData () {
	}
	ExpeditionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 ExpeditionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return ExpeditionMonsterNewBaseCfgData
}());
	
cfg.ExpeditionMonsterNewBaseCfgData = ExpeditionMonsterNewBaseCfgData;
var ExpeditionStageTypeBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageTypeBaseCfgData () {
	}
	ExpeditionStageTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageType");
		};
		 /**  关卡 */
		 ExpeditionStageTypeBaseCfgData.getStageTypeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageType;
			}
			return 0;
		};
		 /**  需要战力 */
		 ExpeditionStageTypeBaseCfgData.getNeedFightPowerByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needFightPower;
			}
			return 0;
		};
		 /**  奖励预览 */
		 ExpeditionStageTypeBaseCfgData.getAddPrizeByStageType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return ExpeditionStageTypeBaseCfgData
}());
	
cfg.ExpeditionStageTypeBaseCfgData = ExpeditionStageTypeBaseCfgData;
var ExpeditionStageBaseCfgData  = /** @class */ (function () {
	function ExpeditionStageBaseCfgData () {
	}
	ExpeditionStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ExpeditionStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ExpeditionStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ExpeditionStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 ExpeditionStageBaseCfgData.getStageIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  难度 */
		 ExpeditionStageBaseCfgData.getExpeditionTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expeditionType;
			}
			return 0;
		};
		 /**  奖励道具 */
		 ExpeditionStageBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  宝箱奖励 */
		 ExpeditionStageBaseCfgData.getExtraPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraPrize;
			}
			return ""
		};
		 /**  战力区间百分比 */
		 ExpeditionStageBaseCfgData.getFightpowerRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightpowerRate;
			}
			return ""
		};

	return ExpeditionStageBaseCfgData
}());
	
cfg.ExpeditionStageBaseCfgData = ExpeditionStageBaseCfgData;
var FactionImpeachTimeBaseCfgData  = /** @class */ (function () {
	function FactionImpeachTimeBaseCfgData () {
	}
	FactionImpeachTimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionImpeachTimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionImpeachTimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 FactionImpeachTimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要离线时间 */
		 FactionImpeachTimeBaseCfgData.getImpeachTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.impeachTime;
			}
			return 0;
		};

	return FactionImpeachTimeBaseCfgData
}());
	
cfg.FactionImpeachTimeBaseCfgData = FactionImpeachTimeBaseCfgData;
var FactionPvpSkillIndexBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillIndexBaseCfgData () {
	}
	FactionPvpSkillIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业类型 */
		 FactionPvpSkillIndexBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能等级 */
		 FactionPvpSkillIndexBaseCfgData.getSkillLevelByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能索引 */
		 FactionPvpSkillIndexBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  评分 */
		 FactionPvpSkillIndexBaseCfgData.getAddScoreByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillIndexBaseCfgData
}());
	
cfg.FactionPvpSkillIndexBaseCfgData = FactionPvpSkillIndexBaseCfgData;
var FactionMonsterNewBaseCfgData  = /** @class */ (function () {
	function FactionMonsterNewBaseCfgData () {
	}
	FactionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 FactionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 FactionMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return FactionMonsterNewBaseCfgData
}());
	
cfg.FactionMonsterNewBaseCfgData = FactionMonsterNewBaseCfgData;
var FactionSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionSkillUpgradeBaseCfgData () {
	}
	FactionSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionSkillUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要所有技能等级 */
		 FactionSkillUpgradeBaseCfgData.getNeedAllSkillLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionSkillUpgradeBaseCfgData
}());
	
cfg.FactionSkillUpgradeBaseCfgData = FactionSkillUpgradeBaseCfgData;
var FactionSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionSkillResetBaseCfgData () {
	}
	FactionSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionSkillResetBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillResetBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionSkillResetBaseCfgData.getReturnItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionSkillResetBaseCfgData
}());
	
cfg.FactionSkillResetBaseCfgData = FactionSkillResetBaseCfgData;
var FactionCopymapBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBaseCfgData () {
	}
	FactionCopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 FactionCopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  章节名称 */
		 FactionCopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  怪物数据 */
		 FactionCopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  伤害奖励 */
		 FactionCopymapBaseCfgData.getDamagePrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  击败奖励 */
		 FactionCopymapBaseCfgData.getKillPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.killPrize;
			}
			return ""
		};

	return FactionCopymapBaseCfgData
}());
	
cfg.FactionCopymapBaseCfgData = FactionCopymapBaseCfgData;
var FactionPvpSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillUpgradeBaseCfgData () {
	}
	FactionPvpSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillUpgradeBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要其他天赋技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedAllSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要本天赋其他技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedOtherSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needOtherSkillLevel;
			}
			return 0;
		};

	return FactionPvpSkillUpgradeBaseCfgData
}());
	
cfg.FactionPvpSkillUpgradeBaseCfgData = FactionPvpSkillUpgradeBaseCfgData;
var FactionCopymapTopprizeBaseCfgData  = /** @class */ (function () {
	function FactionCopymapTopprizeBaseCfgData () {
	}
	FactionCopymapTopprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapTopprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapTopprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionCopymapTopprizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 FactionCopymapTopprizeBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排名(上一名次，此名次] */
		 FactionCopymapTopprizeBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};

	return FactionCopymapTopprizeBaseCfgData
}());
	
cfg.FactionCopymapTopprizeBaseCfgData = FactionCopymapTopprizeBaseCfgData;
var FactionMonsterNewBaseCfgData  = /** @class */ (function () {
	function FactionMonsterNewBaseCfgData () {
	}
	FactionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 FactionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 FactionMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return FactionMonsterNewBaseCfgData
}());
	
cfg.FactionMonsterNewBaseCfgData = FactionMonsterNewBaseCfgData;
var FactionImpeachTimeBaseCfgData  = /** @class */ (function () {
	function FactionImpeachTimeBaseCfgData () {
	}
	FactionImpeachTimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionImpeachTimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionImpeachTimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 FactionImpeachTimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要离线时间 */
		 FactionImpeachTimeBaseCfgData.getImpeachTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.impeachTime;
			}
			return 0;
		};

	return FactionImpeachTimeBaseCfgData
}());
	
cfg.FactionImpeachTimeBaseCfgData = FactionImpeachTimeBaseCfgData;
var FactionPvpSkillBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillBaseCfgData () {
	}
	FactionPvpSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionPvpSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionPvpSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionPvpSkillBaseCfgData.getSkillPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillPos;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionPvpSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionPvpSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionPvpSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionPvpSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillBaseCfgData
}());
	
cfg.FactionPvpSkillBaseCfgData = FactionPvpSkillBaseCfgData;
var FactionPvpSkillIndexBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillIndexBaseCfgData () {
	}
	FactionPvpSkillIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业类型 */
		 FactionPvpSkillIndexBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能等级 */
		 FactionPvpSkillIndexBaseCfgData.getSkillLevelByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能索引 */
		 FactionPvpSkillIndexBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  评分 */
		 FactionPvpSkillIndexBaseCfgData.getAddScoreByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillIndexBaseCfgData
}());
	
cfg.FactionPvpSkillIndexBaseCfgData = FactionPvpSkillIndexBaseCfgData;
var FactionPvpSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillUpgradeBaseCfgData () {
	}
	FactionPvpSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillUpgradeBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要其他天赋技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedAllSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要本天赋其他技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedOtherSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needOtherSkillLevel;
			}
			return 0;
		};

	return FactionPvpSkillUpgradeBaseCfgData
}());
	
cfg.FactionPvpSkillUpgradeBaseCfgData = FactionPvpSkillUpgradeBaseCfgData;
var FactionPvpSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillResetBaseCfgData () {
	}
	FactionPvpSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillResetBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionPvpSkillResetBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillResetBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionPvpSkillResetBaseCfgData.getReturnItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionPvpSkillResetBaseCfgData
}());
	
cfg.FactionPvpSkillResetBaseCfgData = FactionPvpSkillResetBaseCfgData;
var FactionCopymapBuycountBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBuycountBaseCfgData () {
	}
	FactionCopymapBuycountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBuycountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBuycountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 FactionCopymapBuycountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionCopymapBuycountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionCopymapBuycountBaseCfgData
}());
	
cfg.FactionCopymapBuycountBaseCfgData = FactionCopymapBuycountBaseCfgData;
var FactionDonateBaseCfgData  = /** @class */ (function () {
	function FactionDonateBaseCfgData () {
	}
	FactionDonateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "donateType");
		};
		 /**  捐献类型 */
		 FactionDonateBaseCfgData.getDonateTypeByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.donateType;
			}
			return 0;
		};
		 /**  捐献名称 */
		 FactionDonateBaseCfgData.getNameByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具 */
		 FactionDonateBaseCfgData.getNeedItemByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加帮会经验 */
		 FactionDonateBaseCfgData.getAddExpByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return 0;
		};
		 /**  增加帮会贡献 */
		 FactionDonateBaseCfgData.getAddContriByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addContri;
			}
			return 0;
		};

	return FactionDonateBaseCfgData
}());
	
cfg.FactionDonateBaseCfgData = FactionDonateBaseCfgData;
var FactionPvpSkillBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillBaseCfgData () {
	}
	FactionPvpSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionPvpSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionPvpSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionPvpSkillBaseCfgData.getSkillPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillPos;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionPvpSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionPvpSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionPvpSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionPvpSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillBaseCfgData
}());
	
cfg.FactionPvpSkillBaseCfgData = FactionPvpSkillBaseCfgData;
var FactionUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionUpgradeBaseCfgData () {
	}
	FactionUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  帮会等级 */
		 FactionUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  最大帮派人数 */
		 FactionUpgradeBaseCfgData.getMemberCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.memberCount;
			}
			return 0;
		};
		 /**  此级最大经验值 */
		 FactionUpgradeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  副帮主个数 */
		 FactionUpgradeBaseCfgData.getDeputyCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.deputyCount;
			}
			return 0;
		};

	return FactionUpgradeBaseCfgData
}());
	
cfg.FactionUpgradeBaseCfgData = FactionUpgradeBaseCfgData;
var FactionDonateBaseCfgData  = /** @class */ (function () {
	function FactionDonateBaseCfgData () {
	}
	FactionDonateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "donateType");
		};
		 /**  捐献类型 */
		 FactionDonateBaseCfgData.getDonateTypeByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.donateType;
			}
			return 0;
		};
		 /**  捐献名称 */
		 FactionDonateBaseCfgData.getNameByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具 */
		 FactionDonateBaseCfgData.getNeedItemByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加帮会经验 */
		 FactionDonateBaseCfgData.getAddExpByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return 0;
		};
		 /**  增加帮会贡献 */
		 FactionDonateBaseCfgData.getAddContriByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addContri;
			}
			return 0;
		};

	return FactionDonateBaseCfgData
}());
	
cfg.FactionDonateBaseCfgData = FactionDonateBaseCfgData;
var FactionSkillBaseCfgData  = /** @class */ (function () {
	function FactionSkillBaseCfgData () {
	}
	FactionSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionSkillBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};

	return FactionSkillBaseCfgData
}());
	
cfg.FactionSkillBaseCfgData = FactionSkillBaseCfgData;
var FactionCopymapTopprizeBaseCfgData  = /** @class */ (function () {
	function FactionCopymapTopprizeBaseCfgData () {
	}
	FactionCopymapTopprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapTopprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapTopprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionCopymapTopprizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 FactionCopymapTopprizeBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排名(上一名次，此名次] */
		 FactionCopymapTopprizeBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};

	return FactionCopymapTopprizeBaseCfgData
}());
	
cfg.FactionCopymapTopprizeBaseCfgData = FactionCopymapTopprizeBaseCfgData;
var FactionPvpSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillResetBaseCfgData () {
	}
	FactionPvpSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillResetBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionPvpSkillResetBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillResetBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionPvpSkillResetBaseCfgData.getReturnItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionPvpSkillResetBaseCfgData
}());
	
cfg.FactionPvpSkillResetBaseCfgData = FactionPvpSkillResetBaseCfgData;
var FactionSkillBaseCfgData  = /** @class */ (function () {
	function FactionSkillBaseCfgData () {
	}
	FactionSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionSkillBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};

	return FactionSkillBaseCfgData
}());
	
cfg.FactionSkillBaseCfgData = FactionSkillBaseCfgData;
var FactionDonatePrizeBaseCfgData  = /** @class */ (function () {
	function FactionDonatePrizeBaseCfgData () {
	}
	FactionDonatePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonatePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonatePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 FactionDonatePrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要总捐献值 */
		 FactionDonatePrizeBaseCfgData.getNeedDonateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDonate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionDonatePrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return FactionDonatePrizeBaseCfgData
}());
	
cfg.FactionDonatePrizeBaseCfgData = FactionDonatePrizeBaseCfgData;
var FactionCopymapBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBaseCfgData () {
	}
	FactionCopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 FactionCopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  章节名称 */
		 FactionCopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  怪物数据 */
		 FactionCopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  伤害奖励 */
		 FactionCopymapBaseCfgData.getDamagePrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  击败奖励 */
		 FactionCopymapBaseCfgData.getKillPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.killPrize;
			}
			return ""
		};

	return FactionCopymapBaseCfgData
}());
	
cfg.FactionCopymapBaseCfgData = FactionCopymapBaseCfgData;
var FactionSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionSkillResetBaseCfgData () {
	}
	FactionSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionSkillResetBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillResetBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionSkillResetBaseCfgData.getReturnItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionSkillResetBaseCfgData
}());
	
cfg.FactionSkillResetBaseCfgData = FactionSkillResetBaseCfgData;
var FactionSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionSkillUpgradeBaseCfgData () {
	}
	FactionSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionSkillUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要所有技能等级 */
		 FactionSkillUpgradeBaseCfgData.getNeedAllSkillLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionSkillUpgradeBaseCfgData
}());
	
cfg.FactionSkillUpgradeBaseCfgData = FactionSkillUpgradeBaseCfgData;
var FactionLivenessBaseCfgData  = /** @class */ (function () {
	function FactionLivenessBaseCfgData () {
	}
	FactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionLivenessBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  该等级最大经验值 */
		 FactionLivenessBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  升到此级奖励 */
		 FactionLivenessBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  此级属性 */
		 FactionLivenessBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return FactionLivenessBaseCfgData
}());
	
cfg.FactionLivenessBaseCfgData = FactionLivenessBaseCfgData;
var FactionLivenessBaseCfgData  = /** @class */ (function () {
	function FactionLivenessBaseCfgData () {
	}
	FactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionLivenessBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  该等级最大经验值 */
		 FactionLivenessBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  升到此级奖励 */
		 FactionLivenessBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  此级属性 */
		 FactionLivenessBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return FactionLivenessBaseCfgData
}());
	
cfg.FactionLivenessBaseCfgData = FactionLivenessBaseCfgData;
var FactionDonateBaseCfgData  = /** @class */ (function () {
	function FactionDonateBaseCfgData () {
	}
	FactionDonateBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonateBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonateBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "donateType");
		};
		 /**  捐献类型 */
		 FactionDonateBaseCfgData.getDonateTypeByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.donateType;
			}
			return 0;
		};
		 /**  捐献名称 */
		 FactionDonateBaseCfgData.getNameByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具 */
		 FactionDonateBaseCfgData.getNeedItemByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加帮会经验 */
		 FactionDonateBaseCfgData.getAddExpByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return 0;
		};
		 /**  增加帮会贡献 */
		 FactionDonateBaseCfgData.getAddContriByDonateType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addContri;
			}
			return 0;
		};

	return FactionDonateBaseCfgData
}());
	
cfg.FactionDonateBaseCfgData = FactionDonateBaseCfgData;
var FactionDonatePrizeBaseCfgData  = /** @class */ (function () {
	function FactionDonatePrizeBaseCfgData () {
	}
	FactionDonatePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonatePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonatePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 FactionDonatePrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要总捐献值 */
		 FactionDonatePrizeBaseCfgData.getNeedDonateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDonate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionDonatePrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return FactionDonatePrizeBaseCfgData
}());
	
cfg.FactionDonatePrizeBaseCfgData = FactionDonatePrizeBaseCfgData;
var FactionUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionUpgradeBaseCfgData () {
	}
	FactionUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  帮会等级 */
		 FactionUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  最大帮派人数 */
		 FactionUpgradeBaseCfgData.getMemberCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.memberCount;
			}
			return 0;
		};
		 /**  此级最大经验值 */
		 FactionUpgradeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  副帮主个数 */
		 FactionUpgradeBaseCfgData.getDeputyCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.deputyCount;
			}
			return 0;
		};

	return FactionUpgradeBaseCfgData
}());
	
cfg.FactionUpgradeBaseCfgData = FactionUpgradeBaseCfgData;
var FactionDonatePrizeBaseCfgData  = /** @class */ (function () {
	function FactionDonatePrizeBaseCfgData () {
	}
	FactionDonatePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionDonatePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionDonatePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励ID */
		 FactionDonatePrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  需要总捐献值 */
		 FactionDonatePrizeBaseCfgData.getNeedDonateByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDonate;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionDonatePrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return FactionDonatePrizeBaseCfgData
}());
	
cfg.FactionDonatePrizeBaseCfgData = FactionDonatePrizeBaseCfgData;
var FactionPvpSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillResetBaseCfgData () {
	}
	FactionPvpSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillResetBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionPvpSkillResetBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillResetBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionPvpSkillResetBaseCfgData.getReturnItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionPvpSkillResetBaseCfgData
}());
	
cfg.FactionPvpSkillResetBaseCfgData = FactionPvpSkillResetBaseCfgData;
var FactionUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionUpgradeBaseCfgData () {
	}
	FactionUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  帮会等级 */
		 FactionUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  最大帮派人数 */
		 FactionUpgradeBaseCfgData.getMemberCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.memberCount;
			}
			return 0;
		};
		 /**  此级最大经验值 */
		 FactionUpgradeBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  副帮主个数 */
		 FactionUpgradeBaseCfgData.getDeputyCountByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.deputyCount;
			}
			return 0;
		};

	return FactionUpgradeBaseCfgData
}());
	
cfg.FactionUpgradeBaseCfgData = FactionUpgradeBaseCfgData;
var FactionLivenessBaseCfgData  = /** @class */ (function () {
	function FactionLivenessBaseCfgData () {
	}
	FactionLivenessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionLivenessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionLivenessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionLivenessBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  该等级最大经验值 */
		 FactionLivenessBaseCfgData.getExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  升到此级奖励 */
		 FactionLivenessBaseCfgData.getAddItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  此级属性 */
		 FactionLivenessBaseCfgData.getAddAttrByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return FactionLivenessBaseCfgData
}());
	
cfg.FactionLivenessBaseCfgData = FactionLivenessBaseCfgData;
var FactionSkillBaseCfgData  = /** @class */ (function () {
	function FactionSkillBaseCfgData () {
	}
	FactionSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionSkillBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};

	return FactionSkillBaseCfgData
}());
	
cfg.FactionSkillBaseCfgData = FactionSkillBaseCfgData;
var FactionSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionSkillUpgradeBaseCfgData () {
	}
	FactionSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 FactionSkillUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要所有技能等级 */
		 FactionSkillUpgradeBaseCfgData.getNeedAllSkillLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionSkillUpgradeBaseCfgData
}());
	
cfg.FactionSkillUpgradeBaseCfgData = FactionSkillUpgradeBaseCfgData;
var FactionCopymapBuycountBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBuycountBaseCfgData () {
	}
	FactionCopymapBuycountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBuycountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBuycountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 FactionCopymapBuycountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionCopymapBuycountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionCopymapBuycountBaseCfgData
}());
	
cfg.FactionCopymapBuycountBaseCfgData = FactionCopymapBuycountBaseCfgData;
var FactionSkillResetBaseCfgData  = /** @class */ (function () {
	function FactionSkillResetBaseCfgData () {
	}
	FactionSkillResetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionSkillResetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionSkillResetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级（0表示第一次）(上等级，此等级] */
		 FactionSkillResetBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionSkillResetBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  返还比率道具ID_万分比 */
		 FactionSkillResetBaseCfgData.getReturnItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.returnItem;
			}
			return ""
		};

	return FactionSkillResetBaseCfgData
}());
	
cfg.FactionSkillResetBaseCfgData = FactionSkillResetBaseCfgData;
var FactionCopymapBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBaseCfgData () {
	}
	FactionCopymapBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 FactionCopymapBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  章节名称 */
		 FactionCopymapBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  怪物数据 */
		 FactionCopymapBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  伤害奖励 */
		 FactionCopymapBaseCfgData.getDamagePrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damagePrize;
			}
			return ""
		};
		 /**  击败奖励 */
		 FactionCopymapBaseCfgData.getKillPrizeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.killPrize;
			}
			return ""
		};

	return FactionCopymapBaseCfgData
}());
	
cfg.FactionCopymapBaseCfgData = FactionCopymapBaseCfgData;
var FactionCopymapBuycountBaseCfgData  = /** @class */ (function () {
	function FactionCopymapBuycountBaseCfgData () {
	}
	FactionCopymapBuycountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapBuycountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapBuycountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 FactionCopymapBuycountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionCopymapBuycountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return FactionCopymapBuycountBaseCfgData
}());
	
cfg.FactionCopymapBuycountBaseCfgData = FactionCopymapBuycountBaseCfgData;
var FactionMonsterNewBaseCfgData  = /** @class */ (function () {
	function FactionMonsterNewBaseCfgData () {
	}
	FactionMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 FactionMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 FactionMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return FactionMonsterNewBaseCfgData
}());
	
cfg.FactionMonsterNewBaseCfgData = FactionMonsterNewBaseCfgData;
var FactionCopymapTopprizeBaseCfgData  = /** @class */ (function () {
	function FactionCopymapTopprizeBaseCfgData () {
	}
	FactionCopymapTopprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionCopymapTopprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionCopymapTopprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionCopymapTopprizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  ID */
		 FactionCopymapTopprizeBaseCfgData.getIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排名(上一名次，此名次] */
		 FactionCopymapTopprizeBaseCfgData.getRankByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 FactionCopymapTopprizeBaseCfgData.getBaseItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseItem;
			}
			return ""
		};

	return FactionCopymapTopprizeBaseCfgData
}());
	
cfg.FactionCopymapTopprizeBaseCfgData = FactionCopymapTopprizeBaseCfgData;
var FactionPvpSkillIndexBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillIndexBaseCfgData () {
	}
	FactionPvpSkillIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业类型 */
		 FactionPvpSkillIndexBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能等级 */
		 FactionPvpSkillIndexBaseCfgData.getSkillLevelByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能索引 */
		 FactionPvpSkillIndexBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  评分 */
		 FactionPvpSkillIndexBaseCfgData.getAddScoreByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillIndexBaseCfgData
}());
	
cfg.FactionPvpSkillIndexBaseCfgData = FactionPvpSkillIndexBaseCfgData;
var FactionPvpSkillBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillBaseCfgData () {
	}
	FactionPvpSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 FactionPvpSkillBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  职业类型 */
		 FactionPvpSkillBaseCfgData.getJobTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能位置 */
		 FactionPvpSkillBaseCfgData.getSkillPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillPos;
			}
			return 0;
		};
		 /**  技能类型 */
		 FactionPvpSkillBaseCfgData.getSkillTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  每级增加属性属性类型|属性值|属性万分比 */
		 FactionPvpSkillBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  描述 */
		 FactionPvpSkillBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  评分 */
		 FactionPvpSkillBaseCfgData.getAddScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return FactionPvpSkillBaseCfgData
}());
	
cfg.FactionPvpSkillBaseCfgData = FactionPvpSkillBaseCfgData;
var FactionPvpSkillUpgradeBaseCfgData  = /** @class */ (function () {
	function FactionPvpSkillUpgradeBaseCfgData () {
	}
	FactionPvpSkillUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionPvpSkillUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionPvpSkillUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillType");
		};
		 /**  技能类型 */
		 FactionPvpSkillUpgradeBaseCfgData.getSkillTypeBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要其他天赋技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedAllSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAllSkillLevel;
			}
			return 0;
		};
		 /**  需要道具 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedItemBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要本天赋其他技能最低等级 */
		 FactionPvpSkillUpgradeBaseCfgData.getNeedOtherSkillLevelBySkillType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needOtherSkillLevel;
			}
			return 0;
		};

	return FactionPvpSkillUpgradeBaseCfgData
}());
	
cfg.FactionPvpSkillUpgradeBaseCfgData = FactionPvpSkillUpgradeBaseCfgData;
var FactionImpeachTimeBaseCfgData  = /** @class */ (function () {
	function FactionImpeachTimeBaseCfgData () {
	}
	FactionImpeachTimeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionImpeachTimeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionImpeachTimeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 FactionImpeachTimeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要离线时间 */
		 FactionImpeachTimeBaseCfgData.getImpeachTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.impeachTime;
			}
			return 0;
		};

	return FactionImpeachTimeBaseCfgData
}());
	
cfg.FactionImpeachTimeBaseCfgData = FactionImpeachTimeBaseCfgData;
var FactionNameNameBaseCfgData  = /** @class */ (function () {
	function FactionNameNameBaseCfgData () {
	}
	FactionNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  随机名字 */
		 FactionNameNameBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return FactionNameNameBaseCfgData
}());
	
cfg.FactionNameNameBaseCfgData = FactionNameNameBaseCfgData;
var FactionNameNameBaseCfgData  = /** @class */ (function () {
	function FactionNameNameBaseCfgData () {
	}
	FactionNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  随机名字 */
		 FactionNameNameBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return FactionNameNameBaseCfgData
}());
	
cfg.FactionNameNameBaseCfgData = FactionNameNameBaseCfgData;
var FactionNameNameBaseCfgData  = /** @class */ (function () {
	function FactionNameNameBaseCfgData () {
	}
	FactionNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  随机名字 */
		 FactionNameNameBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return FactionNameNameBaseCfgData
}());
	
cfg.FactionNameNameBaseCfgData = FactionNameNameBaseCfgData;
var FactionWarTopPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarTopPrizeBaseCfgData () {
	}
	FactionWarTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 FactionWarTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarTopPrizeBaseCfgData.getAddPrizeByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarTopPrizeBaseCfgData
}());
	
cfg.FactionWarTopPrizeBaseCfgData = FactionWarTopPrizeBaseCfgData;
var FactionWarBoxPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarBoxPrizeBaseCfgData () {
	}
	FactionWarBoxPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarBoxPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarBoxPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionWarBoxPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarBoxPrizeBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarBoxPrizeBaseCfgData
}());
	
cfg.FactionWarBoxPrizeBaseCfgData = FactionWarBoxPrizeBaseCfgData;
var FactionWarTopPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarTopPrizeBaseCfgData () {
	}
	FactionWarTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 FactionWarTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarTopPrizeBaseCfgData.getAddPrizeByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarTopPrizeBaseCfgData
}());
	
cfg.FactionWarTopPrizeBaseCfgData = FactionWarTopPrizeBaseCfgData;
var FactionWarConstBaseCfgData  = /** @class */ (function () {
	function FactionWarConstBaseCfgData () {
	}
	FactionWarConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 FactionWarConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要帮派等级 */
		 FactionWarConstBaseCfgData.getNeedLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要活跃人数 */
		 FactionWarConstBaseCfgData.getNeedActiveCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needActiveCount;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 FactionWarConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  废墟最大挑战次数 */
		 FactionWarConstBaseCfgData.getRunieFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieFightCount;
			}
			return 0;
		};
		 /**  废墟被动技能ID */
		 FactionWarConstBaseCfgData.getRunieSkillIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillID;
			}
			return 0;
		};
		 /**  废墟最大的技能等级 */
		 FactionWarConstBaseCfgData.getRunieSkillMaxLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillMaxLevel;
			}
			return 0;
		};
		 /**  匹配时间 */
		 FactionWarConstBaseCfgData.getMatchTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 FactionWarConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 FactionWarConstBaseCfgData.getPrizeTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  宝箱领取时间 */
		 FactionWarConstBaseCfgData.getPrizeBoxTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeBoxTime;
			}
			return ""
		};

	return FactionWarConstBaseCfgData
}());
	
cfg.FactionWarConstBaseCfgData = FactionWarConstBaseCfgData;
var FactionWarBoxPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarBoxPrizeBaseCfgData () {
	}
	FactionWarBoxPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarBoxPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarBoxPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionWarBoxPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarBoxPrizeBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarBoxPrizeBaseCfgData
}());
	
cfg.FactionWarBoxPrizeBaseCfgData = FactionWarBoxPrizeBaseCfgData;
var FactionWarFightPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarFightPrizeBaseCfgData () {
	}
	FactionWarFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  难度星级 */
		 FactionWarFightPrizeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  增加的被动技能技能ID_等级 */
		 FactionWarFightPrizeBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  成功奖励 */
		 FactionWarFightPrizeBaseCfgData.getSucAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddItem;
			}
			return ""
		};
		 /**  失败奖励奖励 */
		 FactionWarFightPrizeBaseCfgData.getFailAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战绩点参数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointParamByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointParam;
			}
			return 0;
		};
		 /**  战绩点系数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointRateByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointRate;
			}
			return 0;
		};
		 /**  失败增加战绩点 */
		 FactionWarFightPrizeBaseCfgData.getFailAddFightPointByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddFightPoint;
			}
			return 0;
		};

	return FactionWarFightPrizeBaseCfgData
}());
	
cfg.FactionWarFightPrizeBaseCfgData = FactionWarFightPrizeBaseCfgData;
var FactionWarFightPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarFightPrizeBaseCfgData () {
	}
	FactionWarFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  难度星级 */
		 FactionWarFightPrizeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  增加的被动技能技能ID_等级 */
		 FactionWarFightPrizeBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  成功奖励 */
		 FactionWarFightPrizeBaseCfgData.getSucAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddItem;
			}
			return ""
		};
		 /**  失败奖励奖励 */
		 FactionWarFightPrizeBaseCfgData.getFailAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战绩点参数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointParamByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointParam;
			}
			return 0;
		};
		 /**  战绩点系数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointRateByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointRate;
			}
			return 0;
		};
		 /**  失败增加战绩点 */
		 FactionWarFightPrizeBaseCfgData.getFailAddFightPointByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddFightPoint;
			}
			return 0;
		};

	return FactionWarFightPrizeBaseCfgData
}());
	
cfg.FactionWarFightPrizeBaseCfgData = FactionWarFightPrizeBaseCfgData;
var FactionWarConstBaseCfgData  = /** @class */ (function () {
	function FactionWarConstBaseCfgData () {
	}
	FactionWarConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 FactionWarConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要帮派等级 */
		 FactionWarConstBaseCfgData.getNeedLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要活跃人数 */
		 FactionWarConstBaseCfgData.getNeedActiveCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needActiveCount;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 FactionWarConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  废墟最大挑战次数 */
		 FactionWarConstBaseCfgData.getRunieFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieFightCount;
			}
			return 0;
		};
		 /**  废墟被动技能ID */
		 FactionWarConstBaseCfgData.getRunieSkillIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillID;
			}
			return 0;
		};
		 /**  废墟最大的技能等级 */
		 FactionWarConstBaseCfgData.getRunieSkillMaxLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillMaxLevel;
			}
			return 0;
		};
		 /**  匹配时间 */
		 FactionWarConstBaseCfgData.getMatchTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 FactionWarConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 FactionWarConstBaseCfgData.getPrizeTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  宝箱领取时间 */
		 FactionWarConstBaseCfgData.getPrizeBoxTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeBoxTime;
			}
			return ""
		};

	return FactionWarConstBaseCfgData
}());
	
cfg.FactionWarConstBaseCfgData = FactionWarConstBaseCfgData;
var FactionWarBoxPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarBoxPrizeBaseCfgData () {
	}
	FactionWarBoxPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarBoxPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarBoxPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 FactionWarBoxPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarBoxPrizeBaseCfgData.getAddPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarBoxPrizeBaseCfgData
}());
	
cfg.FactionWarBoxPrizeBaseCfgData = FactionWarBoxPrizeBaseCfgData;
var FactionWarFightPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarFightPrizeBaseCfgData () {
	}
	FactionWarFightPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarFightPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarFightPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  难度星级 */
		 FactionWarFightPrizeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  增加的被动技能技能ID_等级 */
		 FactionWarFightPrizeBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  成功奖励 */
		 FactionWarFightPrizeBaseCfgData.getSucAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sucAddItem;
			}
			return ""
		};
		 /**  失败奖励奖励 */
		 FactionWarFightPrizeBaseCfgData.getFailAddItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddItem;
			}
			return ""
		};
		 /**  战绩点参数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointParamByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointParam;
			}
			return 0;
		};
		 /**  战绩点系数 */
		 FactionWarFightPrizeBaseCfgData.getFightPointRateByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPointRate;
			}
			return 0;
		};
		 /**  失败增加战绩点 */
		 FactionWarFightPrizeBaseCfgData.getFailAddFightPointByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failAddFightPoint;
			}
			return 0;
		};

	return FactionWarFightPrizeBaseCfgData
}());
	
cfg.FactionWarFightPrizeBaseCfgData = FactionWarFightPrizeBaseCfgData;
var FactionWarTopPrizeBaseCfgData  = /** @class */ (function () {
	function FactionWarTopPrizeBaseCfgData () {
	}
	FactionWarTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  名次 */
		 FactionWarTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 FactionWarTopPrizeBaseCfgData.getAddPrizeByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return FactionWarTopPrizeBaseCfgData
}());
	
cfg.FactionWarTopPrizeBaseCfgData = FactionWarTopPrizeBaseCfgData;
var FactionWarConstBaseCfgData  = /** @class */ (function () {
	function FactionWarConstBaseCfgData () {
	}
	FactionWarConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FactionWarConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FactionWarConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "name");
		};
		 /**  玩法名称 */
		 FactionWarConstBaseCfgData.getNameByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要帮派等级 */
		 FactionWarConstBaseCfgData.getNeedLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要活跃人数 */
		 FactionWarConstBaseCfgData.getNeedActiveCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needActiveCount;
			}
			return 0;
		};
		 /**  每日挑战次数 */
		 FactionWarConstBaseCfgData.getDayFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  废墟最大挑战次数 */
		 FactionWarConstBaseCfgData.getRunieFightCountByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieFightCount;
			}
			return 0;
		};
		 /**  废墟被动技能ID */
		 FactionWarConstBaseCfgData.getRunieSkillIDByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillID;
			}
			return 0;
		};
		 /**  废墟最大的技能等级 */
		 FactionWarConstBaseCfgData.getRunieSkillMaxLevelByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runieSkillMaxLevel;
			}
			return 0;
		};
		 /**  匹配时间 */
		 FactionWarConstBaseCfgData.getMatchTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 FactionWarConstBaseCfgData.getOpenTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 FactionWarConstBaseCfgData.getPrizeTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  宝箱领取时间 */
		 FactionWarConstBaseCfgData.getPrizeBoxTimeByName = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeBoxTime;
			}
			return ""
		};

	return FactionWarConstBaseCfgData
}());
	
cfg.FactionWarConstBaseCfgData = FactionWarConstBaseCfgData;
var FamilyBuildBuildBaseCfgData  = /** @class */ (function () {
	function FamilyBuildBuildBaseCfgData () {
	}
	FamilyBuildBuildBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FamilyBuildBuildBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FamilyBuildBuildBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 FamilyBuildBuildBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 FamilyBuildBuildBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 FamilyBuildBuildBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  家具类型 */
		 FamilyBuildBuildBaseCfgData.getBuildTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buildType;
			}
			return 0;
		};
		 /**  图片名 */
		 FamilyBuildBuildBaseCfgData.getImgByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  所占行数 */
		 FamilyBuildBuildBaseCfgData.getRowLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rowLength;
			}
			return 0;
		};
		 /**  所占列数 */
		 FamilyBuildBuildBaseCfgData.getColLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.colLength;
			}
			return 0;
		};
		 /**  增加舒适度 */
		 FamilyBuildBuildBaseCfgData.getAddComfortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addComfort;
			}
			return 0;
		};
		 /**  获取来源_1 */
		 FamilyBuildBuildBaseCfgData.getSource1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_1;
			}
			return 0;
		};
		 /**  获取来源_2 */
		 FamilyBuildBuildBaseCfgData.getSource2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_2;
			}
			return 0;
		};
		 /**  所属主题ID */
		 FamilyBuildBuildBaseCfgData.getThemeIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.themeID;
			}
			return 0;
		};

	return FamilyBuildBuildBaseCfgData
}());
	
cfg.FamilyBuildBuildBaseCfgData = FamilyBuildBuildBaseCfgData;
var FamilyBuildBuildBaseCfgData  = /** @class */ (function () {
	function FamilyBuildBuildBaseCfgData () {
	}
	FamilyBuildBuildBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FamilyBuildBuildBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FamilyBuildBuildBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 FamilyBuildBuildBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 FamilyBuildBuildBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 FamilyBuildBuildBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  家具类型 */
		 FamilyBuildBuildBaseCfgData.getBuildTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buildType;
			}
			return 0;
		};
		 /**  图片名 */
		 FamilyBuildBuildBaseCfgData.getImgByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  所占行数 */
		 FamilyBuildBuildBaseCfgData.getRowLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rowLength;
			}
			return 0;
		};
		 /**  所占列数 */
		 FamilyBuildBuildBaseCfgData.getColLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.colLength;
			}
			return 0;
		};
		 /**  增加舒适度 */
		 FamilyBuildBuildBaseCfgData.getAddComfortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addComfort;
			}
			return 0;
		};
		 /**  获取来源_1 */
		 FamilyBuildBuildBaseCfgData.getSource1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_1;
			}
			return 0;
		};
		 /**  获取来源_2 */
		 FamilyBuildBuildBaseCfgData.getSource2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_2;
			}
			return 0;
		};
		 /**  所属主题ID */
		 FamilyBuildBuildBaseCfgData.getThemeIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.themeID;
			}
			return 0;
		};

	return FamilyBuildBuildBaseCfgData
}());
	
cfg.FamilyBuildBuildBaseCfgData = FamilyBuildBuildBaseCfgData;
var FamilyBuildBuildBaseCfgData  = /** @class */ (function () {
	function FamilyBuildBuildBaseCfgData () {
	}
	FamilyBuildBuildBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	FamilyBuildBuildBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		FamilyBuildBuildBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 FamilyBuildBuildBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 FamilyBuildBuildBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 FamilyBuildBuildBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  家具类型 */
		 FamilyBuildBuildBaseCfgData.getBuildTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buildType;
			}
			return 0;
		};
		 /**  图片名 */
		 FamilyBuildBuildBaseCfgData.getImgByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};
		 /**  所占行数 */
		 FamilyBuildBuildBaseCfgData.getRowLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rowLength;
			}
			return 0;
		};
		 /**  所占列数 */
		 FamilyBuildBuildBaseCfgData.getColLengthByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.colLength;
			}
			return 0;
		};
		 /**  增加舒适度 */
		 FamilyBuildBuildBaseCfgData.getAddComfortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addComfort;
			}
			return 0;
		};
		 /**  获取来源_1 */
		 FamilyBuildBuildBaseCfgData.getSource1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_1;
			}
			return 0;
		};
		 /**  获取来源_2 */
		 FamilyBuildBuildBaseCfgData.getSource2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.source_2;
			}
			return 0;
		};
		 /**  所属主题ID */
		 FamilyBuildBuildBaseCfgData.getThemeIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.themeID;
			}
			return 0;
		};

	return FamilyBuildBuildBaseCfgData
}());
	
cfg.FamilyBuildBuildBaseCfgData = FamilyBuildBuildBaseCfgData;
var GodEquipRefineRandBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineRandBaseCfgData () {
	}
	GodEquipRefineRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRefineRandBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return GodEquipRefineRandBaseCfgData
}());
	
cfg.GodEquipRefineRandBaseCfgData = GodEquipRefineRandBaseCfgData;
var GodEquipQualityBaseCfgData  = /** @class */ (function () {
	function GodEquipQualityBaseCfgData () {
	}
	GodEquipQualityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipQualityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipQualityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "quality");
		};
		 /**  品质 */
		 GodEquipQualityBaseCfgData.getQualityByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  随机属性条数 */
		 GodEquipQualityBaseCfgData.getRandAttrCountByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randAttrCount;
			}
			return 0;
		};

	return GodEquipQualityBaseCfgData
}());
	
cfg.GodEquipQualityBaseCfgData = GodEquipQualityBaseCfgData;
var GodEquipRefineBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineBaseCfgData () {
	}
	GodEquipRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 GodEquipRefineBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 GodEquipRefineBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  锁定一条消耗 */
		 GodEquipRefineBaseCfgData.getLockOneNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockOneNeedItem;
			}
			return ""
		};
		 /**  锁定两条条消耗 */
		 GodEquipRefineBaseCfgData.getLockTwoNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockTwoNeedItem;
			}
			return ""
		};
		 /**  最大次数 */
		 GodEquipRefineBaseCfgData.getMaxCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};

	return GodEquipRefineBaseCfgData
}());
	
cfg.GodEquipRefineBaseCfgData = GodEquipRefineBaseCfgData;
var GodEquipRandattrBaseCfgData  = /** @class */ (function () {
	function GodEquipRandattrBaseCfgData () {
	}
	GodEquipRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRandattrBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipRandattrBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  部位 */
		 GodEquipRandattrBaseCfgData.getPartByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.part;
			}
			return 0;
		};
		 /**  属性类型 */
		 GodEquipRandattrBaseCfgData.getAttrTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  值区间 */
		 GodEquipRandattrBaseCfgData.getAttrValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrValue;
			}
			return ""
		};
		 /**  万分比区间 */
		 GodEquipRandattrBaseCfgData.getAttrRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrRate;
			}
			return ""
		};

	return GodEquipRandattrBaseCfgData
}());
	
cfg.GodEquipRandattrBaseCfgData = GodEquipRandattrBaseCfgData;
var GodEquipSuitBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitBaseCfgData () {
	}
	GodEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "suitID");
		};
		 /**  套装ID */
		 GodEquipSuitBaseCfgData.getSuitIDBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitID;
			}
			return 0;
		};
		 /**  套装名 */
		 GodEquipSuitBaseCfgData.getSuitNameBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitName;
			}
			return ""
		};
		 /**  类型 */
		 GodEquipSuitBaseCfgData.getTypeBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipSuitBaseCfgData.getStarBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  两件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr1BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr1;
			}
			return ""
		};
		 /**  四件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr2BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  四件技能技能ID_技能等级 */
		 GodEquipSuitBaseCfgData.getAddSkillBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  是否显示技能图标 */
		 GodEquipSuitBaseCfgData.getHasSkillIconBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hasSkillIcon;
			}
			return 0;
		};

	return GodEquipSuitBaseCfgData
}());
	
cfg.GodEquipSuitBaseCfgData = GodEquipSuitBaseCfgData;
var GodEquipSuitMgrBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitMgrBaseCfgData () {
	}
	GodEquipSuitMgrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitMgrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitMgrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  方案ID */
		 GodEquipSuitMgrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  方案名 */
		 GodEquipSuitMgrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要消耗 */
		 GodEquipSuitMgrBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return GodEquipSuitMgrBaseCfgData
}());
	
cfg.GodEquipSuitMgrBaseCfgData = GodEquipSuitMgrBaseCfgData;
var GodEquipQualityBaseCfgData  = /** @class */ (function () {
	function GodEquipQualityBaseCfgData () {
	}
	GodEquipQualityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipQualityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipQualityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "quality");
		};
		 /**  品质 */
		 GodEquipQualityBaseCfgData.getQualityByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  随机属性条数 */
		 GodEquipQualityBaseCfgData.getRandAttrCountByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randAttrCount;
			}
			return 0;
		};

	return GodEquipQualityBaseCfgData
}());
	
cfg.GodEquipQualityBaseCfgData = GodEquipQualityBaseCfgData;
var GodEquipSuitMgrBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitMgrBaseCfgData () {
	}
	GodEquipSuitMgrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitMgrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitMgrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  方案ID */
		 GodEquipSuitMgrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  方案名 */
		 GodEquipSuitMgrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要消耗 */
		 GodEquipSuitMgrBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return GodEquipSuitMgrBaseCfgData
}());
	
cfg.GodEquipSuitMgrBaseCfgData = GodEquipSuitMgrBaseCfgData;
var GodEquipSuitBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitBaseCfgData () {
	}
	GodEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "suitID");
		};
		 /**  套装ID */
		 GodEquipSuitBaseCfgData.getSuitIDBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitID;
			}
			return 0;
		};
		 /**  套装名 */
		 GodEquipSuitBaseCfgData.getSuitNameBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitName;
			}
			return ""
		};
		 /**  类型 */
		 GodEquipSuitBaseCfgData.getTypeBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipSuitBaseCfgData.getStarBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  两件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr1BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr1;
			}
			return ""
		};
		 /**  四件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr2BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  四件技能技能ID_技能等级 */
		 GodEquipSuitBaseCfgData.getAddSkillBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  是否显示技能图标 */
		 GodEquipSuitBaseCfgData.getHasSkillIconBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hasSkillIcon;
			}
			return 0;
		};

	return GodEquipSuitBaseCfgData
}());
	
cfg.GodEquipSuitBaseCfgData = GodEquipSuitBaseCfgData;
var GodEquipRandattrBaseCfgData  = /** @class */ (function () {
	function GodEquipRandattrBaseCfgData () {
	}
	GodEquipRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRandattrBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipRandattrBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  部位 */
		 GodEquipRandattrBaseCfgData.getPartByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.part;
			}
			return 0;
		};
		 /**  属性类型 */
		 GodEquipRandattrBaseCfgData.getAttrTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  值区间 */
		 GodEquipRandattrBaseCfgData.getAttrValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrValue;
			}
			return ""
		};
		 /**  万分比区间 */
		 GodEquipRandattrBaseCfgData.getAttrRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrRate;
			}
			return ""
		};

	return GodEquipRandattrBaseCfgData
}());
	
cfg.GodEquipRandattrBaseCfgData = GodEquipRandattrBaseCfgData;
var GodEquipRefineRandBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineRandBaseCfgData () {
	}
	GodEquipRefineRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRefineRandBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return GodEquipRefineRandBaseCfgData
}());
	
cfg.GodEquipRefineRandBaseCfgData = GodEquipRefineRandBaseCfgData;
var GodEquipRefineBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineBaseCfgData () {
	}
	GodEquipRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 GodEquipRefineBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 GodEquipRefineBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  锁定一条消耗 */
		 GodEquipRefineBaseCfgData.getLockOneNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockOneNeedItem;
			}
			return ""
		};
		 /**  锁定两条条消耗 */
		 GodEquipRefineBaseCfgData.getLockTwoNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockTwoNeedItem;
			}
			return ""
		};
		 /**  最大次数 */
		 GodEquipRefineBaseCfgData.getMaxCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};

	return GodEquipRefineBaseCfgData
}());
	
cfg.GodEquipRefineBaseCfgData = GodEquipRefineBaseCfgData;
var GodEquipQualityBaseCfgData  = /** @class */ (function () {
	function GodEquipQualityBaseCfgData () {
	}
	GodEquipQualityBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipQualityBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipQualityBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "quality");
		};
		 /**  品质 */
		 GodEquipQualityBaseCfgData.getQualityByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  随机属性条数 */
		 GodEquipQualityBaseCfgData.getRandAttrCountByQuality = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randAttrCount;
			}
			return 0;
		};

	return GodEquipQualityBaseCfgData
}());
	
cfg.GodEquipQualityBaseCfgData = GodEquipQualityBaseCfgData;
var GodEquipRefineBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineBaseCfgData () {
	}
	GodEquipRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 GodEquipRefineBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 GodEquipRefineBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  锁定一条消耗 */
		 GodEquipRefineBaseCfgData.getLockOneNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockOneNeedItem;
			}
			return ""
		};
		 /**  锁定两条条消耗 */
		 GodEquipRefineBaseCfgData.getLockTwoNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockTwoNeedItem;
			}
			return ""
		};
		 /**  最大次数 */
		 GodEquipRefineBaseCfgData.getMaxCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};

	return GodEquipRefineBaseCfgData
}());
	
cfg.GodEquipRefineBaseCfgData = GodEquipRefineBaseCfgData;
var GodEquipRefineRandBaseCfgData  = /** @class */ (function () {
	function GodEquipRefineRandBaseCfgData () {
	}
	GodEquipRefineRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRefineRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRefineRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRefineRandBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return GodEquipRefineRandBaseCfgData
}());
	
cfg.GodEquipRefineRandBaseCfgData = GodEquipRefineRandBaseCfgData;
var GodEquipRandattrBaseCfgData  = /** @class */ (function () {
	function GodEquipRandattrBaseCfgData () {
	}
	GodEquipRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GodEquipRandattrBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipRandattrBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  部位 */
		 GodEquipRandattrBaseCfgData.getPartByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.part;
			}
			return 0;
		};
		 /**  属性类型 */
		 GodEquipRandattrBaseCfgData.getAttrTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrType;
			}
			return 0;
		};
		 /**  值区间 */
		 GodEquipRandattrBaseCfgData.getAttrValueByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrValue;
			}
			return ""
		};
		 /**  万分比区间 */
		 GodEquipRandattrBaseCfgData.getAttrRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrRate;
			}
			return ""
		};

	return GodEquipRandattrBaseCfgData
}());
	
cfg.GodEquipRandattrBaseCfgData = GodEquipRandattrBaseCfgData;
var GodEquipSuitMgrBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitMgrBaseCfgData () {
	}
	GodEquipSuitMgrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitMgrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitMgrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  方案ID */
		 GodEquipSuitMgrBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  方案名 */
		 GodEquipSuitMgrBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要消耗 */
		 GodEquipSuitMgrBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return GodEquipSuitMgrBaseCfgData
}());
	
cfg.GodEquipSuitMgrBaseCfgData = GodEquipSuitMgrBaseCfgData;
var GodEquipSuitBaseCfgData  = /** @class */ (function () {
	function GodEquipSuitBaseCfgData () {
	}
	GodEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GodEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GodEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "suitID");
		};
		 /**  套装ID */
		 GodEquipSuitBaseCfgData.getSuitIDBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitID;
			}
			return 0;
		};
		 /**  套装名 */
		 GodEquipSuitBaseCfgData.getSuitNameBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.suitName;
			}
			return ""
		};
		 /**  类型 */
		 GodEquipSuitBaseCfgData.getTypeBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  星级 */
		 GodEquipSuitBaseCfgData.getStarBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  两件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr1BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr1;
			}
			return ""
		};
		 /**  四件属性 */
		 GodEquipSuitBaseCfgData.getAddAttr2BySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  四件技能技能ID_技能等级 */
		 GodEquipSuitBaseCfgData.getAddSkillBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  是否显示技能图标 */
		 GodEquipSuitBaseCfgData.getHasSkillIconBySuitID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hasSkillIcon;
			}
			return 0;
		};

	return GodEquipSuitBaseCfgData
}());
	
cfg.GodEquipSuitBaseCfgData = GodEquipSuitBaseCfgData;
var GuessBaseCfgData  = /** @class */ (function () {
	function GuessBaseCfgData () {
	}
	GuessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  问题索引 */
		 GuessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 GuessBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  错误选项 */
		 GuessBaseCfgData.getWrongByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrong;
			}
			return ""
		};
		 /**  加载图片 */
		 GuessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  阵营 */
		 GuessBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return GuessBaseCfgData
}());
	
cfg.GuessBaseCfgData = GuessBaseCfgData;
var GuessShowRewardBaseCfgData  = /** @class */ (function () {
	function GuessShowRewardBaseCfgData () {
	}
	GuessShowRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessShowRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessShowRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GuessShowRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  展示排名奖励 */
		 GuessShowRewardBaseCfgData.getRewardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rewards;
			}
			return ""
		};
		 /**  说明 */
		 GuessShowRewardBaseCfgData.getDesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  总共可错误的次数 */
		 GuessShowRewardBaseCfgData.getWrongCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrongCount;
			}
			return 0;
		};

	return GuessShowRewardBaseCfgData
}());
	
cfg.GuessShowRewardBaseCfgData = GuessShowRewardBaseCfgData;
var GuessBaseCfgData  = /** @class */ (function () {
	function GuessBaseCfgData () {
	}
	GuessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  问题索引 */
		 GuessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 GuessBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  错误选项 */
		 GuessBaseCfgData.getWrongByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrong;
			}
			return ""
		};
		 /**  加载图片 */
		 GuessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  阵营 */
		 GuessBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return GuessBaseCfgData
}());
	
cfg.GuessBaseCfgData = GuessBaseCfgData;
var GuessShowRewardBaseCfgData  = /** @class */ (function () {
	function GuessShowRewardBaseCfgData () {
	}
	GuessShowRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessShowRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessShowRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GuessShowRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  展示排名奖励 */
		 GuessShowRewardBaseCfgData.getRewardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rewards;
			}
			return ""
		};
		 /**  说明 */
		 GuessShowRewardBaseCfgData.getDesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  总共可错误的次数 */
		 GuessShowRewardBaseCfgData.getWrongCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrongCount;
			}
			return 0;
		};

	return GuessShowRewardBaseCfgData
}());
	
cfg.GuessShowRewardBaseCfgData = GuessShowRewardBaseCfgData;
var GuessShowRewardBaseCfgData  = /** @class */ (function () {
	function GuessShowRewardBaseCfgData () {
	}
	GuessShowRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessShowRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessShowRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 GuessShowRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  展示排名奖励 */
		 GuessShowRewardBaseCfgData.getRewardsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rewards;
			}
			return ""
		};
		 /**  说明 */
		 GuessShowRewardBaseCfgData.getDesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  总共可错误的次数 */
		 GuessShowRewardBaseCfgData.getWrongCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrongCount;
			}
			return 0;
		};

	return GuessShowRewardBaseCfgData
}());
	
cfg.GuessShowRewardBaseCfgData = GuessShowRewardBaseCfgData;
var GuessBaseCfgData  = /** @class */ (function () {
	function GuessBaseCfgData () {
	}
	GuessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  问题索引 */
		 GuessBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 GuessBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  错误选项 */
		 GuessBaseCfgData.getWrongByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.wrong;
			}
			return ""
		};
		 /**  加载图片 */
		 GuessBaseCfgData.getValueByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return ""
		};
		 /**  阵营 */
		 GuessBaseCfgData.getPetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return GuessBaseCfgData
}());
	
cfg.GuessBaseCfgData = GuessBaseCfgData;
var HeavenChapterBaseCfgData  = /** @class */ (function () {
	function HeavenChapterBaseCfgData () {
	}
	HeavenChapterBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "chapter");
		};
		 /**  章节 */
		 HeavenChapterBaseCfgData.getChapterByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  开启条件, 空白没限制，星数0表示只通关就可以没有星星限制（章节_星数;章节_星数） */
		 HeavenChapterBaseCfgData.getConditionByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};

	return HeavenChapterBaseCfgData
}());
	
cfg.HeavenChapterBaseCfgData = HeavenChapterBaseCfgData;
var HeavenCommonBaseCfgData  = /** @class */ (function () {
	function HeavenCommonBaseCfgData () {
	}
	HeavenCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  配置id */
		 HeavenCommonBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  最大挑战次数 */
		 HeavenCommonBaseCfgData.getMaxCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  购买挑战次数 */
		 HeavenCommonBaseCfgData.getBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  购买挑战需要物品 */
		 HeavenCommonBaseCfgData.getBuyNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedItem;
			}
			return ""
		};
		 /**  祈祷免费次数 */
		 HeavenCommonBaseCfgData.getPrayFreeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prayFreeCount;
			}
			return 0;
		};

	return HeavenCommonBaseCfgData
}());
	
cfg.HeavenCommonBaseCfgData = HeavenCommonBaseCfgData;
var HeavenChapterPrizeBaseCfgData  = /** @class */ (function () {
	function HeavenChapterPrizeBaseCfgData () {
	}
	HeavenChapterPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenChapterPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenChapterPrizeBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  需要星数 */
		 HeavenChapterPrizeBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  奖励物品 */
		 HeavenChapterPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return HeavenChapterPrizeBaseCfgData
}());
	
cfg.HeavenChapterPrizeBaseCfgData = HeavenChapterPrizeBaseCfgData;
var HeavenPrayPrizeTypeBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeTypeBaseCfgData () {
	}
	HeavenPrayPrizeTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  描述 */
		 HeavenPrayPrizeTypeBaseCfgData.getDescByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenPrayPrizeTypeBaseCfgData
}());
	
cfg.HeavenPrayPrizeTypeBaseCfgData = HeavenPrayPrizeTypeBaseCfgData;
var HeavenStageBaseCfgData  = /** @class */ (function () {
	function HeavenStageBaseCfgData () {
	}
	HeavenStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenStageBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HeavenStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonster2ByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster2;
			}
			return 0;
		};
		 /**  星星条件 */
		 HeavenStageBaseCfgData.getStarConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starCondition;
			}
			return ""
		};
		 /**  奖励 */
		 HeavenStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首通奖励 */
		 HeavenStageBaseCfgData.getFirstAccomplishAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAccomplishAddItem;
			}
			return ""
		};
		 /**  推荐战力 */
		 HeavenStageBaseCfgData.getRequreFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};

	return HeavenStageBaseCfgData
}());
	
cfg.HeavenStageBaseCfgData = HeavenStageBaseCfgData;
var HeavenPrayPrizeItemsBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeItemsBaseCfgData () {
	}
	HeavenPrayPrizeItemsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeItemsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeItemsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenPrayPrizeItemsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeItemsBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizeItemsBaseCfgData.getChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 HeavenPrayPrizeItemsBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否播报 */
		 HeavenPrayPrizeItemsBaseCfgData.getBroadCastByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};

	return HeavenPrayPrizeItemsBaseCfgData
}());
	
cfg.HeavenPrayPrizeItemsBaseCfgData = HeavenPrayPrizeItemsBaseCfgData;
var HeavenChapterPrizeBaseCfgData  = /** @class */ (function () {
	function HeavenChapterPrizeBaseCfgData () {
	}
	HeavenChapterPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenChapterPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenChapterPrizeBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  需要星数 */
		 HeavenChapterPrizeBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  奖励物品 */
		 HeavenChapterPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return HeavenChapterPrizeBaseCfgData
}());
	
cfg.HeavenChapterPrizeBaseCfgData = HeavenChapterPrizeBaseCfgData;
var HeavenPrayPrizePoolBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizePoolBaseCfgData () {
	}
	HeavenPrayPrizePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pool");
		};
		 /**  奖池类型 */
		 HeavenPrayPrizePoolBaseCfgData.getPoolByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizePoolBaseCfgData.getTypeByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizePoolBaseCfgData.getChanceByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};

	return HeavenPrayPrizePoolBaseCfgData
}());
	
cfg.HeavenPrayPrizePoolBaseCfgData = HeavenPrayPrizePoolBaseCfgData;
var HeavenStageBaseCfgData  = /** @class */ (function () {
	function HeavenStageBaseCfgData () {
	}
	HeavenStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenStageBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HeavenStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonster2ByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster2;
			}
			return 0;
		};
		 /**  星星条件 */
		 HeavenStageBaseCfgData.getStarConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starCondition;
			}
			return ""
		};
		 /**  奖励 */
		 HeavenStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首通奖励 */
		 HeavenStageBaseCfgData.getFirstAccomplishAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAccomplishAddItem;
			}
			return ""
		};
		 /**  推荐战力 */
		 HeavenStageBaseCfgData.getRequreFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};

	return HeavenStageBaseCfgData
}());
	
cfg.HeavenStageBaseCfgData = HeavenStageBaseCfgData;
var HeavenMonsterNewBaseCfgData  = /** @class */ (function () {
	function HeavenMonsterNewBaseCfgData () {
	}
	HeavenMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HeavenMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 HeavenMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 HeavenMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 HeavenMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};

	return HeavenMonsterNewBaseCfgData
}());
	
cfg.HeavenMonsterNewBaseCfgData = HeavenMonsterNewBaseCfgData;
var HeavenPrayStatueBaseCfgData  = /** @class */ (function () {
	function HeavenPrayStatueBaseCfgData () {
	}
	HeavenPrayStatueBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayStatueBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayStatueBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  神像索引 */
		 HeavenPrayStatueBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  神像名 */
		 HeavenPrayStatueBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  默认奖池 */
		 HeavenPrayStatueBaseCfgData.getPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖池奖励预览 */
		 HeavenPrayStatueBaseCfgData.getPoolReviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolReview;
			}
			return ""
		};
		 /**  替换次数 */
		 HeavenPrayStatueBaseCfgData.getAlterTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterTimes;
			}
			return 0;
		};
		 /**  替换奖池 */
		 HeavenPrayStatueBaseCfgData.getAlterPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterPool;
			}
			return 0;
		};
		 /**  消耗特殊道具(信物) */
		 HeavenPrayStatueBaseCfgData.getNeedSpecialItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSpecialItem;
			}
			return ""
		};
		 /**  消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  10次消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getTenNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tenNeedItem;
			}
			return ""
		};
		 /**  祈祷返还物品 */
		 HeavenPrayStatueBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要开启章节 */
		 HeavenPrayStatueBaseCfgData.getNeedChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChapter;
			}
			return 0;
		};

	return HeavenPrayStatueBaseCfgData
}());
	
cfg.HeavenPrayStatueBaseCfgData = HeavenPrayStatueBaseCfgData;
var HeavenChapterPrizeBaseCfgData  = /** @class */ (function () {
	function HeavenChapterPrizeBaseCfgData () {
	}
	HeavenChapterPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenChapterPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenChapterPrizeBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  需要星数 */
		 HeavenChapterPrizeBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  奖励物品 */
		 HeavenChapterPrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return HeavenChapterPrizeBaseCfgData
}());
	
cfg.HeavenChapterPrizeBaseCfgData = HeavenChapterPrizeBaseCfgData;
var HeavenCommonBaseCfgData  = /** @class */ (function () {
	function HeavenCommonBaseCfgData () {
	}
	HeavenCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  配置id */
		 HeavenCommonBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  最大挑战次数 */
		 HeavenCommonBaseCfgData.getMaxCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  购买挑战次数 */
		 HeavenCommonBaseCfgData.getBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  购买挑战需要物品 */
		 HeavenCommonBaseCfgData.getBuyNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedItem;
			}
			return ""
		};
		 /**  祈祷免费次数 */
		 HeavenCommonBaseCfgData.getPrayFreeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prayFreeCount;
			}
			return 0;
		};

	return HeavenCommonBaseCfgData
}());
	
cfg.HeavenCommonBaseCfgData = HeavenCommonBaseCfgData;
var HeavenChapterBaseCfgData  = /** @class */ (function () {
	function HeavenChapterBaseCfgData () {
	}
	HeavenChapterBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "chapter");
		};
		 /**  章节 */
		 HeavenChapterBaseCfgData.getChapterByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  开启条件, 空白没限制，星数0表示只通关就可以没有星星限制（章节_星数;章节_星数） */
		 HeavenChapterBaseCfgData.getConditionByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};

	return HeavenChapterBaseCfgData
}());
	
cfg.HeavenChapterBaseCfgData = HeavenChapterBaseCfgData;
var HeavenStarConditionBaseCfgData  = /** @class */ (function () {
	function HeavenStarConditionBaseCfgData () {
	}
	HeavenStarConditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStarConditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStarConditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStarConditionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 HeavenStarConditionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 HeavenStarConditionBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  描述 */
		 HeavenStarConditionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenStarConditionBaseCfgData
}());
	
cfg.HeavenStarConditionBaseCfgData = HeavenStarConditionBaseCfgData;
var HeavenStageBaseCfgData  = /** @class */ (function () {
	function HeavenStageBaseCfgData () {
	}
	HeavenStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HeavenStageBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HeavenStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  怪物数据 */
		 HeavenStageBaseCfgData.getMonster2ByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster2;
			}
			return 0;
		};
		 /**  星星条件 */
		 HeavenStageBaseCfgData.getStarConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starCondition;
			}
			return ""
		};
		 /**  奖励 */
		 HeavenStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  首通奖励 */
		 HeavenStageBaseCfgData.getFirstAccomplishAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAccomplishAddItem;
			}
			return ""
		};
		 /**  推荐战力 */
		 HeavenStageBaseCfgData.getRequreFightPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};

	return HeavenStageBaseCfgData
}());
	
cfg.HeavenStageBaseCfgData = HeavenStageBaseCfgData;
var HeavenCommonBaseCfgData  = /** @class */ (function () {
	function HeavenCommonBaseCfgData () {
	}
	HeavenCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  配置id */
		 HeavenCommonBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  最大挑战次数 */
		 HeavenCommonBaseCfgData.getMaxCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  购买挑战次数 */
		 HeavenCommonBaseCfgData.getBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  购买挑战需要物品 */
		 HeavenCommonBaseCfgData.getBuyNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedItem;
			}
			return ""
		};
		 /**  祈祷免费次数 */
		 HeavenCommonBaseCfgData.getPrayFreeCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prayFreeCount;
			}
			return 0;
		};

	return HeavenCommonBaseCfgData
}());
	
cfg.HeavenCommonBaseCfgData = HeavenCommonBaseCfgData;
var HeavenChapterBaseCfgData  = /** @class */ (function () {
	function HeavenChapterBaseCfgData () {
	}
	HeavenChapterBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenChapterBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenChapterBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "chapter");
		};
		 /**  章节 */
		 HeavenChapterBaseCfgData.getChapterByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  开启条件, 空白没限制，星数0表示只通关就可以没有星星限制（章节_星数;章节_星数） */
		 HeavenChapterBaseCfgData.getConditionByChapter = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};

	return HeavenChapterBaseCfgData
}());
	
cfg.HeavenChapterBaseCfgData = HeavenChapterBaseCfgData;
var HeavenMonsterNewBaseCfgData  = /** @class */ (function () {
	function HeavenMonsterNewBaseCfgData () {
	}
	HeavenMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HeavenMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 HeavenMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 HeavenMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 HeavenMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};

	return HeavenMonsterNewBaseCfgData
}());
	
cfg.HeavenMonsterNewBaseCfgData = HeavenMonsterNewBaseCfgData;
var HeavenMonsterNewBaseCfgData  = /** @class */ (function () {
	function HeavenMonsterNewBaseCfgData () {
	}
	HeavenMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HeavenMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 HeavenMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 HeavenMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 HeavenMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};

	return HeavenMonsterNewBaseCfgData
}());
	
cfg.HeavenMonsterNewBaseCfgData = HeavenMonsterNewBaseCfgData;
var HeavenStarConditionBaseCfgData  = /** @class */ (function () {
	function HeavenStarConditionBaseCfgData () {
	}
	HeavenStarConditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStarConditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStarConditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStarConditionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 HeavenStarConditionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 HeavenStarConditionBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  描述 */
		 HeavenStarConditionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenStarConditionBaseCfgData
}());
	
cfg.HeavenStarConditionBaseCfgData = HeavenStarConditionBaseCfgData;
var HeavenPrayStatueBaseCfgData  = /** @class */ (function () {
	function HeavenPrayStatueBaseCfgData () {
	}
	HeavenPrayStatueBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayStatueBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayStatueBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  神像索引 */
		 HeavenPrayStatueBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  神像名 */
		 HeavenPrayStatueBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  默认奖池 */
		 HeavenPrayStatueBaseCfgData.getPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖池奖励预览 */
		 HeavenPrayStatueBaseCfgData.getPoolReviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolReview;
			}
			return ""
		};
		 /**  替换次数 */
		 HeavenPrayStatueBaseCfgData.getAlterTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterTimes;
			}
			return 0;
		};
		 /**  替换奖池 */
		 HeavenPrayStatueBaseCfgData.getAlterPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterPool;
			}
			return 0;
		};
		 /**  消耗特殊道具(信物) */
		 HeavenPrayStatueBaseCfgData.getNeedSpecialItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSpecialItem;
			}
			return ""
		};
		 /**  消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  10次消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getTenNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tenNeedItem;
			}
			return ""
		};
		 /**  祈祷返还物品 */
		 HeavenPrayStatueBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要开启章节 */
		 HeavenPrayStatueBaseCfgData.getNeedChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChapter;
			}
			return 0;
		};

	return HeavenPrayStatueBaseCfgData
}());
	
cfg.HeavenPrayStatueBaseCfgData = HeavenPrayStatueBaseCfgData;
var HeavenPrayPrizePoolBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizePoolBaseCfgData () {
	}
	HeavenPrayPrizePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pool");
		};
		 /**  奖池类型 */
		 HeavenPrayPrizePoolBaseCfgData.getPoolByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizePoolBaseCfgData.getTypeByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizePoolBaseCfgData.getChanceByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};

	return HeavenPrayPrizePoolBaseCfgData
}());
	
cfg.HeavenPrayPrizePoolBaseCfgData = HeavenPrayPrizePoolBaseCfgData;
var HeavenPrayPrizeItemsBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeItemsBaseCfgData () {
	}
	HeavenPrayPrizeItemsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeItemsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeItemsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenPrayPrizeItemsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeItemsBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizeItemsBaseCfgData.getChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 HeavenPrayPrizeItemsBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否播报 */
		 HeavenPrayPrizeItemsBaseCfgData.getBroadCastByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};

	return HeavenPrayPrizeItemsBaseCfgData
}());
	
cfg.HeavenPrayPrizeItemsBaseCfgData = HeavenPrayPrizeItemsBaseCfgData;
var HeavenPrayPrizeTypeBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeTypeBaseCfgData () {
	}
	HeavenPrayPrizeTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  描述 */
		 HeavenPrayPrizeTypeBaseCfgData.getDescByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenPrayPrizeTypeBaseCfgData
}());
	
cfg.HeavenPrayPrizeTypeBaseCfgData = HeavenPrayPrizeTypeBaseCfgData;
var HeavenPrayPrizePoolBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizePoolBaseCfgData () {
	}
	HeavenPrayPrizePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pool");
		};
		 /**  奖池类型 */
		 HeavenPrayPrizePoolBaseCfgData.getPoolByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizePoolBaseCfgData.getTypeByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizePoolBaseCfgData.getChanceByPool = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};

	return HeavenPrayPrizePoolBaseCfgData
}());
	
cfg.HeavenPrayPrizePoolBaseCfgData = HeavenPrayPrizePoolBaseCfgData;
var HeavenStarConditionBaseCfgData  = /** @class */ (function () {
	function HeavenStarConditionBaseCfgData () {
	}
	HeavenStarConditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenStarConditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenStarConditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenStarConditionBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 HeavenStarConditionBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 HeavenStarConditionBaseCfgData.getParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.params;
			}
			return ""
		};
		 /**  描述 */
		 HeavenStarConditionBaseCfgData.getDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenStarConditionBaseCfgData
}());
	
cfg.HeavenStarConditionBaseCfgData = HeavenStarConditionBaseCfgData;
var HeavenPrayStatueBaseCfgData  = /** @class */ (function () {
	function HeavenPrayStatueBaseCfgData () {
	}
	HeavenPrayStatueBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayStatueBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayStatueBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  神像索引 */
		 HeavenPrayStatueBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  神像名 */
		 HeavenPrayStatueBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  默认奖池 */
		 HeavenPrayStatueBaseCfgData.getPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pool;
			}
			return 0;
		};
		 /**  奖池奖励预览 */
		 HeavenPrayStatueBaseCfgData.getPoolReviewByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.poolReview;
			}
			return ""
		};
		 /**  替换次数 */
		 HeavenPrayStatueBaseCfgData.getAlterTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterTimes;
			}
			return 0;
		};
		 /**  替换奖池 */
		 HeavenPrayStatueBaseCfgData.getAlterPoolByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.alterPool;
			}
			return 0;
		};
		 /**  消耗特殊道具(信物) */
		 HeavenPrayStatueBaseCfgData.getNeedSpecialItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSpecialItem;
			}
			return ""
		};
		 /**  消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  10次消耗物品（钻石） */
		 HeavenPrayStatueBaseCfgData.getTenNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.tenNeedItem;
			}
			return ""
		};
		 /**  祈祷返还物品 */
		 HeavenPrayStatueBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  需要开启章节 */
		 HeavenPrayStatueBaseCfgData.getNeedChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChapter;
			}
			return 0;
		};

	return HeavenPrayStatueBaseCfgData
}());
	
cfg.HeavenPrayStatueBaseCfgData = HeavenPrayStatueBaseCfgData;
var HeavenPrayPrizeItemsBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeItemsBaseCfgData () {
	}
	HeavenPrayPrizeItemsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeItemsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeItemsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 HeavenPrayPrizeItemsBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeItemsBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  概率 */
		 HeavenPrayPrizeItemsBaseCfgData.getChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 HeavenPrayPrizeItemsBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否播报 */
		 HeavenPrayPrizeItemsBaseCfgData.getBroadCastByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadCast;
			}
			return 0;
		};

	return HeavenPrayPrizeItemsBaseCfgData
}());
	
cfg.HeavenPrayPrizeItemsBaseCfgData = HeavenPrayPrizeItemsBaseCfgData;
var HeavenPrayPrizeTypeBaseCfgData  = /** @class */ (function () {
	function HeavenPrayPrizeTypeBaseCfgData () {
	}
	HeavenPrayPrizeTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HeavenPrayPrizeTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HeavenPrayPrizeTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  奖励种类 */
		 HeavenPrayPrizeTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  描述 */
		 HeavenPrayPrizeTypeBaseCfgData.getDescByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return HeavenPrayPrizeTypeBaseCfgData
}());
	
cfg.HeavenPrayPrizeTypeBaseCfgData = HeavenPrayPrizeTypeBaseCfgData;
var HolyUnlockBaseCfgData  = /** @class */ (function () {
	function HolyUnlockBaseCfgData () {
	}
	HolyUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUnlockBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyUnlockBaseCfgData.getNeedPetCountByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  名称 */
		 HolyUnlockBaseCfgData.getNameByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return HolyUnlockBaseCfgData
}());
	
cfg.HolyUnlockBaseCfgData = HolyUnlockBaseCfgData;
var HolyAdvanceBaseCfgData  = /** @class */ (function () {
	function HolyAdvanceBaseCfgData () {
	}
	HolyAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyAdvanceBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//草4;//光5;//暗 */
		 HolyAdvanceBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyAdvanceBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要携带物等级 */
		 HolyAdvanceBaseCfgData.getNeedHolyLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHolyLevel;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyAdvanceBaseCfgData.getNeedPetCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyAdvanceBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型_属性值 */
		 HolyAdvanceBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return HolyAdvanceBaseCfgData
}());
	
cfg.HolyAdvanceBaseCfgData = HolyAdvanceBaseCfgData;
var HolyUnlockBaseCfgData  = /** @class */ (function () {
	function HolyUnlockBaseCfgData () {
	}
	HolyUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUnlockBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyUnlockBaseCfgData.getNeedPetCountByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  名称 */
		 HolyUnlockBaseCfgData.getNameByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return HolyUnlockBaseCfgData
}());
	
cfg.HolyUnlockBaseCfgData = HolyUnlockBaseCfgData;
var HolyUpgradeBaseCfgData  = /** @class */ (function () {
	function HolyUpgradeBaseCfgData () {
	}
	HolyUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyUpgradeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUpgradeBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyUpgradeBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 HolyUpgradeBaseCfgData.getMaxExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  每次增加经验 */
		 HolyUpgradeBaseCfgData.getAddExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyUpgradeBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每十点经验增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getExpAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};

	return HolyUpgradeBaseCfgData
}());
	
cfg.HolyUpgradeBaseCfgData = HolyUpgradeBaseCfgData;
var HolyUpgradeBaseCfgData  = /** @class */ (function () {
	function HolyUpgradeBaseCfgData () {
	}
	HolyUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyUpgradeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUpgradeBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyUpgradeBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 HolyUpgradeBaseCfgData.getMaxExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  每次增加经验 */
		 HolyUpgradeBaseCfgData.getAddExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyUpgradeBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每十点经验增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getExpAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};

	return HolyUpgradeBaseCfgData
}());
	
cfg.HolyUpgradeBaseCfgData = HolyUpgradeBaseCfgData;
var HolyAdvanceBaseCfgData  = /** @class */ (function () {
	function HolyAdvanceBaseCfgData () {
	}
	HolyAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyAdvanceBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//草4;//光5;//暗 */
		 HolyAdvanceBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyAdvanceBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要携带物等级 */
		 HolyAdvanceBaseCfgData.getNeedHolyLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHolyLevel;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyAdvanceBaseCfgData.getNeedPetCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyAdvanceBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型_属性值 */
		 HolyAdvanceBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return HolyAdvanceBaseCfgData
}());
	
cfg.HolyAdvanceBaseCfgData = HolyAdvanceBaseCfgData;
var HolyUpgradeBaseCfgData  = /** @class */ (function () {
	function HolyUpgradeBaseCfgData () {
	}
	HolyUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyUpgradeBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUpgradeBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyUpgradeBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  此级最大经验 */
		 HolyUpgradeBaseCfgData.getMaxExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  每次增加经验 */
		 HolyUpgradeBaseCfgData.getAddExpById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addExp;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyUpgradeBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  每十点经验增加属性属性类型|属性值 */
		 HolyUpgradeBaseCfgData.getExpAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expAddAttr;
			}
			return ""
		};

	return HolyUpgradeBaseCfgData
}());
	
cfg.HolyUpgradeBaseCfgData = HolyUpgradeBaseCfgData;
var HolyUnlockBaseCfgData  = /** @class */ (function () {
	function HolyUnlockBaseCfgData () {
	}
	HolyUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  类型1;//水2;//火3;//风4;//太阳5;//月亮 */
		 HolyUnlockBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyUnlockBaseCfgData.getNeedPetCountByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  名称 */
		 HolyUnlockBaseCfgData.getNameByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return HolyUnlockBaseCfgData
}());
	
cfg.HolyUnlockBaseCfgData = HolyUnlockBaseCfgData;
var HolyAdvanceBaseCfgData  = /** @class */ (function () {
	function HolyAdvanceBaseCfgData () {
	}
	HolyAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HolyAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HolyAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 HolyAdvanceBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  类型1;//水2;//火3;//草4;//光5;//暗 */
		 HolyAdvanceBaseCfgData.getPetTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  等级 */
		 HolyAdvanceBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要携带物等级 */
		 HolyAdvanceBaseCfgData.getNeedHolyLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHolyLevel;
			}
			return 0;
		};
		 /**  需要伙伴星级个数星级_个数 */
		 HolyAdvanceBaseCfgData.getNeedPetCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetCount;
			}
			return ""
		};
		 /**  需要道具 */
		 HolyAdvanceBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加属性属性类型_属性值 */
		 HolyAdvanceBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return HolyAdvanceBaseCfgData
}());
	
cfg.HolyAdvanceBaseCfgData = HolyAdvanceBaseCfgData;
var HookActivityDropBaseCfgData  = /** @class */ (function () {
	function HookActivityDropBaseCfgData () {
	}
	HookActivityDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookActivityDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookActivityDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 HookActivityDropBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  每小时固定掉落个数 */
		 HookActivityDropBaseCfgData.getHourCountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hourCount;
			}
			return 0;
		};
		 /**  道具ID */
		 HookActivityDropBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  持续天数(0与活动一致) */
		 HookActivityDropBaseCfgData.getDaysByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.days;
			}
			return 0;
		};

	return HookActivityDropBaseCfgData
}());
	
cfg.HookActivityDropBaseCfgData = HookActivityDropBaseCfgData;
var HookMonsterNewBaseCfgData  = /** @class */ (function () {
	function HookMonsterNewBaseCfgData () {
	}
	HookMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HookMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 HookMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  fuck ,为什么不加描述 */
		 HookMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  Boss名称 */
		 HookMonsterNewBaseCfgData.getBossNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossName;
			}
			return ""
		};

	return HookMonsterNewBaseCfgData
}());
	
cfg.HookMonsterNewBaseCfgData = HookMonsterNewBaseCfgData;
var HookChapterUnlockBaseCfgData  = /** @class */ (function () {
	function HookChapterUnlockBaseCfgData () {
	}
	HookChapterUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookChapterUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookChapterUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 HookChapterUnlockBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名 */
		 HookChapterUnlockBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  场景列表 */
		 HookChapterUnlockBaseCfgData.getSceneListByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneList;
			}
			return ""
		};

	return HookChapterUnlockBaseCfgData
}());
	
cfg.HookChapterUnlockBaseCfgData = HookChapterUnlockBaseCfgData;
var HookStageBaseCfgData  = /** @class */ (function () {
	function HookStageBaseCfgData () {
	}
	HookStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  场景ID */
		 HookStageBaseCfgData.getSceneIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 HookStageBaseCfgData.getNeedPlayerLevelByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  最大回合 */
		 HookStageBaseCfgData.getMaxRoundByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRound;
			}
			return 0;
		};
		 /**  刷怪boss */
		 HookStageBaseCfgData.getBossGroupIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossGroupID;
			}
			return 0;
		};
		 /**  普通掉落 */
		 HookStageBaseCfgData.getHookDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookDropID;
			}
			return 0;
		};
		 /**  Boss掉落 */
		 HookStageBaseCfgData.getBossDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossDropID;
			}
			return 0;
		};
		 /**  使用道具掉落 */
		 HookStageBaseCfgData.getUseItemDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useItemDropID;
			}
			return 0;
		};
		 /**  战斗完CD */
		 HookStageBaseCfgData.getFightCDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCD;
			}
			return 0;
		};
		 /**  最大远航积分 */
		 HookStageBaseCfgData.getMaxSailPointByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxSailPoint;
			}
			return 0;
		};
		 /**  推荐战力 */
		 HookStageBaseCfgData.getPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  BOSS来袭形象 */
		 HookStageBaseCfgData.getBossShapeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossShape;
			}
			return 0;
		};
		 /**  奖励预览 */
		 HookStageBaseCfgData.getPrizePreviewByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return 0;
		};
		 /**  背景图 */
		 HookStageBaseCfgData.getBgmapByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bgmap;
			}
			return ""
		};

	return HookStageBaseCfgData
}());
	
cfg.HookStageBaseCfgData = HookStageBaseCfgData;
var HookNormalDropInfoBaseCfgData  = /** @class */ (function () {
	function HookNormalDropInfoBaseCfgData () {
	}
	HookNormalDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookNormalDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookNormalDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookNormalDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookNormalDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookNormalDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookNormalDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookNormalDropInfoBaseCfgData
}());
	
cfg.HookNormalDropInfoBaseCfgData = HookNormalDropInfoBaseCfgData;
var HookStageBaseCfgData  = /** @class */ (function () {
	function HookStageBaseCfgData () {
	}
	HookStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  场景ID */
		 HookStageBaseCfgData.getSceneIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 HookStageBaseCfgData.getNeedPlayerLevelByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  最大回合 */
		 HookStageBaseCfgData.getMaxRoundByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRound;
			}
			return 0;
		};
		 /**  刷怪boss */
		 HookStageBaseCfgData.getBossGroupIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossGroupID;
			}
			return 0;
		};
		 /**  普通掉落 */
		 HookStageBaseCfgData.getHookDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookDropID;
			}
			return 0;
		};
		 /**  Boss掉落 */
		 HookStageBaseCfgData.getBossDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossDropID;
			}
			return 0;
		};
		 /**  使用道具掉落 */
		 HookStageBaseCfgData.getUseItemDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useItemDropID;
			}
			return 0;
		};
		 /**  战斗完CD */
		 HookStageBaseCfgData.getFightCDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCD;
			}
			return 0;
		};
		 /**  最大远航积分 */
		 HookStageBaseCfgData.getMaxSailPointByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxSailPoint;
			}
			return 0;
		};
		 /**  推荐战力 */
		 HookStageBaseCfgData.getPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  BOSS来袭形象 */
		 HookStageBaseCfgData.getBossShapeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossShape;
			}
			return 0;
		};
		 /**  奖励预览 */
		 HookStageBaseCfgData.getPrizePreviewByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return 0;
		};
		 /**  背景图 */
		 HookStageBaseCfgData.getBgmapByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bgmap;
			}
			return ""
		};

	return HookStageBaseCfgData
}());
	
cfg.HookStageBaseCfgData = HookStageBaseCfgData;
var HookSceneBaseCfgData  = /** @class */ (function () {
	function HookSceneBaseCfgData () {
	}
	HookSceneBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookSceneBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookSceneBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sceneID");
		};
		 /**  场景ID */
		 HookSceneBaseCfgData.getSceneIDBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  章节 */
		 HookSceneBaseCfgData.getChapterNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapterName;
			}
			return ""
		};
		 /**  场景名称 */
		 HookSceneBaseCfgData.getSceneNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneName;
			}
			return ""
		};
		 /**  场景类型 */
		 HookSceneBaseCfgData.getBelongTypeBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.belongType;
			}
			return 0;
		};
		 /**  需要等级 */
		 HookSceneBaseCfgData.getNeedLevelBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要前置关卡 */
		 HookSceneBaseCfgData.getNeedStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStage;
			}
			return 0;
		};
		 /**  场景资源名称 */
		 HookSceneBaseCfgData.getSceneResourceBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneResource;
			}
			return ""
		};
		 /**  场景背景音乐 */
		 HookSceneBaseCfgData.getBGMPathBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGMPath;
			}
			return ""
		};
		 /**  关卡数 */
		 HookSceneBaseCfgData.getStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return ""
		};
		 /**  节点 */
		 HookSceneBaseCfgData.getNodenunmBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nodenunm;
			}
			return ""
		};

	return HookSceneBaseCfgData
}());
	
cfg.HookSceneBaseCfgData = HookSceneBaseCfgData;
var HookStagePrizeBaseCfgData  = /** @class */ (function () {
	function HookStagePrizeBaseCfgData () {
	}
	HookStagePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStagePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStagePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStagePrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 HookStagePrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};
		 /**  广播 */
		 HookStagePrizeBaseCfgData.getBroadcastByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadcast;
			}
			return 0;
		};
		 /**  是否预告 */
		 HookStagePrizeBaseCfgData.getIsTargetByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isTarget;
			}
			return 0;
		};
		 /**  是否御三家 */
		 HookStagePrizeBaseCfgData.getThreeHomeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.threeHome;
			}
			return 0;
		};

	return HookStagePrizeBaseCfgData
}());
	
cfg.HookStagePrizeBaseCfgData = HookStagePrizeBaseCfgData;
var HookBossDropInfoBaseCfgData  = /** @class */ (function () {
	function HookBossDropInfoBaseCfgData () {
	}
	HookBossDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBossDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBossDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookBossDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookBossDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookBossDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookBossDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookBossDropInfoBaseCfgData
}());
	
cfg.HookBossDropInfoBaseCfgData = HookBossDropInfoBaseCfgData;
var HookStagePrizeBaseCfgData  = /** @class */ (function () {
	function HookStagePrizeBaseCfgData () {
	}
	HookStagePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStagePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStagePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStagePrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 HookStagePrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};
		 /**  广播 */
		 HookStagePrizeBaseCfgData.getBroadcastByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadcast;
			}
			return 0;
		};
		 /**  是否预告 */
		 HookStagePrizeBaseCfgData.getIsTargetByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isTarget;
			}
			return 0;
		};
		 /**  是否御三家 */
		 HookStagePrizeBaseCfgData.getThreeHomeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.threeHome;
			}
			return 0;
		};

	return HookStagePrizeBaseCfgData
}());
	
cfg.HookStagePrizeBaseCfgData = HookStagePrizeBaseCfgData;
var HookBuySweepcountBaseCfgData  = /** @class */ (function () {
	function HookBuySweepcountBaseCfgData () {
	}
	HookBuySweepcountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBuySweepcountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBuySweepcountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 HookBuySweepcountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 HookBuySweepcountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return HookBuySweepcountBaseCfgData
}());
	
cfg.HookBuySweepcountBaseCfgData = HookBuySweepcountBaseCfgData;
var HookActivityDropBaseCfgData  = /** @class */ (function () {
	function HookActivityDropBaseCfgData () {
	}
	HookActivityDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookActivityDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookActivityDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 HookActivityDropBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  每小时固定掉落个数 */
		 HookActivityDropBaseCfgData.getHourCountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hourCount;
			}
			return 0;
		};
		 /**  道具ID */
		 HookActivityDropBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  持续天数(0与活动一致) */
		 HookActivityDropBaseCfgData.getDaysByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.days;
			}
			return 0;
		};

	return HookActivityDropBaseCfgData
}());
	
cfg.HookActivityDropBaseCfgData = HookActivityDropBaseCfgData;
var HookBuySweepcountBaseCfgData  = /** @class */ (function () {
	function HookBuySweepcountBaseCfgData () {
	}
	HookBuySweepcountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBuySweepcountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBuySweepcountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 HookBuySweepcountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 HookBuySweepcountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return HookBuySweepcountBaseCfgData
}());
	
cfg.HookBuySweepcountBaseCfgData = HookBuySweepcountBaseCfgData;
var HookActivityDropBaseCfgData  = /** @class */ (function () {
	function HookActivityDropBaseCfgData () {
	}
	HookActivityDropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookActivityDropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookActivityDropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "activityID");
		};
		 /**  活动ID */
		 HookActivityDropBaseCfgData.getActivityIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activityID;
			}
			return 0;
		};
		 /**  每小时固定掉落个数 */
		 HookActivityDropBaseCfgData.getHourCountByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hourCount;
			}
			return 0;
		};
		 /**  道具ID */
		 HookActivityDropBaseCfgData.getItemIDByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  持续天数(0与活动一致) */
		 HookActivityDropBaseCfgData.getDaysByActivityID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.days;
			}
			return 0;
		};

	return HookActivityDropBaseCfgData
}());
	
cfg.HookActivityDropBaseCfgData = HookActivityDropBaseCfgData;
var HookSceneBaseCfgData  = /** @class */ (function () {
	function HookSceneBaseCfgData () {
	}
	HookSceneBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookSceneBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookSceneBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sceneID");
		};
		 /**  场景ID */
		 HookSceneBaseCfgData.getSceneIDBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  章节 */
		 HookSceneBaseCfgData.getChapterNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapterName;
			}
			return ""
		};
		 /**  场景名称 */
		 HookSceneBaseCfgData.getSceneNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneName;
			}
			return ""
		};
		 /**  场景类型 */
		 HookSceneBaseCfgData.getBelongTypeBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.belongType;
			}
			return 0;
		};
		 /**  需要等级 */
		 HookSceneBaseCfgData.getNeedLevelBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要前置关卡 */
		 HookSceneBaseCfgData.getNeedStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStage;
			}
			return 0;
		};
		 /**  场景资源名称 */
		 HookSceneBaseCfgData.getSceneResourceBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneResource;
			}
			return ""
		};
		 /**  场景背景音乐 */
		 HookSceneBaseCfgData.getBGMPathBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGMPath;
			}
			return ""
		};
		 /**  关卡数 */
		 HookSceneBaseCfgData.getStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return ""
		};
		 /**  节点 */
		 HookSceneBaseCfgData.getNodenunmBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nodenunm;
			}
			return ""
		};

	return HookSceneBaseCfgData
}());
	
cfg.HookSceneBaseCfgData = HookSceneBaseCfgData;
var HookBossDropInfoBaseCfgData  = /** @class */ (function () {
	function HookBossDropInfoBaseCfgData () {
	}
	HookBossDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBossDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBossDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookBossDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookBossDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookBossDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookBossDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookBossDropInfoBaseCfgData
}());
	
cfg.HookBossDropInfoBaseCfgData = HookBossDropInfoBaseCfgData;
var HookNormalDropInfoBaseCfgData  = /** @class */ (function () {
	function HookNormalDropInfoBaseCfgData () {
	}
	HookNormalDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookNormalDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookNormalDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookNormalDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookNormalDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookNormalDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookNormalDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookNormalDropInfoBaseCfgData
}());
	
cfg.HookNormalDropInfoBaseCfgData = HookNormalDropInfoBaseCfgData;
var HookChapterUnlockBaseCfgData  = /** @class */ (function () {
	function HookChapterUnlockBaseCfgData () {
	}
	HookChapterUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookChapterUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookChapterUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 HookChapterUnlockBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名 */
		 HookChapterUnlockBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  场景列表 */
		 HookChapterUnlockBaseCfgData.getSceneListByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneList;
			}
			return ""
		};

	return HookChapterUnlockBaseCfgData
}());
	
cfg.HookChapterUnlockBaseCfgData = HookChapterUnlockBaseCfgData;
var HookNormalDropInfoBaseCfgData  = /** @class */ (function () {
	function HookNormalDropInfoBaseCfgData () {
	}
	HookNormalDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookNormalDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookNormalDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookNormalDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookNormalDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookNormalDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookNormalDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookNormalDropInfoBaseCfgData
}());
	
cfg.HookNormalDropInfoBaseCfgData = HookNormalDropInfoBaseCfgData;
var HookChapterUnlockBaseCfgData  = /** @class */ (function () {
	function HookChapterUnlockBaseCfgData () {
	}
	HookChapterUnlockBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookChapterUnlockBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookChapterUnlockBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  区域ID */
		 HookChapterUnlockBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  区域名 */
		 HookChapterUnlockBaseCfgData.getAreaNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.areaName;
			}
			return ""
		};
		 /**  场景列表 */
		 HookChapterUnlockBaseCfgData.getSceneListByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneList;
			}
			return ""
		};

	return HookChapterUnlockBaseCfgData
}());
	
cfg.HookChapterUnlockBaseCfgData = HookChapterUnlockBaseCfgData;
var HookMonsterNewBaseCfgData  = /** @class */ (function () {
	function HookMonsterNewBaseCfgData () {
	}
	HookMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HookMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 HookMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  fuck ,为什么不加描述 */
		 HookMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  Boss名称 */
		 HookMonsterNewBaseCfgData.getBossNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossName;
			}
			return ""
		};

	return HookMonsterNewBaseCfgData
}());
	
cfg.HookMonsterNewBaseCfgData = HookMonsterNewBaseCfgData;
var HookBuySweepcountBaseCfgData  = /** @class */ (function () {
	function HookBuySweepcountBaseCfgData () {
	}
	HookBuySweepcountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBuySweepcountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBuySweepcountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 HookBuySweepcountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 HookBuySweepcountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return HookBuySweepcountBaseCfgData
}());
	
cfg.HookBuySweepcountBaseCfgData = HookBuySweepcountBaseCfgData;
var HookMonsterNewBaseCfgData  = /** @class */ (function () {
	function HookMonsterNewBaseCfgData () {
	}
	HookMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 HookMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 HookMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  fuck ,为什么不加描述 */
		 HookMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  Boss名称 */
		 HookMonsterNewBaseCfgData.getBossNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossName;
			}
			return ""
		};

	return HookMonsterNewBaseCfgData
}());
	
cfg.HookMonsterNewBaseCfgData = HookMonsterNewBaseCfgData;
var HookStagePrizeBaseCfgData  = /** @class */ (function () {
	function HookStagePrizeBaseCfgData () {
	}
	HookStagePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStagePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStagePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStagePrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 HookStagePrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};
		 /**  广播 */
		 HookStagePrizeBaseCfgData.getBroadcastByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.broadcast;
			}
			return 0;
		};
		 /**  是否预告 */
		 HookStagePrizeBaseCfgData.getIsTargetByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isTarget;
			}
			return 0;
		};
		 /**  是否御三家 */
		 HookStagePrizeBaseCfgData.getThreeHomeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.threeHome;
			}
			return 0;
		};

	return HookStagePrizeBaseCfgData
}());
	
cfg.HookStagePrizeBaseCfgData = HookStagePrizeBaseCfgData;
var HookStageBaseCfgData  = /** @class */ (function () {
	function HookStageBaseCfgData () {
	}
	HookStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 HookStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  场景ID */
		 HookStageBaseCfgData.getSceneIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 HookStageBaseCfgData.getNeedPlayerLevelByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  最大回合 */
		 HookStageBaseCfgData.getMaxRoundByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRound;
			}
			return 0;
		};
		 /**  刷怪boss */
		 HookStageBaseCfgData.getBossGroupIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossGroupID;
			}
			return 0;
		};
		 /**  普通掉落 */
		 HookStageBaseCfgData.getHookDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookDropID;
			}
			return 0;
		};
		 /**  Boss掉落 */
		 HookStageBaseCfgData.getBossDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossDropID;
			}
			return 0;
		};
		 /**  使用道具掉落 */
		 HookStageBaseCfgData.getUseItemDropIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useItemDropID;
			}
			return 0;
		};
		 /**  战斗完CD */
		 HookStageBaseCfgData.getFightCDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightCD;
			}
			return 0;
		};
		 /**  最大远航积分 */
		 HookStageBaseCfgData.getMaxSailPointByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxSailPoint;
			}
			return 0;
		};
		 /**  推荐战力 */
		 HookStageBaseCfgData.getPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  BOSS来袭形象 */
		 HookStageBaseCfgData.getBossShapeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossShape;
			}
			return 0;
		};
		 /**  奖励预览 */
		 HookStageBaseCfgData.getPrizePreviewByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return 0;
		};
		 /**  背景图 */
		 HookStageBaseCfgData.getBgmapByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bgmap;
			}
			return ""
		};

	return HookStageBaseCfgData
}());
	
cfg.HookStageBaseCfgData = HookStageBaseCfgData;
var HookSceneBaseCfgData  = /** @class */ (function () {
	function HookSceneBaseCfgData () {
	}
	HookSceneBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookSceneBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookSceneBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sceneID");
		};
		 /**  场景ID */
		 HookSceneBaseCfgData.getSceneIDBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneID;
			}
			return 0;
		};
		 /**  章节 */
		 HookSceneBaseCfgData.getChapterNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapterName;
			}
			return ""
		};
		 /**  场景名称 */
		 HookSceneBaseCfgData.getSceneNameBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneName;
			}
			return ""
		};
		 /**  场景类型 */
		 HookSceneBaseCfgData.getBelongTypeBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.belongType;
			}
			return 0;
		};
		 /**  需要等级 */
		 HookSceneBaseCfgData.getNeedLevelBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  需要前置关卡 */
		 HookSceneBaseCfgData.getNeedStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStage;
			}
			return 0;
		};
		 /**  场景资源名称 */
		 HookSceneBaseCfgData.getSceneResourceBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sceneResource;
			}
			return ""
		};
		 /**  场景背景音乐 */
		 HookSceneBaseCfgData.getBGMPathBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGMPath;
			}
			return ""
		};
		 /**  关卡数 */
		 HookSceneBaseCfgData.getStageBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return ""
		};
		 /**  节点 */
		 HookSceneBaseCfgData.getNodenunmBySceneID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.nodenunm;
			}
			return ""
		};

	return HookSceneBaseCfgData
}());
	
cfg.HookSceneBaseCfgData = HookSceneBaseCfgData;
var HookBossDropInfoBaseCfgData  = /** @class */ (function () {
	function HookBossDropInfoBaseCfgData () {
	}
	HookBossDropInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HookBossDropInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HookBossDropInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  ID */
		 HookBossDropInfoBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  章节 */
		 HookBossDropInfoBaseCfgData.getChapterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chapter;
			}
			return 0;
		};
		 /**  关卡 */
		 HookBossDropInfoBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  道具列表 */
		 HookBossDropInfoBaseCfgData.getItemListByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemList;
			}
			return ""
		};

	return HookBossDropInfoBaseCfgData
}());
	
cfg.HookBossDropInfoBaseCfgData = HookBossDropInfoBaseCfgData;
var HorcruxConstBaseCfgData  = /** @class */ (function () {
	function HorcruxConstBaseCfgData () {
	}
	HorcruxConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "awakeStar");
		};
		 /**  可觉醒星级 */
		 HorcruxConstBaseCfgData.getAwakeStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeStar;
			}
			return 0;
		};
		 /**  30级后升级所需星级 */
		 HorcruxConstBaseCfgData.getContinueStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueStar;
			}
			return ""
		};
		 /**  新技能等级 */
		 HorcruxConstBaseCfgData.getNewSkillLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newSkillLevel;
			}
			return 0;
		};
		 /**  消耗本体最低等级 */
		 HorcruxConstBaseCfgData.getConsumeSelfLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.consumeSelfLevel;
			}
			return 0;
		};
		 /**  描述对应等级 */
		 HorcruxConstBaseCfgData.getDesLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desLevel;
			}
			return ""
		};
		 /**  拥有魂器最低星级 */
		 HorcruxConstBaseCfgData.getMinBeginStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minBeginStar;
			}
			return 0;
		};

	return HorcruxConstBaseCfgData
}());
	
cfg.HorcruxConstBaseCfgData = HorcruxConstBaseCfgData;
var HorcruxPropBaseCfgData  = /** @class */ (function () {
	function HorcruxPropBaseCfgData () {
	}
	HorcruxPropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxPropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxPropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxPropBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 HorcruxPropBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  强化所需材料_数量 */
		 HorcruxPropBaseCfgData.getMaterialsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.materials;
			}
			return ""
		};
		 /**  精灵本体ID_星级_数量 */
		 HorcruxPropBaseCfgData.getPetSelfByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petSelf;
			}
			return ""
		};
		 /**  获取道具 */
		 HorcruxPropBaseCfgData.getGetItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getItem;
			}
			return ""
		};
		 /**  追加属性 */
		 HorcruxPropBaseCfgData.getPropNumByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.propNum;
			}
			return ""
		};
		 /**  技能 */
		 HorcruxPropBaseCfgData.getSkillByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skill;
			}
			return ""
		};
		 /**  战力 */
		 HorcruxPropBaseCfgData.getFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  携带物评分 */
		 HorcruxPropBaseCfgData.getScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return HorcruxPropBaseCfgData
}());
	
cfg.HorcruxPropBaseCfgData = HorcruxPropBaseCfgData;
var HorcruxConstBaseCfgData  = /** @class */ (function () {
	function HorcruxConstBaseCfgData () {
	}
	HorcruxConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "awakeStar");
		};
		 /**  可觉醒星级 */
		 HorcruxConstBaseCfgData.getAwakeStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeStar;
			}
			return 0;
		};
		 /**  30级后升级所需星级 */
		 HorcruxConstBaseCfgData.getContinueStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueStar;
			}
			return ""
		};
		 /**  新技能等级 */
		 HorcruxConstBaseCfgData.getNewSkillLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newSkillLevel;
			}
			return 0;
		};
		 /**  消耗本体最低等级 */
		 HorcruxConstBaseCfgData.getConsumeSelfLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.consumeSelfLevel;
			}
			return 0;
		};
		 /**  描述对应等级 */
		 HorcruxConstBaseCfgData.getDesLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desLevel;
			}
			return ""
		};
		 /**  拥有魂器最低星级 */
		 HorcruxConstBaseCfgData.getMinBeginStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minBeginStar;
			}
			return 0;
		};

	return HorcruxConstBaseCfgData
}());
	
cfg.HorcruxConstBaseCfgData = HorcruxConstBaseCfgData;
var HorcruxPropBaseCfgData  = /** @class */ (function () {
	function HorcruxPropBaseCfgData () {
	}
	HorcruxPropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxPropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxPropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxPropBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 HorcruxPropBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  强化所需材料_数量 */
		 HorcruxPropBaseCfgData.getMaterialsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.materials;
			}
			return ""
		};
		 /**  精灵本体ID_星级_数量 */
		 HorcruxPropBaseCfgData.getPetSelfByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petSelf;
			}
			return ""
		};
		 /**  获取道具 */
		 HorcruxPropBaseCfgData.getGetItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getItem;
			}
			return ""
		};
		 /**  追加属性 */
		 HorcruxPropBaseCfgData.getPropNumByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.propNum;
			}
			return ""
		};
		 /**  技能 */
		 HorcruxPropBaseCfgData.getSkillByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skill;
			}
			return ""
		};
		 /**  战力 */
		 HorcruxPropBaseCfgData.getFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  携带物评分 */
		 HorcruxPropBaseCfgData.getScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return HorcruxPropBaseCfgData
}());
	
cfg.HorcruxPropBaseCfgData = HorcruxPropBaseCfgData;
var HorcruxBaseCfgData  = /** @class */ (function () {
	function HorcruxBaseCfgData () {
	}
	HorcruxBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  携带物名 */
		 HorcruxBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所属精灵 */
		 HorcruxBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  效果描述文本1 */
		 HorcruxBaseCfgData.getEffectDesc1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc1;
			}
			return ""
		};
		 /**  效果描述文本2 */
		 HorcruxBaseCfgData.getEffectDesc2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc2;
			}
			return ""
		};
		 /**  效果描述文本3 */
		 HorcruxBaseCfgData.getEffectDesc3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc3;
			}
			return ""
		};
		 /**  效果描述文本4 */
		 HorcruxBaseCfgData.getEffectDesc4ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc4;
			}
			return ""
		};
		 /**  背景文案 */
		 HorcruxBaseCfgData.getBackGroundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backGround;
			}
			return ""
		};
		 /**  美术图标 */
		 HorcruxBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};

	return HorcruxBaseCfgData
}());
	
cfg.HorcruxBaseCfgData = HorcruxBaseCfgData;
var HorcruxConstBaseCfgData  = /** @class */ (function () {
	function HorcruxConstBaseCfgData () {
	}
	HorcruxConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "awakeStar");
		};
		 /**  可觉醒星级 */
		 HorcruxConstBaseCfgData.getAwakeStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awakeStar;
			}
			return 0;
		};
		 /**  30级后升级所需星级 */
		 HorcruxConstBaseCfgData.getContinueStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueStar;
			}
			return ""
		};
		 /**  新技能等级 */
		 HorcruxConstBaseCfgData.getNewSkillLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newSkillLevel;
			}
			return 0;
		};
		 /**  消耗本体最低等级 */
		 HorcruxConstBaseCfgData.getConsumeSelfLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.consumeSelfLevel;
			}
			return 0;
		};
		 /**  描述对应等级 */
		 HorcruxConstBaseCfgData.getDesLevelByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desLevel;
			}
			return ""
		};
		 /**  拥有魂器最低星级 */
		 HorcruxConstBaseCfgData.getMinBeginStarByAwakeStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minBeginStar;
			}
			return 0;
		};

	return HorcruxConstBaseCfgData
}());
	
cfg.HorcruxConstBaseCfgData = HorcruxConstBaseCfgData;
var HorcruxBaseCfgData  = /** @class */ (function () {
	function HorcruxBaseCfgData () {
	}
	HorcruxBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  携带物名 */
		 HorcruxBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所属精灵 */
		 HorcruxBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  效果描述文本1 */
		 HorcruxBaseCfgData.getEffectDesc1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc1;
			}
			return ""
		};
		 /**  效果描述文本2 */
		 HorcruxBaseCfgData.getEffectDesc2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc2;
			}
			return ""
		};
		 /**  效果描述文本3 */
		 HorcruxBaseCfgData.getEffectDesc3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc3;
			}
			return ""
		};
		 /**  效果描述文本4 */
		 HorcruxBaseCfgData.getEffectDesc4ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc4;
			}
			return ""
		};
		 /**  背景文案 */
		 HorcruxBaseCfgData.getBackGroundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backGround;
			}
			return ""
		};
		 /**  美术图标 */
		 HorcruxBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};

	return HorcruxBaseCfgData
}());
	
cfg.HorcruxBaseCfgData = HorcruxBaseCfgData;
var HorcruxPropBaseCfgData  = /** @class */ (function () {
	function HorcruxPropBaseCfgData () {
	}
	HorcruxPropBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxPropBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxPropBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxPropBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  等级 */
		 HorcruxPropBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  强化所需材料_数量 */
		 HorcruxPropBaseCfgData.getMaterialsByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.materials;
			}
			return ""
		};
		 /**  精灵本体ID_星级_数量 */
		 HorcruxPropBaseCfgData.getPetSelfByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petSelf;
			}
			return ""
		};
		 /**  获取道具 */
		 HorcruxPropBaseCfgData.getGetItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getItem;
			}
			return ""
		};
		 /**  追加属性 */
		 HorcruxPropBaseCfgData.getPropNumByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.propNum;
			}
			return ""
		};
		 /**  技能 */
		 HorcruxPropBaseCfgData.getSkillByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skill;
			}
			return ""
		};
		 /**  战力 */
		 HorcruxPropBaseCfgData.getFightPowerByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  携带物评分 */
		 HorcruxPropBaseCfgData.getScoreByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return HorcruxPropBaseCfgData
}());
	
cfg.HorcruxPropBaseCfgData = HorcruxPropBaseCfgData;
var HorcruxBaseCfgData  = /** @class */ (function () {
	function HorcruxBaseCfgData () {
	}
	HorcruxBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	HorcruxBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		HorcruxBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  携带物ID */
		 HorcruxBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  携带物名 */
		 HorcruxBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所属精灵 */
		 HorcruxBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  效果描述文本1 */
		 HorcruxBaseCfgData.getEffectDesc1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc1;
			}
			return ""
		};
		 /**  效果描述文本2 */
		 HorcruxBaseCfgData.getEffectDesc2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc2;
			}
			return ""
		};
		 /**  效果描述文本3 */
		 HorcruxBaseCfgData.getEffectDesc3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc3;
			}
			return ""
		};
		 /**  效果描述文本4 */
		 HorcruxBaseCfgData.getEffectDesc4ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.effectDesc4;
			}
			return ""
		};
		 /**  背景文案 */
		 HorcruxBaseCfgData.getBackGroundByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.backGround;
			}
			return ""
		};
		 /**  美术图标 */
		 HorcruxBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};

	return HorcruxBaseCfgData
}());
	
cfg.HorcruxBaseCfgData = HorcruxBaseCfgData;
var IllustrationAchieveBaseCfgData  = /** @class */ (function () {
	function IllustrationAchieveBaseCfgData () {
	}
	IllustrationAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationAchieveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationAchieveBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationAchieveBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationAchieveBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationAchieveBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationAchieveBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationAchieveBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationAchieveBaseCfgData
}());
	
cfg.IllustrationAchieveBaseCfgData = IllustrationAchieveBaseCfgData;
var IllustrationTrammelBaseCfgData  = /** @class */ (function () {
	function IllustrationTrammelBaseCfgData () {
	}
	IllustrationTrammelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationTrammelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationTrammelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  羁绊id */
		 IllustrationTrammelBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  需要的皮肤id */
		 IllustrationTrammelBaseCfgData.getNeedSkinsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSkins;
			}
			return ""
		};
		 /**  激活后加的属性 */
		 IllustrationTrammelBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 IllustrationTrammelBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  精灵组合称号 */
		 IllustrationTrammelBaseCfgData.getCombinationtitleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.combinationtitle;
			}
			return ""
		};

	return IllustrationTrammelBaseCfgData
}());
	
cfg.IllustrationTrammelBaseCfgData = IllustrationTrammelBaseCfgData;
var IllustrationPowerBaseCfgData  = /** @class */ (function () {
	function IllustrationPowerBaseCfgData () {
	}
	IllustrationPowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationPowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationPowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationPowerBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationPowerBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationPowerBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationPowerBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationPowerBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationPowerBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationPowerBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationPowerBaseCfgData
}());
	
cfg.IllustrationPowerBaseCfgData = IllustrationPowerBaseCfgData;
var IllustrationPowerBaseCfgData  = /** @class */ (function () {
	function IllustrationPowerBaseCfgData () {
	}
	IllustrationPowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationPowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationPowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationPowerBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationPowerBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationPowerBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationPowerBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationPowerBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationPowerBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationPowerBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationPowerBaseCfgData
}());
	
cfg.IllustrationPowerBaseCfgData = IllustrationPowerBaseCfgData;
var IllustrationTrammelBaseCfgData  = /** @class */ (function () {
	function IllustrationTrammelBaseCfgData () {
	}
	IllustrationTrammelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationTrammelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationTrammelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  羁绊id */
		 IllustrationTrammelBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  需要的皮肤id */
		 IllustrationTrammelBaseCfgData.getNeedSkinsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSkins;
			}
			return ""
		};
		 /**  激活后加的属性 */
		 IllustrationTrammelBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 IllustrationTrammelBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  精灵组合称号 */
		 IllustrationTrammelBaseCfgData.getCombinationtitleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.combinationtitle;
			}
			return ""
		};

	return IllustrationTrammelBaseCfgData
}());
	
cfg.IllustrationTrammelBaseCfgData = IllustrationTrammelBaseCfgData;
var IllustrationPowerBaseCfgData  = /** @class */ (function () {
	function IllustrationPowerBaseCfgData () {
	}
	IllustrationPowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationPowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationPowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationPowerBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationPowerBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationPowerBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationPowerBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationPowerBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationPowerBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationPowerBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationPowerBaseCfgData
}());
	
cfg.IllustrationPowerBaseCfgData = IllustrationPowerBaseCfgData;
var IllustrationAchieveBaseCfgData  = /** @class */ (function () {
	function IllustrationAchieveBaseCfgData () {
	}
	IllustrationAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationAchieveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationAchieveBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationAchieveBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationAchieveBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationAchieveBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationAchieveBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationAchieveBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationAchieveBaseCfgData
}());
	
cfg.IllustrationAchieveBaseCfgData = IllustrationAchieveBaseCfgData;
var IllustrationTrammelBaseCfgData  = /** @class */ (function () {
	function IllustrationTrammelBaseCfgData () {
	}
	IllustrationTrammelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationTrammelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationTrammelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  羁绊id */
		 IllustrationTrammelBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  需要的皮肤id */
		 IllustrationTrammelBaseCfgData.getNeedSkinsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSkins;
			}
			return ""
		};
		 /**  激活后加的属性 */
		 IllustrationTrammelBaseCfgData.getAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 IllustrationTrammelBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return 0;
		};
		 /**  精灵组合称号 */
		 IllustrationTrammelBaseCfgData.getCombinationtitleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.combinationtitle;
			}
			return ""
		};

	return IllustrationTrammelBaseCfgData
}());
	
cfg.IllustrationTrammelBaseCfgData = IllustrationTrammelBaseCfgData;
var IllustrationAchieveBaseCfgData  = /** @class */ (function () {
	function IllustrationAchieveBaseCfgData () {
	}
	IllustrationAchieveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IllustrationAchieveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IllustrationAchieveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  成就id */
		 IllustrationAchieveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  描述 */
		 IllustrationAchieveBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  成就类型 */
		 IllustrationAchieveBaseCfgData.getAchieveTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveType;
			}
			return 0;
		};
		 /**  成就子类型 */
		 IllustrationAchieveBaseCfgData.getAchieveSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.achieveSubType;
			}
			return 0;
		};
		 /**  值 */
		 IllustrationAchieveBaseCfgData.getValueById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.value;
			}
			return 0;
		};
		 /**  参数 */
		 IllustrationAchieveBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  完成后的奖励 */
		 IllustrationAchieveBaseCfgData.getAddItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return IllustrationAchieveBaseCfgData
}());
	
cfg.IllustrationAchieveBaseCfgData = IllustrationAchieveBaseCfgData;
var IncubateConstBaseCfgData  = /** @class */ (function () {
	function IncubateConstBaseCfgData () {
	}
	IncubateConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "minStep");
		};
		 /**  每分钟步数 */
		 IncubateConstBaseCfgData.getMinStepByMinStep = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStep;
			}
			return 0;
		};

	return IncubateConstBaseCfgData
}());
	
cfg.IncubateConstBaseCfgData = IncubateConstBaseCfgData;
var IncubateConstBaseCfgData  = /** @class */ (function () {
	function IncubateConstBaseCfgData () {
	}
	IncubateConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "minStep");
		};
		 /**  每分钟步数 */
		 IncubateConstBaseCfgData.getMinStepByMinStep = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStep;
			}
			return 0;
		};

	return IncubateConstBaseCfgData
}());
	
cfg.IncubateConstBaseCfgData = IncubateConstBaseCfgData;
var IncubateSpeedUpBaseCfgData  = /** @class */ (function () {
	function IncubateSpeedUpBaseCfgData () {
	}
	IncubateSpeedUpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateSpeedUpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateSpeedUpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubateSpeedUpBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具ID */
		 IncubateSpeedUpBaseCfgData.getItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具类型 */
		 IncubateSpeedUpBaseCfgData.getItemTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemType;
			}
			return 0;
		};
		 /**  加速参数 */
		 IncubateSpeedUpBaseCfgData.getSpeedUpParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.speedUpParam;
			}
			return ""
		};

	return IncubateSpeedUpBaseCfgData
}());
	
cfg.IncubateSpeedUpBaseCfgData = IncubateSpeedUpBaseCfgData;
var IncubatePetEggBaseCfgData  = /** @class */ (function () {
	function IncubatePetEggBaseCfgData () {
	}
	IncubatePetEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubatePetEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubatePetEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubatePetEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵ID */
		 IncubatePetEggBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  精灵星级 */
		 IncubatePetEggBaseCfgData.getPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  孵蛋价格 */
		 IncubatePetEggBaseCfgData.getEggPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eggPrice;
			}
			return ""
		};
		 /**  需求步数 */
		 IncubatePetEggBaseCfgData.getNeedStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStep;
			}
			return 0;
		};

	return IncubatePetEggBaseCfgData
}());
	
cfg.IncubatePetEggBaseCfgData = IncubatePetEggBaseCfgData;
var IncubatePetEggBaseCfgData  = /** @class */ (function () {
	function IncubatePetEggBaseCfgData () {
	}
	IncubatePetEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubatePetEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubatePetEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubatePetEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵ID */
		 IncubatePetEggBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  精灵星级 */
		 IncubatePetEggBaseCfgData.getPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  孵蛋价格 */
		 IncubatePetEggBaseCfgData.getEggPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eggPrice;
			}
			return ""
		};
		 /**  需求步数 */
		 IncubatePetEggBaseCfgData.getNeedStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStep;
			}
			return 0;
		};

	return IncubatePetEggBaseCfgData
}());
	
cfg.IncubatePetEggBaseCfgData = IncubatePetEggBaseCfgData;
var IncubateSpeedUpBaseCfgData  = /** @class */ (function () {
	function IncubateSpeedUpBaseCfgData () {
	}
	IncubateSpeedUpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateSpeedUpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateSpeedUpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubateSpeedUpBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具ID */
		 IncubateSpeedUpBaseCfgData.getItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具类型 */
		 IncubateSpeedUpBaseCfgData.getItemTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemType;
			}
			return 0;
		};
		 /**  加速参数 */
		 IncubateSpeedUpBaseCfgData.getSpeedUpParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.speedUpParam;
			}
			return ""
		};

	return IncubateSpeedUpBaseCfgData
}());
	
cfg.IncubateSpeedUpBaseCfgData = IncubateSpeedUpBaseCfgData;
var IncubateConstBaseCfgData  = /** @class */ (function () {
	function IncubateConstBaseCfgData () {
	}
	IncubateConstBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateConstBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateConstBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "minStep");
		};
		 /**  每分钟步数 */
		 IncubateConstBaseCfgData.getMinStepByMinStep = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStep;
			}
			return 0;
		};

	return IncubateConstBaseCfgData
}());
	
cfg.IncubateConstBaseCfgData = IncubateConstBaseCfgData;
var IncubatePetEggBaseCfgData  = /** @class */ (function () {
	function IncubatePetEggBaseCfgData () {
	}
	IncubatePetEggBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubatePetEggBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubatePetEggBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubatePetEggBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  精灵ID */
		 IncubatePetEggBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  精灵星级 */
		 IncubatePetEggBaseCfgData.getPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  孵蛋价格 */
		 IncubatePetEggBaseCfgData.getEggPriceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eggPrice;
			}
			return ""
		};
		 /**  需求步数 */
		 IncubatePetEggBaseCfgData.getNeedStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStep;
			}
			return 0;
		};

	return IncubatePetEggBaseCfgData
}());
	
cfg.IncubatePetEggBaseCfgData = IncubatePetEggBaseCfgData;
var IncubateSpeedUpBaseCfgData  = /** @class */ (function () {
	function IncubateSpeedUpBaseCfgData () {
	}
	IncubateSpeedUpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	IncubateSpeedUpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		IncubateSpeedUpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 IncubateSpeedUpBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具ID */
		 IncubateSpeedUpBaseCfgData.getItemIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具类型 */
		 IncubateSpeedUpBaseCfgData.getItemTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemType;
			}
			return 0;
		};
		 /**  加速参数 */
		 IncubateSpeedUpBaseCfgData.getSpeedUpParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.speedUpParam;
			}
			return ""
		};

	return IncubateSpeedUpBaseCfgData
}());
	
cfg.IncubateSpeedUpBaseCfgData = IncubateSpeedUpBaseCfgData;
var ItemPettypeRandBaseCfgData  = /** @class */ (function () {
	function ItemPettypeRandBaseCfgData () {
	}
	ItemPettypeRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPettypeRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPettypeRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPettypeRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPettypeRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return ItemPettypeRandBaseCfgData
}());
	
cfg.ItemPettypeRandBaseCfgData = ItemPettypeRandBaseCfgData;
var ItemPetcountCompoundBaseCfgData  = /** @class */ (function () {
	function ItemPetcountCompoundBaseCfgData () {
	}
	ItemPetcountCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetcountCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetcountCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetcountCompoundBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  需要碎片个数 */
		 ItemPetcountCompoundBaseCfgData.getNeedItemCountByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ItemPetcountCompoundBaseCfgData
}());
	
cfg.ItemPetcountCompoundBaseCfgData = ItemPetcountCompoundBaseCfgData;
var ItemPetSplitBaseCfgData  = /** @class */ (function () {
	function ItemPetSplitBaseCfgData () {
	}
	ItemPetSplitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetSplitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetSplitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetSplitBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  碎片增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getPieceAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pieceAddItem;
			}
			return ""
		};

	return ItemPetSplitBaseCfgData
}());
	
cfg.ItemPetSplitBaseCfgData = ItemPetSplitBaseCfgData;
var ItemPackBaseCfgData  = /** @class */ (function () {
	function ItemPackBaseCfgData () {
	}
	ItemPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  编号  */
		 ItemPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemPackBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  礼包类型_1_emItemPackType */
		 ItemPackBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数道具id_道具个数_概率万分比_职业； */
		 ItemPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  参数2仅礼包类型5生效填drop id */
		 ItemPackBaseCfgData.getParam2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param2;
			}
			return ""
		};

	return ItemPackBaseCfgData
}());
	
cfg.ItemPackBaseCfgData = ItemPackBaseCfgData;
var ItemBaseCfgData  = /** @class */ (function () {
	function ItemBaseCfgData () {
	}
	ItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 ItemBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  作用 */
		 ItemBaseCfgData.getDesc2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc2;
			}
			return ""
		};
		 /**  类型 */
		 ItemBaseCfgData.getDesc3ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc3;
			}
			return ""
		};
		 /**  背包类型_emBagType */
		 ItemBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  物品大类_emItemType */
		 ItemBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  物品子类型装备类型1：  1;//武器  2;//护甲  3;//鞋子  4;//头盔星石类型2：  1;//星辰符文  2;//月亮符文  3;//太阳符文  4;//彩虹符文  5;//闪烁符文英雄类型3：  1;//伙伴ID  2;//伙伴种族  3;//随机任意  4;//升星材料任意英雄  5;//升星材料指定英雄6：碎片随机池，配置方案为：组权重_组ID；组权重_组ID；神装类型5：  1;//耳环  2;//项链  3;//戒指  4;//手镯特权类型6：  特权卡ID（cs_privilege-card-CardID）   */
		 ItemBaseCfgData.getSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  使用类型_emItemUseType */
		 ItemBaseCfgData.getUseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useType;
			}
			return 0;
		};
		 /**  每日使用次数 */
		 ItemBaseCfgData.getMaxDayUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDayUseCount;
			}
			return 0;
		};
		 /**  每周使用次数 */
		 ItemBaseCfgData.getMaxWeekUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxWeekUseCount;
			}
			return 0;
		};
		 /**  每月使用次数 */
		 ItemBaseCfgData.getMaxMonthUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxMonthUseCount;
			}
			return 0;
		};
		 /**  永久使用次数 */
		 ItemBaseCfgData.getMaxForeverUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxForeverUseCount;
			}
			return 0;
		};
		 /**  掩码_emItemMark */
		 ItemBaseCfgData.getMarkById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  是否自动使用0 //不提示不使用；1 //弹出提示且20s倒计时自动使用；2 //弹出提示但不自动使用；默认0 */
		 ItemBaseCfgData.getSmartUseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.smart_use;
			}
			return 0;
		};
		 /**  物品等级 */
		 ItemBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  物品星数 */
		 ItemBaseCfgData.getStarNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starNum;
			}
			return 0;
		};
		 /**  最大堆叠数量 默认为0，表示无限叠加 */
		 ItemBaseCfgData.getMaxCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  品质 _emItemQualityType */
		 ItemBaseCfgData.getQualityById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  闪光特效 */
		 ItemBaseCfgData.getFlashById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flash;
			}
			return 0;
		};
		 /**  商店回收价格(0标示不能回收) */
		 ItemBaseCfgData.getSellPriceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrice;
			}
			return ""
		};
		 /**  CD(时间ms) */
		 ItemBaseCfgData.getCDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cD;
			}
			return 0;
		};
		 /**  有效时间(秒) */
		 ItemBaseCfgData.getExpireTimeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireTime;
			}
			return 0;
		};
		 /**  合成的ID道具表示ID伙伴表示ID/种族 */
		 ItemBaseCfgData.getCompoundIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compoundID;
			}
			return 0;
		};
		 /**  使用参数 */
		 ItemBaseCfgData.getUseParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useParam;
			}
			return ""
		};
		 /**  购买价格全额价格钻石 */
		 ItemBaseCfgData.getBuyNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedDiamond;
			}
			return 0;
		};
		 /**  评分 */
		 ItemBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  属性点类型|值;类型|值;类型:_emBattleAttribute */
		 ItemBaseCfgData.getAddAttriById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttri;
			}
			return ""
		};
		 /**   物品获取途径，对应uiconfig */
		 ItemBaseCfgData.getGetwayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  使用跳转途径 */
		 ItemBaseCfgData.getUseWayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useWay;
			}
			return 0;
		};
		 /**  图标名称 */
		 ItemBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ItemBaseCfgData
}());
	
cfg.ItemBaseCfgData = ItemBaseCfgData;
var ItemPetidRandBaseCfgData  = /** @class */ (function () {
	function ItemPetidRandBaseCfgData () {
	}
	ItemPetidRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetidRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetidRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPetidRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  星级 */
		 ItemPetidRandBaseCfgData.getPetStarByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPetidRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 ItemPetidRandBaseCfgData.getPetIDByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};

	return ItemPetidRandBaseCfgData
}());
	
cfg.ItemPetidRandBaseCfgData = ItemPetidRandBaseCfgData;
var ItemPackBaseCfgData  = /** @class */ (function () {
	function ItemPackBaseCfgData () {
	}
	ItemPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  编号  */
		 ItemPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemPackBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  礼包类型_1_emItemPackType */
		 ItemPackBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数道具id_道具个数_概率万分比_职业； */
		 ItemPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  参数2仅礼包类型5生效填drop id */
		 ItemPackBaseCfgData.getParam2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param2;
			}
			return ""
		};

	return ItemPackBaseCfgData
}());
	
cfg.ItemPackBaseCfgData = ItemPackBaseCfgData;
var ItemCompoundBaseCfgData  = /** @class */ (function () {
	function ItemCompoundBaseCfgData () {
	}
	ItemCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 ItemCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ItemCompoundBaseCfgData
}());
	
cfg.ItemCompoundBaseCfgData = ItemCompoundBaseCfgData;
var ItemPetcountCompoundBaseCfgData  = /** @class */ (function () {
	function ItemPetcountCompoundBaseCfgData () {
	}
	ItemPetcountCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetcountCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetcountCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetcountCompoundBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  需要碎片个数 */
		 ItemPetcountCompoundBaseCfgData.getNeedItemCountByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ItemPetcountCompoundBaseCfgData
}());
	
cfg.ItemPetcountCompoundBaseCfgData = ItemPetcountCompoundBaseCfgData;
var ItemPettypeRandBaseCfgData  = /** @class */ (function () {
	function ItemPettypeRandBaseCfgData () {
	}
	ItemPettypeRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPettypeRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPettypeRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPettypeRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPettypeRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return ItemPettypeRandBaseCfgData
}());
	
cfg.ItemPettypeRandBaseCfgData = ItemPettypeRandBaseCfgData;
var ItemPetidRandBaseCfgData  = /** @class */ (function () {
	function ItemPetidRandBaseCfgData () {
	}
	ItemPetidRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetidRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetidRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPetidRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  星级 */
		 ItemPetidRandBaseCfgData.getPetStarByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPetidRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 ItemPetidRandBaseCfgData.getPetIDByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};

	return ItemPetidRandBaseCfgData
}());
	
cfg.ItemPetidRandBaseCfgData = ItemPetidRandBaseCfgData;
var ItemPetSplitBaseCfgData  = /** @class */ (function () {
	function ItemPetSplitBaseCfgData () {
	}
	ItemPetSplitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetSplitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetSplitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetSplitBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  碎片增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getPieceAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pieceAddItem;
			}
			return ""
		};

	return ItemPetSplitBaseCfgData
}());
	
cfg.ItemPetSplitBaseCfgData = ItemPetSplitBaseCfgData;
var ItemGiftPackBaseCfgData  = /** @class */ (function () {
	function ItemGiftPackBaseCfgData () {
	}
	ItemGiftPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemGiftPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemGiftPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemGiftPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  礼包对应的道具ID */
		 ItemGiftPackBaseCfgData.getItemIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  礼包类型 */
		 ItemGiftPackBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  参数 */
		 ItemGiftPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  道具组列表 */
		 ItemGiftPackBaseCfgData.getItemGroupById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemGroup;
			}
			return ""
		};
		 /**  获得道具组数量 */
		 ItemGiftPackBaseCfgData.getAwardNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awardNum;
			}
			return 0;
		};

	return ItemGiftPackBaseCfgData
}());
	
cfg.ItemGiftPackBaseCfgData = ItemGiftPackBaseCfgData;
var ItemCompoundBaseCfgData  = /** @class */ (function () {
	function ItemCompoundBaseCfgData () {
	}
	ItemCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 ItemCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ItemCompoundBaseCfgData
}());
	
cfg.ItemCompoundBaseCfgData = ItemCompoundBaseCfgData;
var ItemBaseCfgData  = /** @class */ (function () {
	function ItemBaseCfgData () {
	}
	ItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 ItemBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  作用 */
		 ItemBaseCfgData.getDesc2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc2;
			}
			return ""
		};
		 /**  类型 */
		 ItemBaseCfgData.getDesc3ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc3;
			}
			return ""
		};
		 /**  背包类型_emBagType */
		 ItemBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  物品大类_emItemType */
		 ItemBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  物品子类型装备类型1：  1;//武器  2;//护甲  3;//鞋子  4;//头盔星石类型2：  1;//星辰符文  2;//月亮符文  3;//太阳符文  4;//彩虹符文  5;//闪烁符文英雄类型3：  1;//伙伴ID  2;//伙伴种族  3;//随机任意  4;//升星材料任意英雄  5;//升星材料指定英雄6：碎片随机池，配置方案为：组权重_组ID；组权重_组ID；神装类型5：  1;//耳环  2;//项链  3;//戒指  4;//手镯特权类型6：  特权卡ID（cs_privilege-card-CardID）   */
		 ItemBaseCfgData.getSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  使用类型_emItemUseType */
		 ItemBaseCfgData.getUseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useType;
			}
			return 0;
		};
		 /**  每日使用次数 */
		 ItemBaseCfgData.getMaxDayUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDayUseCount;
			}
			return 0;
		};
		 /**  每周使用次数 */
		 ItemBaseCfgData.getMaxWeekUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxWeekUseCount;
			}
			return 0;
		};
		 /**  每月使用次数 */
		 ItemBaseCfgData.getMaxMonthUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxMonthUseCount;
			}
			return 0;
		};
		 /**  永久使用次数 */
		 ItemBaseCfgData.getMaxForeverUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxForeverUseCount;
			}
			return 0;
		};
		 /**  掩码_emItemMark */
		 ItemBaseCfgData.getMarkById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  是否自动使用0 //不提示不使用；1 //弹出提示且20s倒计时自动使用；2 //弹出提示但不自动使用；默认0 */
		 ItemBaseCfgData.getSmartUseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.smart_use;
			}
			return 0;
		};
		 /**  物品等级 */
		 ItemBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  物品星数 */
		 ItemBaseCfgData.getStarNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starNum;
			}
			return 0;
		};
		 /**  最大堆叠数量 默认为0，表示无限叠加 */
		 ItemBaseCfgData.getMaxCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  品质 _emItemQualityType */
		 ItemBaseCfgData.getQualityById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  闪光特效 */
		 ItemBaseCfgData.getFlashById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flash;
			}
			return 0;
		};
		 /**  商店回收价格(0标示不能回收) */
		 ItemBaseCfgData.getSellPriceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrice;
			}
			return ""
		};
		 /**  CD(时间ms) */
		 ItemBaseCfgData.getCDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cD;
			}
			return 0;
		};
		 /**  有效时间(秒) */
		 ItemBaseCfgData.getExpireTimeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireTime;
			}
			return 0;
		};
		 /**  合成的ID道具表示ID伙伴表示ID/种族 */
		 ItemBaseCfgData.getCompoundIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compoundID;
			}
			return 0;
		};
		 /**  使用参数 */
		 ItemBaseCfgData.getUseParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useParam;
			}
			return ""
		};
		 /**  购买价格全额价格钻石 */
		 ItemBaseCfgData.getBuyNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedDiamond;
			}
			return 0;
		};
		 /**  评分 */
		 ItemBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  属性点类型|值;类型|值;类型:_emBattleAttribute */
		 ItemBaseCfgData.getAddAttriById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttri;
			}
			return ""
		};
		 /**   物品获取途径，对应uiconfig */
		 ItemBaseCfgData.getGetwayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  使用跳转途径 */
		 ItemBaseCfgData.getUseWayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useWay;
			}
			return 0;
		};
		 /**  图标名称 */
		 ItemBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ItemBaseCfgData
}());
	
cfg.ItemBaseCfgData = ItemBaseCfgData;
var ItemPackBaseCfgData  = /** @class */ (function () {
	function ItemPackBaseCfgData () {
	}
	ItemPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  编号  */
		 ItemPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemPackBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  礼包类型_1_emItemPackType */
		 ItemPackBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数道具id_道具个数_概率万分比_职业； */
		 ItemPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};
		 /**  参数2仅礼包类型5生效填drop id */
		 ItemPackBaseCfgData.getParam2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param2;
			}
			return ""
		};

	return ItemPackBaseCfgData
}());
	
cfg.ItemPackBaseCfgData = ItemPackBaseCfgData;
var ItemCompoundBaseCfgData  = /** @class */ (function () {
	function ItemCompoundBaseCfgData () {
	}
	ItemCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 ItemCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具道具ID_数量; */
		 ItemCompoundBaseCfgData.getNeedItemByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ItemCompoundBaseCfgData
}());
	
cfg.ItemCompoundBaseCfgData = ItemCompoundBaseCfgData;
var ItemPetcountCompoundBaseCfgData  = /** @class */ (function () {
	function ItemPetcountCompoundBaseCfgData () {
	}
	ItemPetcountCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetcountCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetcountCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetcountCompoundBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  需要碎片个数 */
		 ItemPetcountCompoundBaseCfgData.getNeedItemCountByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ItemPetcountCompoundBaseCfgData
}());
	
cfg.ItemPetcountCompoundBaseCfgData = ItemPetcountCompoundBaseCfgData;
var ItemPettypeRandBaseCfgData  = /** @class */ (function () {
	function ItemPettypeRandBaseCfgData () {
	}
	ItemPettypeRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPettypeRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPettypeRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPettypeRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPettypeRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return ItemPettypeRandBaseCfgData
}());
	
cfg.ItemPettypeRandBaseCfgData = ItemPettypeRandBaseCfgData;
var ItemPetidRandBaseCfgData  = /** @class */ (function () {
	function ItemPetidRandBaseCfgData () {
	}
	ItemPetidRandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetidRandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetidRandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  种族 */
		 ItemPetidRandBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  星级 */
		 ItemPetidRandBaseCfgData.getPetStarByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  概率 */
		 ItemPetidRandBaseCfgData.getRateByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 ItemPetidRandBaseCfgData.getPetIDByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};

	return ItemPetidRandBaseCfgData
}());
	
cfg.ItemPetidRandBaseCfgData = ItemPetidRandBaseCfgData;
var ItemEquipSuitBaseCfgData  = /** @class */ (function () {
	function ItemEquipSuitBaseCfgData () {
	}
	ItemEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "equipLevel");
		};
		 /**  装备等级 */
		 ItemEquipSuitBaseCfgData.getEquipLevelByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipLevel;
			}
			return 0;
		};
		 /**  2件加属性属性类型|属性值|属性万分比 */
		 ItemEquipSuitBaseCfgData.getAddAttr2ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  3件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr3ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr3;
			}
			return ""
		};
		 /**  4件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr4ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr4;
			}
			return ""
		};

	return ItemEquipSuitBaseCfgData
}());
	
cfg.ItemEquipSuitBaseCfgData = ItemEquipSuitBaseCfgData;
var ItemEquipSuitBaseCfgData  = /** @class */ (function () {
	function ItemEquipSuitBaseCfgData () {
	}
	ItemEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "equipLevel");
		};
		 /**  装备等级 */
		 ItemEquipSuitBaseCfgData.getEquipLevelByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipLevel;
			}
			return 0;
		};
		 /**  2件加属性属性类型|属性值|属性万分比 */
		 ItemEquipSuitBaseCfgData.getAddAttr2ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  3件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr3ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr3;
			}
			return ""
		};
		 /**  4件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr4ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr4;
			}
			return ""
		};

	return ItemEquipSuitBaseCfgData
}());
	
cfg.ItemEquipSuitBaseCfgData = ItemEquipSuitBaseCfgData;
var ItemGiftPackBaseCfgData  = /** @class */ (function () {
	function ItemGiftPackBaseCfgData () {
	}
	ItemGiftPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemGiftPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemGiftPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemGiftPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  礼包对应的道具ID */
		 ItemGiftPackBaseCfgData.getItemIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  礼包类型 */
		 ItemGiftPackBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  参数 */
		 ItemGiftPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  道具组列表 */
		 ItemGiftPackBaseCfgData.getItemGroupById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemGroup;
			}
			return ""
		};
		 /**  获得道具组数量 */
		 ItemGiftPackBaseCfgData.getAwardNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awardNum;
			}
			return 0;
		};

	return ItemGiftPackBaseCfgData
}());
	
cfg.ItemGiftPackBaseCfgData = ItemGiftPackBaseCfgData;
var ItemGiftPackBaseCfgData  = /** @class */ (function () {
	function ItemGiftPackBaseCfgData () {
	}
	ItemGiftPackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemGiftPackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemGiftPackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemGiftPackBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  礼包对应的道具ID */
		 ItemGiftPackBaseCfgData.getItemIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  礼包类型 */
		 ItemGiftPackBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  参数 */
		 ItemGiftPackBaseCfgData.getParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};
		 /**  道具组列表 */
		 ItemGiftPackBaseCfgData.getItemGroupById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemGroup;
			}
			return ""
		};
		 /**  获得道具组数量 */
		 ItemGiftPackBaseCfgData.getAwardNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.awardNum;
			}
			return 0;
		};

	return ItemGiftPackBaseCfgData
}());
	
cfg.ItemGiftPackBaseCfgData = ItemGiftPackBaseCfgData;
var ItemBaseCfgData  = /** @class */ (function () {
	function ItemBaseCfgData () {
	}
	ItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 ItemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  名字 */
		 ItemBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 ItemBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  作用 */
		 ItemBaseCfgData.getDesc2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc2;
			}
			return ""
		};
		 /**  类型 */
		 ItemBaseCfgData.getDesc3ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc3;
			}
			return ""
		};
		 /**  背包类型_emBagType */
		 ItemBaseCfgData.getBagTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bagType;
			}
			return 0;
		};
		 /**  物品大类_emItemType */
		 ItemBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  物品子类型装备类型1：  1;//武器  2;//护甲  3;//鞋子  4;//头盔星石类型2：  1;//星辰符文  2;//月亮符文  3;//太阳符文  4;//彩虹符文  5;//闪烁符文英雄类型3：  1;//伙伴ID  2;//伙伴种族  3;//随机任意  4;//升星材料任意英雄  5;//升星材料指定英雄6：碎片随机池，配置方案为：组权重_组ID；组权重_组ID；神装类型5：  1;//耳环  2;//项链  3;//戒指  4;//手镯特权类型6：  特权卡ID（cs_privilege-card-CardID）   */
		 ItemBaseCfgData.getSubTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  使用类型_emItemUseType */
		 ItemBaseCfgData.getUseTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useType;
			}
			return 0;
		};
		 /**  每日使用次数 */
		 ItemBaseCfgData.getMaxDayUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDayUseCount;
			}
			return 0;
		};
		 /**  每周使用次数 */
		 ItemBaseCfgData.getMaxWeekUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxWeekUseCount;
			}
			return 0;
		};
		 /**  每月使用次数 */
		 ItemBaseCfgData.getMaxMonthUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxMonthUseCount;
			}
			return 0;
		};
		 /**  永久使用次数 */
		 ItemBaseCfgData.getMaxForeverUseCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxForeverUseCount;
			}
			return 0;
		};
		 /**  掩码_emItemMark */
		 ItemBaseCfgData.getMarkById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mark;
			}
			return ""
		};
		 /**  是否自动使用0 //不提示不使用；1 //弹出提示且20s倒计时自动使用；2 //弹出提示但不自动使用；默认0 */
		 ItemBaseCfgData.getSmartUseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.smart_use;
			}
			return 0;
		};
		 /**  物品等级 */
		 ItemBaseCfgData.getLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  物品星数 */
		 ItemBaseCfgData.getStarNumById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starNum;
			}
			return 0;
		};
		 /**  最大堆叠数量 默认为0，表示无限叠加 */
		 ItemBaseCfgData.getMaxCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  品质 _emItemQualityType */
		 ItemBaseCfgData.getQualityById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.quality;
			}
			return 0;
		};
		 /**  闪光特效 */
		 ItemBaseCfgData.getFlashById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flash;
			}
			return 0;
		};
		 /**  商店回收价格(0标示不能回收) */
		 ItemBaseCfgData.getSellPriceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrice;
			}
			return ""
		};
		 /**  CD(时间ms) */
		 ItemBaseCfgData.getCDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cD;
			}
			return 0;
		};
		 /**  有效时间(秒) */
		 ItemBaseCfgData.getExpireTimeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireTime;
			}
			return 0;
		};
		 /**  合成的ID道具表示ID伙伴表示ID/种族 */
		 ItemBaseCfgData.getCompoundIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compoundID;
			}
			return 0;
		};
		 /**  使用参数 */
		 ItemBaseCfgData.getUseParamById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useParam;
			}
			return ""
		};
		 /**  购买价格全额价格钻石 */
		 ItemBaseCfgData.getBuyNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyNeedDiamond;
			}
			return 0;
		};
		 /**  评分 */
		 ItemBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  属性点类型|值;类型|值;类型:_emBattleAttribute */
		 ItemBaseCfgData.getAddAttriById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttri;
			}
			return ""
		};
		 /**   物品获取途径，对应uiconfig */
		 ItemBaseCfgData.getGetwayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  使用跳转途径 */
		 ItemBaseCfgData.getUseWayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.useWay;
			}
			return 0;
		};
		 /**  图标名称 */
		 ItemBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ItemBaseCfgData
}());
	
cfg.ItemBaseCfgData = ItemBaseCfgData;
var ItemEquipSuitBaseCfgData  = /** @class */ (function () {
	function ItemEquipSuitBaseCfgData () {
	}
	ItemEquipSuitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemEquipSuitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemEquipSuitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "equipLevel");
		};
		 /**  装备等级 */
		 ItemEquipSuitBaseCfgData.getEquipLevelByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipLevel;
			}
			return 0;
		};
		 /**  2件加属性属性类型|属性值|属性万分比 */
		 ItemEquipSuitBaseCfgData.getAddAttr2ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr2;
			}
			return ""
		};
		 /**  3件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr3ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr3;
			}
			return ""
		};
		 /**  4件加属性 */
		 ItemEquipSuitBaseCfgData.getAddAttr4ByEquipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr4;
			}
			return ""
		};

	return ItemEquipSuitBaseCfgData
}());
	
cfg.ItemEquipSuitBaseCfgData = ItemEquipSuitBaseCfgData;
var ItemPetSplitBaseCfgData  = /** @class */ (function () {
	function ItemPetSplitBaseCfgData () {
	}
	ItemPetSplitBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ItemPetSplitBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ItemPetSplitBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 ItemPetSplitBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  碎片增加道具道具ID_数量; */
		 ItemPetSplitBaseCfgData.getPieceAddItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pieceAddItem;
			}
			return ""
		};

	return ItemPetSplitBaseCfgData
}());
	
cfg.ItemPetSplitBaseCfgData = ItemPetSplitBaseCfgData;
var JoyousLinkupJoyousLinkupBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  棋盘类型 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  行数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getHRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hRow;
			}
			return 0;
		};
		 /**  列数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getVRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vRow;
			}
			return 0;
		};
		 /**  棋子种类 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getChessNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chessNum;
			}
			return 0;
		};
		 /**  难度系数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getDifficultByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficult;
			}
			return 0;
		};
		 /**  单步时间 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getStepTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepTime;
			}
			return 0;
		};
		 /**  刷新次数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getRefreshNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNum;
			}
			return 0;
		};

	return JoyousLinkupJoyousLinkupBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupBaseCfgData = JoyousLinkupJoyousLinkupBaseCfgData;
var JoyousLinkupStageBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupStageBaseCfgData () {
	}
	JoyousLinkupStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡id */
		 JoyousLinkupStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  棋盘类型 */
		 JoyousLinkupStageBaseCfgData.getLinkupTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.linkupType;
			}
			return 0;
		};

	return JoyousLinkupStageBaseCfgData
}());
	
cfg.JoyousLinkupStageBaseCfgData = JoyousLinkupStageBaseCfgData;
var JoyousLinkupJoyousLinkupBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  棋盘类型 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  行数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getHRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hRow;
			}
			return 0;
		};
		 /**  列数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getVRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vRow;
			}
			return 0;
		};
		 /**  棋子种类 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getChessNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chessNum;
			}
			return 0;
		};
		 /**  难度系数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getDifficultByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficult;
			}
			return 0;
		};
		 /**  单步时间 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getStepTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepTime;
			}
			return 0;
		};
		 /**  刷新次数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getRefreshNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNum;
			}
			return 0;
		};

	return JoyousLinkupJoyousLinkupBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupBaseCfgData = JoyousLinkupJoyousLinkupBaseCfgData;
var JoyousLinkupJoyousLinkupChessBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupChessBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupChessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupChessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupChessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  棋子类型 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  棋子图标 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};

	return JoyousLinkupJoyousLinkupChessBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupChessBaseCfgData = JoyousLinkupJoyousLinkupChessBaseCfgData;
var JoyousLinkupJoyousLinkupBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  棋盘类型 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  行数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getHRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hRow;
			}
			return 0;
		};
		 /**  列数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getVRowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vRow;
			}
			return 0;
		};
		 /**  棋子种类 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getChessNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chessNum;
			}
			return 0;
		};
		 /**  难度系数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getDifficultByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficult;
			}
			return 0;
		};
		 /**  单步时间 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getStepTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stepTime;
			}
			return 0;
		};
		 /**  刷新次数 */
		 JoyousLinkupJoyousLinkupBaseCfgData.getRefreshNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNum;
			}
			return 0;
		};

	return JoyousLinkupJoyousLinkupBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupBaseCfgData = JoyousLinkupJoyousLinkupBaseCfgData;
var JoyousLinkupStageBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupStageBaseCfgData () {
	}
	JoyousLinkupStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡id */
		 JoyousLinkupStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  棋盘类型 */
		 JoyousLinkupStageBaseCfgData.getLinkupTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.linkupType;
			}
			return 0;
		};

	return JoyousLinkupStageBaseCfgData
}());
	
cfg.JoyousLinkupStageBaseCfgData = JoyousLinkupStageBaseCfgData;
var JoyousLinkupJoyousLinkupChessBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupChessBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupChessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupChessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupChessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  棋子类型 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  棋子图标 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};

	return JoyousLinkupJoyousLinkupChessBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupChessBaseCfgData = JoyousLinkupJoyousLinkupChessBaseCfgData;
var JoyousLinkupJoyousLinkupChessBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupJoyousLinkupChessBaseCfgData () {
	}
	JoyousLinkupJoyousLinkupChessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupJoyousLinkupChessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupJoyousLinkupChessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  棋子类型 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  棋子图标 */
		 JoyousLinkupJoyousLinkupChessBaseCfgData.getImgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.img;
			}
			return ""
		};

	return JoyousLinkupJoyousLinkupChessBaseCfgData
}());
	
cfg.JoyousLinkupJoyousLinkupChessBaseCfgData = JoyousLinkupJoyousLinkupChessBaseCfgData;
var JoyousLinkupStageBaseCfgData  = /** @class */ (function () {
	function JoyousLinkupStageBaseCfgData () {
	}
	JoyousLinkupStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	JoyousLinkupStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		JoyousLinkupStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡id */
		 JoyousLinkupStageBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  棋盘类型 */
		 JoyousLinkupStageBaseCfgData.getLinkupTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.linkupType;
			}
			return 0;
		};

	return JoyousLinkupStageBaseCfgData
}());
	
cfg.JoyousLinkupStageBaseCfgData = JoyousLinkupStageBaseCfgData;
var LadderConstInfoBaseCfgData  = /** @class */ (function () {
	function LadderConstInfoBaseCfgData () {
	}
	LadderConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dayFightCount");
		};
		 /**  免费挑战次数 */
		 LadderConstInfoBaseCfgData.getDayFightCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  购买次数 */
		 LadderConstInfoBaseCfgData.getDayBuyCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  刷新间隔时间秒 */
		 LadderConstInfoBaseCfgData.getRefreshStepByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshStep;
			}
			return 0;
		};
		 /**  开启时间 */
		 LadderConstInfoBaseCfgData.getOpenTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 LadderConstInfoBaseCfgData.getPrizeTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  胜利奖励 */
		 LadderConstInfoBaseCfgData.getWinPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winPrize;
			}
			return ""
		};
		 /**  失败奖励 */
		 LadderConstInfoBaseCfgData.getFailPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failPrize;
			}
			return ""
		};
		 /**  点赞奖励 */
		 LadderConstInfoBaseCfgData.getLikePrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  我的记录个数 */
		 LadderConstInfoBaseCfgData.getMaxRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRecNum;
			}
			return 0;
		};
		 /**  大神记录个数 */
		 LadderConstInfoBaseCfgData.getMaxPublicRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPublicRecNum;
			}
			return 0;
		};

	return LadderConstInfoBaseCfgData
}());
	
cfg.LadderConstInfoBaseCfgData = LadderConstInfoBaseCfgData;
var LadderConstInfoBaseCfgData  = /** @class */ (function () {
	function LadderConstInfoBaseCfgData () {
	}
	LadderConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dayFightCount");
		};
		 /**  免费挑战次数 */
		 LadderConstInfoBaseCfgData.getDayFightCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  购买次数 */
		 LadderConstInfoBaseCfgData.getDayBuyCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  刷新间隔时间秒 */
		 LadderConstInfoBaseCfgData.getRefreshStepByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshStep;
			}
			return 0;
		};
		 /**  开启时间 */
		 LadderConstInfoBaseCfgData.getOpenTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 LadderConstInfoBaseCfgData.getPrizeTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  胜利奖励 */
		 LadderConstInfoBaseCfgData.getWinPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winPrize;
			}
			return ""
		};
		 /**  失败奖励 */
		 LadderConstInfoBaseCfgData.getFailPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failPrize;
			}
			return ""
		};
		 /**  点赞奖励 */
		 LadderConstInfoBaseCfgData.getLikePrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  我的记录个数 */
		 LadderConstInfoBaseCfgData.getMaxRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRecNum;
			}
			return 0;
		};
		 /**  大神记录个数 */
		 LadderConstInfoBaseCfgData.getMaxPublicRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPublicRecNum;
			}
			return 0;
		};

	return LadderConstInfoBaseCfgData
}());
	
cfg.LadderConstInfoBaseCfgData = LadderConstInfoBaseCfgData;
var LadderRobotBaseCfgData  = /** @class */ (function () {
	function LadderRobotBaseCfgData () {
	}
	LadderRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 LadderRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return LadderRobotBaseCfgData
}());
	
cfg.LadderRobotBaseCfgData = LadderRobotBaseCfgData;
var LadderTopPrizeBaseCfgData  = /** @class */ (function () {
	function LadderTopPrizeBaseCfgData () {
	}
	LadderTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 LadderTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LadderTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return LadderTopPrizeBaseCfgData
}());
	
cfg.LadderTopPrizeBaseCfgData = LadderTopPrizeBaseCfgData;
var LadderBuyCountBaseCfgData  = /** @class */ (function () {
	function LadderBuyCountBaseCfgData () {
	}
	LadderBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 LadderBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 LadderBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 LadderBuyCountBaseCfgData.getNeedVIPByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return LadderBuyCountBaseCfgData
}());
	
cfg.LadderBuyCountBaseCfgData = LadderBuyCountBaseCfgData;
var LadderMonsterNewBaseCfgData  = /** @class */ (function () {
	function LadderMonsterNewBaseCfgData () {
	}
	LadderMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 LadderMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return LadderMonsterNewBaseCfgData
}());
	
cfg.LadderMonsterNewBaseCfgData = LadderMonsterNewBaseCfgData;
var LadderRobotBaseCfgData  = /** @class */ (function () {
	function LadderRobotBaseCfgData () {
	}
	LadderRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 LadderRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return LadderRobotBaseCfgData
}());
	
cfg.LadderRobotBaseCfgData = LadderRobotBaseCfgData;
var LadderTopPrizeBaseCfgData  = /** @class */ (function () {
	function LadderTopPrizeBaseCfgData () {
	}
	LadderTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 LadderTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LadderTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return LadderTopPrizeBaseCfgData
}());
	
cfg.LadderTopPrizeBaseCfgData = LadderTopPrizeBaseCfgData;
var LadderMonsterNewBaseCfgData  = /** @class */ (function () {
	function LadderMonsterNewBaseCfgData () {
	}
	LadderMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 LadderMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return LadderMonsterNewBaseCfgData
}());
	
cfg.LadderMonsterNewBaseCfgData = LadderMonsterNewBaseCfgData;
var LadderBuyCountBaseCfgData  = /** @class */ (function () {
	function LadderBuyCountBaseCfgData () {
	}
	LadderBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 LadderBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 LadderBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 LadderBuyCountBaseCfgData.getNeedVIPByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return LadderBuyCountBaseCfgData
}());
	
cfg.LadderBuyCountBaseCfgData = LadderBuyCountBaseCfgData;
var LadderMonsterNewBaseCfgData  = /** @class */ (function () {
	function LadderMonsterNewBaseCfgData () {
	}
	LadderMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 LadderMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return LadderMonsterNewBaseCfgData
}());
	
cfg.LadderMonsterNewBaseCfgData = LadderMonsterNewBaseCfgData;
var LadderBuyCountBaseCfgData  = /** @class */ (function () {
	function LadderBuyCountBaseCfgData () {
	}
	LadderBuyCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderBuyCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderBuyCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 LadderBuyCountBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 LadderBuyCountBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 LadderBuyCountBaseCfgData.getNeedVIPByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return LadderBuyCountBaseCfgData
}());
	
cfg.LadderBuyCountBaseCfgData = LadderBuyCountBaseCfgData;
var LadderRobotBaseCfgData  = /** @class */ (function () {
	function LadderRobotBaseCfgData () {
	}
	LadderRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 LadderRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return LadderRobotBaseCfgData
}());
	
cfg.LadderRobotBaseCfgData = LadderRobotBaseCfgData;
var LadderTopPrizeBaseCfgData  = /** @class */ (function () {
	function LadderTopPrizeBaseCfgData () {
	}
	LadderTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "order");
		};
		 /**  排名（上一排名,此名次] */
		 LadderTopPrizeBaseCfgData.getOrderByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.order;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LadderTopPrizeBaseCfgData.getAddItemByOrder = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return LadderTopPrizeBaseCfgData
}());
	
cfg.LadderTopPrizeBaseCfgData = LadderTopPrizeBaseCfgData;
var LadderConstInfoBaseCfgData  = /** @class */ (function () {
	function LadderConstInfoBaseCfgData () {
	}
	LadderConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LadderConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LadderConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "dayFightCount");
		};
		 /**  免费挑战次数 */
		 LadderConstInfoBaseCfgData.getDayFightCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayFightCount;
			}
			return 0;
		};
		 /**  购买次数 */
		 LadderConstInfoBaseCfgData.getDayBuyCountByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  刷新间隔时间秒 */
		 LadderConstInfoBaseCfgData.getRefreshStepByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshStep;
			}
			return 0;
		};
		 /**  开启时间 */
		 LadderConstInfoBaseCfgData.getOpenTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  奖励时间 */
		 LadderConstInfoBaseCfgData.getPrizeTimeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeTime;
			}
			return ""
		};
		 /**  胜利奖励 */
		 LadderConstInfoBaseCfgData.getWinPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.winPrize;
			}
			return ""
		};
		 /**  失败奖励 */
		 LadderConstInfoBaseCfgData.getFailPrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.failPrize;
			}
			return ""
		};
		 /**  点赞奖励 */
		 LadderConstInfoBaseCfgData.getLikePrizeByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  我的记录个数 */
		 LadderConstInfoBaseCfgData.getMaxRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxRecNum;
			}
			return 0;
		};
		 /**  大神记录个数 */
		 LadderConstInfoBaseCfgData.getMaxPublicRecNumByDayFightCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPublicRecNum;
			}
			return 0;
		};

	return LadderConstInfoBaseCfgData
}());
	
cfg.LadderConstInfoBaseCfgData = LadderConstInfoBaseCfgData;
var LotteryTypeBaseCfgData  = /** @class */ (function () {
	function LotteryTypeBaseCfgData () {
	}
	LotteryTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  活动id */
		 LotteryTypeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 LotteryTypeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每日免费刷新次数 */
		 LotteryTypeBaseCfgData.getFreeCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  保底次数 */
		 LotteryTypeBaseCfgData.getMaxCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  保底奖励（奖池序号） */
		 LotteryTypeBaseCfgData.getLuckyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lucky;
			}
			return 0;
		};
		 /**  跳转路径（对应uiconfig） */
		 LotteryTypeBaseCfgData.getGetwayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  奖励池保底限制展示个数 */
		 LotteryTypeBaseCfgData.getLimitByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};
		 /**  精灵故事 */
		 LotteryTypeBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  展示精灵 */
		 LotteryTypeBaseCfgData.getPetIdsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petIds;
			}
			return ""
		};
		 /**  UI背景图 */
		 LotteryTypeBaseCfgData.getUIbgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIbg;
			}
			return ""
		};

	return LotteryTypeBaseCfgData
}());
	
cfg.LotteryTypeBaseCfgData = LotteryTypeBaseCfgData;
var LotteryCostBaseCfgData  = /** @class */ (function () {
	function LotteryCostBaseCfgData () {
	}
	LotteryCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryCostBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryCostBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 LotteryCostBaseCfgData.getTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗数量1 */
		 LotteryCostBaseCfgData.getNeedItem1ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem1;
			}
			return ""
		};
		 /**  消耗道具2 */
		 LotteryCostBaseCfgData.getNeedItem2ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem2;
			}
			return ""
		};
		 /**  需要VIP */
		 LotteryCostBaseCfgData.getVIPByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return LotteryCostBaseCfgData
}());
	
cfg.LotteryCostBaseCfgData = LotteryCostBaseCfgData;
var LotteryHuntBaseCfgData  = /** @class */ (function () {
	function LotteryHuntBaseCfgData () {
	}
	LotteryHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryHuntBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryHuntBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  位置(从1开始) */
		 LotteryHuntBaseCfgData.getPositionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  刷出概率 */
		 LotteryHuntBaseCfgData.getChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  摇中概率 */
		 LotteryHuntBaseCfgData.getRollChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LotteryHuntBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否展示 */
		 LotteryHuntBaseCfgData.getShowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.show;
			}
			return 0;
		};

	return LotteryHuntBaseCfgData
}());
	
cfg.LotteryHuntBaseCfgData = LotteryHuntBaseCfgData;
var LotteryPoolBaseCfgData  = /** @class */ (function () {
	function LotteryPoolBaseCfgData () {
	}
	LotteryPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryPoolBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryPoolBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  保底道具 */
		 LotteryPoolBaseCfgData.getItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};
		 /**  单物品最大保底次数 */
		 LotteryPoolBaseCfgData.getItemcountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemcount;
			}
			return 0;
		};

	return LotteryPoolBaseCfgData
}());
	
cfg.LotteryPoolBaseCfgData = LotteryPoolBaseCfgData;
var LotteryHuntBaseCfgData  = /** @class */ (function () {
	function LotteryHuntBaseCfgData () {
	}
	LotteryHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryHuntBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryHuntBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  位置(从1开始) */
		 LotteryHuntBaseCfgData.getPositionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  刷出概率 */
		 LotteryHuntBaseCfgData.getChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  摇中概率 */
		 LotteryHuntBaseCfgData.getRollChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LotteryHuntBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否展示 */
		 LotteryHuntBaseCfgData.getShowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.show;
			}
			return 0;
		};

	return LotteryHuntBaseCfgData
}());
	
cfg.LotteryHuntBaseCfgData = LotteryHuntBaseCfgData;
var LotteryHuntBaseCfgData  = /** @class */ (function () {
	function LotteryHuntBaseCfgData () {
	}
	LotteryHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryHuntBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryHuntBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  位置(从1开始) */
		 LotteryHuntBaseCfgData.getPositionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  刷出概率 */
		 LotteryHuntBaseCfgData.getChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chance;
			}
			return 0;
		};
		 /**  摇中概率 */
		 LotteryHuntBaseCfgData.getRollChanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 LotteryHuntBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  是否展示 */
		 LotteryHuntBaseCfgData.getShowByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.show;
			}
			return 0;
		};

	return LotteryHuntBaseCfgData
}());
	
cfg.LotteryHuntBaseCfgData = LotteryHuntBaseCfgData;
var LotteryCostBaseCfgData  = /** @class */ (function () {
	function LotteryCostBaseCfgData () {
	}
	LotteryCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryCostBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryCostBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 LotteryCostBaseCfgData.getTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗数量1 */
		 LotteryCostBaseCfgData.getNeedItem1ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem1;
			}
			return ""
		};
		 /**  消耗道具2 */
		 LotteryCostBaseCfgData.getNeedItem2ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem2;
			}
			return ""
		};
		 /**  需要VIP */
		 LotteryCostBaseCfgData.getVIPByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return LotteryCostBaseCfgData
}());
	
cfg.LotteryCostBaseCfgData = LotteryCostBaseCfgData;
var LotteryTypeBaseCfgData  = /** @class */ (function () {
	function LotteryTypeBaseCfgData () {
	}
	LotteryTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  活动id */
		 LotteryTypeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 LotteryTypeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每日免费刷新次数 */
		 LotteryTypeBaseCfgData.getFreeCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  保底次数 */
		 LotteryTypeBaseCfgData.getMaxCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  保底奖励（奖池序号） */
		 LotteryTypeBaseCfgData.getLuckyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lucky;
			}
			return 0;
		};
		 /**  跳转路径（对应uiconfig） */
		 LotteryTypeBaseCfgData.getGetwayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  奖励池保底限制展示个数 */
		 LotteryTypeBaseCfgData.getLimitByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};
		 /**  精灵故事 */
		 LotteryTypeBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  展示精灵 */
		 LotteryTypeBaseCfgData.getPetIdsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petIds;
			}
			return ""
		};
		 /**  UI背景图 */
		 LotteryTypeBaseCfgData.getUIbgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIbg;
			}
			return ""
		};

	return LotteryTypeBaseCfgData
}());
	
cfg.LotteryTypeBaseCfgData = LotteryTypeBaseCfgData;
var LotteryPoolBaseCfgData  = /** @class */ (function () {
	function LotteryPoolBaseCfgData () {
	}
	LotteryPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryPoolBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryPoolBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  保底道具 */
		 LotteryPoolBaseCfgData.getItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};
		 /**  单物品最大保底次数 */
		 LotteryPoolBaseCfgData.getItemcountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemcount;
			}
			return 0;
		};

	return LotteryPoolBaseCfgData
}());
	
cfg.LotteryPoolBaseCfgData = LotteryPoolBaseCfgData;
var LotteryTypeBaseCfgData  = /** @class */ (function () {
	function LotteryTypeBaseCfgData () {
	}
	LotteryTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  活动id */
		 LotteryTypeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 LotteryTypeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  每日免费刷新次数 */
		 LotteryTypeBaseCfgData.getFreeCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  保底次数 */
		 LotteryTypeBaseCfgData.getMaxCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxCount;
			}
			return 0;
		};
		 /**  保底奖励（奖池序号） */
		 LotteryTypeBaseCfgData.getLuckyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lucky;
			}
			return 0;
		};
		 /**  跳转路径（对应uiconfig） */
		 LotteryTypeBaseCfgData.getGetwayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.getway;
			}
			return ""
		};
		 /**  奖励池保底限制展示个数 */
		 LotteryTypeBaseCfgData.getLimitByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};
		 /**  精灵故事 */
		 LotteryTypeBaseCfgData.getPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petId;
			}
			return 0;
		};
		 /**  展示精灵 */
		 LotteryTypeBaseCfgData.getPetIdsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petIds;
			}
			return ""
		};
		 /**  UI背景图 */
		 LotteryTypeBaseCfgData.getUIbgByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIbg;
			}
			return ""
		};

	return LotteryTypeBaseCfgData
}());
	
cfg.LotteryTypeBaseCfgData = LotteryTypeBaseCfgData;
var LotteryPoolBaseCfgData  = /** @class */ (function () {
	function LotteryPoolBaseCfgData () {
	}
	LotteryPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryPoolBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryPoolBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  保底道具 */
		 LotteryPoolBaseCfgData.getItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};
		 /**  单物品最大保底次数 */
		 LotteryPoolBaseCfgData.getItemcountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemcount;
			}
			return 0;
		};

	return LotteryPoolBaseCfgData
}());
	
cfg.LotteryPoolBaseCfgData = LotteryPoolBaseCfgData;
var LotteryCostBaseCfgData  = /** @class */ (function () {
	function LotteryCostBaseCfgData () {
	}
	LotteryCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	LotteryCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		LotteryCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 LotteryCostBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  索引 */
		 LotteryCostBaseCfgData.getIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  次数 */
		 LotteryCostBaseCfgData.getTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗数量1 */
		 LotteryCostBaseCfgData.getNeedItem1ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem1;
			}
			return ""
		};
		 /**  消耗道具2 */
		 LotteryCostBaseCfgData.getNeedItem2ByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem2;
			}
			return ""
		};
		 /**  需要VIP */
		 LotteryCostBaseCfgData.getVIPByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return LotteryCostBaseCfgData
}());
	
cfg.LotteryCostBaseCfgData = LotteryCostBaseCfgData;
var MailBaseCfgData  = /** @class */ (function () {
	function MailBaseCfgData () {
	}
	MailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	MailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		MailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 MailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 MailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 MailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 MailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return MailBaseCfgData
}());
	
cfg.MailBaseCfgData = MailBaseCfgData;
var MailBaseCfgData  = /** @class */ (function () {
	function MailBaseCfgData () {
	}
	MailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	MailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		MailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 MailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 MailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 MailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 MailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return MailBaseCfgData
}());
	
cfg.MailBaseCfgData = MailBaseCfgData;
var MailBaseCfgData  = /** @class */ (function () {
	function MailBaseCfgData () {
	}
	MailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	MailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		MailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mailType");
		};
		 /**  邮件类型 */
		 MailBaseCfgData.getMailTypeByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailType;
			}
			return 0;
		};
		 /**  有效天数 */
		 MailBaseCfgData.getExpireDayByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDay;
			}
			return 0;
		};
		 /**  邮件标题 */
		 MailBaseCfgData.getMailTitleByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mailTitle;
			}
			return ""
		};
		 /**  消息展示内容 */
		 MailBaseCfgData.getContentByMailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};

	return MailBaseCfgData
}());
	
cfg.MailBaseCfgData = MailBaseCfgData;
var PetUpStarBaseCfgData  = /** @class */ (function () {
	function PetUpStarBaseCfgData () {
	}
	PetUpStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetUpStarBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetUpStarBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetUpStarBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到此星需要道具 */
		 PetUpStarBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  升到此阶需要伙伴伙伴ID_伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarCount;
			}
			return ""
		};
		 /**  升到此星需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarPet;
			}
			return ""
		};
		 /**  升到任意需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedAnyStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAnyStarPet;
			}
			return ""
		};
		 /**  此等级上限 */
		 PetUpStarBaseCfgData.getMaxLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最大阶数 */
		 PetUpStarBaseCfgData.getMaxAdvanceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetUpStarBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetUpStarBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetUpStarBaseCfgData
}());
	
cfg.PetUpStarBaseCfgData = PetUpStarBaseCfgData;
var PetAdvanceBaseCfgData  = /** @class */ (function () {
	function PetAdvanceBaseCfgData () {
	}
	PetAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "advance");
		};
		 /**  进阶等级 */
		 PetAdvanceBaseCfgData.getAdvanceByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advance;
			}
			return 0;
		};
		 /**  此等级上限 */
		 PetAdvanceBaseCfgData.getMaxPetLevelByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPetLevel;
			}
			return 0;
		};
		 /**  升到此阶需要道具 */
		 PetAdvanceBaseCfgData.getNeedItemByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  技能等级 */
		 PetAdvanceBaseCfgData.getAddSkillByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  增加评分 */
		 PetAdvanceBaseCfgData.getAddScoreByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetAdvanceBaseCfgData
}());
	
cfg.PetAdvanceBaseCfgData = PetAdvanceBaseCfgData;
var PetFormationBaseCfgData  = /** @class */ (function () {
	function PetFormationBaseCfgData () {
	}
	PetFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 PetFormationBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationBaseCfgData.getNeedLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  位置 */
		 PetFormationBaseCfgData.getPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return ""
		};

	return PetFormationBaseCfgData
}());
	
cfg.PetFormationBaseCfgData = PetFormationBaseCfgData;
var PetRunePosBaseCfgData  = /** @class */ (function () {
	function PetRunePosBaseCfgData () {
	}
	PetRunePosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRunePosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRunePosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetRunePosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁等级 */
		 PetRunePosBaseCfgData.getNeedLevelByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetRunePosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetRunePosBaseCfgData
}());
	
cfg.PetRunePosBaseCfgData = PetRunePosBaseCfgData;
var PetBaseCfgData  = /** @class */ (function () {
	function PetBaseCfgData () {
	}
	PetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄ID */
		 PetBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  描述 */
		 PetBaseCfgData.getDescByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  阵营 */
		 PetBaseCfgData.getPetTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  职业 */
		 PetBaseCfgData.getPetJobTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petJobType;
			}
			return 0;
		};
		 /**  基础Skin */
		 PetBaseCfgData.getBaseSkinByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseSkin;
			}
			return 0;
		};
		 /**  展示音效（1.wav;2.wav） */
		 PetBaseCfgData.getVoiceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.voice;
			}
			return ""
		};
		 /**  初始最大阶数 */
		 PetBaseCfgData.getInitMaxAdvanceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initMaxAdvance;
			}
			return 0;
		};
		 /**  起始星级 */
		 PetBaseCfgData.getMinStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetBaseCfgData.getMaxStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetBaseCfgData.getMaxLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  基础属性 */
		 PetBaseCfgData.getInitAttrByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initAttr;
			}
			return ""
		};
		 /**  初始成长 */
		 PetBaseCfgData.getAdvanceRate0ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate0;
			}
			return ""
		};
		 /**  1阶成长加成 */
		 PetBaseCfgData.getAdvanceRate1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate1;
			}
			return ""
		};
		 /**  2阶成长加成 */
		 PetBaseCfgData.getAdvanceRate2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate2;
			}
			return ""
		};
		 /**  3阶成长加成 */
		 PetBaseCfgData.getAdvanceRate3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate3;
			}
			return ""
		};
		 /**  4阶成长加成 */
		 PetBaseCfgData.getAdvanceRate4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate4;
			}
			return ""
		};
		 /**  5阶成长加成 */
		 PetBaseCfgData.getAdvanceRate5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate5;
			}
			return ""
		};
		 /**  6阶成长加成 */
		 PetBaseCfgData.getAdvanceRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate6;
			}
			return ""
		};
		 /**  升阶附加属性0-1阶 */
		 PetBaseCfgData.getAdvanceFix1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix1;
			}
			return ""
		};
		 /**  升阶附加属性1-2阶 */
		 PetBaseCfgData.getAdvanceFix2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix2;
			}
			return ""
		};
		 /**  升阶附加属性2-3阶 */
		 PetBaseCfgData.getAdvanceFix3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix3;
			}
			return ""
		};
		 /**  升阶附加属性3-4阶 */
		 PetBaseCfgData.getAdvanceFix4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix4;
			}
			return ""
		};
		 /**  升阶附加属性4-5阶 */
		 PetBaseCfgData.getAdvanceFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix5;
			}
			return ""
		};
		 /**  升阶附加属性5-6阶 */
		 PetBaseCfgData.getAdvanceFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix6;
			}
			return ""
		};
		 /**  6星成长加成 */
		 PetBaseCfgData.getStarRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate6;
			}
			return ""
		};
		 /**  7星成长加成 */
		 PetBaseCfgData.getStarRate7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate7;
			}
			return ""
		};
		 /**  8星成长加成 */
		 PetBaseCfgData.getStarRate8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate8;
			}
			return ""
		};
		 /**  9星成长加成 */
		 PetBaseCfgData.getStarRate9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate9;
			}
			return ""
		};
		 /**  10星成长加成 */
		 PetBaseCfgData.getStarRate10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate10;
			}
			return ""
		};
		 /**  11星成长加成 */
		 PetBaseCfgData.getStarRate11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate11;
			}
			return ""
		};
		 /**  12星成长加成 */
		 PetBaseCfgData.getStarRate12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate12;
			}
			return ""
		};
		 /**  13星成长加成 */
		 PetBaseCfgData.getStarRate13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate13;
			}
			return ""
		};
		 /**  14星成长加成 */
		 PetBaseCfgData.getStarRate14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate14;
			}
			return ""
		};
		 /**  15星成长加成 */
		 PetBaseCfgData.getStarRate15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate15;
			}
			return ""
		};
		 /**  升星附加属性4-5星 */
		 PetBaseCfgData.getStarFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix5;
			}
			return ""
		};
		 /**  升星附加属性5-6星 */
		 PetBaseCfgData.getStarFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix6;
			}
			return ""
		};
		 /**  升星附加属性6-7星 */
		 PetBaseCfgData.getStarFix7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix7;
			}
			return ""
		};
		 /**  升星附加属性7-8星 */
		 PetBaseCfgData.getStarFix8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix8;
			}
			return ""
		};
		 /**  升星附加属性8-9星 */
		 PetBaseCfgData.getStarFix9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix9;
			}
			return ""
		};
		 /**  升星附加属性9-10星 */
		 PetBaseCfgData.getStarFix10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix10;
			}
			return ""
		};
		 /**  升星附加属性10-11星 */
		 PetBaseCfgData.getStarFix11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix11;
			}
			return ""
		};
		 /**  升星附加属性11-12星 */
		 PetBaseCfgData.getStarFix12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix12;
			}
			return ""
		};
		 /**  升星附加属性12-13星 */
		 PetBaseCfgData.getStarFix13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix13;
			}
			return ""
		};
		 /**  升星附加属性13-14星 */
		 PetBaseCfgData.getStarFix14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix14;
			}
			return ""
		};
		 /**  升星附加属性14-15星 */
		 PetBaseCfgData.getStarFix15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix15;
			}
			return ""
		};
		 /**  种族值 */
		 PetBaseCfgData.getRacialvalueByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.racialvalue;
			}
			return ""
		};
		 /**  图鉴属性 */
		 PetBaseCfgData.getIllustrationAttrAddByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationAttrAdd;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 PetBaseCfgData.getFightPowerByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  携带物 */
		 PetBaseCfgData.getHorcruxByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcrux;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetBaseCfgData.getInvalidByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBaseCfgData
}());
	
cfg.PetBaseCfgData = PetBaseCfgData;
var PetStarScoreBaseCfgData  = /** @class */ (function () {
	function PetStarScoreBaseCfgData () {
	}
	PetStarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetStarScoreBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  总计评分 */
		 PetStarScoreBaseCfgData.getTotalScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalScore;
			}
			return 0;
		};
		 /**  等级评分 */
		 PetStarScoreBaseCfgData.getLevelScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.levelScore;
			}
			return 0;
		};
		 /**  装备评分 */
		 PetStarScoreBaseCfgData.getEquipScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipScore;
			}
			return 0;
		};
		 /**  星级评分 */
		 PetStarScoreBaseCfgData.getStarScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starScore;
			}
			return 0;
		};
		 /**  进阶评分 */
		 PetStarScoreBaseCfgData.getAdvanceScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceScore;
			}
			return 0;
		};
		 /**  神器评分 */
		 PetStarScoreBaseCfgData.getArtifactScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.artifactScore;
			}
			return 0;
		};
		 /**  公会技能评分 */
		 PetStarScoreBaseCfgData.getFactionSkillScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.factionSkillScore;
			}
			return 0;
		};
		 /**  符文评分 */
		 PetStarScoreBaseCfgData.getRuneScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeScore;
			}
			return 0;
		};

	return PetStarScoreBaseCfgData
}());
	
cfg.PetStarScoreBaseCfgData = PetStarScoreBaseCfgData;
var PetUpsartSkillBaseCfgData  = /** @class */ (function () {
	function PetUpsartSkillBaseCfgData () {
	}
	PetUpsartSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpsartSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpsartSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetUpsartSkillBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  技能等级 */
		 PetUpsartSkillBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};

	return PetUpsartSkillBaseCfgData
}());
	
cfg.PetUpsartSkillBaseCfgData = PetUpsartSkillBaseCfgData;
var PetEvolveBaseCfgData  = /** @class */ (function () {
	function PetEvolveBaseCfgData () {
	}
	PetEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetEvolveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetEvolveBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetEvolveBaseCfgData.getEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  升到此段需要道具 */
		 PetEvolveBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetEvolveBaseCfgData.getAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  皮肤ID */
		 PetEvolveBaseCfgData.getSkinIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  最大段数 */
		 PetEvolveBaseCfgData.getMaxEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetEvolveBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetEvolveBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetEvolveBaseCfgData
}());
	
cfg.PetEvolveBaseCfgData = PetEvolveBaseCfgData;
var PetUpgradeBaseCfgData  = /** @class */ (function () {
	function PetUpgradeBaseCfgData () {
	}
	PetUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PetUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加评分 */
		 PetUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetUpgradeBaseCfgData
}());
	
cfg.PetUpgradeBaseCfgData = PetUpgradeBaseCfgData;
var PetFormationTypeBaseCfgData  = /** @class */ (function () {
	function PetFormationTypeBaseCfgData () {
	}
	PetFormationTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetFormationTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationTypeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};

	return PetFormationTypeBaseCfgData
}());
	
cfg.PetFormationTypeBaseCfgData = PetFormationTypeBaseCfgData;
var PetMasterMatchBaseCfgData  = /** @class */ (function () {
	function PetMasterMatchBaseCfgData () {
	}
	PetMasterMatchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetMasterMatchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetMasterMatchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "topListNum");
		};
		 /**  排行榜人数 */
		 PetMasterMatchBaseCfgData.getTopListNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListNum;
			}
			return 0;
		};
		 /**  天赋展示数量 */
		 PetMasterMatchBaseCfgData.getTalentShowNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.talentShowNum;
			}
			return 0;
		};
		 /**  阵容推荐人数 */
		 PetMasterMatchBaseCfgData.getPetStoryByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return 0;
		};
		 /**  热门评论上限 */
		 PetMasterMatchBaseCfgData.getHotReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hotReviewMax;
			}
			return 0;
		};
		 /**  近期评论上限 */
		 PetMasterMatchBaseCfgData.getRecentReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recentReviewMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 PetMasterMatchBaseCfgData.getLikePrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  精灵解锁奖励 */
		 PetMasterMatchBaseCfgData.getPetUnlockPrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petUnlockPrize;
			}
			return ""
		};

	return PetMasterMatchBaseCfgData
}());
	
cfg.PetMasterMatchBaseCfgData = PetMasterMatchBaseCfgData;
var PetStarExpBaseCfgData  = /** @class */ (function () {
	function PetStarExpBaseCfgData () {
	}
	PetStarExpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarExpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarExpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星星 */
		 PetStarExpBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  吞噬极化值 */
		 PetStarExpBaseCfgData.getExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  最大极化值 */
		 PetStarExpBaseCfgData.getMaxExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetStarExpBaseCfgData.getAttrByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return PetStarExpBaseCfgData
}());
	
cfg.PetStarExpBaseCfgData = PetStarExpBaseCfgData;
var PetHighstarRebornBaseCfgData  = /** @class */ (function () {
	function PetHighstarRebornBaseCfgData () {
	}
	PetHighstarRebornBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetHighstarRebornBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetHighstarRebornBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetHighstarRebornBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetHighstarRebornBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetHighstarRebornBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  高星重生需要道具 */
		 PetHighstarRebornBaseCfgData.getRebornItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornItem;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem;
			}
			return ""
		};
		 /**  降星返还糖果 */
		 PetHighstarRebornBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  高星重生返还本体 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem1;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem2;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetHighstarRebornBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetHighstarRebornBaseCfgData
}());
	
cfg.PetHighstarRebornBaseCfgData = PetHighstarRebornBaseCfgData;
var PetEvolveBaseCfgData  = /** @class */ (function () {
	function PetEvolveBaseCfgData () {
	}
	PetEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetEvolveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetEvolveBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetEvolveBaseCfgData.getEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  升到此段需要道具 */
		 PetEvolveBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetEvolveBaseCfgData.getAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  皮肤ID */
		 PetEvolveBaseCfgData.getSkinIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  最大段数 */
		 PetEvolveBaseCfgData.getMaxEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetEvolveBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetEvolveBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetEvolveBaseCfgData
}());
	
cfg.PetEvolveBaseCfgData = PetEvolveBaseCfgData;
var PetMasterMatchBaseCfgData  = /** @class */ (function () {
	function PetMasterMatchBaseCfgData () {
	}
	PetMasterMatchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetMasterMatchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetMasterMatchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "topListNum");
		};
		 /**  排行榜人数 */
		 PetMasterMatchBaseCfgData.getTopListNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListNum;
			}
			return 0;
		};
		 /**  天赋展示数量 */
		 PetMasterMatchBaseCfgData.getTalentShowNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.talentShowNum;
			}
			return 0;
		};
		 /**  阵容推荐人数 */
		 PetMasterMatchBaseCfgData.getPetStoryByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return 0;
		};
		 /**  热门评论上限 */
		 PetMasterMatchBaseCfgData.getHotReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hotReviewMax;
			}
			return 0;
		};
		 /**  近期评论上限 */
		 PetMasterMatchBaseCfgData.getRecentReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recentReviewMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 PetMasterMatchBaseCfgData.getLikePrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  精灵解锁奖励 */
		 PetMasterMatchBaseCfgData.getPetUnlockPrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petUnlockPrize;
			}
			return ""
		};

	return PetMasterMatchBaseCfgData
}());
	
cfg.PetMasterMatchBaseCfgData = PetMasterMatchBaseCfgData;
var PetHighstarRebornBaseCfgData  = /** @class */ (function () {
	function PetHighstarRebornBaseCfgData () {
	}
	PetHighstarRebornBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetHighstarRebornBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetHighstarRebornBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetHighstarRebornBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetHighstarRebornBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetHighstarRebornBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  高星重生需要道具 */
		 PetHighstarRebornBaseCfgData.getRebornItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornItem;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem;
			}
			return ""
		};
		 /**  降星返还糖果 */
		 PetHighstarRebornBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  高星重生返还本体 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem1;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem2;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetHighstarRebornBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetHighstarRebornBaseCfgData
}());
	
cfg.PetHighstarRebornBaseCfgData = PetHighstarRebornBaseCfgData;
var PetStarExpBaseCfgData  = /** @class */ (function () {
	function PetStarExpBaseCfgData () {
	}
	PetStarExpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarExpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarExpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星星 */
		 PetStarExpBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  吞噬极化值 */
		 PetStarExpBaseCfgData.getExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  最大极化值 */
		 PetStarExpBaseCfgData.getMaxExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetStarExpBaseCfgData.getAttrByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return PetStarExpBaseCfgData
}());
	
cfg.PetStarExpBaseCfgData = PetStarExpBaseCfgData;
var PetRebornCostBaseCfgData  = /** @class */ (function () {
	function PetRebornCostBaseCfgData () {
	}
	PetRebornCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRebornCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRebornCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PetRebornCostBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetRebornCostBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetRebornCostBaseCfgData
}());
	
cfg.PetRebornCostBaseCfgData = PetRebornCostBaseCfgData;
var PetDegenerateSubstitudeBaseCfgData  = /** @class */ (function () {
	function PetDegenerateSubstitudeBaseCfgData () {
	}
	PetDegenerateSubstitudeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateSubstitudeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateSubstitudeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateSubstitudeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型（0代表全系） */
		 PetDegenerateSubstitudeBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  替代品道具 */
		 PetDegenerateSubstitudeBaseCfgData.getItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return PetDegenerateSubstitudeBaseCfgData
}());
	
cfg.PetDegenerateSubstitudeBaseCfgData = PetDegenerateSubstitudeBaseCfgData;
var PetDegenerateCostBaseCfgData  = /** @class */ (function () {
	function PetDegenerateCostBaseCfgData () {
	}
	PetDegenerateCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateCostBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetDegenerateCostBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetDegenerateCostBaseCfgData
}());
	
cfg.PetDegenerateCostBaseCfgData = PetDegenerateCostBaseCfgData;
var PetReplaceBaseCfgData  = /** @class */ (function () {
	function PetReplaceBaseCfgData () {
	}
	PetReplaceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetReplaceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetReplaceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetReplaceBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetReplaceBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要消耗5星英雄数量 */
		 PetReplaceBaseCfgData.getNeedHeroByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHero;
			}
			return 0;
		};

	return PetReplaceBaseCfgData
}());
	
cfg.PetReplaceBaseCfgData = PetReplaceBaseCfgData;
var PetReplaceBaseCfgData  = /** @class */ (function () {
	function PetReplaceBaseCfgData () {
	}
	PetReplaceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetReplaceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetReplaceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetReplaceBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetReplaceBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要消耗5星英雄数量 */
		 PetReplaceBaseCfgData.getNeedHeroByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHero;
			}
			return 0;
		};

	return PetReplaceBaseCfgData
}());
	
cfg.PetReplaceBaseCfgData = PetReplaceBaseCfgData;
var PetTalentPosBaseCfgData  = /** @class */ (function () {
	function PetTalentPosBaseCfgData () {
	}
	PetTalentPosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetTalentPosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetTalentPosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetTalentPosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetTalentPosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetTalentPosBaseCfgData
}());
	
cfg.PetTalentPosBaseCfgData = PetTalentPosBaseCfgData;
var PetBuyBagBaseCfgData  = /** @class */ (function () {
	function PetBuyBagBaseCfgData () {
	}
	PetBuyBagBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBuyBagBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBuyBagBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 PetBuyBagBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  当前购买的总格子数 */
		 PetBuyBagBaseCfgData.getTotalBuySpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalBuySpace;
			}
			return 0;
		};
		 /**  需要钻石 */
		 PetBuyBagBaseCfgData.getNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  增加格子数 */
		 PetBuyBagBaseCfgData.getAddSpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpace;
			}
			return 0;
		};

	return PetBuyBagBaseCfgData
}());
	
cfg.PetBuyBagBaseCfgData = PetBuyBagBaseCfgData;
var PetBookBaseCfgData  = /** @class */ (function () {
	function PetBookBaseCfgData () {
	}
	PetBookBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBookBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBookBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  伙伴索引 */
		 PetBookBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetBookBaseCfgData.getPetIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  图鉴 */
		 PetBookBaseCfgData.getBookMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bookMark;
			}
			return 0;
		};
		 /**  图书馆 */
		 PetBookBaseCfgData.getLibraryMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.libraryMark;
			}
			return 0;
		};
		 /**  星级 */
		 PetBookBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  显示等级 */
		 PetBookBaseCfgData.getMaxLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  属性 */
		 PetBookBaseCfgData.getAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  战力 */
		 PetBookBaseCfgData.getPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  评论开关 */
		 PetBookBaseCfgData.getReviewSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reviewSwitch;
			}
			return 0;
		};
		 /**  大神搭配开关 */
		 PetBookBaseCfgData.getMasterMatchSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterMatchSwitch;
			}
			return 0;
		};
		 /**  精灵档案开关 */
		 PetBookBaseCfgData.getPetStorySwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStorySwitch;
			}
			return 0;
		};
		 /**  精灵故事 */
		 PetBookBaseCfgData.getPetStoryByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetBookBaseCfgData.getInvalidByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBookBaseCfgData
}());
	
cfg.PetBookBaseCfgData = PetBookBaseCfgData;
var PetBookBaseCfgData  = /** @class */ (function () {
	function PetBookBaseCfgData () {
	}
	PetBookBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBookBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBookBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  伙伴索引 */
		 PetBookBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetBookBaseCfgData.getPetIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  图鉴 */
		 PetBookBaseCfgData.getBookMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bookMark;
			}
			return 0;
		};
		 /**  图书馆 */
		 PetBookBaseCfgData.getLibraryMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.libraryMark;
			}
			return 0;
		};
		 /**  星级 */
		 PetBookBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  显示等级 */
		 PetBookBaseCfgData.getMaxLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  属性 */
		 PetBookBaseCfgData.getAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  战力 */
		 PetBookBaseCfgData.getPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  评论开关 */
		 PetBookBaseCfgData.getReviewSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reviewSwitch;
			}
			return 0;
		};
		 /**  大神搭配开关 */
		 PetBookBaseCfgData.getMasterMatchSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterMatchSwitch;
			}
			return 0;
		};
		 /**  精灵档案开关 */
		 PetBookBaseCfgData.getPetStorySwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStorySwitch;
			}
			return 0;
		};
		 /**  精灵故事 */
		 PetBookBaseCfgData.getPetStoryByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetBookBaseCfgData.getInvalidByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBookBaseCfgData
}());
	
cfg.PetBookBaseCfgData = PetBookBaseCfgData;
var PetStarScoreBaseCfgData  = /** @class */ (function () {
	function PetStarScoreBaseCfgData () {
	}
	PetStarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetStarScoreBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  总计评分 */
		 PetStarScoreBaseCfgData.getTotalScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalScore;
			}
			return 0;
		};
		 /**  等级评分 */
		 PetStarScoreBaseCfgData.getLevelScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.levelScore;
			}
			return 0;
		};
		 /**  装备评分 */
		 PetStarScoreBaseCfgData.getEquipScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipScore;
			}
			return 0;
		};
		 /**  星级评分 */
		 PetStarScoreBaseCfgData.getStarScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starScore;
			}
			return 0;
		};
		 /**  进阶评分 */
		 PetStarScoreBaseCfgData.getAdvanceScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceScore;
			}
			return 0;
		};
		 /**  神器评分 */
		 PetStarScoreBaseCfgData.getArtifactScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.artifactScore;
			}
			return 0;
		};
		 /**  公会技能评分 */
		 PetStarScoreBaseCfgData.getFactionSkillScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.factionSkillScore;
			}
			return 0;
		};
		 /**  符文评分 */
		 PetStarScoreBaseCfgData.getRuneScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeScore;
			}
			return 0;
		};

	return PetStarScoreBaseCfgData
}());
	
cfg.PetStarScoreBaseCfgData = PetStarScoreBaseCfgData;
var PetBuyBagBaseCfgData  = /** @class */ (function () {
	function PetBuyBagBaseCfgData () {
	}
	PetBuyBagBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBuyBagBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBuyBagBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 PetBuyBagBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  当前购买的总格子数 */
		 PetBuyBagBaseCfgData.getTotalBuySpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalBuySpace;
			}
			return 0;
		};
		 /**  需要钻石 */
		 PetBuyBagBaseCfgData.getNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  增加格子数 */
		 PetBuyBagBaseCfgData.getAddSpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpace;
			}
			return 0;
		};

	return PetBuyBagBaseCfgData
}());
	
cfg.PetBuyBagBaseCfgData = PetBuyBagBaseCfgData;
var PetUpgradeBaseCfgData  = /** @class */ (function () {
	function PetUpgradeBaseCfgData () {
	}
	PetUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PetUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加评分 */
		 PetUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetUpgradeBaseCfgData
}());
	
cfg.PetUpgradeBaseCfgData = PetUpgradeBaseCfgData;
var PetDegenerateCostBaseCfgData  = /** @class */ (function () {
	function PetDegenerateCostBaseCfgData () {
	}
	PetDegenerateCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateCostBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetDegenerateCostBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetDegenerateCostBaseCfgData
}());
	
cfg.PetDegenerateCostBaseCfgData = PetDegenerateCostBaseCfgData;
var PetRunePosBaseCfgData  = /** @class */ (function () {
	function PetRunePosBaseCfgData () {
	}
	PetRunePosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRunePosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRunePosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetRunePosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁等级 */
		 PetRunePosBaseCfgData.getNeedLevelByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetRunePosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetRunePosBaseCfgData
}());
	
cfg.PetRunePosBaseCfgData = PetRunePosBaseCfgData;
var PetAdvanceBaseCfgData  = /** @class */ (function () {
	function PetAdvanceBaseCfgData () {
	}
	PetAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "advance");
		};
		 /**  进阶等级 */
		 PetAdvanceBaseCfgData.getAdvanceByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advance;
			}
			return 0;
		};
		 /**  此等级上限 */
		 PetAdvanceBaseCfgData.getMaxPetLevelByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPetLevel;
			}
			return 0;
		};
		 /**  升到此阶需要道具 */
		 PetAdvanceBaseCfgData.getNeedItemByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  技能等级 */
		 PetAdvanceBaseCfgData.getAddSkillByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  增加评分 */
		 PetAdvanceBaseCfgData.getAddScoreByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetAdvanceBaseCfgData
}());
	
cfg.PetAdvanceBaseCfgData = PetAdvanceBaseCfgData;
var PetRebornCostBaseCfgData  = /** @class */ (function () {
	function PetRebornCostBaseCfgData () {
	}
	PetRebornCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRebornCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRebornCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PetRebornCostBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetRebornCostBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetRebornCostBaseCfgData
}());
	
cfg.PetRebornCostBaseCfgData = PetRebornCostBaseCfgData;
var PetFormationTypeBaseCfgData  = /** @class */ (function () {
	function PetFormationTypeBaseCfgData () {
	}
	PetFormationTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetFormationTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationTypeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};

	return PetFormationTypeBaseCfgData
}());
	
cfg.PetFormationTypeBaseCfgData = PetFormationTypeBaseCfgData;
var PetFormationBaseCfgData  = /** @class */ (function () {
	function PetFormationBaseCfgData () {
	}
	PetFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 PetFormationBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationBaseCfgData.getNeedLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  位置 */
		 PetFormationBaseCfgData.getPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return ""
		};

	return PetFormationBaseCfgData
}());
	
cfg.PetFormationBaseCfgData = PetFormationBaseCfgData;
var PetUpStarBaseCfgData  = /** @class */ (function () {
	function PetUpStarBaseCfgData () {
	}
	PetUpStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetUpStarBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetUpStarBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetUpStarBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到此星需要道具 */
		 PetUpStarBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  升到此阶需要伙伴伙伴ID_伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarCount;
			}
			return ""
		};
		 /**  升到此星需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarPet;
			}
			return ""
		};
		 /**  升到任意需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedAnyStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAnyStarPet;
			}
			return ""
		};
		 /**  此等级上限 */
		 PetUpStarBaseCfgData.getMaxLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最大阶数 */
		 PetUpStarBaseCfgData.getMaxAdvanceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetUpStarBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetUpStarBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetUpStarBaseCfgData
}());
	
cfg.PetUpStarBaseCfgData = PetUpStarBaseCfgData;
var PetDegenerateSubstitudeBaseCfgData  = /** @class */ (function () {
	function PetDegenerateSubstitudeBaseCfgData () {
	}
	PetDegenerateSubstitudeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateSubstitudeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateSubstitudeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateSubstitudeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型（0代表全系） */
		 PetDegenerateSubstitudeBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  替代品道具 */
		 PetDegenerateSubstitudeBaseCfgData.getItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return PetDegenerateSubstitudeBaseCfgData
}());
	
cfg.PetDegenerateSubstitudeBaseCfgData = PetDegenerateSubstitudeBaseCfgData;
var PetTalentPosBaseCfgData  = /** @class */ (function () {
	function PetTalentPosBaseCfgData () {
	}
	PetTalentPosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetTalentPosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetTalentPosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetTalentPosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetTalentPosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetTalentPosBaseCfgData
}());
	
cfg.PetTalentPosBaseCfgData = PetTalentPosBaseCfgData;
var PetRebornCostBaseCfgData  = /** @class */ (function () {
	function PetRebornCostBaseCfgData () {
	}
	PetRebornCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRebornCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRebornCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PetRebornCostBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetRebornCostBaseCfgData.getNeedItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetRebornCostBaseCfgData
}());
	
cfg.PetRebornCostBaseCfgData = PetRebornCostBaseCfgData;
var PetStarExpBaseCfgData  = /** @class */ (function () {
	function PetStarExpBaseCfgData () {
	}
	PetStarExpBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarExpBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarExpBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星星 */
		 PetStarExpBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  吞噬极化值 */
		 PetStarExpBaseCfgData.getExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.exp;
			}
			return 0;
		};
		 /**  最大极化值 */
		 PetStarExpBaseCfgData.getMaxExpByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetStarExpBaseCfgData.getAttrByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};

	return PetStarExpBaseCfgData
}());
	
cfg.PetStarExpBaseCfgData = PetStarExpBaseCfgData;
var PetBaseCfgData  = /** @class */ (function () {
	function PetBaseCfgData () {
	}
	PetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄ID */
		 PetBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  描述 */
		 PetBaseCfgData.getDescByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  阵营 */
		 PetBaseCfgData.getPetTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  职业 */
		 PetBaseCfgData.getPetJobTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petJobType;
			}
			return 0;
		};
		 /**  基础Skin */
		 PetBaseCfgData.getBaseSkinByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseSkin;
			}
			return 0;
		};
		 /**  展示音效（1.wav;2.wav） */
		 PetBaseCfgData.getVoiceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.voice;
			}
			return ""
		};
		 /**  初始最大阶数 */
		 PetBaseCfgData.getInitMaxAdvanceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initMaxAdvance;
			}
			return 0;
		};
		 /**  起始星级 */
		 PetBaseCfgData.getMinStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetBaseCfgData.getMaxStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetBaseCfgData.getMaxLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  基础属性 */
		 PetBaseCfgData.getInitAttrByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initAttr;
			}
			return ""
		};
		 /**  初始成长 */
		 PetBaseCfgData.getAdvanceRate0ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate0;
			}
			return ""
		};
		 /**  1阶成长加成 */
		 PetBaseCfgData.getAdvanceRate1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate1;
			}
			return ""
		};
		 /**  2阶成长加成 */
		 PetBaseCfgData.getAdvanceRate2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate2;
			}
			return ""
		};
		 /**  3阶成长加成 */
		 PetBaseCfgData.getAdvanceRate3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate3;
			}
			return ""
		};
		 /**  4阶成长加成 */
		 PetBaseCfgData.getAdvanceRate4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate4;
			}
			return ""
		};
		 /**  5阶成长加成 */
		 PetBaseCfgData.getAdvanceRate5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate5;
			}
			return ""
		};
		 /**  6阶成长加成 */
		 PetBaseCfgData.getAdvanceRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate6;
			}
			return ""
		};
		 /**  升阶附加属性0-1阶 */
		 PetBaseCfgData.getAdvanceFix1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix1;
			}
			return ""
		};
		 /**  升阶附加属性1-2阶 */
		 PetBaseCfgData.getAdvanceFix2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix2;
			}
			return ""
		};
		 /**  升阶附加属性2-3阶 */
		 PetBaseCfgData.getAdvanceFix3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix3;
			}
			return ""
		};
		 /**  升阶附加属性3-4阶 */
		 PetBaseCfgData.getAdvanceFix4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix4;
			}
			return ""
		};
		 /**  升阶附加属性4-5阶 */
		 PetBaseCfgData.getAdvanceFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix5;
			}
			return ""
		};
		 /**  升阶附加属性5-6阶 */
		 PetBaseCfgData.getAdvanceFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix6;
			}
			return ""
		};
		 /**  6星成长加成 */
		 PetBaseCfgData.getStarRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate6;
			}
			return ""
		};
		 /**  7星成长加成 */
		 PetBaseCfgData.getStarRate7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate7;
			}
			return ""
		};
		 /**  8星成长加成 */
		 PetBaseCfgData.getStarRate8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate8;
			}
			return ""
		};
		 /**  9星成长加成 */
		 PetBaseCfgData.getStarRate9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate9;
			}
			return ""
		};
		 /**  10星成长加成 */
		 PetBaseCfgData.getStarRate10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate10;
			}
			return ""
		};
		 /**  11星成长加成 */
		 PetBaseCfgData.getStarRate11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate11;
			}
			return ""
		};
		 /**  12星成长加成 */
		 PetBaseCfgData.getStarRate12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate12;
			}
			return ""
		};
		 /**  13星成长加成 */
		 PetBaseCfgData.getStarRate13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate13;
			}
			return ""
		};
		 /**  14星成长加成 */
		 PetBaseCfgData.getStarRate14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate14;
			}
			return ""
		};
		 /**  15星成长加成 */
		 PetBaseCfgData.getStarRate15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate15;
			}
			return ""
		};
		 /**  升星附加属性4-5星 */
		 PetBaseCfgData.getStarFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix5;
			}
			return ""
		};
		 /**  升星附加属性5-6星 */
		 PetBaseCfgData.getStarFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix6;
			}
			return ""
		};
		 /**  升星附加属性6-7星 */
		 PetBaseCfgData.getStarFix7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix7;
			}
			return ""
		};
		 /**  升星附加属性7-8星 */
		 PetBaseCfgData.getStarFix8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix8;
			}
			return ""
		};
		 /**  升星附加属性8-9星 */
		 PetBaseCfgData.getStarFix9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix9;
			}
			return ""
		};
		 /**  升星附加属性9-10星 */
		 PetBaseCfgData.getStarFix10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix10;
			}
			return ""
		};
		 /**  升星附加属性10-11星 */
		 PetBaseCfgData.getStarFix11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix11;
			}
			return ""
		};
		 /**  升星附加属性11-12星 */
		 PetBaseCfgData.getStarFix12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix12;
			}
			return ""
		};
		 /**  升星附加属性12-13星 */
		 PetBaseCfgData.getStarFix13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix13;
			}
			return ""
		};
		 /**  升星附加属性13-14星 */
		 PetBaseCfgData.getStarFix14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix14;
			}
			return ""
		};
		 /**  升星附加属性14-15星 */
		 PetBaseCfgData.getStarFix15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix15;
			}
			return ""
		};
		 /**  种族值 */
		 PetBaseCfgData.getRacialvalueByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.racialvalue;
			}
			return ""
		};
		 /**  图鉴属性 */
		 PetBaseCfgData.getIllustrationAttrAddByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationAttrAdd;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 PetBaseCfgData.getFightPowerByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  携带物 */
		 PetBaseCfgData.getHorcruxByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcrux;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetBaseCfgData.getInvalidByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBaseCfgData
}());
	
cfg.PetBaseCfgData = PetBaseCfgData;
var PetUpsartSkillBaseCfgData  = /** @class */ (function () {
	function PetUpsartSkillBaseCfgData () {
	}
	PetUpsartSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpsartSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpsartSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetUpsartSkillBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  技能等级 */
		 PetUpsartSkillBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};

	return PetUpsartSkillBaseCfgData
}());
	
cfg.PetUpsartSkillBaseCfgData = PetUpsartSkillBaseCfgData;
var PetBaseCfgData  = /** @class */ (function () {
	function PetBaseCfgData () {
	}
	PetBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  英雄ID */
		 PetBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  描述 */
		 PetBaseCfgData.getDescByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  阵营 */
		 PetBaseCfgData.getPetTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  职业 */
		 PetBaseCfgData.getPetJobTypeByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petJobType;
			}
			return 0;
		};
		 /**  基础Skin */
		 PetBaseCfgData.getBaseSkinByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.baseSkin;
			}
			return 0;
		};
		 /**  展示音效（1.wav;2.wav） */
		 PetBaseCfgData.getVoiceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.voice;
			}
			return ""
		};
		 /**  初始最大阶数 */
		 PetBaseCfgData.getInitMaxAdvanceByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initMaxAdvance;
			}
			return 0;
		};
		 /**  起始星级 */
		 PetBaseCfgData.getMinStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetBaseCfgData.getMaxStarByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetBaseCfgData.getMaxLevelByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  基础属性 */
		 PetBaseCfgData.getInitAttrByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initAttr;
			}
			return ""
		};
		 /**  初始成长 */
		 PetBaseCfgData.getAdvanceRate0ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate0;
			}
			return ""
		};
		 /**  1阶成长加成 */
		 PetBaseCfgData.getAdvanceRate1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate1;
			}
			return ""
		};
		 /**  2阶成长加成 */
		 PetBaseCfgData.getAdvanceRate2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate2;
			}
			return ""
		};
		 /**  3阶成长加成 */
		 PetBaseCfgData.getAdvanceRate3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate3;
			}
			return ""
		};
		 /**  4阶成长加成 */
		 PetBaseCfgData.getAdvanceRate4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate4;
			}
			return ""
		};
		 /**  5阶成长加成 */
		 PetBaseCfgData.getAdvanceRate5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate5;
			}
			return ""
		};
		 /**  6阶成长加成 */
		 PetBaseCfgData.getAdvanceRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceRate6;
			}
			return ""
		};
		 /**  升阶附加属性0-1阶 */
		 PetBaseCfgData.getAdvanceFix1ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix1;
			}
			return ""
		};
		 /**  升阶附加属性1-2阶 */
		 PetBaseCfgData.getAdvanceFix2ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix2;
			}
			return ""
		};
		 /**  升阶附加属性2-3阶 */
		 PetBaseCfgData.getAdvanceFix3ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix3;
			}
			return ""
		};
		 /**  升阶附加属性3-4阶 */
		 PetBaseCfgData.getAdvanceFix4ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix4;
			}
			return ""
		};
		 /**  升阶附加属性4-5阶 */
		 PetBaseCfgData.getAdvanceFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix5;
			}
			return ""
		};
		 /**  升阶附加属性5-6阶 */
		 PetBaseCfgData.getAdvanceFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceFix6;
			}
			return ""
		};
		 /**  6星成长加成 */
		 PetBaseCfgData.getStarRate6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate6;
			}
			return ""
		};
		 /**  7星成长加成 */
		 PetBaseCfgData.getStarRate7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate7;
			}
			return ""
		};
		 /**  8星成长加成 */
		 PetBaseCfgData.getStarRate8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate8;
			}
			return ""
		};
		 /**  9星成长加成 */
		 PetBaseCfgData.getStarRate9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate9;
			}
			return ""
		};
		 /**  10星成长加成 */
		 PetBaseCfgData.getStarRate10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate10;
			}
			return ""
		};
		 /**  11星成长加成 */
		 PetBaseCfgData.getStarRate11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate11;
			}
			return ""
		};
		 /**  12星成长加成 */
		 PetBaseCfgData.getStarRate12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate12;
			}
			return ""
		};
		 /**  13星成长加成 */
		 PetBaseCfgData.getStarRate13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate13;
			}
			return ""
		};
		 /**  14星成长加成 */
		 PetBaseCfgData.getStarRate14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate14;
			}
			return ""
		};
		 /**  15星成长加成 */
		 PetBaseCfgData.getStarRate15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate15;
			}
			return ""
		};
		 /**  升星附加属性4-5星 */
		 PetBaseCfgData.getStarFix5ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix5;
			}
			return ""
		};
		 /**  升星附加属性5-6星 */
		 PetBaseCfgData.getStarFix6ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix6;
			}
			return ""
		};
		 /**  升星附加属性6-7星 */
		 PetBaseCfgData.getStarFix7ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix7;
			}
			return ""
		};
		 /**  升星附加属性7-8星 */
		 PetBaseCfgData.getStarFix8ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix8;
			}
			return ""
		};
		 /**  升星附加属性8-9星 */
		 PetBaseCfgData.getStarFix9ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix9;
			}
			return ""
		};
		 /**  升星附加属性9-10星 */
		 PetBaseCfgData.getStarFix10ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix10;
			}
			return ""
		};
		 /**  升星附加属性10-11星 */
		 PetBaseCfgData.getStarFix11ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix11;
			}
			return ""
		};
		 /**  升星附加属性11-12星 */
		 PetBaseCfgData.getStarFix12ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix12;
			}
			return ""
		};
		 /**  升星附加属性12-13星 */
		 PetBaseCfgData.getStarFix13ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix13;
			}
			return ""
		};
		 /**  升星附加属性13-14星 */
		 PetBaseCfgData.getStarFix14ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix14;
			}
			return ""
		};
		 /**  升星附加属性14-15星 */
		 PetBaseCfgData.getStarFix15ByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starFix15;
			}
			return ""
		};
		 /**  种族值 */
		 PetBaseCfgData.getRacialvalueByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.racialvalue;
			}
			return ""
		};
		 /**  图鉴属性 */
		 PetBaseCfgData.getIllustrationAttrAddByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationAttrAdd;
			}
			return ""
		};
		 /**  加成属性战力值 */
		 PetBaseCfgData.getFightPowerByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  携带物 */
		 PetBaseCfgData.getHorcruxByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcrux;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetBaseCfgData.getInvalidByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBaseCfgData
}());
	
cfg.PetBaseCfgData = PetBaseCfgData;
var PetUpgradeBaseCfgData  = /** @class */ (function () {
	function PetUpgradeBaseCfgData () {
	}
	PetUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PetUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  需要道具 */
		 PetUpgradeBaseCfgData.getNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加评分 */
		 PetUpgradeBaseCfgData.getAddScoreByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetUpgradeBaseCfgData
}());
	
cfg.PetUpgradeBaseCfgData = PetUpgradeBaseCfgData;
var PetAdvanceBaseCfgData  = /** @class */ (function () {
	function PetAdvanceBaseCfgData () {
	}
	PetAdvanceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetAdvanceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetAdvanceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "advance");
		};
		 /**  进阶等级 */
		 PetAdvanceBaseCfgData.getAdvanceByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advance;
			}
			return 0;
		};
		 /**  此等级上限 */
		 PetAdvanceBaseCfgData.getMaxPetLevelByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxPetLevel;
			}
			return 0;
		};
		 /**  升到此阶需要道具 */
		 PetAdvanceBaseCfgData.getNeedItemByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  技能等级 */
		 PetAdvanceBaseCfgData.getAddSkillByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  增加评分 */
		 PetAdvanceBaseCfgData.getAddScoreByAdvance = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return PetAdvanceBaseCfgData
}());
	
cfg.PetAdvanceBaseCfgData = PetAdvanceBaseCfgData;
var PetUpsartSkillBaseCfgData  = /** @class */ (function () {
	function PetUpsartSkillBaseCfgData () {
	}
	PetUpsartSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpsartSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpsartSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetUpsartSkillBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  技能等级 */
		 PetUpsartSkillBaseCfgData.getAddSkillByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};

	return PetUpsartSkillBaseCfgData
}());
	
cfg.PetUpsartSkillBaseCfgData = PetUpsartSkillBaseCfgData;
var PetUpStarBaseCfgData  = /** @class */ (function () {
	function PetUpStarBaseCfgData () {
	}
	PetUpStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetUpStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetUpStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetUpStarBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetUpStarBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetUpStarBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到此星需要道具 */
		 PetUpStarBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  升到此阶需要伙伴伙伴ID_伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarCountById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarCount;
			}
			return ""
		};
		 /**  升到此星需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStarPet;
			}
			return ""
		};
		 /**  升到任意需要伙伴星级_个数; */
		 PetUpStarBaseCfgData.getNeedAnyStarPetById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needAnyStarPet;
			}
			return ""
		};
		 /**  此等级上限 */
		 PetUpStarBaseCfgData.getMaxLevelById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最大阶数 */
		 PetUpStarBaseCfgData.getMaxAdvanceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetUpStarBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetUpStarBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetUpStarBaseCfgData
}());
	
cfg.PetUpStarBaseCfgData = PetUpStarBaseCfgData;
var PetFormationBaseCfgData  = /** @class */ (function () {
	function PetFormationBaseCfgData () {
	}
	PetFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 PetFormationBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationBaseCfgData.getNeedLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  位置 */
		 PetFormationBaseCfgData.getPosByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return ""
		};

	return PetFormationBaseCfgData
}());
	
cfg.PetFormationBaseCfgData = PetFormationBaseCfgData;
var PetFormationTypeBaseCfgData  = /** @class */ (function () {
	function PetFormationTypeBaseCfgData () {
	}
	PetFormationTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetFormationTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetFormationTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetFormationTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名称 */
		 PetFormationTypeBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  解锁等级 */
		 PetFormationTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};

	return PetFormationTypeBaseCfgData
}());
	
cfg.PetFormationTypeBaseCfgData = PetFormationTypeBaseCfgData;
var PetRunePosBaseCfgData  = /** @class */ (function () {
	function PetRunePosBaseCfgData () {
	}
	PetRunePosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetRunePosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetRunePosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetRunePosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁等级 */
		 PetRunePosBaseCfgData.getNeedLevelByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetRunePosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetRunePosBaseCfgData
}());
	
cfg.PetRunePosBaseCfgData = PetRunePosBaseCfgData;
var PetTalentPosBaseCfgData  = /** @class */ (function () {
	function PetTalentPosBaseCfgData () {
	}
	PetTalentPosBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetTalentPosBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetTalentPosBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "pos");
		};
		 /**  位置 */
		 PetTalentPosBaseCfgData.getPosByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pos;
			}
			return 0;
		};
		 /**  解锁星级 */
		 PetTalentPosBaseCfgData.getNeedStarByPos = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needStar;
			}
			return 0;
		};

	return PetTalentPosBaseCfgData
}());
	
cfg.PetTalentPosBaseCfgData = PetTalentPosBaseCfgData;
var PetMasterMatchBaseCfgData  = /** @class */ (function () {
	function PetMasterMatchBaseCfgData () {
	}
	PetMasterMatchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetMasterMatchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetMasterMatchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "topListNum");
		};
		 /**  排行榜人数 */
		 PetMasterMatchBaseCfgData.getTopListNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.topListNum;
			}
			return 0;
		};
		 /**  天赋展示数量 */
		 PetMasterMatchBaseCfgData.getTalentShowNumByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.talentShowNum;
			}
			return 0;
		};
		 /**  阵容推荐人数 */
		 PetMasterMatchBaseCfgData.getPetStoryByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return 0;
		};
		 /**  热门评论上限 */
		 PetMasterMatchBaseCfgData.getHotReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hotReviewMax;
			}
			return 0;
		};
		 /**  近期评论上限 */
		 PetMasterMatchBaseCfgData.getRecentReviewMaxByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.recentReviewMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 PetMasterMatchBaseCfgData.getLikePrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likePrize;
			}
			return ""
		};
		 /**  精灵解锁奖励 */
		 PetMasterMatchBaseCfgData.getPetUnlockPrizeByTopListNum = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petUnlockPrize;
			}
			return ""
		};

	return PetMasterMatchBaseCfgData
}());
	
cfg.PetMasterMatchBaseCfgData = PetMasterMatchBaseCfgData;
var PetEvolveBaseCfgData  = /** @class */ (function () {
	function PetEvolveBaseCfgData () {
	}
	PetEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetEvolveBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetEvolveBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetEvolveBaseCfgData.getEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  升到此段需要道具 */
		 PetEvolveBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  属性加成(属性|值|百分比;) */
		 PetEvolveBaseCfgData.getAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  皮肤ID */
		 PetEvolveBaseCfgData.getSkinIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};
		 /**  最大段数 */
		 PetEvolveBaseCfgData.getMaxEvolveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  增加评分 */
		 PetEvolveBaseCfgData.getAddScoreById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};
		 /**  是否不启用精灵 */
		 PetEvolveBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetEvolveBaseCfgData
}());
	
cfg.PetEvolveBaseCfgData = PetEvolveBaseCfgData;
var PetHighstarRebornBaseCfgData  = /** @class */ (function () {
	function PetHighstarRebornBaseCfgData () {
	}
	PetHighstarRebornBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetHighstarRebornBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetHighstarRebornBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  唯一ID */
		 PetHighstarRebornBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetHighstarRebornBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  星星数 */
		 PetHighstarRebornBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  高星重生需要道具 */
		 PetHighstarRebornBaseCfgData.getRebornItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornItem;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem;
			}
			return ""
		};
		 /**  降星返还糖果 */
		 PetHighstarRebornBaseCfgData.getNeedItemById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  高星重生返还本体 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem1ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem1;
			}
			return ""
		};
		 /**  高星重生返还百变怪 */
		 PetHighstarRebornBaseCfgData.getRebornReturnItem2ById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rebornReturnItem2;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetHighstarRebornBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetHighstarRebornBaseCfgData
}());
	
cfg.PetHighstarRebornBaseCfgData = PetHighstarRebornBaseCfgData;
var PetDegenerateCostBaseCfgData  = /** @class */ (function () {
	function PetDegenerateCostBaseCfgData () {
	}
	PetDegenerateCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateCostBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetDegenerateCostBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetDegenerateCostBaseCfgData
}());
	
cfg.PetDegenerateCostBaseCfgData = PetDegenerateCostBaseCfgData;
var PetBuyBagBaseCfgData  = /** @class */ (function () {
	function PetBuyBagBaseCfgData () {
	}
	PetBuyBagBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBuyBagBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBuyBagBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  索引 */
		 PetBuyBagBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  当前购买的总格子数 */
		 PetBuyBagBaseCfgData.getTotalBuySpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalBuySpace;
			}
			return 0;
		};
		 /**  需要钻石 */
		 PetBuyBagBaseCfgData.getNeedDiamondById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  增加格子数 */
		 PetBuyBagBaseCfgData.getAddSpaceById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSpace;
			}
			return 0;
		};

	return PetBuyBagBaseCfgData
}());
	
cfg.PetBuyBagBaseCfgData = PetBuyBagBaseCfgData;
var PetReplaceBaseCfgData  = /** @class */ (function () {
	function PetReplaceBaseCfgData () {
	}
	PetReplaceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetReplaceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetReplaceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetReplaceBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  需要消耗道具 */
		 PetReplaceBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要消耗5星英雄数量 */
		 PetReplaceBaseCfgData.getNeedHeroByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needHero;
			}
			return 0;
		};

	return PetReplaceBaseCfgData
}());
	
cfg.PetReplaceBaseCfgData = PetReplaceBaseCfgData;
var PetDegenerateSubstitudeBaseCfgData  = /** @class */ (function () {
	function PetDegenerateSubstitudeBaseCfgData () {
	}
	PetDegenerateSubstitudeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetDegenerateSubstitudeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetDegenerateSubstitudeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 PetDegenerateSubstitudeBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型（0代表全系） */
		 PetDegenerateSubstitudeBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  替代品道具 */
		 PetDegenerateSubstitudeBaseCfgData.getItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.item;
			}
			return ""
		};

	return PetDegenerateSubstitudeBaseCfgData
}());
	
cfg.PetDegenerateSubstitudeBaseCfgData = PetDegenerateSubstitudeBaseCfgData;
var PetBookBaseCfgData  = /** @class */ (function () {
	function PetBookBaseCfgData () {
	}
	PetBookBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetBookBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetBookBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  伙伴索引 */
		 PetBookBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetBookBaseCfgData.getPetIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  图鉴 */
		 PetBookBaseCfgData.getBookMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bookMark;
			}
			return 0;
		};
		 /**  图书馆 */
		 PetBookBaseCfgData.getLibraryMarkByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.libraryMark;
			}
			return 0;
		};
		 /**  星级 */
		 PetBookBaseCfgData.getStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  显示等级 */
		 PetBookBaseCfgData.getMaxLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  属性 */
		 PetBookBaseCfgData.getAttrByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attr;
			}
			return ""
		};
		 /**  战力 */
		 PetBookBaseCfgData.getPowerByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.power;
			}
			return 0;
		};
		 /**  评论开关 */
		 PetBookBaseCfgData.getReviewSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reviewSwitch;
			}
			return 0;
		};
		 /**  大神搭配开关 */
		 PetBookBaseCfgData.getMasterMatchSwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterMatchSwitch;
			}
			return 0;
		};
		 /**  精灵档案开关 */
		 PetBookBaseCfgData.getPetStorySwitchByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStorySwitch;
			}
			return 0;
		};
		 /**  精灵故事 */
		 PetBookBaseCfgData.getPetStoryByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStory;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetBookBaseCfgData.getInvalidByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetBookBaseCfgData
}());
	
cfg.PetBookBaseCfgData = PetBookBaseCfgData;
var PetStarScoreBaseCfgData  = /** @class */ (function () {
	function PetStarScoreBaseCfgData () {
	}
	PetStarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetStarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetStarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetStarScoreBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  总计评分 */
		 PetStarScoreBaseCfgData.getTotalScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.totalScore;
			}
			return 0;
		};
		 /**  等级评分 */
		 PetStarScoreBaseCfgData.getLevelScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.levelScore;
			}
			return 0;
		};
		 /**  装备评分 */
		 PetStarScoreBaseCfgData.getEquipScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.equipScore;
			}
			return 0;
		};
		 /**  星级评分 */
		 PetStarScoreBaseCfgData.getStarScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starScore;
			}
			return 0;
		};
		 /**  进阶评分 */
		 PetStarScoreBaseCfgData.getAdvanceScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.advanceScore;
			}
			return 0;
		};
		 /**  神器评分 */
		 PetStarScoreBaseCfgData.getArtifactScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.artifactScore;
			}
			return 0;
		};
		 /**  公会技能评分 */
		 PetStarScoreBaseCfgData.getFactionSkillScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.factionSkillScore;
			}
			return 0;
		};
		 /**  符文评分 */
		 PetStarScoreBaseCfgData.getRuneScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeScore;
			}
			return 0;
		};

	return PetStarScoreBaseCfgData
}());
	
cfg.PetStarScoreBaseCfgData = PetStarScoreBaseCfgData;
var PetCallChangeBaseCfgData  = /** @class */ (function () {
	function PetCallChangeBaseCfgData () {
	}
	PetCallChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallChangeBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  限制类型 */
		 PetCallChangeBaseCfgData.getNeedPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  消耗道具 */
		 PetCallChangeBaseCfgData.getNeedItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  库ID */
		 PetCallChangeBaseCfgData.getRandIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randID;
			}
			return 0;
		};

	return PetCallChangeBaseCfgData
}());
	
cfg.PetCallChangeBaseCfgData = PetCallChangeBaseCfgData;
var PetCallFixChangeBaseCfgData  = /** @class */ (function () {
	function PetCallFixChangeBaseCfgData () {
	}
	PetCallFixChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallFixChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallFixChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetCallFixChangeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  精灵ID */
		 PetCallFixChangeBaseCfgData.getPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  最低等级 */
		 PetCallFixChangeBaseCfgData.getMinLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minLevel;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetCallFixChangeBaseCfgData.getMaxLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最低星级 */
		 PetCallFixChangeBaseCfgData.getMinStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetCallFixChangeBaseCfgData.getMaxStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最低进化 */
		 PetCallFixChangeBaseCfgData.getMinEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minEvolve;
			}
			return 0;
		};
		 /**  最高进化 */
		 PetCallFixChangeBaseCfgData.getMaxEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  最低进阶 */
		 PetCallFixChangeBaseCfgData.getMinAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minAdvance;
			}
			return 0;
		};
		 /**  最高进阶 */
		 PetCallFixChangeBaseCfgData.getMaxAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallFixChangeBaseCfgData.getRemoveItemsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.removeItems;
			}
			return ""
		};
		 /**  转换后精灵ID */
		 PetCallFixChangeBaseCfgData.getToPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toPetID;
			}
			return 0;
		};
		 /**  控制标识 */
		 PetCallFixChangeBaseCfgData.getFlagByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return PetCallFixChangeBaseCfgData
}());
	
cfg.PetCallFixChangeBaseCfgData = PetCallFixChangeBaseCfgData;
var PetCallCallPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCallPoolBaseCfgData () {
	}
	PetCallCallPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  召唤类型 */
		 PetCallCallPoolBaseCfgData.getCallTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCallPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PetCallCallPoolBaseCfgData
}());
	
cfg.PetCallCallPoolBaseCfgData = PetCallCallPoolBaseCfgData;
var PetCallCommonPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCommonPoolBaseCfgData () {
	}
	PetCallCommonPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCommonPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCommonPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallCommonPoolBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  种族 */
		 PetCallCommonPoolBaseCfgData.getPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCommonPoolBaseCfgData.getRateByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetCallCommonPoolBaseCfgData.getPetIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  得分 */
		 PetCallCommonPoolBaseCfgData.getPetScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petScore;
			}
			return 0;
		};

	return PetCallCommonPoolBaseCfgData
}());
	
cfg.PetCallCommonPoolBaseCfgData = PetCallCommonPoolBaseCfgData;
var PetCallCallCostBaseCfgData  = /** @class */ (function () {
	function PetCallCallCostBaseCfgData () {
	}
	PetCallCallCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 PetCallCallCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 PetCallCallCostBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallCallCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetCallCallCostBaseCfgData
}());
	
cfg.PetCallCallCostBaseCfgData = PetCallCallCostBaseCfgData;
var PetCallSpecailPoolBaseCfgData  = /** @class */ (function () {
	function PetCallSpecailPoolBaseCfgData () {
	}
	PetCallSpecailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallSpecailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallSpecailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  召唤类型 */
		 PetCallSpecailPoolBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};

	return PetCallSpecailPoolBaseCfgData
}());
	
cfg.PetCallSpecailPoolBaseCfgData = PetCallSpecailPoolBaseCfgData;
var PetCallChangePoolBaseCfgData  = /** @class */ (function () {
	function PetCallChangePoolBaseCfgData () {
	}
	PetCallChangePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  伙伴种族 */
		 PetCallChangePoolBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return PetCallChangePoolBaseCfgData
}());
	
cfg.PetCallChangePoolBaseCfgData = PetCallChangePoolBaseCfgData;
var PetCallFixChangeBaseCfgData  = /** @class */ (function () {
	function PetCallFixChangeBaseCfgData () {
	}
	PetCallFixChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallFixChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallFixChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetCallFixChangeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  精灵ID */
		 PetCallFixChangeBaseCfgData.getPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  最低等级 */
		 PetCallFixChangeBaseCfgData.getMinLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minLevel;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetCallFixChangeBaseCfgData.getMaxLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最低星级 */
		 PetCallFixChangeBaseCfgData.getMinStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetCallFixChangeBaseCfgData.getMaxStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最低进化 */
		 PetCallFixChangeBaseCfgData.getMinEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minEvolve;
			}
			return 0;
		};
		 /**  最高进化 */
		 PetCallFixChangeBaseCfgData.getMaxEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  最低进阶 */
		 PetCallFixChangeBaseCfgData.getMinAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minAdvance;
			}
			return 0;
		};
		 /**  最高进阶 */
		 PetCallFixChangeBaseCfgData.getMaxAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallFixChangeBaseCfgData.getRemoveItemsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.removeItems;
			}
			return ""
		};
		 /**  转换后精灵ID */
		 PetCallFixChangeBaseCfgData.getToPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toPetID;
			}
			return 0;
		};
		 /**  控制标识 */
		 PetCallFixChangeBaseCfgData.getFlagByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return PetCallFixChangeBaseCfgData
}());
	
cfg.PetCallFixChangeBaseCfgData = PetCallFixChangeBaseCfgData;
var PetCallChangeBaseCfgData  = /** @class */ (function () {
	function PetCallChangeBaseCfgData () {
	}
	PetCallChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallChangeBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  限制类型 */
		 PetCallChangeBaseCfgData.getNeedPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  消耗道具 */
		 PetCallChangeBaseCfgData.getNeedItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  库ID */
		 PetCallChangeBaseCfgData.getRandIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randID;
			}
			return 0;
		};

	return PetCallChangeBaseCfgData
}());
	
cfg.PetCallChangeBaseCfgData = PetCallChangeBaseCfgData;
var PetCallCallBaseCfgData  = /** @class */ (function () {
	function PetCallCallBaseCfgData () {
	}
	PetCallCallBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  抽卡类型 */
		 PetCallCallBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  名称 */
		 PetCallCallBaseCfgData.getNameByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PetCallCallBaseCfgData.getDescByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 PetCallCallBaseCfgData.getNeedVipLevelByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  免费重置时间时间:分 */
		 PetCallCallBaseCfgData.getFreeResetTimeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeResetTime;
			}
			return ""
		};
		 /**  首次必出五星次数 */
		 PetCallCallBaseCfgData.getFirstContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstContinueCount;
			}
			return 0;
		};
		 /**  必出五星次数 */
		 PetCallCallBaseCfgData.getContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueCount;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallBaseCfgData.getAddItemByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  星级概率概率_星级; */
		 PetCallCallBaseCfgData.getStarRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate;
			}
			return ""
		};
		 /**  种族概率概率_种族; */
		 PetCallCallBaseCfgData.getTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeRate;
			}
			return ""
		};
		 /**  随机四星以下种族概率概率_种族; */
		 PetCallCallBaseCfgData.getSpecialTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.specialTypeRate;
			}
			return ""
		};

	return PetCallCallBaseCfgData
}());
	
cfg.PetCallCallBaseCfgData = PetCallCallBaseCfgData;
var PetCallCommonPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCommonPoolBaseCfgData () {
	}
	PetCallCommonPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCommonPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCommonPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallCommonPoolBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  种族 */
		 PetCallCommonPoolBaseCfgData.getPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCommonPoolBaseCfgData.getRateByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetCallCommonPoolBaseCfgData.getPetIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  得分 */
		 PetCallCommonPoolBaseCfgData.getPetScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petScore;
			}
			return 0;
		};

	return PetCallCommonPoolBaseCfgData
}());
	
cfg.PetCallCommonPoolBaseCfgData = PetCallCommonPoolBaseCfgData;
var PetCallCallCostBaseCfgData  = /** @class */ (function () {
	function PetCallCallCostBaseCfgData () {
	}
	PetCallCallCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 PetCallCallCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 PetCallCallCostBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallCallCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetCallCallCostBaseCfgData
}());
	
cfg.PetCallCallCostBaseCfgData = PetCallCallCostBaseCfgData;
var PetCallCallBaseCfgData  = /** @class */ (function () {
	function PetCallCallBaseCfgData () {
	}
	PetCallCallBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  抽卡类型 */
		 PetCallCallBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  名称 */
		 PetCallCallBaseCfgData.getNameByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PetCallCallBaseCfgData.getDescByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 PetCallCallBaseCfgData.getNeedVipLevelByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  免费重置时间时间:分 */
		 PetCallCallBaseCfgData.getFreeResetTimeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeResetTime;
			}
			return ""
		};
		 /**  首次必出五星次数 */
		 PetCallCallBaseCfgData.getFirstContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstContinueCount;
			}
			return 0;
		};
		 /**  必出五星次数 */
		 PetCallCallBaseCfgData.getContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueCount;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallBaseCfgData.getAddItemByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  星级概率概率_星级; */
		 PetCallCallBaseCfgData.getStarRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate;
			}
			return ""
		};
		 /**  种族概率概率_种族; */
		 PetCallCallBaseCfgData.getTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeRate;
			}
			return ""
		};
		 /**  随机四星以下种族概率概率_种族; */
		 PetCallCallBaseCfgData.getSpecialTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.specialTypeRate;
			}
			return ""
		};

	return PetCallCallBaseCfgData
}());
	
cfg.PetCallCallBaseCfgData = PetCallCallBaseCfgData;
var PetCallChangePoolBaseCfgData  = /** @class */ (function () {
	function PetCallChangePoolBaseCfgData () {
	}
	PetCallChangePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  伙伴种族 */
		 PetCallChangePoolBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return PetCallChangePoolBaseCfgData
}());
	
cfg.PetCallChangePoolBaseCfgData = PetCallChangePoolBaseCfgData;
var PetCallSpecailPoolBaseCfgData  = /** @class */ (function () {
	function PetCallSpecailPoolBaseCfgData () {
	}
	PetCallSpecailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallSpecailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallSpecailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  召唤类型 */
		 PetCallSpecailPoolBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};

	return PetCallSpecailPoolBaseCfgData
}());
	
cfg.PetCallSpecailPoolBaseCfgData = PetCallSpecailPoolBaseCfgData;
var PetCallCallBaseCfgData  = /** @class */ (function () {
	function PetCallCallBaseCfgData () {
	}
	PetCallCallBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  抽卡类型 */
		 PetCallCallBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  名称 */
		 PetCallCallBaseCfgData.getNameByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PetCallCallBaseCfgData.getDescByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  需要VIP等级 */
		 PetCallCallBaseCfgData.getNeedVipLevelByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  免费重置时间时间:分 */
		 PetCallCallBaseCfgData.getFreeResetTimeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeResetTime;
			}
			return ""
		};
		 /**  首次必出五星次数 */
		 PetCallCallBaseCfgData.getFirstContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstContinueCount;
			}
			return 0;
		};
		 /**  必出五星次数 */
		 PetCallCallBaseCfgData.getContinueCountByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueCount;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallBaseCfgData.getAddItemByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  星级概率概率_星级; */
		 PetCallCallBaseCfgData.getStarRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.starRate;
			}
			return ""
		};
		 /**  种族概率概率_种族; */
		 PetCallCallBaseCfgData.getTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.typeRate;
			}
			return ""
		};
		 /**  随机四星以下种族概率概率_种族; */
		 PetCallCallBaseCfgData.getSpecialTypeRateByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.specialTypeRate;
			}
			return ""
		};

	return PetCallCallBaseCfgData
}());
	
cfg.PetCallCallBaseCfgData = PetCallCallBaseCfgData;
var PetCallCallCostBaseCfgData  = /** @class */ (function () {
	function PetCallCallCostBaseCfgData () {
	}
	PetCallCallCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 PetCallCallCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 PetCallCallCostBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallCallCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return PetCallCallCostBaseCfgData
}());
	
cfg.PetCallCallCostBaseCfgData = PetCallCallCostBaseCfgData;
var PetCallCommonPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCommonPoolBaseCfgData () {
	}
	PetCallCommonPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCommonPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCommonPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallCommonPoolBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  种族 */
		 PetCallCommonPoolBaseCfgData.getPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCommonPoolBaseCfgData.getRateByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  伙伴ID */
		 PetCallCommonPoolBaseCfgData.getPetIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  得分 */
		 PetCallCommonPoolBaseCfgData.getPetScoreByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petScore;
			}
			return 0;
		};

	return PetCallCommonPoolBaseCfgData
}());
	
cfg.PetCallCommonPoolBaseCfgData = PetCallCommonPoolBaseCfgData;
var PetCallCallPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCallPoolBaseCfgData () {
	}
	PetCallCallPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  召唤类型 */
		 PetCallCallPoolBaseCfgData.getCallTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCallPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PetCallCallPoolBaseCfgData
}());
	
cfg.PetCallCallPoolBaseCfgData = PetCallCallPoolBaseCfgData;
var PetCallChangeBaseCfgData  = /** @class */ (function () {
	function PetCallChangeBaseCfgData () {
	}
	PetCallChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petStar");
		};
		 /**  星级 */
		 PetCallChangeBaseCfgData.getPetStarByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};
		 /**  限制类型 */
		 PetCallChangeBaseCfgData.getNeedPetTypeByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};
		 /**  消耗道具 */
		 PetCallChangeBaseCfgData.getNeedItemByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  库ID */
		 PetCallChangeBaseCfgData.getRandIDByPetStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.randID;
			}
			return 0;
		};

	return PetCallChangeBaseCfgData
}());
	
cfg.PetCallChangeBaseCfgData = PetCallChangeBaseCfgData;
var PetCallFixChangeBaseCfgData  = /** @class */ (function () {
	function PetCallFixChangeBaseCfgData () {
	}
	PetCallFixChangeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallFixChangeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallFixChangeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 PetCallFixChangeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  精灵ID */
		 PetCallFixChangeBaseCfgData.getPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  最低等级 */
		 PetCallFixChangeBaseCfgData.getMinLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minLevel;
			}
			return 0;
		};
		 /**  最高等级 */
		 PetCallFixChangeBaseCfgData.getMaxLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLevel;
			}
			return 0;
		};
		 /**  最低星级 */
		 PetCallFixChangeBaseCfgData.getMinStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  最高星级 */
		 PetCallFixChangeBaseCfgData.getMaxStarByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxStar;
			}
			return 0;
		};
		 /**  最低进化 */
		 PetCallFixChangeBaseCfgData.getMinEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minEvolve;
			}
			return 0;
		};
		 /**  最高进化 */
		 PetCallFixChangeBaseCfgData.getMaxEvolveByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxEvolve;
			}
			return 0;
		};
		 /**  最低进阶 */
		 PetCallFixChangeBaseCfgData.getMinAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minAdvance;
			}
			return 0;
		};
		 /**  最高进阶 */
		 PetCallFixChangeBaseCfgData.getMaxAdvanceByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxAdvance;
			}
			return 0;
		};
		 /**  消耗道具 */
		 PetCallFixChangeBaseCfgData.getRemoveItemsByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.removeItems;
			}
			return ""
		};
		 /**  转换后精灵ID */
		 PetCallFixChangeBaseCfgData.getToPetIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.toPetID;
			}
			return 0;
		};
		 /**  控制标识 */
		 PetCallFixChangeBaseCfgData.getFlagByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return PetCallFixChangeBaseCfgData
}());
	
cfg.PetCallFixChangeBaseCfgData = PetCallFixChangeBaseCfgData;
var PetCallChangePoolBaseCfgData  = /** @class */ (function () {
	function PetCallChangePoolBaseCfgData () {
	}
	PetCallChangePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallChangePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallChangePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petType");
		};
		 /**  伙伴种族 */
		 PetCallChangePoolBaseCfgData.getPetTypeByPetType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petType;
			}
			return 0;
		};

	return PetCallChangePoolBaseCfgData
}());
	
cfg.PetCallChangePoolBaseCfgData = PetCallChangePoolBaseCfgData;
var PetCallSpecailPoolBaseCfgData  = /** @class */ (function () {
	function PetCallSpecailPoolBaseCfgData () {
	}
	PetCallSpecailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallSpecailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallSpecailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "callType");
		};
		 /**  召唤类型 */
		 PetCallSpecailPoolBaseCfgData.getCallTypeByCallType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};

	return PetCallSpecailPoolBaseCfgData
}());
	
cfg.PetCallSpecailPoolBaseCfgData = PetCallSpecailPoolBaseCfgData;
var PetCallCallPoolBaseCfgData  = /** @class */ (function () {
	function PetCallCallPoolBaseCfgData () {
	}
	PetCallCallPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetCallCallPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetCallCallPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PetCallCallPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  召唤类型 */
		 PetCallCallPoolBaseCfgData.getCallTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.callType;
			}
			return 0;
		};
		 /**  概率 */
		 PetCallCallPoolBaseCfgData.getRateByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  增加道具 */
		 PetCallCallPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PetCallCallPoolBaseCfgData
}());
	
cfg.PetCallCallPoolBaseCfgData = PetCallCallPoolBaseCfgData;
var PetSkinSReplaceEvolveBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceEvolveBaseCfgData () {
	}
	PetSkinSReplaceEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  伙伴ID */
		 PetSkinSReplaceEvolveBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceEvolveBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceEvolveBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceEvolveBaseCfgData
}());
	
cfg.PetSkinSReplaceEvolveBaseCfgData = PetSkinSReplaceEvolveBaseCfgData;
var PetSkinSReplaceEvolveBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceEvolveBaseCfgData () {
	}
	PetSkinSReplaceEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  伙伴ID */
		 PetSkinSReplaceEvolveBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceEvolveBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceEvolveBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceEvolveBaseCfgData
}());
	
cfg.PetSkinSReplaceEvolveBaseCfgData = PetSkinSReplaceEvolveBaseCfgData;
var PetSkinSReplaceSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceSkinBaseCfgData () {
	}
	PetSkinSReplaceSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  精灵ID */
		 PetSkinSReplaceSkinBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceSkinBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceSkinBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceSkinBaseCfgData
}());
	
cfg.PetSkinSReplaceSkinBaseCfgData = PetSkinSReplaceSkinBaseCfgData;
var PetSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinBaseCfgData () {
	}
	PetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  皮肤ID */
		 PetSkinBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  文件名 */
		 PetSkinBaseCfgData.getFileNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fileName;
			}
			return ""
		};
		 /**  骨骼资源名称 */
		 PetSkinBaseCfgData.getSkelNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skelName;
			}
			return ""
		};
		 /**  角色实际高度 */
		 PetSkinBaseCfgData.getTrueHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueHeight;
			}
			return 0;
		};
		 /**  是否有例会 */
		 PetSkinBaseCfgData.getHaveVDrawById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.haveVDraw;
			}
			return 0;
		};
		 /**  是否新资源 */
		 PetSkinBaseCfgData.getNewResById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newRes;
			}
			return 0;
		};
		 /**  角色高度偏移值 */
		 PetSkinBaseCfgData.getDetalHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.detalHeight;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 PetSkinBaseCfgData.getShowScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  战斗缩放比例 */
		 PetSkinBaseCfgData.getFightScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightScale;
			}
		};
		 /**  初始动作名称 */
		 PetSkinBaseCfgData.getFirstActById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAct;
			}
			return ""
		};
		 /**  技能数据技能ID;技能ID */
		 PetSkinBaseCfgData.getAddSkillById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  图标(106*106) res\Unpack\Icon\Head */
		 PetSkinBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return 0;
		};
		 /**  全身(180*226) res\Unpack\Icon\card_new */
		 PetSkinBaseCfgData.getCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.card;
			}
			return 0;
		};
		 /**  大全身(644*566) res\Unpack\Icon\BigCard */
		 PetSkinBaseCfgData.getBigCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bigCard;
			}
			return 0;
		};
		 /**  皮肤对应的原始精灵ID */
		 PetSkinBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 PetSkinBaseCfgData.getRiskAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskAddAttr;
			}
			return ""
		};
		 /**  形象达成条件条件_值_emPreCondition1; //需要皮肤ID3; //需要星级4; //需要玩家等级5; //需要VIP等级 */
		 PetSkinBaseCfgData.getRiskNeedConditionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskNeedCondition;
			}
			return ""
		};
		 /**  头像激活说明 */
		 PetSkinBaseCfgData.getHeadActiveDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.headActiveDesc;
			}
			return ""
		};
		 /**  是否在玩家冒险形象中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerBodyById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerBody;
			}
			return 0;
		};
		 /**  是否在玩家头像中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerHead;
			}
			return 0;
		};
		 /**  是否在图鉴中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInIllustrationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInIllustration;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard缩放值 */
		 PetSkinBaseCfgData.getIllustrationBigCardScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardScale;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard偏移值 */
		 PetSkinBaseCfgData.getIllustrationBigCardOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardOff;
			}
			return ""
		};
		 /**  上阵图鉴增加的属性 */
		 PetSkinBaseCfgData.getOnIllustrationAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.onIllustrationAttr;
			}
			return ""
		};
		 /**  皮肤星级(展示用) */
		 PetSkinBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成属性战力值 */
		 PetSkinBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetSkinBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetSkinBaseCfgData
}());
	
cfg.PetSkinBaseCfgData = PetSkinBaseCfgData;
var PetSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinBaseCfgData () {
	}
	PetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  皮肤ID */
		 PetSkinBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  文件名 */
		 PetSkinBaseCfgData.getFileNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fileName;
			}
			return ""
		};
		 /**  骨骼资源名称 */
		 PetSkinBaseCfgData.getSkelNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skelName;
			}
			return ""
		};
		 /**  角色实际高度 */
		 PetSkinBaseCfgData.getTrueHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueHeight;
			}
			return 0;
		};
		 /**  是否有例会 */
		 PetSkinBaseCfgData.getHaveVDrawById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.haveVDraw;
			}
			return 0;
		};
		 /**  是否新资源 */
		 PetSkinBaseCfgData.getNewResById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newRes;
			}
			return 0;
		};
		 /**  角色高度偏移值 */
		 PetSkinBaseCfgData.getDetalHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.detalHeight;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 PetSkinBaseCfgData.getShowScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  战斗缩放比例 */
		 PetSkinBaseCfgData.getFightScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightScale;
			}
		};
		 /**  初始动作名称 */
		 PetSkinBaseCfgData.getFirstActById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAct;
			}
			return ""
		};
		 /**  技能数据技能ID;技能ID */
		 PetSkinBaseCfgData.getAddSkillById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  图标(106*106) res\Unpack\Icon\Head */
		 PetSkinBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return 0;
		};
		 /**  全身(180*226) res\Unpack\Icon\card_new */
		 PetSkinBaseCfgData.getCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.card;
			}
			return 0;
		};
		 /**  大全身(644*566) res\Unpack\Icon\BigCard */
		 PetSkinBaseCfgData.getBigCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bigCard;
			}
			return 0;
		};
		 /**  皮肤对应的原始精灵ID */
		 PetSkinBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 PetSkinBaseCfgData.getRiskAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskAddAttr;
			}
			return ""
		};
		 /**  形象达成条件条件_值_emPreCondition1; //需要皮肤ID3; //需要星级4; //需要玩家等级5; //需要VIP等级 */
		 PetSkinBaseCfgData.getRiskNeedConditionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskNeedCondition;
			}
			return ""
		};
		 /**  头像激活说明 */
		 PetSkinBaseCfgData.getHeadActiveDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.headActiveDesc;
			}
			return ""
		};
		 /**  是否在玩家冒险形象中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerBodyById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerBody;
			}
			return 0;
		};
		 /**  是否在玩家头像中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerHead;
			}
			return 0;
		};
		 /**  是否在图鉴中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInIllustrationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInIllustration;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard缩放值 */
		 PetSkinBaseCfgData.getIllustrationBigCardScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardScale;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard偏移值 */
		 PetSkinBaseCfgData.getIllustrationBigCardOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardOff;
			}
			return ""
		};
		 /**  上阵图鉴增加的属性 */
		 PetSkinBaseCfgData.getOnIllustrationAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.onIllustrationAttr;
			}
			return ""
		};
		 /**  皮肤星级(展示用) */
		 PetSkinBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成属性战力值 */
		 PetSkinBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetSkinBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetSkinBaseCfgData
}());
	
cfg.PetSkinBaseCfgData = PetSkinBaseCfgData;
var PetSkinSReplaceEvolveBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceEvolveBaseCfgData () {
	}
	PetSkinSReplaceEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  伙伴ID */
		 PetSkinSReplaceEvolveBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceEvolveBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceEvolveBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceEvolveBaseCfgData
}());
	
cfg.PetSkinSReplaceEvolveBaseCfgData = PetSkinSReplaceEvolveBaseCfgData;
var PetSkinSReplaceSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceSkinBaseCfgData () {
	}
	PetSkinSReplaceSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  精灵ID */
		 PetSkinSReplaceSkinBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceSkinBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceSkinBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceSkinBaseCfgData
}());
	
cfg.PetSkinSReplaceSkinBaseCfgData = PetSkinSReplaceSkinBaseCfgData;
var PetSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinBaseCfgData () {
	}
	PetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  皮肤ID */
		 PetSkinBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  文件名 */
		 PetSkinBaseCfgData.getFileNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fileName;
			}
			return ""
		};
		 /**  骨骼资源名称 */
		 PetSkinBaseCfgData.getSkelNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skelName;
			}
			return ""
		};
		 /**  角色实际高度 */
		 PetSkinBaseCfgData.getTrueHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueHeight;
			}
			return 0;
		};
		 /**  是否有例会 */
		 PetSkinBaseCfgData.getHaveVDrawById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.haveVDraw;
			}
			return 0;
		};
		 /**  是否新资源 */
		 PetSkinBaseCfgData.getNewResById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.newRes;
			}
			return 0;
		};
		 /**  角色高度偏移值 */
		 PetSkinBaseCfgData.getDetalHeightById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.detalHeight;
			}
			return 0;
		};
		 /**  展示界面缩放比例 */
		 PetSkinBaseCfgData.getShowScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showScale;
			}
		};
		 /**  战斗缩放比例 */
		 PetSkinBaseCfgData.getFightScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightScale;
			}
		};
		 /**  初始动作名称 */
		 PetSkinBaseCfgData.getFirstActById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAct;
			}
			return ""
		};
		 /**  技能数据技能ID;技能ID */
		 PetSkinBaseCfgData.getAddSkillById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSkill;
			}
			return ""
		};
		 /**  图标(106*106) res\Unpack\Icon\Head */
		 PetSkinBaseCfgData.getIconNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return 0;
		};
		 /**  全身(180*226) res\Unpack\Icon\card_new */
		 PetSkinBaseCfgData.getCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.card;
			}
			return 0;
		};
		 /**  大全身(644*566) res\Unpack\Icon\BigCard */
		 PetSkinBaseCfgData.getBigCardById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bigCard;
			}
			return 0;
		};
		 /**  皮肤对应的原始精灵ID */
		 PetSkinBaseCfgData.getPetIDById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 PetSkinBaseCfgData.getRiskAddAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskAddAttr;
			}
			return ""
		};
		 /**  形象达成条件条件_值_emPreCondition1; //需要皮肤ID3; //需要星级4; //需要玩家等级5; //需要VIP等级 */
		 PetSkinBaseCfgData.getRiskNeedConditionById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.riskNeedCondition;
			}
			return ""
		};
		 /**  头像激活说明 */
		 PetSkinBaseCfgData.getHeadActiveDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.headActiveDesc;
			}
			return ""
		};
		 /**  是否在玩家冒险形象中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerBodyById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerBody;
			}
			return 0;
		};
		 /**  是否在玩家头像中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInPlayerHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInPlayerHead;
			}
			return 0;
		};
		 /**  是否在图鉴中显示 1显示0不显示 */
		 PetSkinBaseCfgData.getShowInIllustrationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showInIllustration;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard缩放值 */
		 PetSkinBaseCfgData.getIllustrationBigCardScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardScale;
			}
			return 0;
		};
		 /**  上阵图鉴的bigCard偏移值 */
		 PetSkinBaseCfgData.getIllustrationBigCardOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.illustrationBigCardOff;
			}
			return ""
		};
		 /**  上阵图鉴增加的属性 */
		 PetSkinBaseCfgData.getOnIllustrationAttrById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.onIllustrationAttr;
			}
			return ""
		};
		 /**  皮肤星级(展示用) */
		 PetSkinBaseCfgData.getStarById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成属性战力值 */
		 PetSkinBaseCfgData.getFightPowerById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightPower;
			}
			return ""
		};
		 /**  是否不启用精灵 */
		 PetSkinBaseCfgData.getInvalidById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.invalid;
			}
			return 0;
		};

	return PetSkinBaseCfgData
}());
	
cfg.PetSkinBaseCfgData = PetSkinBaseCfgData;
var PetSkinSReplaceSkinBaseCfgData  = /** @class */ (function () {
	function PetSkinSReplaceSkinBaseCfgData () {
	}
	PetSkinSReplaceSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PetSkinSReplaceSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PetSkinSReplaceSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "petID");
		};
		 /**  精灵ID */
		 PetSkinSReplaceSkinBaseCfgData.getPetIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  进化段数 */
		 PetSkinSReplaceSkinBaseCfgData.getEvolveByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.evolve;
			}
			return 0;
		};
		 /**  皮肤ID */
		 PetSkinSReplaceSkinBaseCfgData.getSkinIDByPetID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skinID;
			}
			return 0;
		};

	return PetSkinSReplaceSkinBaseCfgData
}());
	
cfg.PetSkinSReplaceSkinBaseCfgData = PetSkinSReplaceSkinBaseCfgData;
var PlayerLevelBaseCfgData  = /** @class */ (function () {
	function PlayerLevelBaseCfgData () {
	}
	PlayerLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PlayerLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级到下一级经验 */
		 PlayerLevelBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  升级奖励（升到当前级的奖励） */
		 PlayerLevelBaseCfgData.getAddPrizeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return PlayerLevelBaseCfgData
}());
	
cfg.PlayerLevelBaseCfgData = PlayerLevelBaseCfgData;
var PlayerLevelBaseCfgData  = /** @class */ (function () {
	function PlayerLevelBaseCfgData () {
	}
	PlayerLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PlayerLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级到下一级经验 */
		 PlayerLevelBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  升级奖励（升到当前级的奖励） */
		 PlayerLevelBaseCfgData.getAddPrizeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return PlayerLevelBaseCfgData
}());
	
cfg.PlayerLevelBaseCfgData = PlayerLevelBaseCfgData;
var PlayerLevelBaseCfgData  = /** @class */ (function () {
	function PlayerLevelBaseCfgData () {
	}
	PlayerLevelBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerLevelBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerLevelBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 PlayerLevelBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  升级到下一级经验 */
		 PlayerLevelBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  升级奖励（升到当前级的奖励） */
		 PlayerLevelBaseCfgData.getAddPrizeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};

	return PlayerLevelBaseCfgData
}());
	
cfg.PlayerLevelBaseCfgData = PlayerLevelBaseCfgData;
var PlayerNameNameBaseCfgData  = /** @class */ (function () {
	function PlayerNameNameBaseCfgData () {
	}
	PlayerNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PlayerNameNameBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  姓氏 */
		 PlayerNameNameBaseCfgData.getSurNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.surName;
			}
			return ""
		};
		 /**  男名 */
		 PlayerNameNameBaseCfgData.getMaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maleName;
			}
			return ""
		};
		 /**  女名 */
		 PlayerNameNameBaseCfgData.getFemaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.femaleName;
			}
			return ""
		};

	return PlayerNameNameBaseCfgData
}());
	
cfg.PlayerNameNameBaseCfgData = PlayerNameNameBaseCfgData;
var PlayerNameNameBaseCfgData  = /** @class */ (function () {
	function PlayerNameNameBaseCfgData () {
	}
	PlayerNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PlayerNameNameBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  姓氏 */
		 PlayerNameNameBaseCfgData.getSurNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.surName;
			}
			return ""
		};
		 /**  男名 */
		 PlayerNameNameBaseCfgData.getMaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maleName;
			}
			return ""
		};
		 /**  女名 */
		 PlayerNameNameBaseCfgData.getFemaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.femaleName;
			}
			return ""
		};

	return PlayerNameNameBaseCfgData
}());
	
cfg.PlayerNameNameBaseCfgData = PlayerNameNameBaseCfgData;
var PlayerNameNameBaseCfgData  = /** @class */ (function () {
	function PlayerNameNameBaseCfgData () {
	}
	PlayerNameNameBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PlayerNameNameBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PlayerNameNameBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PlayerNameNameBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  姓氏 */
		 PlayerNameNameBaseCfgData.getSurNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.surName;
			}
			return ""
		};
		 /**  男名 */
		 PlayerNameNameBaseCfgData.getMaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maleName;
			}
			return ""
		};
		 /**  女名 */
		 PlayerNameNameBaseCfgData.getFemaleNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.femaleName;
			}
			return ""
		};

	return PlayerNameNameBaseCfgData
}());
	
cfg.PlayerNameNameBaseCfgData = PlayerNameNameBaseCfgData;
var PrivilegeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyPrizeBaseCfgData () {
	}
	PrivilegeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPrivilegeDailyPacket */
		 PrivilegeDailyPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要特权卡_emPrivilegeCard */
		 PrivilegeDailyPrizeBaseCfgData.getNeedCardIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needCardID;
			}
			return 0;
		};
		 /**  增加道具 */
		 PrivilegeDailyPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyPrizeBaseCfgData
}());
	
cfg.PrivilegeDailyPrizeBaseCfgData = PrivilegeDailyPrizeBaseCfgData;
var PrivilegeShopBaseCfgData  = /** @class */ (function () {
	function PrivilegeShopBaseCfgData () {
	}
	PrivilegeShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PrivilegeShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeShopBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrivilegeShopBaseCfgData.getDescribeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  需要道具 */
		 PrivilegeShopBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 PrivilegeShopBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  对应特权cardid */
		 PrivilegeShopBaseCfgData.getCardIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  补偿奖励 */
		 PrivilegeShopBaseCfgData.getCompensationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compensation;
			}
			return ""
		};

	return PrivilegeShopBaseCfgData
}());
	
cfg.PrivilegeShopBaseCfgData = PrivilegeShopBaseCfgData;
var PrivilegeVipBaseCfgData  = /** @class */ (function () {
	function PrivilegeVipBaseCfgData () {
	}
	PrivilegeVipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeVipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeVipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "vipLevel");
		};
		 /**  vip等级 */
		 PrivilegeVipBaseCfgData.getVipLevelByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vipLevel;
			}
			return 0;
		};
		 /**  需要最低经验（充值元宝） */
		 PrivilegeVipBaseCfgData.getNeedExpByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  是否广播（1广播） */
		 PrivilegeVipBaseCfgData.getIsBroadcastByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBroadcast;
			}
			return 0;
		};
		 /**  礼包原价 */
		 PrivilegeVipBaseCfgData.getOldPriceByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};
		 /**  礼包需要的道具 */
		 PrivilegeVipBaseCfgData.getNeedItemByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加礼包 */
		 PrivilegeVipBaseCfgData.getAddPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPacket;
			}
			return ""
		};
		 /**  至尊月卡每日礼包 */
		 PrivilegeVipBaseCfgData.getMonthPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthPacket;
			}
			return ""
		};
		 /**  增加特权 */
		 PrivilegeVipBaseCfgData.getAddPrivilegeByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  内容 */
		 PrivilegeVipBaseCfgData.getContentByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};
		 /**  增加头像框 */
		 PrivilegeVipBaseCfgData.getAddHeadIconByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHeadIcon;
			}
			return 0;
		};

	return PrivilegeVipBaseCfgData
}());
	
cfg.PrivilegeVipBaseCfgData = PrivilegeVipBaseCfgData;
var PrivilegeCardBaseCfgData  = /** @class */ (function () {
	function PrivilegeCardBaseCfgData () {
	}
	PrivilegeCardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeCardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeCardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cardID");
		};
		 /**  特权卡_emPrivilegeCard */
		 PrivilegeCardBaseCfgData.getCardIDByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeCardBaseCfgData.getNameByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要充值 */
		 PrivilegeCardBaseCfgData.getNeedMoneyByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  有效天数 */
		 PrivilegeCardBaseCfgData.getExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDays;
			}
			return 0;
		};
		 /**  特权ID特权1_值;特权2_值; */
		 PrivilegeCardBaseCfgData.getAddPrivilegeByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  充值金额有效时间 */
		 PrivilegeCardBaseCfgData.getRechargeExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rechargeExpireDays;
			}
			return 0;
		};

	return PrivilegeCardBaseCfgData
}());
	
cfg.PrivilegeCardBaseCfgData = PrivilegeCardBaseCfgData;
var PrivilegeDailyFirstChargeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyFirstChargeBaseCfgData () {
	}
	PrivilegeDailyFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "needLevel");
		};
		 /**  等级要求 */
		 PrivilegeDailyFirstChargeBaseCfgData.getNeedLevelByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  奖励物品 */
		 PrivilegeDailyFirstChargeBaseCfgData.getAddItemByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyFirstChargeBaseCfgData
}());
	
cfg.PrivilegeDailyFirstChargeBaseCfgData = PrivilegeDailyFirstChargeBaseCfgData;
var PrivilegeBaseCfgData  = /** @class */ (function () {
	function PrivilegeBaseCfgData () {
	}
	PrivilegeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "privilegeType");
		};
		 /**  特权类型_emPrivilegeType */
		 PrivilegeBaseCfgData.getPrivilegeTypeByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.privilegeType;
			}
			return 0;
		};
		 /**  名字 */
		 PrivilegeBaseCfgData.getNameByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return PrivilegeBaseCfgData
}());
	
cfg.PrivilegeBaseCfgData = PrivilegeBaseCfgData;
var PrivilegeCardBaseCfgData  = /** @class */ (function () {
	function PrivilegeCardBaseCfgData () {
	}
	PrivilegeCardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeCardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeCardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cardID");
		};
		 /**  特权卡_emPrivilegeCard */
		 PrivilegeCardBaseCfgData.getCardIDByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeCardBaseCfgData.getNameByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要充值 */
		 PrivilegeCardBaseCfgData.getNeedMoneyByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  有效天数 */
		 PrivilegeCardBaseCfgData.getExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDays;
			}
			return 0;
		};
		 /**  特权ID特权1_值;特权2_值; */
		 PrivilegeCardBaseCfgData.getAddPrivilegeByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  充值金额有效时间 */
		 PrivilegeCardBaseCfgData.getRechargeExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rechargeExpireDays;
			}
			return 0;
		};

	return PrivilegeCardBaseCfgData
}());
	
cfg.PrivilegeCardBaseCfgData = PrivilegeCardBaseCfgData;
var PrivilegeBaseCfgData  = /** @class */ (function () {
	function PrivilegeBaseCfgData () {
	}
	PrivilegeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "privilegeType");
		};
		 /**  特权类型_emPrivilegeType */
		 PrivilegeBaseCfgData.getPrivilegeTypeByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.privilegeType;
			}
			return 0;
		};
		 /**  名字 */
		 PrivilegeBaseCfgData.getNameByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return PrivilegeBaseCfgData
}());
	
cfg.PrivilegeBaseCfgData = PrivilegeBaseCfgData;
var PrivilegeShopBaseCfgData  = /** @class */ (function () {
	function PrivilegeShopBaseCfgData () {
	}
	PrivilegeShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PrivilegeShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeShopBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrivilegeShopBaseCfgData.getDescribeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  需要道具 */
		 PrivilegeShopBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 PrivilegeShopBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  对应特权cardid */
		 PrivilegeShopBaseCfgData.getCardIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  补偿奖励 */
		 PrivilegeShopBaseCfgData.getCompensationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compensation;
			}
			return ""
		};

	return PrivilegeShopBaseCfgData
}());
	
cfg.PrivilegeShopBaseCfgData = PrivilegeShopBaseCfgData;
var PrivilegeVipBaseCfgData  = /** @class */ (function () {
	function PrivilegeVipBaseCfgData () {
	}
	PrivilegeVipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeVipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeVipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "vipLevel");
		};
		 /**  vip等级 */
		 PrivilegeVipBaseCfgData.getVipLevelByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vipLevel;
			}
			return 0;
		};
		 /**  需要最低经验（充值元宝） */
		 PrivilegeVipBaseCfgData.getNeedExpByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  是否广播（1广播） */
		 PrivilegeVipBaseCfgData.getIsBroadcastByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBroadcast;
			}
			return 0;
		};
		 /**  礼包原价 */
		 PrivilegeVipBaseCfgData.getOldPriceByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};
		 /**  礼包需要的道具 */
		 PrivilegeVipBaseCfgData.getNeedItemByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加礼包 */
		 PrivilegeVipBaseCfgData.getAddPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPacket;
			}
			return ""
		};
		 /**  至尊月卡每日礼包 */
		 PrivilegeVipBaseCfgData.getMonthPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthPacket;
			}
			return ""
		};
		 /**  增加特权 */
		 PrivilegeVipBaseCfgData.getAddPrivilegeByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  内容 */
		 PrivilegeVipBaseCfgData.getContentByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};
		 /**  增加头像框 */
		 PrivilegeVipBaseCfgData.getAddHeadIconByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHeadIcon;
			}
			return 0;
		};

	return PrivilegeVipBaseCfgData
}());
	
cfg.PrivilegeVipBaseCfgData = PrivilegeVipBaseCfgData;
var PrivilegeDailyFirstChargeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyFirstChargeBaseCfgData () {
	}
	PrivilegeDailyFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "needLevel");
		};
		 /**  等级要求 */
		 PrivilegeDailyFirstChargeBaseCfgData.getNeedLevelByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  奖励物品 */
		 PrivilegeDailyFirstChargeBaseCfgData.getAddItemByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyFirstChargeBaseCfgData
}());
	
cfg.PrivilegeDailyFirstChargeBaseCfgData = PrivilegeDailyFirstChargeBaseCfgData;
var PrivilegeCardBaseCfgData  = /** @class */ (function () {
	function PrivilegeCardBaseCfgData () {
	}
	PrivilegeCardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeCardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeCardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cardID");
		};
		 /**  特权卡_emPrivilegeCard */
		 PrivilegeCardBaseCfgData.getCardIDByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeCardBaseCfgData.getNameByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要充值 */
		 PrivilegeCardBaseCfgData.getNeedMoneyByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needMoney;
			}
			return 0;
		};
		 /**  有效天数 */
		 PrivilegeCardBaseCfgData.getExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.expireDays;
			}
			return 0;
		};
		 /**  特权ID特权1_值;特权2_值; */
		 PrivilegeCardBaseCfgData.getAddPrivilegeByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  充值金额有效时间 */
		 PrivilegeCardBaseCfgData.getRechargeExpireDaysByCardID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rechargeExpireDays;
			}
			return 0;
		};

	return PrivilegeCardBaseCfgData
}());
	
cfg.PrivilegeCardBaseCfgData = PrivilegeCardBaseCfgData;
var PrivilegeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyPrizeBaseCfgData () {
	}
	PrivilegeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPrivilegeDailyPacket */
		 PrivilegeDailyPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要特权卡_emPrivilegeCard */
		 PrivilegeDailyPrizeBaseCfgData.getNeedCardIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needCardID;
			}
			return 0;
		};
		 /**  增加道具 */
		 PrivilegeDailyPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyPrizeBaseCfgData
}());
	
cfg.PrivilegeDailyPrizeBaseCfgData = PrivilegeDailyPrizeBaseCfgData;
var PrivilegeDailyFirstChargeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyFirstChargeBaseCfgData () {
	}
	PrivilegeDailyFirstChargeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyFirstChargeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyFirstChargeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "needLevel");
		};
		 /**  等级要求 */
		 PrivilegeDailyFirstChargeBaseCfgData.getNeedLevelByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  奖励物品 */
		 PrivilegeDailyFirstChargeBaseCfgData.getAddItemByNeedLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyFirstChargeBaseCfgData
}());
	
cfg.PrivilegeDailyFirstChargeBaseCfgData = PrivilegeDailyFirstChargeBaseCfgData;
var PrivilegeBaseCfgData  = /** @class */ (function () {
	function PrivilegeBaseCfgData () {
	}
	PrivilegeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "privilegeType");
		};
		 /**  特权类型_emPrivilegeType */
		 PrivilegeBaseCfgData.getPrivilegeTypeByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.privilegeType;
			}
			return 0;
		};
		 /**  名字 */
		 PrivilegeBaseCfgData.getNameByPrivilegeType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return PrivilegeBaseCfgData
}());
	
cfg.PrivilegeBaseCfgData = PrivilegeBaseCfgData;
var PrivilegeVipBaseCfgData  = /** @class */ (function () {
	function PrivilegeVipBaseCfgData () {
	}
	PrivilegeVipBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeVipBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeVipBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "vipLevel");
		};
		 /**  vip等级 */
		 PrivilegeVipBaseCfgData.getVipLevelByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vipLevel;
			}
			return 0;
		};
		 /**  需要最低经验（充值元宝） */
		 PrivilegeVipBaseCfgData.getNeedExpByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return 0;
		};
		 /**  是否广播（1广播） */
		 PrivilegeVipBaseCfgData.getIsBroadcastByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBroadcast;
			}
			return 0;
		};
		 /**  礼包原价 */
		 PrivilegeVipBaseCfgData.getOldPriceByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.oldPrice;
			}
			return 0;
		};
		 /**  礼包需要的道具 */
		 PrivilegeVipBaseCfgData.getNeedItemByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加礼包 */
		 PrivilegeVipBaseCfgData.getAddPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPacket;
			}
			return ""
		};
		 /**  至尊月卡每日礼包 */
		 PrivilegeVipBaseCfgData.getMonthPacketByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthPacket;
			}
			return ""
		};
		 /**  增加特权 */
		 PrivilegeVipBaseCfgData.getAddPrivilegeByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrivilege;
			}
			return ""
		};
		 /**  内容 */
		 PrivilegeVipBaseCfgData.getContentByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.content;
			}
			return ""
		};
		 /**  增加头像框 */
		 PrivilegeVipBaseCfgData.getAddHeadIconByVipLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHeadIcon;
			}
			return 0;
		};

	return PrivilegeVipBaseCfgData
}());
	
cfg.PrivilegeVipBaseCfgData = PrivilegeVipBaseCfgData;
var PrivilegeShopBaseCfgData  = /** @class */ (function () {
	function PrivilegeShopBaseCfgData () {
	}
	PrivilegeShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 PrivilegeShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  名称 */
		 PrivilegeShopBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrivilegeShopBaseCfgData.getDescribeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  需要道具 */
		 PrivilegeShopBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  增加道具 */
		 PrivilegeShopBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  对应特权cardid */
		 PrivilegeShopBaseCfgData.getCardIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cardID;
			}
			return 0;
		};
		 /**  补偿奖励 */
		 PrivilegeShopBaseCfgData.getCompensationByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.compensation;
			}
			return ""
		};

	return PrivilegeShopBaseCfgData
}());
	
cfg.PrivilegeShopBaseCfgData = PrivilegeShopBaseCfgData;
var PrivilegeDailyPrizeBaseCfgData  = /** @class */ (function () {
	function PrivilegeDailyPrizeBaseCfgData () {
	}
	PrivilegeDailyPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrivilegeDailyPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrivilegeDailyPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emPrivilegeDailyPacket */
		 PrivilegeDailyPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要特权卡_emPrivilegeCard */
		 PrivilegeDailyPrizeBaseCfgData.getNeedCardIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needCardID;
			}
			return 0;
		};
		 /**  增加道具 */
		 PrivilegeDailyPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return PrivilegeDailyPrizeBaseCfgData
}());
	
cfg.PrivilegeDailyPrizeBaseCfgData = PrivilegeDailyPrizeBaseCfgData;
var PrizeBaseCfgData  = /** @class */ (function () {
	function PrizeBaseCfgData () {
	}
	PrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 PrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};

	return PrizeBaseCfgData
}());
	
cfg.PrizeBaseCfgData = PrizeBaseCfgData;
var PrizeCommonPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeCommonPrizeBaseCfgData () {
	}
	PrizeCommonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeCommonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeCommonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID_emCommonPrizeType */
		 PrizeCommonPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  道具奖励ID_数量;ID_数量; */
		 PrizeCommonPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字 */
		 PrizeCommonPrizeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrizeCommonPrizeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return PrizeCommonPrizeBaseCfgData
}());
	
cfg.PrizeCommonPrizeBaseCfgData = PrizeCommonPrizeBaseCfgData;
var PrizeFriendPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeFriendPrizeBaseCfgData () {
	}
	PrizeFriendPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeFriendPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeFriendPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PrizeFriendPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return PrizeFriendPrizeBaseCfgData
}());
	
cfg.PrizeFriendPrizeBaseCfgData = PrizeFriendPrizeBaseCfgData;
var PrizeBaseCfgData  = /** @class */ (function () {
	function PrizeBaseCfgData () {
	}
	PrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 PrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};

	return PrizeBaseCfgData
}());
	
cfg.PrizeBaseCfgData = PrizeBaseCfgData;
var PrizeBaseCfgData  = /** @class */ (function () {
	function PrizeBaseCfgData () {
	}
	PrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "prizeID");
		};
		 /**  奖励ID */
		 PrizeBaseCfgData.getPrizeIDByPrizeID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeID;
			}
			return 0;
		};

	return PrizeBaseCfgData
}());
	
cfg.PrizeBaseCfgData = PrizeBaseCfgData;
var PrizeFriendPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeFriendPrizeBaseCfgData () {
	}
	PrizeFriendPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeFriendPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeFriendPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PrizeFriendPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return PrizeFriendPrizeBaseCfgData
}());
	
cfg.PrizeFriendPrizeBaseCfgData = PrizeFriendPrizeBaseCfgData;
var PrizeCommonPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeCommonPrizeBaseCfgData () {
	}
	PrizeCommonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeCommonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeCommonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID_emCommonPrizeType */
		 PrizeCommonPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  道具奖励ID_数量;ID_数量; */
		 PrizeCommonPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字 */
		 PrizeCommonPrizeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrizeCommonPrizeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return PrizeCommonPrizeBaseCfgData
}());
	
cfg.PrizeCommonPrizeBaseCfgData = PrizeCommonPrizeBaseCfgData;
var PrizeFriendPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeFriendPrizeBaseCfgData () {
	}
	PrizeFriendPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeFriendPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeFriendPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  次数 */
		 PrizeFriendPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return PrizeFriendPrizeBaseCfgData
}());
	
cfg.PrizeFriendPrizeBaseCfgData = PrizeFriendPrizeBaseCfgData;
var PrizeCommonPrizeBaseCfgData  = /** @class */ (function () {
	function PrizeCommonPrizeBaseCfgData () {
	}
	PrizeCommonPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	PrizeCommonPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		PrizeCommonPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID_emCommonPrizeType */
		 PrizeCommonPrizeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  道具奖励ID_数量;ID_数量; */
		 PrizeCommonPrizeBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  按钮文字 */
		 PrizeCommonPrizeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  描述 */
		 PrizeCommonPrizeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return PrizeCommonPrizeBaseCfgData
}());
	
cfg.PrizeCommonPrizeBaseCfgData = PrizeCommonPrizeBaseCfgData;
var ResonanceStarBaseCfgData  = /** @class */ (function () {
	function ResonanceStarBaseCfgData () {
	}
	ResonanceStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 ResonanceStarBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到下一级需要消耗道具数量 */
		 ResonanceStarBaseCfgData.getNeedItemCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ResonanceStarBaseCfgData
}());
	
cfg.ResonanceStarBaseCfgData = ResonanceStarBaseCfgData;
var ResonanceGridBaseCfgData  = /** @class */ (function () {
	function ResonanceGridBaseCfgData () {
	}
	ResonanceGridBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceGridBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceGridBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 ResonanceGridBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  格子索引 */
		 ResonanceGridBaseCfgData.getGridIdxByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gridIdx;
			}
			return 0;
		};
		 /**  开启条件 */
		 ResonanceGridBaseCfgData.getConditionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  消耗道具 */
		 ResonanceGridBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ResonanceGridBaseCfgData
}());
	
cfg.ResonanceGridBaseCfgData = ResonanceGridBaseCfgData;
var ResonanceGridBaseCfgData  = /** @class */ (function () {
	function ResonanceGridBaseCfgData () {
	}
	ResonanceGridBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceGridBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceGridBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 ResonanceGridBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  格子索引 */
		 ResonanceGridBaseCfgData.getGridIdxByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gridIdx;
			}
			return 0;
		};
		 /**  开启条件 */
		 ResonanceGridBaseCfgData.getConditionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  消耗道具 */
		 ResonanceGridBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ResonanceGridBaseCfgData
}());
	
cfg.ResonanceGridBaseCfgData = ResonanceGridBaseCfgData;
var ResonanceCommonBaseCfgData  = /** @class */ (function () {
	function ResonanceCommonBaseCfgData () {
	}
	ResonanceCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cooling");
		};
		 /**  共鸣冷却(单位秒) */
		 ResonanceCommonBaseCfgData.getCoolingByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cooling;
			}
			return 0;
		};
		 /**  共鸣冷却重置消耗（每小时x钻石） */
		 ResonanceCommonBaseCfgData.getCoolingConsumeByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolingConsume;
			}
			return 0;
		};
		 /**  供奉最小星级 */
		 ResonanceCommonBaseCfgData.getMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  放置最低星级 */
		 ResonanceCommonBaseCfgData.getUpMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upMinStar;
			}
			return 0;
		};

	return ResonanceCommonBaseCfgData
}());
	
cfg.ResonanceCommonBaseCfgData = ResonanceCommonBaseCfgData;
var ResonanceStarBaseCfgData  = /** @class */ (function () {
	function ResonanceStarBaseCfgData () {
	}
	ResonanceStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 ResonanceStarBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到下一级需要消耗道具数量 */
		 ResonanceStarBaseCfgData.getNeedItemCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ResonanceStarBaseCfgData
}());
	
cfg.ResonanceStarBaseCfgData = ResonanceStarBaseCfgData;
var ResonanceGridBaseCfgData  = /** @class */ (function () {
	function ResonanceGridBaseCfgData () {
	}
	ResonanceGridBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceGridBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceGridBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 ResonanceGridBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  格子索引 */
		 ResonanceGridBaseCfgData.getGridIdxByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gridIdx;
			}
			return 0;
		};
		 /**  开启条件 */
		 ResonanceGridBaseCfgData.getConditionByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  消耗道具 */
		 ResonanceGridBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return ResonanceGridBaseCfgData
}());
	
cfg.ResonanceGridBaseCfgData = ResonanceGridBaseCfgData;
var ResonanceStarBaseCfgData  = /** @class */ (function () {
	function ResonanceStarBaseCfgData () {
	}
	ResonanceStarBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceStarBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceStarBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星级 */
		 ResonanceStarBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  升到下一级需要消耗道具数量 */
		 ResonanceStarBaseCfgData.getNeedItemCountByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemCount;
			}
			return 0;
		};

	return ResonanceStarBaseCfgData
}());
	
cfg.ResonanceStarBaseCfgData = ResonanceStarBaseCfgData;
var ResonanceCommonBaseCfgData  = /** @class */ (function () {
	function ResonanceCommonBaseCfgData () {
	}
	ResonanceCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cooling");
		};
		 /**  共鸣冷却(单位秒) */
		 ResonanceCommonBaseCfgData.getCoolingByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cooling;
			}
			return 0;
		};
		 /**  共鸣冷却重置消耗（每小时x钻石） */
		 ResonanceCommonBaseCfgData.getCoolingConsumeByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolingConsume;
			}
			return 0;
		};
		 /**  供奉最小星级 */
		 ResonanceCommonBaseCfgData.getMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  放置最低星级 */
		 ResonanceCommonBaseCfgData.getUpMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upMinStar;
			}
			return 0;
		};

	return ResonanceCommonBaseCfgData
}());
	
cfg.ResonanceCommonBaseCfgData = ResonanceCommonBaseCfgData;
var ResonanceCommonBaseCfgData  = /** @class */ (function () {
	function ResonanceCommonBaseCfgData () {
	}
	ResonanceCommonBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResonanceCommonBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResonanceCommonBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "cooling");
		};
		 /**  共鸣冷却(单位秒) */
		 ResonanceCommonBaseCfgData.getCoolingByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cooling;
			}
			return 0;
		};
		 /**  共鸣冷却重置消耗（每小时x钻石） */
		 ResonanceCommonBaseCfgData.getCoolingConsumeByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolingConsume;
			}
			return 0;
		};
		 /**  供奉最小星级 */
		 ResonanceCommonBaseCfgData.getMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minStar;
			}
			return 0;
		};
		 /**  放置最低星级 */
		 ResonanceCommonBaseCfgData.getUpMinStarByCooling = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.upMinStar;
			}
			return 0;
		};

	return ResonanceCommonBaseCfgData
}());
	
cfg.ResonanceCommonBaseCfgData = ResonanceCommonBaseCfgData;
var RiskEventBaseCfgData  = /** @class */ (function () {
	function RiskEventBaseCfgData () {
	}
	RiskEventBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskEventBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskEventBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskEventBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  对方类型 */
		 RiskEventBaseCfgData.getTargetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  题目 */
		 RiskEventBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1扣除消耗 */
		 RiskEventBaseCfgData.getNeedExpendByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExpend;
			}
			return ""
		};
		 /**  选项1 */
		 RiskEventBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskEventBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  答案 */
		 RiskEventBaseCfgData.getResultByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};
		 /**  答对时说的话 */
		 RiskEventBaseCfgData.getTrueDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueDes;
			}
			return ""
		};
		 /**  答错时说的话 */
		 RiskEventBaseCfgData.getFaildDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.faildDes;
			}
			return ""
		};

	return RiskEventBaseCfgData
}());
	
cfg.RiskEventBaseCfgData = RiskEventBaseCfgData;
var RiskGuardBaseCfgData  = /** @class */ (function () {
	function RiskGuardBaseCfgData () {
	}
	RiskGuardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 RiskGuardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  层数 */
		 RiskGuardBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  守卫序号 */
		 RiskGuardBaseCfgData.getGuardIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 RiskGuardBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  是否自动开启 */
		 RiskGuardBaseCfgData.getIsAutoOpenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoOpen;
			}
			return 0;
		};

	return RiskGuardBaseCfgData
}());
	
cfg.RiskGuardBaseCfgData = RiskGuardBaseCfgData;
var RiskRefreshBaseCfgData  = /** @class */ (function () {
	function RiskRefreshBaseCfgData () {
	}
	RiskRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emRiskRefreshType */
		 RiskRefreshBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  是否自动拾取 */
		 RiskRefreshBaseCfgData.getIsAutoCollectByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoCollect;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskRefreshBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskRefreshBaseCfgData
}());
	
cfg.RiskRefreshBaseCfgData = RiskRefreshBaseCfgData;
var RiskShopBaseCfgData  = /** @class */ (function () {
	function RiskShopBaseCfgData () {
	}
	RiskShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  商品索引 */
		 RiskShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具信息 */
		 RiskShopBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  价格 */
		 RiskShopBaseCfgData.getSellPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrize;
			}
			return ""
		};
		 /**  折扣 */
		 RiskShopBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return RiskShopBaseCfgData
}());
	
cfg.RiskShopBaseCfgData = RiskShopBaseCfgData;
var RiskGridOpenBaseCfgData  = /** @class */ (function () {
	function RiskGridOpenBaseCfgData () {
	}
	RiskGridOpenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGridOpenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGridOpenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "guardIndex");
		};
		 /**  守卫序号 */
		 RiskGridOpenBaseCfgData.getGuardIndexByGuardIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};

	return RiskGridOpenBaseCfgData
}());
	
cfg.RiskGridOpenBaseCfgData = RiskGridOpenBaseCfgData;
var RiskGuardPrizeBaseCfgData  = /** @class */ (function () {
	function RiskGuardPrizeBaseCfgData () {
	}
	RiskGuardPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  个数 */
		 RiskGuardPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskGuardPrizeBaseCfgData.getAddItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskGuardPrizeBaseCfgData
}());
	
cfg.RiskGuardPrizeBaseCfgData = RiskGuardPrizeBaseCfgData;
var RiskDialogBaseCfgData  = /** @class */ (function () {
	function RiskDialogBaseCfgData () {
	}
	RiskDialogBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskDialogBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskDialogBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskDialogBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskDialogBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskDialogBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskDialogBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  选项3 */
		 RiskDialogBaseCfgData.getOption3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3;
			}
			return ""
		};
		 /**  选项1时说的话 */
		 RiskDialogBaseCfgData.getOption1DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1Des;
			}
			return ""
		};
		 /**  选项2时说的话 */
		 RiskDialogBaseCfgData.getOption2DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2Des;
			}
			return ""
		};
		 /**  选项3时说的话 */
		 RiskDialogBaseCfgData.getOption3DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3Des;
			}
			return ""
		};

	return RiskDialogBaseCfgData
}());
	
cfg.RiskDialogBaseCfgData = RiskDialogBaseCfgData;
var RiskEventBaseCfgData  = /** @class */ (function () {
	function RiskEventBaseCfgData () {
	}
	RiskEventBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskEventBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskEventBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskEventBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  对方类型 */
		 RiskEventBaseCfgData.getTargetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  题目 */
		 RiskEventBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1扣除消耗 */
		 RiskEventBaseCfgData.getNeedExpendByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExpend;
			}
			return ""
		};
		 /**  选项1 */
		 RiskEventBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskEventBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  答案 */
		 RiskEventBaseCfgData.getResultByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};
		 /**  答对时说的话 */
		 RiskEventBaseCfgData.getTrueDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueDes;
			}
			return ""
		};
		 /**  答错时说的话 */
		 RiskEventBaseCfgData.getFaildDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.faildDes;
			}
			return ""
		};

	return RiskEventBaseCfgData
}());
	
cfg.RiskEventBaseCfgData = RiskEventBaseCfgData;
var RiskFingerPrizeBaseCfgData  = /** @class */ (function () {
	function RiskFingerPrizeBaseCfgData () {
	}
	RiskFingerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selectType");
		};
		 /**  选择类型 */
		 RiskFingerPrizeBaseCfgData.getSelectTypeBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selectType;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskFingerPrizeBaseCfgData.getNeedItemBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskFingerPrizeBaseCfgData
}());
	
cfg.RiskFingerPrizeBaseCfgData = RiskFingerPrizeBaseCfgData;
var RiskQuestionBaseCfgData  = /** @class */ (function () {
	function RiskQuestionBaseCfgData () {
	}
	RiskQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskQuestionBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskQuestionBaseCfgData.getOptionAByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionA;
			}
			return ""
		};
		 /**  选项2 */
		 RiskQuestionBaseCfgData.getOptionBByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionB;
			}
			return ""
		};
		 /**  选项3 */
		 RiskQuestionBaseCfgData.getOptionCByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionC;
			}
			return ""
		};
		 /**  选项4 */
		 RiskQuestionBaseCfgData.getOptionDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionD;
			}
			return ""
		};

	return RiskQuestionBaseCfgData
}());
	
cfg.RiskQuestionBaseCfgData = RiskQuestionBaseCfgData;
var RiskShopBaseCfgData  = /** @class */ (function () {
	function RiskShopBaseCfgData () {
	}
	RiskShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  商品索引 */
		 RiskShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具信息 */
		 RiskShopBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  价格 */
		 RiskShopBaseCfgData.getSellPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrize;
			}
			return ""
		};
		 /**  折扣 */
		 RiskShopBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return RiskShopBaseCfgData
}());
	
cfg.RiskShopBaseCfgData = RiskShopBaseCfgData;
var RiskGridOpenBaseCfgData  = /** @class */ (function () {
	function RiskGridOpenBaseCfgData () {
	}
	RiskGridOpenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGridOpenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGridOpenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "guardIndex");
		};
		 /**  守卫序号 */
		 RiskGridOpenBaseCfgData.getGuardIndexByGuardIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};

	return RiskGridOpenBaseCfgData
}());
	
cfg.RiskGridOpenBaseCfgData = RiskGridOpenBaseCfgData;
var RiskGuardBaseCfgData  = /** @class */ (function () {
	function RiskGuardBaseCfgData () {
	}
	RiskGuardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 RiskGuardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  层数 */
		 RiskGuardBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  守卫序号 */
		 RiskGuardBaseCfgData.getGuardIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 RiskGuardBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  是否自动开启 */
		 RiskGuardBaseCfgData.getIsAutoOpenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoOpen;
			}
			return 0;
		};

	return RiskGuardBaseCfgData
}());
	
cfg.RiskGuardBaseCfgData = RiskGuardBaseCfgData;
var RiskRefreshBaseCfgData  = /** @class */ (function () {
	function RiskRefreshBaseCfgData () {
	}
	RiskRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emRiskRefreshType */
		 RiskRefreshBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  是否自动拾取 */
		 RiskRefreshBaseCfgData.getIsAutoCollectByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoCollect;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskRefreshBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskRefreshBaseCfgData
}());
	
cfg.RiskRefreshBaseCfgData = RiskRefreshBaseCfgData;
var RiskCollectRandprizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectRandprizeBaseCfgData () {
	}
	RiskCollectRandprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectRandprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectRandprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectRandprizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectRandprizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectRandprizeBaseCfgData
}());
	
cfg.RiskCollectRandprizeBaseCfgData = RiskCollectRandprizeBaseCfgData;
var RiskQuestionBaseCfgData  = /** @class */ (function () {
	function RiskQuestionBaseCfgData () {
	}
	RiskQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskQuestionBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskQuestionBaseCfgData.getOptionAByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionA;
			}
			return ""
		};
		 /**  选项2 */
		 RiskQuestionBaseCfgData.getOptionBByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionB;
			}
			return ""
		};
		 /**  选项3 */
		 RiskQuestionBaseCfgData.getOptionCByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionC;
			}
			return ""
		};
		 /**  选项4 */
		 RiskQuestionBaseCfgData.getOptionDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionD;
			}
			return ""
		};

	return RiskQuestionBaseCfgData
}());
	
cfg.RiskQuestionBaseCfgData = RiskQuestionBaseCfgData;
var RiskFingerResultBaseCfgData  = /** @class */ (function () {
	function RiskFingerResultBaseCfgData () {
	}
	RiskFingerResultBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerResultBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerResultBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selfType");
		};
		 /**  自己类型 */
		 RiskFingerResultBaseCfgData.getSelfTypeBySelfType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selfType;
			}
			return 0;
		};

	return RiskFingerResultBaseCfgData
}());
	
cfg.RiskFingerResultBaseCfgData = RiskFingerResultBaseCfgData;
var RiskMonsterNewBaseCfgData  = /** @class */ (function () {
	function RiskMonsterNewBaseCfgData () {
	}
	RiskMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 RiskMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 RiskMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 RiskMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};

	return RiskMonsterNewBaseCfgData
}());
	
cfg.RiskMonsterNewBaseCfgData = RiskMonsterNewBaseCfgData;
var RiskCollectSkillBaseCfgData  = /** @class */ (function () {
	function RiskCollectSkillBaseCfgData () {
	}
	RiskCollectSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 RiskCollectSkillBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return RiskCollectSkillBaseCfgData
}());
	
cfg.RiskCollectSkillBaseCfgData = RiskCollectSkillBaseCfgData;
var RiskCollectPrizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectPrizeBaseCfgData () {
	}
	RiskCollectPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  层数 */
		 RiskCollectPrizeBaseCfgData.getStageByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectPrizeBaseCfgData
}());
	
cfg.RiskCollectPrizeBaseCfgData = RiskCollectPrizeBaseCfgData;
var RiskDialogBaseCfgData  = /** @class */ (function () {
	function RiskDialogBaseCfgData () {
	}
	RiskDialogBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskDialogBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskDialogBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskDialogBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskDialogBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskDialogBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskDialogBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  选项3 */
		 RiskDialogBaseCfgData.getOption3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3;
			}
			return ""
		};
		 /**  选项1时说的话 */
		 RiskDialogBaseCfgData.getOption1DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1Des;
			}
			return ""
		};
		 /**  选项2时说的话 */
		 RiskDialogBaseCfgData.getOption2DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2Des;
			}
			return ""
		};
		 /**  选项3时说的话 */
		 RiskDialogBaseCfgData.getOption3DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3Des;
			}
			return ""
		};

	return RiskDialogBaseCfgData
}());
	
cfg.RiskDialogBaseCfgData = RiskDialogBaseCfgData;
var RiskQuestionBaseCfgData  = /** @class */ (function () {
	function RiskQuestionBaseCfgData () {
	}
	RiskQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskQuestionBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskQuestionBaseCfgData.getOptionAByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionA;
			}
			return ""
		};
		 /**  选项2 */
		 RiskQuestionBaseCfgData.getOptionBByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionB;
			}
			return ""
		};
		 /**  选项3 */
		 RiskQuestionBaseCfgData.getOptionCByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionC;
			}
			return ""
		};
		 /**  选项4 */
		 RiskQuestionBaseCfgData.getOptionDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.optionD;
			}
			return ""
		};

	return RiskQuestionBaseCfgData
}());
	
cfg.RiskQuestionBaseCfgData = RiskQuestionBaseCfgData;
var RiskFingerPrizeBaseCfgData  = /** @class */ (function () {
	function RiskFingerPrizeBaseCfgData () {
	}
	RiskFingerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selectType");
		};
		 /**  选择类型 */
		 RiskFingerPrizeBaseCfgData.getSelectTypeBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selectType;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskFingerPrizeBaseCfgData.getNeedItemBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskFingerPrizeBaseCfgData
}());
	
cfg.RiskFingerPrizeBaseCfgData = RiskFingerPrizeBaseCfgData;
var RiskFingerResultBaseCfgData  = /** @class */ (function () {
	function RiskFingerResultBaseCfgData () {
	}
	RiskFingerResultBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerResultBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerResultBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selfType");
		};
		 /**  自己类型 */
		 RiskFingerResultBaseCfgData.getSelfTypeBySelfType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selfType;
			}
			return 0;
		};

	return RiskFingerResultBaseCfgData
}());
	
cfg.RiskFingerResultBaseCfgData = RiskFingerResultBaseCfgData;
var RiskCollectRandprizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectRandprizeBaseCfgData () {
	}
	RiskCollectRandprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectRandprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectRandprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectRandprizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectRandprizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectRandprizeBaseCfgData
}());
	
cfg.RiskCollectRandprizeBaseCfgData = RiskCollectRandprizeBaseCfgData;
var RiskCollectPrizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectPrizeBaseCfgData () {
	}
	RiskCollectPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  层数 */
		 RiskCollectPrizeBaseCfgData.getStageByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectPrizeBaseCfgData
}());
	
cfg.RiskCollectPrizeBaseCfgData = RiskCollectPrizeBaseCfgData;
var RiskGuardPrizeBaseCfgData  = /** @class */ (function () {
	function RiskGuardPrizeBaseCfgData () {
	}
	RiskGuardPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  个数 */
		 RiskGuardPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskGuardPrizeBaseCfgData.getAddItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskGuardPrizeBaseCfgData
}());
	
cfg.RiskGuardPrizeBaseCfgData = RiskGuardPrizeBaseCfgData;
var RiskGridOpenBaseCfgData  = /** @class */ (function () {
	function RiskGridOpenBaseCfgData () {
	}
	RiskGridOpenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGridOpenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGridOpenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "guardIndex");
		};
		 /**  守卫序号 */
		 RiskGridOpenBaseCfgData.getGuardIndexByGuardIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};

	return RiskGridOpenBaseCfgData
}());
	
cfg.RiskGridOpenBaseCfgData = RiskGridOpenBaseCfgData;
var RiskShopBaseCfgData  = /** @class */ (function () {
	function RiskShopBaseCfgData () {
	}
	RiskShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  商品索引 */
		 RiskShopBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  道具信息 */
		 RiskShopBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  价格 */
		 RiskShopBaseCfgData.getSellPrizeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellPrize;
			}
			return ""
		};
		 /**  折扣 */
		 RiskShopBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};

	return RiskShopBaseCfgData
}());
	
cfg.RiskShopBaseCfgData = RiskShopBaseCfgData;
var RiskRefreshBaseCfgData  = /** @class */ (function () {
	function RiskRefreshBaseCfgData () {
	}
	RiskRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型_emRiskRefreshType */
		 RiskRefreshBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  是否自动拾取 */
		 RiskRefreshBaseCfgData.getIsAutoCollectByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoCollect;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskRefreshBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskRefreshBaseCfgData
}());
	
cfg.RiskRefreshBaseCfgData = RiskRefreshBaseCfgData;
var RiskGuardBaseCfgData  = /** @class */ (function () {
	function RiskGuardBaseCfgData () {
	}
	RiskGuardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 RiskGuardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  层数 */
		 RiskGuardBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  守卫序号 */
		 RiskGuardBaseCfgData.getGuardIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guardIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 RiskGuardBaseCfgData.getMonsterByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  是否自动开启 */
		 RiskGuardBaseCfgData.getIsAutoOpenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isAutoOpen;
			}
			return 0;
		};

	return RiskGuardBaseCfgData
}());
	
cfg.RiskGuardBaseCfgData = RiskGuardBaseCfgData;
var RiskCollectSkillBaseCfgData  = /** @class */ (function () {
	function RiskCollectSkillBaseCfgData () {
	}
	RiskCollectSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 RiskCollectSkillBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return RiskCollectSkillBaseCfgData
}());
	
cfg.RiskCollectSkillBaseCfgData = RiskCollectSkillBaseCfgData;
var RiskCollectPrizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectPrizeBaseCfgData () {
	}
	RiskCollectPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectPrizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  层数 */
		 RiskCollectPrizeBaseCfgData.getStageByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectPrizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectPrizeBaseCfgData
}());
	
cfg.RiskCollectPrizeBaseCfgData = RiskCollectPrizeBaseCfgData;
var RiskDialogBaseCfgData  = /** @class */ (function () {
	function RiskDialogBaseCfgData () {
	}
	RiskDialogBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskDialogBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskDialogBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskDialogBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  题目 */
		 RiskDialogBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1 */
		 RiskDialogBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskDialogBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  选项3 */
		 RiskDialogBaseCfgData.getOption3ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3;
			}
			return ""
		};
		 /**  选项1时说的话 */
		 RiskDialogBaseCfgData.getOption1DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1Des;
			}
			return ""
		};
		 /**  选项2时说的话 */
		 RiskDialogBaseCfgData.getOption2DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2Des;
			}
			return ""
		};
		 /**  选项3时说的话 */
		 RiskDialogBaseCfgData.getOption3DesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option3Des;
			}
			return ""
		};

	return RiskDialogBaseCfgData
}());
	
cfg.RiskDialogBaseCfgData = RiskDialogBaseCfgData;
var RiskEventBaseCfgData  = /** @class */ (function () {
	function RiskEventBaseCfgData () {
	}
	RiskEventBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskEventBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskEventBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 RiskEventBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  对方类型 */
		 RiskEventBaseCfgData.getTargetTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  题目 */
		 RiskEventBaseCfgData.getQuestionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.question;
			}
			return ""
		};
		 /**  选项1扣除消耗 */
		 RiskEventBaseCfgData.getNeedExpendByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExpend;
			}
			return ""
		};
		 /**  选项1 */
		 RiskEventBaseCfgData.getOption1ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option1;
			}
			return ""
		};
		 /**  选项2 */
		 RiskEventBaseCfgData.getOption2ByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.option2;
			}
			return ""
		};
		 /**  答案 */
		 RiskEventBaseCfgData.getResultByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.result;
			}
			return 0;
		};
		 /**  答对时说的话 */
		 RiskEventBaseCfgData.getTrueDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.trueDes;
			}
			return ""
		};
		 /**  答错时说的话 */
		 RiskEventBaseCfgData.getFaildDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.faildDes;
			}
			return ""
		};

	return RiskEventBaseCfgData
}());
	
cfg.RiskEventBaseCfgData = RiskEventBaseCfgData;
var RiskCollectSkillBaseCfgData  = /** @class */ (function () {
	function RiskCollectSkillBaseCfgData () {
	}
	RiskCollectSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rate");
		};
		 /**  概率 */
		 RiskCollectSkillBaseCfgData.getRateByRate = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};

	return RiskCollectSkillBaseCfgData
}());
	
cfg.RiskCollectSkillBaseCfgData = RiskCollectSkillBaseCfgData;
var RiskMonsterNewBaseCfgData  = /** @class */ (function () {
	function RiskMonsterNewBaseCfgData () {
	}
	RiskMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 RiskMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 RiskMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 RiskMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};

	return RiskMonsterNewBaseCfgData
}());
	
cfg.RiskMonsterNewBaseCfgData = RiskMonsterNewBaseCfgData;
var RiskMonsterNewBaseCfgData  = /** @class */ (function () {
	function RiskMonsterNewBaseCfgData () {
	}
	RiskMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 RiskMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 RiskMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  附加属性值(属性|值|百分比_属性|值|百分比;)分号留空表示这个怪物没有附加属性 */
		 RiskMonsterNewBaseCfgData.getAttributeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attribute;
			}
			return ""
		};

	return RiskMonsterNewBaseCfgData
}());
	
cfg.RiskMonsterNewBaseCfgData = RiskMonsterNewBaseCfgData;
var RiskCollectRandprizeBaseCfgData  = /** @class */ (function () {
	function RiskCollectRandprizeBaseCfgData () {
	}
	RiskCollectRandprizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskCollectRandprizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskCollectRandprizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 RiskCollectRandprizeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskCollectRandprizeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskCollectRandprizeBaseCfgData
}());
	
cfg.RiskCollectRandprizeBaseCfgData = RiskCollectRandprizeBaseCfgData;
var RiskGuardPrizeBaseCfgData  = /** @class */ (function () {
	function RiskGuardPrizeBaseCfgData () {
	}
	RiskGuardPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskGuardPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskGuardPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "count");
		};
		 /**  个数 */
		 RiskGuardPrizeBaseCfgData.getCountByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  增加道具 */
		 RiskGuardPrizeBaseCfgData.getAddItemByCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return RiskGuardPrizeBaseCfgData
}());
	
cfg.RiskGuardPrizeBaseCfgData = RiskGuardPrizeBaseCfgData;
var RiskFingerResultBaseCfgData  = /** @class */ (function () {
	function RiskFingerResultBaseCfgData () {
	}
	RiskFingerResultBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerResultBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerResultBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selfType");
		};
		 /**  自己类型 */
		 RiskFingerResultBaseCfgData.getSelfTypeBySelfType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selfType;
			}
			return 0;
		};

	return RiskFingerResultBaseCfgData
}());
	
cfg.RiskFingerResultBaseCfgData = RiskFingerResultBaseCfgData;
var RiskFingerPrizeBaseCfgData  = /** @class */ (function () {
	function RiskFingerPrizeBaseCfgData () {
	}
	RiskFingerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RiskFingerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RiskFingerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "selectType");
		};
		 /**  选择类型 */
		 RiskFingerPrizeBaseCfgData.getSelectTypeBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.selectType;
			}
			return 0;
		};
		 /**  需要道具 */
		 RiskFingerPrizeBaseCfgData.getNeedItemBySelectType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return RiskFingerPrizeBaseCfgData
}());
	
cfg.RiskFingerPrizeBaseCfgData = RiskFingerPrizeBaseCfgData;
var RoomFurnitureBaseCfgData  = /** @class */ (function () {
	function RoomFurnitureBaseCfgData () {
	}
	RoomFurnitureBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RoomFurnitureBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RoomFurnitureBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  家具类型id */
		 RoomFurnitureBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  家具分类 */
		 RoomFurnitureBaseCfgData.getClassifyByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.classify;
			}
			return 0;
		};
		 /**  同时存在上限 */
		 RoomFurnitureBaseCfgData.getLimitByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return RoomFurnitureBaseCfgData
}());
	
cfg.RoomFurnitureBaseCfgData = RoomFurnitureBaseCfgData;
var RoomFurnitureBaseCfgData  = /** @class */ (function () {
	function RoomFurnitureBaseCfgData () {
	}
	RoomFurnitureBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RoomFurnitureBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RoomFurnitureBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  家具类型id */
		 RoomFurnitureBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  家具分类 */
		 RoomFurnitureBaseCfgData.getClassifyByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.classify;
			}
			return 0;
		};
		 /**  同时存在上限 */
		 RoomFurnitureBaseCfgData.getLimitByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return RoomFurnitureBaseCfgData
}());
	
cfg.RoomFurnitureBaseCfgData = RoomFurnitureBaseCfgData;
var RoomFurnitureBaseCfgData  = /** @class */ (function () {
	function RoomFurnitureBaseCfgData () {
	}
	RoomFurnitureBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RoomFurnitureBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RoomFurnitureBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  家具类型id */
		 RoomFurnitureBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  家具分类 */
		 RoomFurnitureBaseCfgData.getClassifyByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.classify;
			}
			return 0;
		};
		 /**  同时存在上限 */
		 RoomFurnitureBaseCfgData.getLimitByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return RoomFurnitureBaseCfgData
}());
	
cfg.RoomFurnitureBaseCfgData = RoomFurnitureBaseCfgData;
var RuneRefineBaseCfgData  = /** @class */ (function () {
	function RuneRefineBaseCfgData () {
	}
	RuneRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRefineBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneRefineBaseCfgData.getNeedItemExpendByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  锁定一个的消耗 */
		 RuneRefineBaseCfgData.getLockNeedItemByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockNeedItem;
			}
			return ""
		};

	return RuneRefineBaseCfgData
}());
	
cfg.RuneRefineBaseCfgData = RuneRefineBaseCfgData;
var RuneRandskillBaseCfgData  = /** @class */ (function () {
	function RuneRandskillBaseCfgData () {
	}
	RuneRandskillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandskillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandskillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRandskillBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};

	return RuneRandskillBaseCfgData
}());
	
cfg.RuneRandskillBaseCfgData = RuneRandskillBaseCfgData;
var RuneRandattrBaseCfgData  = /** @class */ (function () {
	function RuneRandattrBaseCfgData () {
	}
	RuneRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrIndex");
		};
		 /**  属性索引 */
		 RuneRandattrBaseCfgData.getAttrIndexByAttrIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrIndex;
			}
			return 0;
		};

	return RuneRandattrBaseCfgData
}());
	
cfg.RuneRandattrBaseCfgData = RuneRandattrBaseCfgData;
var RuneFixedBaseCfgData  = /** @class */ (function () {
	function RuneFixedBaseCfgData () {
	}
	RuneFixedBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneFixedBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneFixedBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneFixedBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return RuneFixedBaseCfgData
}());
	
cfg.RuneFixedBaseCfgData = RuneFixedBaseCfgData;
var RuneFixedBaseCfgData  = /** @class */ (function () {
	function RuneFixedBaseCfgData () {
	}
	RuneFixedBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneFixedBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneFixedBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneFixedBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return RuneFixedBaseCfgData
}());
	
cfg.RuneFixedBaseCfgData = RuneFixedBaseCfgData;
var RuneRandskillBaseCfgData  = /** @class */ (function () {
	function RuneRandskillBaseCfgData () {
	}
	RuneRandskillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandskillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandskillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRandskillBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};

	return RuneRandskillBaseCfgData
}());
	
cfg.RuneRandskillBaseCfgData = RuneRandskillBaseCfgData;
var RuneCompoundBaseCfgData  = /** @class */ (function () {
	function RuneCompoundBaseCfgData () {
	}
	RuneCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具名称 */
		 RuneCompoundBaseCfgData.getItemNameByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemName;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 RuneCompoundBaseCfgData.getNeedPlayerLevelByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具ID */
		 RuneCompoundBaseCfgData.getNeedItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemID;
			}
			return 0;
		};
		 /**  数量概率数量_概率万分比; */
		 RuneCompoundBaseCfgData.getCountRateByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countRate;
			}
			return ""
		};
		 /**  是否可合成 */
		 RuneCompoundBaseCfgData.getIfSynthesisByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ifSynthesis;
			}
			return 0;
		};

	return RuneCompoundBaseCfgData
}());
	
cfg.RuneCompoundBaseCfgData = RuneCompoundBaseCfgData;
var RuneCompoundBaseCfgData  = /** @class */ (function () {
	function RuneCompoundBaseCfgData () {
	}
	RuneCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具名称 */
		 RuneCompoundBaseCfgData.getItemNameByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemName;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 RuneCompoundBaseCfgData.getNeedPlayerLevelByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具ID */
		 RuneCompoundBaseCfgData.getNeedItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemID;
			}
			return 0;
		};
		 /**  数量概率数量_概率万分比; */
		 RuneCompoundBaseCfgData.getCountRateByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countRate;
			}
			return ""
		};
		 /**  是否可合成 */
		 RuneCompoundBaseCfgData.getIfSynthesisByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ifSynthesis;
			}
			return 0;
		};

	return RuneCompoundBaseCfgData
}());
	
cfg.RuneCompoundBaseCfgData = RuneCompoundBaseCfgData;
var RuneRandattrBaseCfgData  = /** @class */ (function () {
	function RuneRandattrBaseCfgData () {
	}
	RuneRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrIndex");
		};
		 /**  属性索引 */
		 RuneRandattrBaseCfgData.getAttrIndexByAttrIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrIndex;
			}
			return 0;
		};

	return RuneRandattrBaseCfgData
}());
	
cfg.RuneRandattrBaseCfgData = RuneRandattrBaseCfgData;
var RuneRefineBaseCfgData  = /** @class */ (function () {
	function RuneRefineBaseCfgData () {
	}
	RuneRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRefineBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneRefineBaseCfgData.getNeedItemExpendByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  锁定一个的消耗 */
		 RuneRefineBaseCfgData.getLockNeedItemByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockNeedItem;
			}
			return ""
		};

	return RuneRefineBaseCfgData
}());
	
cfg.RuneRefineBaseCfgData = RuneRefineBaseCfgData;
var RuneCompoundBaseCfgData  = /** @class */ (function () {
	function RuneCompoundBaseCfgData () {
	}
	RuneCompoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneCompoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneCompoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneCompoundBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};
		 /**  道具名称 */
		 RuneCompoundBaseCfgData.getItemNameByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemName;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 RuneCompoundBaseCfgData.getNeedPlayerLevelByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneCompoundBaseCfgData.getNeedItemExpendByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  需要道具ID */
		 RuneCompoundBaseCfgData.getNeedItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemID;
			}
			return 0;
		};
		 /**  数量概率数量_概率万分比; */
		 RuneCompoundBaseCfgData.getCountRateByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countRate;
			}
			return ""
		};
		 /**  是否可合成 */
		 RuneCompoundBaseCfgData.getIfSynthesisByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ifSynthesis;
			}
			return 0;
		};

	return RuneCompoundBaseCfgData
}());
	
cfg.RuneCompoundBaseCfgData = RuneCompoundBaseCfgData;
var RuneRandskillBaseCfgData  = /** @class */ (function () {
	function RuneRandskillBaseCfgData () {
	}
	RuneRandskillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandskillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandskillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRandskillBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};

	return RuneRandskillBaseCfgData
}());
	
cfg.RuneRandskillBaseCfgData = RuneRandskillBaseCfgData;
var RuneRandattrBaseCfgData  = /** @class */ (function () {
	function RuneRandattrBaseCfgData () {
	}
	RuneRandattrBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRandattrBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRandattrBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attrIndex");
		};
		 /**  属性索引 */
		 RuneRandattrBaseCfgData.getAttrIndexByAttrIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attrIndex;
			}
			return 0;
		};

	return RuneRandattrBaseCfgData
}());
	
cfg.RuneRandattrBaseCfgData = RuneRandattrBaseCfgData;
var RuneFixedBaseCfgData  = /** @class */ (function () {
	function RuneFixedBaseCfgData () {
	}
	RuneFixedBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneFixedBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneFixedBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "itemID");
		};
		 /**  道具ID */
		 RuneFixedBaseCfgData.getItemIDByItemID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return RuneFixedBaseCfgData
}());
	
cfg.RuneFixedBaseCfgData = RuneFixedBaseCfgData;
var RuneRefineBaseCfgData  = /** @class */ (function () {
	function RuneRefineBaseCfgData () {
	}
	RuneRefineBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	RuneRefineBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		RuneRefineBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "runeType");
		};
		 /**  铭文类型1;//星辰符文2;//月亮符文3;//太阳符文4;//彩虹符文5;//闪烁符文 */
		 RuneRefineBaseCfgData.getRuneTypeByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.runeType;
			}
			return 0;
		};
		 /**  需要道具消耗道具ID_数量; */
		 RuneRefineBaseCfgData.getNeedItemExpendByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItemExpend;
			}
			return ""
		};
		 /**  锁定一个的消耗 */
		 RuneRefineBaseCfgData.getLockNeedItemByRuneType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lockNeedItem;
			}
			return ""
		};

	return RuneRefineBaseCfgData
}());
	
cfg.RuneRefineBaseCfgData = RuneRefineBaseCfgData;
var SailRefreshBaseCfgData  = /** @class */ (function () {
	function SailRefreshBaseCfgData () {
	}
	SailRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "refreshCount");
		};
		 /**  刷新次数(上一次，此次] */
		 SailRefreshBaseCfgData.getRefreshCountByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailRefreshBaseCfgData.getNeedDiamondByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要道具 */
		 SailRefreshBaseCfgData.getNeedItemByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return SailRefreshBaseCfgData
}());
	
cfg.SailRefreshBaseCfgData = SailRefreshBaseCfgData;
var SailBuyhourBaseCfgData  = /** @class */ (function () {
	function SailBuyhourBaseCfgData () {
	}
	SailBuyhourBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailBuyhourBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailBuyhourBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "hour");
		};
		 /**  小时数 */
		 SailBuyhourBaseCfgData.getHourByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hour;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailBuyhourBaseCfgData.getNeedDiamondByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return SailBuyhourBaseCfgData
}());
	
cfg.SailBuyhourBaseCfgData = SailBuyhourBaseCfgData;
var SailTypeBaseCfgData  = /** @class */ (function () {
	function SailTypeBaseCfgData () {
	}
	SailTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sailType");
		};
		 /**  派遣类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailTypeBaseCfgData.getSailTypeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  需要挂机点 */
		 SailTypeBaseCfgData.getNeedSailPointBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSailPoint;
			}
			return 0;
		};
		 /**  冷却时间(分钟) */
		 SailTypeBaseCfgData.getCoolTimeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolTime;
			}
			return 0;
		};

	return SailTypeBaseCfgData
}());
	
cfg.SailTypeBaseCfgData = SailTypeBaseCfgData;
var SailPoolBaseCfgData  = /** @class */ (function () {
	function SailPoolBaseCfgData () {
	}
	SailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SailPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  远航类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailPoolBaseCfgData.getSailTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  增加道具 */
		 SailPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  描述 */
		 SailPoolBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要星级 */
		 SailPoolBaseCfgData.getNeedPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetStar;
			}
			return 0;
		};
		 /**  需要种族种族1;种族2; */
		 SailPoolBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};

	return SailPoolBaseCfgData
}());
	
cfg.SailPoolBaseCfgData = SailPoolBaseCfgData;
var SailTypeBaseCfgData  = /** @class */ (function () {
	function SailTypeBaseCfgData () {
	}
	SailTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sailType");
		};
		 /**  派遣类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailTypeBaseCfgData.getSailTypeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  需要挂机点 */
		 SailTypeBaseCfgData.getNeedSailPointBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSailPoint;
			}
			return 0;
		};
		 /**  冷却时间(分钟) */
		 SailTypeBaseCfgData.getCoolTimeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolTime;
			}
			return 0;
		};

	return SailTypeBaseCfgData
}());
	
cfg.SailTypeBaseCfgData = SailTypeBaseCfgData;
var SailBuyhourBaseCfgData  = /** @class */ (function () {
	function SailBuyhourBaseCfgData () {
	}
	SailBuyhourBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailBuyhourBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailBuyhourBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "hour");
		};
		 /**  小时数 */
		 SailBuyhourBaseCfgData.getHourByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hour;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailBuyhourBaseCfgData.getNeedDiamondByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return SailBuyhourBaseCfgData
}());
	
cfg.SailBuyhourBaseCfgData = SailBuyhourBaseCfgData;
var SailRefreshBaseCfgData  = /** @class */ (function () {
	function SailRefreshBaseCfgData () {
	}
	SailRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "refreshCount");
		};
		 /**  刷新次数(上一次，此次] */
		 SailRefreshBaseCfgData.getRefreshCountByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailRefreshBaseCfgData.getNeedDiamondByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要道具 */
		 SailRefreshBaseCfgData.getNeedItemByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return SailRefreshBaseCfgData
}());
	
cfg.SailRefreshBaseCfgData = SailRefreshBaseCfgData;
var SailBuyhourBaseCfgData  = /** @class */ (function () {
	function SailBuyhourBaseCfgData () {
	}
	SailBuyhourBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailBuyhourBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailBuyhourBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "hour");
		};
		 /**  小时数 */
		 SailBuyhourBaseCfgData.getHourByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hour;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailBuyhourBaseCfgData.getNeedDiamondByHour = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};

	return SailBuyhourBaseCfgData
}());
	
cfg.SailBuyhourBaseCfgData = SailBuyhourBaseCfgData;
var SailTypeBaseCfgData  = /** @class */ (function () {
	function SailTypeBaseCfgData () {
	}
	SailTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "sailType");
		};
		 /**  派遣类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailTypeBaseCfgData.getSailTypeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  需要挂机点 */
		 SailTypeBaseCfgData.getNeedSailPointBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needSailPoint;
			}
			return 0;
		};
		 /**  冷却时间(分钟) */
		 SailTypeBaseCfgData.getCoolTimeBySailType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolTime;
			}
			return 0;
		};

	return SailTypeBaseCfgData
}());
	
cfg.SailTypeBaseCfgData = SailTypeBaseCfgData;
var SailPoolBaseCfgData  = /** @class */ (function () {
	function SailPoolBaseCfgData () {
	}
	SailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SailPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  远航类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailPoolBaseCfgData.getSailTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  增加道具 */
		 SailPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  描述 */
		 SailPoolBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要星级 */
		 SailPoolBaseCfgData.getNeedPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetStar;
			}
			return 0;
		};
		 /**  需要种族种族1;种族2; */
		 SailPoolBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};

	return SailPoolBaseCfgData
}());
	
cfg.SailPoolBaseCfgData = SailPoolBaseCfgData;
var SailRefreshBaseCfgData  = /** @class */ (function () {
	function SailRefreshBaseCfgData () {
	}
	SailRefreshBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailRefreshBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailRefreshBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "refreshCount");
		};
		 /**  刷新次数(上一次，此次] */
		 SailRefreshBaseCfgData.getRefreshCountByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 SailRefreshBaseCfgData.getNeedDiamondByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要道具 */
		 SailRefreshBaseCfgData.getNeedItemByRefreshCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return SailRefreshBaseCfgData
}());
	
cfg.SailRefreshBaseCfgData = SailRefreshBaseCfgData;
var SailPoolBaseCfgData  = /** @class */ (function () {
	function SailPoolBaseCfgData () {
	}
	SailPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SailPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SailPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SailPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  远航类型1; //普通2; //精良3; //稀有4; //史诗5; //传说6; //不朽 */
		 SailPoolBaseCfgData.getSailTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sailType;
			}
			return 0;
		};
		 /**  增加道具 */
		 SailPoolBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  描述 */
		 SailPoolBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要星级 */
		 SailPoolBaseCfgData.getNeedPetStarByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetStar;
			}
			return 0;
		};
		 /**  需要种族种族1;种族2; */
		 SailPoolBaseCfgData.getNeedPetTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPetType;
			}
			return ""
		};

	return SailPoolBaseCfgData
}());
	
cfg.SailPoolBaseCfgData = SailPoolBaseCfgData;
var ShapePetSkinBaseCfgData  = /** @class */ (function () {
	function ShapePetSkinBaseCfgData () {
	}
	ShapePetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapePetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapePetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  皮肤ID */
		 ShapePetSkinBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  所属伙伴ID */
		 ShapePetSkinBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  资源名 */
		 ShapePetSkinBaseCfgData.getResourceByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resource;
			}
			return ""
		};
		 /**  增加属性类型|值|万分比; */
		 ShapePetSkinBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return ShapePetSkinBaseCfgData
}());
	
cfg.ShapePetSkinBaseCfgData = ShapePetSkinBaseCfgData;
var ShapeHeadIconBaseCfgData  = /** @class */ (function () {
	function ShapeHeadIconBaseCfgData () {
	}
	ShapeHeadIconBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHeadIconBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHeadIconBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeHeadIconBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeHeadIconBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所需道具id */
		 ShapeHeadIconBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return 0;
		};
		 /**  骨骼名 */
		 ShapeHeadIconBaseCfgData.getAniNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aniName;
			}
			return ""
		};
		 /**  是否显示骨骼动画 */
		 ShapeHeadIconBaseCfgData.getShowAniByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showAni;
			}
			return 0;
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeHeadIconBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  激活说明 */
		 ShapeHeadIconBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};

	return ShapeHeadIconBaseCfgData
}());
	
cfg.ShapeHeadIconBaseCfgData = ShapeHeadIconBaseCfgData;
var ShapeTitleBaseCfgData  = /** @class */ (function () {
	function ShapeTitleBaseCfgData () {
	}
	ShapeTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeTitleBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  是否自动激活 */
		 ShapeTitleBaseCfgData.getAutoActiveByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.autoActive;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 ShapeTitleBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  来源模块 */
		 ShapeTitleBaseCfgData.getGameSystemTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gameSystemType;
			}
			return 0;
		};
		 /**  描述 */
		 ShapeTitleBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  图片名 */
		 ShapeTitleBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeTitleBaseCfgData
}());
	
cfg.ShapeTitleBaseCfgData = ShapeTitleBaseCfgData;
var ShapeProvinceBaseCfgData  = /** @class */ (function () {
	function ShapeProvinceBaseCfgData () {
	}
	ShapeProvinceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeProvinceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeProvinceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShapeProvinceBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  省市 */
		 ShapeProvinceBaseCfgData.getProvinceIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.provinceID;
			}
			return 0;
		};
		 /**  省市名称 */
		 ShapeProvinceBaseCfgData.getProveinceNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.proveinceName;
			}
			return ""
		};
		 /**  城市ID */
		 ShapeProvinceBaseCfgData.getCityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityID;
			}
			return 0;
		};
		 /**  城市名称 */
		 ShapeProvinceBaseCfgData.getCityNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityName;
			}
			return ""
		};

	return ShapeProvinceBaseCfgData
}());
	
cfg.ShapeProvinceBaseCfgData = ShapeProvinceBaseCfgData;
var ShapeHeadIconBaseCfgData  = /** @class */ (function () {
	function ShapeHeadIconBaseCfgData () {
	}
	ShapeHeadIconBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHeadIconBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHeadIconBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeHeadIconBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeHeadIconBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所需道具id */
		 ShapeHeadIconBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return 0;
		};
		 /**  骨骼名 */
		 ShapeHeadIconBaseCfgData.getAniNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aniName;
			}
			return ""
		};
		 /**  是否显示骨骼动画 */
		 ShapeHeadIconBaseCfgData.getShowAniByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showAni;
			}
			return 0;
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeHeadIconBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  激活说明 */
		 ShapeHeadIconBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};

	return ShapeHeadIconBaseCfgData
}());
	
cfg.ShapeHeadIconBaseCfgData = ShapeHeadIconBaseCfgData;
var ShapeHonorUpgradeBaseCfgData  = /** @class */ (function () {
	function ShapeHonorUpgradeBaseCfgData () {
	}
	ShapeHonorUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHonorUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHonorUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  荣誉等级 */
		 ShapeHonorUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  总经验 */
		 ShapeHonorUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  荣誉名字 */
		 ShapeHonorUpgradeBaseCfgData.getNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  图标名称(对应Icon/Honor目录下文件) */
		 ShapeHonorUpgradeBaseCfgData.getIconNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeHonorUpgradeBaseCfgData
}());
	
cfg.ShapeHonorUpgradeBaseCfgData = ShapeHonorUpgradeBaseCfgData;
var ShapePetSkinBaseCfgData  = /** @class */ (function () {
	function ShapePetSkinBaseCfgData () {
	}
	ShapePetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapePetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapePetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  皮肤ID */
		 ShapePetSkinBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  所属伙伴ID */
		 ShapePetSkinBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  资源名 */
		 ShapePetSkinBaseCfgData.getResourceByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resource;
			}
			return ""
		};
		 /**  增加属性类型|值|万分比; */
		 ShapePetSkinBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return ShapePetSkinBaseCfgData
}());
	
cfg.ShapePetSkinBaseCfgData = ShapePetSkinBaseCfgData;
var ShapeBadgeBaseCfgData  = /** @class */ (function () {
	function ShapeBadgeBaseCfgData () {
	}
	ShapeBadgeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeBadgeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeBadgeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  徽章ID */
		 ShapeBadgeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emBadgeType */
		 ShapeBadgeBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加荣誉点数 */
		 ShapeBadgeBaseCfgData.getAddHonorByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHonor;
			}
			return ""
		};
		 /**  名称 */
		 ShapeBadgeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  激活说明 */
		 ShapeBadgeBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};
		 /**  描述 */
		 ShapeBadgeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  图标 */
		 ShapeBadgeBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeBadgeBaseCfgData
}());
	
cfg.ShapeBadgeBaseCfgData = ShapeBadgeBaseCfgData;
var ShapeHeadIconBaseCfgData  = /** @class */ (function () {
	function ShapeHeadIconBaseCfgData () {
	}
	ShapeHeadIconBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHeadIconBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHeadIconBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeHeadIconBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeHeadIconBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  所需道具id */
		 ShapeHeadIconBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return 0;
		};
		 /**  骨骼名 */
		 ShapeHeadIconBaseCfgData.getAniNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aniName;
			}
			return ""
		};
		 /**  是否显示骨骼动画 */
		 ShapeHeadIconBaseCfgData.getShowAniByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showAni;
			}
			return 0;
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeHeadIconBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  激活说明 */
		 ShapeHeadIconBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};

	return ShapeHeadIconBaseCfgData
}());
	
cfg.ShapeHeadIconBaseCfgData = ShapeHeadIconBaseCfgData;
var ShapeHonorUpgradeBaseCfgData  = /** @class */ (function () {
	function ShapeHonorUpgradeBaseCfgData () {
	}
	ShapeHonorUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHonorUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHonorUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  荣誉等级 */
		 ShapeHonorUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  总经验 */
		 ShapeHonorUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  荣誉名字 */
		 ShapeHonorUpgradeBaseCfgData.getNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  图标名称(对应Icon/Honor目录下文件) */
		 ShapeHonorUpgradeBaseCfgData.getIconNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeHonorUpgradeBaseCfgData
}());
	
cfg.ShapeHonorUpgradeBaseCfgData = ShapeHonorUpgradeBaseCfgData;
var ShapeBadgeBaseCfgData  = /** @class */ (function () {
	function ShapeBadgeBaseCfgData () {
	}
	ShapeBadgeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeBadgeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeBadgeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  徽章ID */
		 ShapeBadgeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emBadgeType */
		 ShapeBadgeBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加荣誉点数 */
		 ShapeBadgeBaseCfgData.getAddHonorByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHonor;
			}
			return ""
		};
		 /**  名称 */
		 ShapeBadgeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  激活说明 */
		 ShapeBadgeBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};
		 /**  描述 */
		 ShapeBadgeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  图标 */
		 ShapeBadgeBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeBadgeBaseCfgData
}());
	
cfg.ShapeBadgeBaseCfgData = ShapeBadgeBaseCfgData;
var ShapeTitleBaseCfgData  = /** @class */ (function () {
	function ShapeTitleBaseCfgData () {
	}
	ShapeTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeTitleBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  是否自动激活 */
		 ShapeTitleBaseCfgData.getAutoActiveByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.autoActive;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 ShapeTitleBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  来源模块 */
		 ShapeTitleBaseCfgData.getGameSystemTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gameSystemType;
			}
			return 0;
		};
		 /**  描述 */
		 ShapeTitleBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  图片名 */
		 ShapeTitleBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeTitleBaseCfgData
}());
	
cfg.ShapeTitleBaseCfgData = ShapeTitleBaseCfgData;
var ShapeHonorUpgradeBaseCfgData  = /** @class */ (function () {
	function ShapeHonorUpgradeBaseCfgData () {
	}
	ShapeHonorUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeHonorUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeHonorUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  荣誉等级 */
		 ShapeHonorUpgradeBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  总经验 */
		 ShapeHonorUpgradeBaseCfgData.getMaxExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxExp;
			}
			return 0;
		};
		 /**  荣誉名字 */
		 ShapeHonorUpgradeBaseCfgData.getNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  图标名称(对应Icon/Honor目录下文件) */
		 ShapeHonorUpgradeBaseCfgData.getIconNameByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeHonorUpgradeBaseCfgData
}());
	
cfg.ShapeHonorUpgradeBaseCfgData = ShapeHonorUpgradeBaseCfgData;
var ShapeBadgeBaseCfgData  = /** @class */ (function () {
	function ShapeBadgeBaseCfgData () {
	}
	ShapeBadgeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeBadgeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeBadgeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  徽章ID */
		 ShapeBadgeBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  类型_emBadgeType */
		 ShapeBadgeBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  增加荣誉点数 */
		 ShapeBadgeBaseCfgData.getAddHonorByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addHonor;
			}
			return ""
		};
		 /**  名称 */
		 ShapeBadgeBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  激活说明 */
		 ShapeBadgeBaseCfgData.getActiveDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.activeDesc;
			}
			return ""
		};
		 /**  描述 */
		 ShapeBadgeBaseCfgData.getDescByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  图标 */
		 ShapeBadgeBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeBadgeBaseCfgData
}());
	
cfg.ShapeBadgeBaseCfgData = ShapeBadgeBaseCfgData;
var ShapePetSkinBaseCfgData  = /** @class */ (function () {
	function ShapePetSkinBaseCfgData () {
	}
	ShapePetSkinBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapePetSkinBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapePetSkinBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  皮肤ID */
		 ShapePetSkinBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  所属伙伴ID */
		 ShapePetSkinBaseCfgData.getPetIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petID;
			}
			return 0;
		};
		 /**  资源名 */
		 ShapePetSkinBaseCfgData.getResourceByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resource;
			}
			return ""
		};
		 /**  增加属性类型|值|万分比; */
		 ShapePetSkinBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};

	return ShapePetSkinBaseCfgData
}());
	
cfg.ShapePetSkinBaseCfgData = ShapePetSkinBaseCfgData;
var ShapeProvinceBaseCfgData  = /** @class */ (function () {
	function ShapeProvinceBaseCfgData () {
	}
	ShapeProvinceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeProvinceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeProvinceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShapeProvinceBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  省市 */
		 ShapeProvinceBaseCfgData.getProvinceIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.provinceID;
			}
			return 0;
		};
		 /**  省市名称 */
		 ShapeProvinceBaseCfgData.getProveinceNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.proveinceName;
			}
			return ""
		};
		 /**  城市ID */
		 ShapeProvinceBaseCfgData.getCityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityID;
			}
			return 0;
		};
		 /**  城市名称 */
		 ShapeProvinceBaseCfgData.getCityNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityName;
			}
			return ""
		};

	return ShapeProvinceBaseCfgData
}());
	
cfg.ShapeProvinceBaseCfgData = ShapeProvinceBaseCfgData;
var ShapeProvinceBaseCfgData  = /** @class */ (function () {
	function ShapeProvinceBaseCfgData () {
	}
	ShapeProvinceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeProvinceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeProvinceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShapeProvinceBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  省市 */
		 ShapeProvinceBaseCfgData.getProvinceIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.provinceID;
			}
			return 0;
		};
		 /**  省市名称 */
		 ShapeProvinceBaseCfgData.getProveinceNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.proveinceName;
			}
			return ""
		};
		 /**  城市ID */
		 ShapeProvinceBaseCfgData.getCityIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityID;
			}
			return 0;
		};
		 /**  城市名称 */
		 ShapeProvinceBaseCfgData.getCityNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cityName;
			}
			return ""
		};

	return ShapeProvinceBaseCfgData
}());
	
cfg.ShapeProvinceBaseCfgData = ShapeProvinceBaseCfgData;
var ShapeTitleBaseCfgData  = /** @class */ (function () {
	function ShapeTitleBaseCfgData () {
	}
	ShapeTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShapeTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShapeTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShapeTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 ShapeTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  持续时（秒）0表示永久 */
		 ShapeTitleBaseCfgData.getContinueTimeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.continueTime;
			}
			return 0;
		};
		 /**  是否自动激活 */
		 ShapeTitleBaseCfgData.getAutoActiveByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.autoActive;
			}
			return 0;
		};
		 /**  增加属性类型|值|万分比; */
		 ShapeTitleBaseCfgData.getAddAttrByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addAttr;
			}
			return ""
		};
		 /**  来源模块 */
		 ShapeTitleBaseCfgData.getGameSystemTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.gameSystemType;
			}
			return 0;
		};
		 /**  描述 */
		 ShapeTitleBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  图片名 */
		 ShapeTitleBaseCfgData.getIconNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iconName;
			}
			return ""
		};

	return ShapeTitleBaseCfgData
}());
	
cfg.ShapeTitleBaseCfgData = ShapeTitleBaseCfgData;
var ShopCurrencyTypeBaseCfgData  = /** @class */ (function () {
	function ShopCurrencyTypeBaseCfgData () {
	}
	ShopCurrencyTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopCurrencyTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopCurrencyTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型 */
		 ShopCurrencyTypeBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  货币itemid */
		 ShopCurrencyTypeBaseCfgData.getCurrencyIdByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.currencyId;
			}
			return 0;
		};

	return ShopCurrencyTypeBaseCfgData
}());
	
cfg.ShopCurrencyTypeBaseCfgData = ShopCurrencyTypeBaseCfgData;
var ShopFixShopBaseCfgData  = /** @class */ (function () {
	function ShopFixShopBaseCfgData () {
	}
	ShopFixShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopFixShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopFixShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShopFixShopBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  索引 */
		 ShopFixShopBaseCfgData.getIndexByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  商店类型 1; //道具商城 2; //英雄商城 3; //远征商城 4; //竞技商城 5; //公会商城 6; //段位商城 7; //先知商城 8; //跨服天梯9;//神装商城10;//征战商城11;//0元礼包12;//对战塔商店13;//大师塔商店14;//周冠商店99; //特俗商店 */
		 ShopFixShopBaseCfgData.getShopTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  子类型 */
		 ShopFixShopBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  显示名字 */
		 ShopFixShopBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getSellItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要vip等级 */
		 ShopFixShopBaseCfgData.getNeedVipLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopFixShopBaseCfgData.getDayBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopFixShopBaseCfgData.getWeekBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopFixShopBaseCfgData.getMonthBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};
		 /**  刷新限购次数 */
		 ShopFixShopBaseCfgData.getLimitBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyCount;
			}
			return 0;
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopFixShopBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  通用额外参数 */
		 ShopFixShopBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};

	return ShopFixShopBaseCfgData
}());
	
cfg.ShopFixShopBaseCfgData = ShopFixShopBaseCfgData;
var ShopRandShopBaseCfgData  = /** @class */ (function () {
	function ShopRandShopBaseCfgData () {
	}
	ShopRandShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型101; //探宝商城102; //天赋宝石商店103; //喵喵购物车110; //跨服竞技场 */
		 ShopRandShopBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  组随机类型 */
		 ShopRandShopBaseCfgData.getGroupRandTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupRandType;
			}
			return 0;
		};
		 /**  最大免费次数 */
		 ShopRandShopBaseCfgData.getFreeCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新消耗道具道具ID_道具数量 */
		 ShopRandShopBaseCfgData.getRefreshNeedItemByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  刷新最大次数0无限制 */
		 ShopRandShopBaseCfgData.getRefreshCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};

	return ShopRandShopBaseCfgData
}());
	
cfg.ShopRandShopBaseCfgData = ShopRandShopBaseCfgData;
var ShopRandPoolBaseCfgData  = /** @class */ (function () {
	function ShopRandPoolBaseCfgData () {
	}
	ShopRandPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ShopRandPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopRandPoolBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopRandPoolBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  总限购次数 */
		 ShopRandPoolBaseCfgData.getBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopRandPoolBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopRandPoolBaseCfgData.getDayBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopRandPoolBaseCfgData.getWeekBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopRandPoolBaseCfgData.getMonthBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};

	return ShopRandPoolBaseCfgData
}());
	
cfg.ShopRandPoolBaseCfgData = ShopRandPoolBaseCfgData;
var ShopLevelItemBaseCfgData  = /** @class */ (function () {
	function ShopLevelItemBaseCfgData () {
	}
	ShopLevelItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopLevelItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopLevelItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShopLevelItemBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopLevelItemBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopLevelItemBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopLevelItemBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};

	return ShopLevelItemBaseCfgData
}());
	
cfg.ShopLevelItemBaseCfgData = ShopLevelItemBaseCfgData;
var ShopLevelItemBaseCfgData  = /** @class */ (function () {
	function ShopLevelItemBaseCfgData () {
	}
	ShopLevelItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopLevelItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopLevelItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShopLevelItemBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopLevelItemBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopLevelItemBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopLevelItemBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};

	return ShopLevelItemBaseCfgData
}());
	
cfg.ShopLevelItemBaseCfgData = ShopLevelItemBaseCfgData;
var ShopRandPoolBaseCfgData  = /** @class */ (function () {
	function ShopRandPoolBaseCfgData () {
	}
	ShopRandPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ShopRandPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopRandPoolBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopRandPoolBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  总限购次数 */
		 ShopRandPoolBaseCfgData.getBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopRandPoolBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopRandPoolBaseCfgData.getDayBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopRandPoolBaseCfgData.getWeekBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopRandPoolBaseCfgData.getMonthBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};

	return ShopRandPoolBaseCfgData
}());
	
cfg.ShopRandPoolBaseCfgData = ShopRandPoolBaseCfgData;
var ShopLevelItemBaseCfgData  = /** @class */ (function () {
	function ShopLevelItemBaseCfgData () {
	}
	ShopLevelItemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopLevelItemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopLevelItemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 ShopLevelItemBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopLevelItemBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopLevelItemBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopLevelItemBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};

	return ShopLevelItemBaseCfgData
}());
	
cfg.ShopLevelItemBaseCfgData = ShopLevelItemBaseCfgData;
var ShopFixShopBaseCfgData  = /** @class */ (function () {
	function ShopFixShopBaseCfgData () {
	}
	ShopFixShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopFixShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopFixShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShopFixShopBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  索引 */
		 ShopFixShopBaseCfgData.getIndexByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  商店类型 1; //道具商城 2; //英雄商城 3; //远征商城 4; //竞技商城 5; //公会商城 6; //段位商城 7; //先知商城 8; //跨服天梯9;//神装商城10;//征战商城11;//0元礼包12;//对战塔商店13;//大师塔商店14;//周冠商店99; //特俗商店 */
		 ShopFixShopBaseCfgData.getShopTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  子类型 */
		 ShopFixShopBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  显示名字 */
		 ShopFixShopBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getSellItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要vip等级 */
		 ShopFixShopBaseCfgData.getNeedVipLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopFixShopBaseCfgData.getDayBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopFixShopBaseCfgData.getWeekBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopFixShopBaseCfgData.getMonthBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};
		 /**  刷新限购次数 */
		 ShopFixShopBaseCfgData.getLimitBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyCount;
			}
			return 0;
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopFixShopBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  通用额外参数 */
		 ShopFixShopBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};

	return ShopFixShopBaseCfgData
}());
	
cfg.ShopFixShopBaseCfgData = ShopFixShopBaseCfgData;
var ShopRandShopBaseCfgData  = /** @class */ (function () {
	function ShopRandShopBaseCfgData () {
	}
	ShopRandShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型101; //探宝商城102; //天赋宝石商店103; //喵喵购物车110; //跨服竞技场 */
		 ShopRandShopBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  组随机类型 */
		 ShopRandShopBaseCfgData.getGroupRandTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupRandType;
			}
			return 0;
		};
		 /**  最大免费次数 */
		 ShopRandShopBaseCfgData.getFreeCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新消耗道具道具ID_道具数量 */
		 ShopRandShopBaseCfgData.getRefreshNeedItemByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  刷新最大次数0无限制 */
		 ShopRandShopBaseCfgData.getRefreshCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};

	return ShopRandShopBaseCfgData
}());
	
cfg.ShopRandShopBaseCfgData = ShopRandShopBaseCfgData;
var ShopRandPoolBaseCfgData  = /** @class */ (function () {
	function ShopRandPoolBaseCfgData () {
	}
	ShopRandPoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandPoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandPoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  唯一索引 */
		 ShopRandPoolBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  组ID */
		 ShopRandPoolBaseCfgData.getGroupIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  等级 */
		 ShopRandPoolBaseCfgData.getLevelByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getSellItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopRandPoolBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  总限购次数 */
		 ShopRandPoolBaseCfgData.getBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopRandPoolBaseCfgData.getDiscountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopRandPoolBaseCfgData.getDayBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopRandPoolBaseCfgData.getWeekBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopRandPoolBaseCfgData.getMonthBuyCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};

	return ShopRandPoolBaseCfgData
}());
	
cfg.ShopRandPoolBaseCfgData = ShopRandPoolBaseCfgData;
var ShopCurrencyTypeBaseCfgData  = /** @class */ (function () {
	function ShopCurrencyTypeBaseCfgData () {
	}
	ShopCurrencyTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopCurrencyTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopCurrencyTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型 */
		 ShopCurrencyTypeBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  货币itemid */
		 ShopCurrencyTypeBaseCfgData.getCurrencyIdByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.currencyId;
			}
			return 0;
		};

	return ShopCurrencyTypeBaseCfgData
}());
	
cfg.ShopCurrencyTypeBaseCfgData = ShopCurrencyTypeBaseCfgData;
var ShopFixShopBaseCfgData  = /** @class */ (function () {
	function ShopFixShopBaseCfgData () {
	}
	ShopFixShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopFixShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopFixShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 ShopFixShopBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  索引 */
		 ShopFixShopBaseCfgData.getIndexByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  商店类型 1; //道具商城 2; //英雄商城 3; //远征商城 4; //竞技商城 5; //公会商城 6; //段位商城 7; //先知商城 8; //跨服天梯9;//神装商城10;//征战商城11;//0元礼包12;//对战塔商店13;//大师塔商店14;//周冠商店99; //特俗商店 */
		 ShopFixShopBaseCfgData.getShopTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  子类型 */
		 ShopFixShopBaseCfgData.getSubTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subType;
			}
			return 0;
		};
		 /**  显示名字 */
		 ShopFixShopBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  销售道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getSellItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sellItem;
			}
			return ""
		};
		 /**  需要vip等级 */
		 ShopFixShopBaseCfgData.getNeedVipLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVipLevel;
			}
			return 0;
		};
		 /**  日限购次数 */
		 ShopFixShopBaseCfgData.getDayBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayBuyCount;
			}
			return 0;
		};
		 /**  周限购次数 */
		 ShopFixShopBaseCfgData.getWeekBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weekBuyCount;
			}
			return 0;
		};
		 /**  月限购次数 */
		 ShopFixShopBaseCfgData.getMonthBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monthBuyCount;
			}
			return 0;
		};
		 /**  刷新限购次数 */
		 ShopFixShopBaseCfgData.getLimitBuyCountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitBuyCount;
			}
			return 0;
		};
		 /**  需要道具道具ID_道具数量 */
		 ShopFixShopBaseCfgData.getNeedItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  折扣客户端显示用0表示无折扣 */
		 ShopFixShopBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  通用额外参数 */
		 ShopFixShopBaseCfgData.getParamByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return ""
		};

	return ShopFixShopBaseCfgData
}());
	
cfg.ShopFixShopBaseCfgData = ShopFixShopBaseCfgData;
var ShopRandShopBaseCfgData  = /** @class */ (function () {
	function ShopRandShopBaseCfgData () {
	}
	ShopRandShopBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopRandShopBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopRandShopBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型101; //探宝商城102; //天赋宝石商店103; //喵喵购物车110; //跨服竞技场 */
		 ShopRandShopBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  组随机类型 */
		 ShopRandShopBaseCfgData.getGroupRandTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupRandType;
			}
			return 0;
		};
		 /**  最大免费次数 */
		 ShopRandShopBaseCfgData.getFreeCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新消耗道具道具ID_道具数量 */
		 ShopRandShopBaseCfgData.getRefreshNeedItemByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  刷新最大次数0无限制 */
		 ShopRandShopBaseCfgData.getRefreshCountByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshCount;
			}
			return 0;
		};

	return ShopRandShopBaseCfgData
}());
	
cfg.ShopRandShopBaseCfgData = ShopRandShopBaseCfgData;
var ShopCurrencyTypeBaseCfgData  = /** @class */ (function () {
	function ShopCurrencyTypeBaseCfgData () {
	}
	ShopCurrencyTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ShopCurrencyTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ShopCurrencyTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "shopType");
		};
		 /**  商店类型 */
		 ShopCurrencyTypeBaseCfgData.getShopTypeByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.shopType;
			}
			return 0;
		};
		 /**  货币itemid */
		 ShopCurrencyTypeBaseCfgData.getCurrencyIdByShopType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.currencyId;
			}
			return 0;
		};

	return ShopCurrencyTypeBaseCfgData
}());
	
cfg.ShopCurrencyTypeBaseCfgData = ShopCurrencyTypeBaseCfgData;
var SkillEffectNewSkillEffectBaseCfgData  = /** @class */ (function () {
	function SkillEffectNewSkillEffectBaseCfgData () {
	}
	SkillEffectNewSkillEffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillEffectNewSkillEffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillEffectNewSkillEffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  皮肤ID */
		 SkillEffectNewSkillEffectBaseCfgData.getHeroIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.heroID;
			}
			return 0;
		};
		 /**  技能索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  施法位置 0:屏幕中心,1:保持不动;2:对位目标前;3;我方对位排:4:中心对位排 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castPos;
			}
			return 0;
		};
		 /**  施法时屏幕是否变黑 */
		 SkillEffectNewSkillEffectBaseCfgData.getDarkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.darkScreen;
			}
			return 0;
		};
		 /**  施法动作win 胜利动作不循环 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingAction;
			}
			return ""
		};
		 /**  施动作速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getAnimationSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.animationSpeed;
			}
			return 0;
		};
		 /**  施法特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingEffect;
			}
			return ""
		};
		 /**  施法特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSpeed;
			}
			return 0;
		};
		 /**  施法音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSound;
			}
			return ""
		};
		 /**  施法音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSoundDelay;
			}
			return 0;
		};
		 /**  技能特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillEffect;
			}
			return ""
		};
		 /**  技能特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSpeed;
			}
			return 0;
		};
		 /**  技能音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSound;
			}
			return ""
		};
		 /**  技能音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSoundDelay;
			}
			return 0;
		};
		 /**  飞行武器配置，默认用技能特效资源,【动作发起的帧数_相对角色偏移X_相对角色偏移Y;...】,当x,y都等于-1时，子弹默认从角色头顶发出 */
		 SkillEffectNewSkillEffectBaseCfgData.getWeaponActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weaponAction;
			}
			return ""
		};
		 /**  角色受到伤害的帧数(不填则默认表示本次受到飞行武器攻击，飞行配置不填则子弹从头顶发出) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitFramesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitFrames;
			}
			return ""
		};
		 /**  角色受击特效位置，0:随机，1:脚底，2:头顶，3:中心 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitPos;
			}
			return 0;
		};
		 /**  受击特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitEffect;
			}
			return ""
		};
		 /**  受击特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSpeed;
			}
			return 0;
		};
		 /**  受击音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSound;
			}
			return ""
		};
		 /**  受击音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSoundDelay;
			}
			return 0;
		};
		 /**  扩展参数(SkillEffectExtendsType) */
		 SkillEffectNewSkillEffectBaseCfgData.getExtendParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extendParams;
			}
			return ""
		};
		 /**  人物攻击站位的偏移 */
		 SkillEffectNewSkillEffectBaseCfgData.getRoleAttackOffsetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAttackOffset;
			}
			return ""
		};
		 /**  震屏配制 */
		 SkillEffectNewSkillEffectBaseCfgData.getSharkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sharkScreen;
			}
			return 0;
		};

	return SkillEffectNewSkillEffectBaseCfgData
}());
	
cfg.SkillEffectNewSkillEffectBaseCfgData = SkillEffectNewSkillEffectBaseCfgData;
var SkillEffectNewSkillEffectBaseCfgData  = /** @class */ (function () {
	function SkillEffectNewSkillEffectBaseCfgData () {
	}
	SkillEffectNewSkillEffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillEffectNewSkillEffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillEffectNewSkillEffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  皮肤ID */
		 SkillEffectNewSkillEffectBaseCfgData.getHeroIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.heroID;
			}
			return 0;
		};
		 /**  技能索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  施法位置 0:屏幕中心,1:保持不动;2:对位目标前;3;我方对位排:4:中心对位排 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castPos;
			}
			return 0;
		};
		 /**  施法时屏幕是否变黑 */
		 SkillEffectNewSkillEffectBaseCfgData.getDarkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.darkScreen;
			}
			return 0;
		};
		 /**  施法动作win 胜利动作不循环 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingAction;
			}
			return ""
		};
		 /**  施动作速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getAnimationSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.animationSpeed;
			}
			return 0;
		};
		 /**  施法特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingEffect;
			}
			return ""
		};
		 /**  施法特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSpeed;
			}
			return 0;
		};
		 /**  施法音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSound;
			}
			return ""
		};
		 /**  施法音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSoundDelay;
			}
			return 0;
		};
		 /**  技能特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillEffect;
			}
			return ""
		};
		 /**  技能特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSpeed;
			}
			return 0;
		};
		 /**  技能音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSound;
			}
			return ""
		};
		 /**  技能音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSoundDelay;
			}
			return 0;
		};
		 /**  飞行武器配置，默认用技能特效资源,【动作发起的帧数_相对角色偏移X_相对角色偏移Y;...】,当x,y都等于-1时，子弹默认从角色头顶发出 */
		 SkillEffectNewSkillEffectBaseCfgData.getWeaponActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weaponAction;
			}
			return ""
		};
		 /**  角色受到伤害的帧数(不填则默认表示本次受到飞行武器攻击，飞行配置不填则子弹从头顶发出) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitFramesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitFrames;
			}
			return ""
		};
		 /**  角色受击特效位置，0:随机，1:脚底，2:头顶，3:中心 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitPos;
			}
			return 0;
		};
		 /**  受击特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitEffect;
			}
			return ""
		};
		 /**  受击特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSpeed;
			}
			return 0;
		};
		 /**  受击音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSound;
			}
			return ""
		};
		 /**  受击音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSoundDelay;
			}
			return 0;
		};
		 /**  扩展参数(SkillEffectExtendsType) */
		 SkillEffectNewSkillEffectBaseCfgData.getExtendParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extendParams;
			}
			return ""
		};
		 /**  人物攻击站位的偏移 */
		 SkillEffectNewSkillEffectBaseCfgData.getRoleAttackOffsetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAttackOffset;
			}
			return ""
		};
		 /**  震屏配制 */
		 SkillEffectNewSkillEffectBaseCfgData.getSharkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sharkScreen;
			}
			return 0;
		};

	return SkillEffectNewSkillEffectBaseCfgData
}());
	
cfg.SkillEffectNewSkillEffectBaseCfgData = SkillEffectNewSkillEffectBaseCfgData;
var SkillEffectNewSkillEffectBaseCfgData  = /** @class */ (function () {
	function SkillEffectNewSkillEffectBaseCfgData () {
	}
	SkillEffectNewSkillEffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillEffectNewSkillEffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillEffectNewSkillEffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  皮肤ID */
		 SkillEffectNewSkillEffectBaseCfgData.getHeroIDByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.heroID;
			}
			return 0;
		};
		 /**  技能索引 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  施法位置 0:屏幕中心,1:保持不动;2:对位目标前;3;我方对位排:4:中心对位排 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castPos;
			}
			return 0;
		};
		 /**  施法时屏幕是否变黑 */
		 SkillEffectNewSkillEffectBaseCfgData.getDarkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.darkScreen;
			}
			return 0;
		};
		 /**  施法动作win 胜利动作不循环 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingAction;
			}
			return ""
		};
		 /**  施动作速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getAnimationSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.animationSpeed;
			}
			return 0;
		};
		 /**  施法特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingEffect;
			}
			return ""
		};
		 /**  施法特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSpeed;
			}
			return 0;
		};
		 /**  施法音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSound;
			}
			return ""
		};
		 /**  施法音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getCastingSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.castingSoundDelay;
			}
			return 0;
		};
		 /**  技能特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillEffect;
			}
			return ""
		};
		 /**  技能特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSpeed;
			}
			return 0;
		};
		 /**  技能音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSound;
			}
			return ""
		};
		 /**  技能音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getSkillSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillSoundDelay;
			}
			return 0;
		};
		 /**  飞行武器配置，默认用技能特效资源,【动作发起的帧数_相对角色偏移X_相对角色偏移Y;...】,当x,y都等于-1时，子弹默认从角色头顶发出 */
		 SkillEffectNewSkillEffectBaseCfgData.getWeaponActionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.weaponAction;
			}
			return ""
		};
		 /**  角色受到伤害的帧数(不填则默认表示本次受到飞行武器攻击，飞行配置不填则子弹从头顶发出) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitFramesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitFrames;
			}
			return ""
		};
		 /**  角色受击特效位置，0:随机，1:脚底，2:头顶，3:中心 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitPosByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitPos;
			}
			return 0;
		};
		 /**  受击特效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitEffectByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitEffect;
			}
			return ""
		};
		 /**  受击特效速度(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSpeedByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSpeed;
			}
			return 0;
		};
		 /**  受击音效 */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSound;
			}
			return ""
		};
		 /**  受击音效播放延迟(ms) */
		 SkillEffectNewSkillEffectBaseCfgData.getBehitSoundDelayByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.behitSoundDelay;
			}
			return 0;
		};
		 /**  扩展参数(SkillEffectExtendsType) */
		 SkillEffectNewSkillEffectBaseCfgData.getExtendParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extendParams;
			}
			return ""
		};
		 /**  人物攻击站位的偏移 */
		 SkillEffectNewSkillEffectBaseCfgData.getRoleAttackOffsetByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roleAttackOffset;
			}
			return ""
		};
		 /**  震屏配制 */
		 SkillEffectNewSkillEffectBaseCfgData.getSharkScreenByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sharkScreen;
			}
			return 0;
		};

	return SkillEffectNewSkillEffectBaseCfgData
}());
	
cfg.SkillEffectNewSkillEffectBaseCfgData = SkillEffectNewSkillEffectBaseCfgData;
var SkillNewRaceDamagaBaseCfgData  = /** @class */ (function () {
	function SkillNewRaceDamagaBaseCfgData () {
	}
	SkillNewRaceDamagaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRaceDamagaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRaceDamagaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackRace");
		};
		 /**  攻击方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getAttackRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackRace;
			}
			return 0;
		};
		 /**  防御方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getDefenseRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseRace;
			}
			return 0;
		};
		 /**  伤害万分比 */
		 SkillNewRaceDamagaBaseCfgData.getDamageRateByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};

	return SkillNewRaceDamagaBaseCfgData
}());
	
cfg.SkillNewRaceDamagaBaseCfgData = SkillNewRaceDamagaBaseCfgData;
var SkillNewSpecialSkillDelayBaseCfgData  = /** @class */ (function () {
	function SkillNewSpecialSkillDelayBaseCfgData () {
	}
	SkillNewSpecialSkillDelayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSpecialSkillDelayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSpecialSkillDelayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 SkillNewSpecialSkillDelayBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  延迟毫秒 */
		 SkillNewSpecialSkillDelayBaseCfgData.getDelayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delay;
			}
			return 0;
		};

	return SkillNewSpecialSkillDelayBaseCfgData
}());
	
cfg.SkillNewSpecialSkillDelayBaseCfgData = SkillNewSpecialSkillDelayBaseCfgData;
var SkillNewRecommendTalentBaseCfgData  = /** @class */ (function () {
	function SkillNewRecommendTalentBaseCfgData () {
	}
	SkillNewRecommendTalentBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRecommendTalentBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRecommendTalentBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业 */
		 SkillNewRecommendTalentBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewRecommendTalentBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return SkillNewRecommendTalentBaseCfgData
}());
	
cfg.SkillNewRecommendTalentBaseCfgData = SkillNewRecommendTalentBaseCfgData;
var SkillNewTalentUpgradeBaseCfgData  = /** @class */ (function () {
	function SkillNewTalentUpgradeBaseCfgData () {
	}
	SkillNewTalentUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewTalentUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewTalentUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  唯一索引 */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  等级 */
		 SkillNewTalentUpgradeBaseCfgData.getLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  名称 */
		 SkillNewTalentUpgradeBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  遗忘消耗道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delNeedItem;
			}
			return ""
		};
		 /**  遗忘返还道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelAddItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAddItem;
			}
			return ""
		};
		 /**  增加评分 */
		 SkillNewTalentUpgradeBaseCfgData.getAddScoreBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return SkillNewTalentUpgradeBaseCfgData
}());
	
cfg.SkillNewTalentUpgradeBaseCfgData = SkillNewTalentUpgradeBaseCfgData;
var SkillNewSkillBaseCfgData  = /** @class */ (function () {
	function SkillNewSkillBaseCfgData () {
	}
	SkillNewSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  索引 */
		 SkillNewSkillBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能标号 */
		 SkillNewSkillBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 SkillNewSkillBaseCfgData.getSkillLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能名 */
		 SkillNewSkillBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能描述 */
		 SkillNewSkillBaseCfgData.getDesBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  客户端技能特效类型Administrator:1://普通效果2：//弹道技能打多个目标（子弹分裂）3：//纵向弹道 */
		 SkillNewSkillBaseCfgData.getClientEffectTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.clientEffectType;
			}
			return 0;
		};
		 /**  技能类型1;//被动技能2;//普攻3;//主动技能 */
		 SkillNewSkillBaseCfgData.getSkillTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  攻击类型0 无类型1 物理攻击2 法术攻击 */
		 SkillNewSkillBaseCfgData.getAttackTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  技能顺序(分号)1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getSkillOrderBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillOrder;
			}
			return ""
		};
		 /**  顺序参数1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getOrderParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.orderParam;
			}
			return ""
		};
		 /**  触发类型_emSkillTriggerType类型_概率1;//被攻击触发 2;//额外伤害 3;//使用技能触发(继承技能目标) 参数 技能ID1(0表示所有技能)_技能ID1...4;//回合数触发 参数:回合1_回合2;(2_0表示第二回合后每回合)5;//攻击触发6;//自己buff状态加强 参数:buff类型_万分比7;//每回合开始血量加buff 参数:血量百分比_不低于加buff_低于加buff;8;//使用技能触发(忽略技能目标) 参数:技能ID(0表示所有技能)9;//随机或技能 技能1_技能210;//死亡触发复活11;//队伍暴击 参数:万分比12;//生命触发 生命百分比13;//队伍状态额外伤害 参数:取属性类型_属性万分比_状态1_状态214;//随机与技能 概率1_技能1_概率2_技能215;//击杀目标触发使用上一个技能 参数:攻击力万分比16;//目标属性对比加自身属性 参数:属性类型_低于加属性类型_低于加属性类型万分比__高于加属性类型_高于加属性类型万分比17;//击杀目标触发 参数:技能ID18;//普通攻击触发19;//队伍死亡触发 参数:状态（0无状态）20;//被技能击杀目标,攻击力减少 参数:技能ID_攻击力万分比21;//携带状态敌方死亡 参数:状态ID22;//技能组合(走子技能CD) 参数:技能ID1_技能ID223;//物理攻击触发 24;//法术攻击触发 25;//物理攻击触发连击 参数：伤害降低_控制降低26;//法术攻击触发连击 参数：伤害降低_控制降低27;//物理攻击击杀之后追加普攻28;//物理攻击暴击之后追加普攻29;//复活触发30;//伤害超过目标生命值多少触发 参数：伤害万分比31;//自己使用治疗触发32;//使用额外技能斩击触发 参数:技能ID33;//自己暴击触发 */
		 SkillNewSkillBaseCfgData.getTriggerTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return ""
		};
		 /**  触发参数 */
		 SkillNewSkillBaseCfgData.getTriggerParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerParam;
			}
			return ""
		};
		 /**  回合开始回合_冷却回合 */
		 SkillNewSkillBaseCfgData.getCoolRoundBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolRound;
			}
			return ""
		};
		 /**  目标类型 0;//敌方 1;//友方 2;//自己 */
		 SkillNewSkillBaseCfgData.getTargetTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  范围类型类型_最大目标个数1; //对位单体2; //全体3; //前排4; //中排5; //后排6; //前中排7; //前后排8; //中后排9; //随机横排10; //上列11; //中列12; //下列 13; //随机列 14; //对位列15; //最大血量16; //最小血量17; //攻击最高18; //攻击最低19; //速度最高20; //速度最低21; //防御最高22; //防御最低23; //随机24; //人数最多的一列 */
		 SkillNewSkillBaseCfgData.getRangeTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rangeType;
			}
			return ""
		};
		 /**  优先目标条件_emSkillTarCondition1;//职业 参数 职业类型_emPetJobType2;//状态 参数: 状态1_状态2 */
		 SkillNewSkillBaseCfgData.getTargetConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetCondition;
			}
			return ""
		};
		 /**  掩码_emSkillMaskType1;//是否忽略自己2;//是否继承伤害次数3;//是否选择死亡角色4;//是否不给自己加buff5;//是否继承目标6;//是否延时释放7;//是否无尽试炼连续释放8;//是否延时技能只能放一次9;//是否使用上一次伤害10;//是否使用上一次暴击伤害11;//增加buff下一回合生效12;//优先技能，必定最先释放，无视控制技能 */
		 SkillNewSkillBaseCfgData.getMaskBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mask;
			}
			return ""
		};
		 /**  治疗取伤害记录_属性类型_万分比_额外值_是否死亡(1死亡)_溢出加buff_是否取目标1;//上一次技能伤害2;//上一次队伍暴击伤害 */
		 SkillNewSkillBaseCfgData.getCureBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cure;
			}
			return ""
		};
		 /**  伤害公式是否取自己_属性类型_百分比_段数_无视防御万分比 */
		 SkillNewSkillBaseCfgData.getDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damage;
			}
			return ""
		};
		 /**  1;//职业 职业类型_万分比2;//状态 万分比_状态1_状态2(BuffControlType)3;//正负面效果 效果(_emBuffEffectType)_万分比4;//概率提升 概率万分比_万分比5;//属性低于自身  属性类型_万分比6;//生命值高于   生命万分比_万分比7;//生命值低于   生命万分比_万分比8;//目标属性伤害  属性类型_万分比_限制属性类型_限制万分比9;//普攻触发    万分比10;//目标效果个数   效果(_emBuffEffectType)_万分比11;//损失血量万分比伤害  万分比12;//职业伤害值  职业类型_取目标属性类型_万分比_限制自身属性类型_限制万分比 */
		 SkillNewSkillBaseCfgData.getExtraDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraDamage;
			}
			return ""
		};
		 /**  额外属性加成_emSkillAttrCondition1;//状态或加属性    属性类型_属性值_万分比_状态1(BuffControlType)_状态2 2;//血量高于百分比    百分比_属性类型_属性值_万分比3;//临时加属性     属性类型_属性值_万分比4;//血量低于百分比    百分比_属性类型_属性值_万分比5;//职业加临时数据    职业_属性类型_属性值_万分比6;//最先出手      属性类型1_属性值1_万分比1_属性类型2_属性值2_万分比27;//血量降低x%,属性提高y%  属性类型_血量降低万分比_提高值8;//对方有技能xxx属性提高  属性类型_属性提高值_技能ID_技能ID_ ...9;//对方有技能xxx属性降低  属性类型_属性降低值_技能ID_技能ID_ ...10;//无视防御 无视防御万分比 */
		 SkillNewSkillBaseCfgData.getExtraAddAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddAttr;
			}
			return ""
		};
		 /**  公共条件__emSkillCommonCondition1;//状态增加治疗 万分比_状态ID 2;//血量低于加治疗效果 万分比_加治疗效果万分比3;//驱散增加生命上限伤害 驱散个数_生命上限万分比4;//技能段斩杀  段ID_生命万分比_不超过自身属性_不超过自身属性万分比5;//额外技能目标个数  概率_个数6;//使用上一次总伤害加护盾  万分比7;//使用HP加护盾  HP的万分比8;//状态层数加次数 参数:stateid_buff层数_最大次数9;//限制伤害 最大值_最小值10;//使用上一次治疗量加护盾  万分比11;//伤害均摊 */
		 SkillNewSkillBaseCfgData.getCommonConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.commonCondition;
			}
			return ""
		};
		 /**  给目标加buff条件_emSkillBuffCondition1;//职业 参数 职业类型_emPetJobType_buff额外万分比2;//状态 参数: 状态1_状态23;//死亡4;//暴击5;//属性低于自身  属性类型_buff概率万分比6;//状态提升概率  状态1_buff概率万分比7;//buff随机个数  个数8;//生命值低于万分比 万分比9;//选择职业 参数 职业类型1_职业类型2....10;//buff权重随机个数  个数 */
		 SkillNewSkillBaseCfgData.getAddTarBuffConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuffCondition;
			}
			return ""
		};
		 /**  增加目标buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddTarBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuff;
			}
			return ""
		};
		 /**  给自己加buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddSelfBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfBuff;
			}
			return ""
		};
		 /**  给自身加属性属性类型_值_万分比 */
		 SkillNewSkillBaseCfgData.getAddSelfAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfAttr;
			}
			return ""
		};
		 /**  携带物技能 */
		 SkillNewSkillBaseCfgData.getHorcruxSkillBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcruxSkill;
			}
			return 0;
		};

	return SkillNewSkillBaseCfgData
}());
	
cfg.SkillNewSkillBaseCfgData = SkillNewSkillBaseCfgData;
var SkillNewTalentUpgradeBaseCfgData  = /** @class */ (function () {
	function SkillNewTalentUpgradeBaseCfgData () {
	}
	SkillNewTalentUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewTalentUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewTalentUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  唯一索引 */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  等级 */
		 SkillNewTalentUpgradeBaseCfgData.getLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  名称 */
		 SkillNewTalentUpgradeBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  遗忘消耗道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delNeedItem;
			}
			return ""
		};
		 /**  遗忘返还道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelAddItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAddItem;
			}
			return ""
		};
		 /**  增加评分 */
		 SkillNewTalentUpgradeBaseCfgData.getAddScoreBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return SkillNewTalentUpgradeBaseCfgData
}());
	
cfg.SkillNewTalentUpgradeBaseCfgData = SkillNewTalentUpgradeBaseCfgData;
var SkillNewRecommendTalentBaseCfgData  = /** @class */ (function () {
	function SkillNewRecommendTalentBaseCfgData () {
	}
	SkillNewRecommendTalentBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRecommendTalentBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRecommendTalentBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业 */
		 SkillNewRecommendTalentBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewRecommendTalentBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return SkillNewRecommendTalentBaseCfgData
}());
	
cfg.SkillNewRecommendTalentBaseCfgData = SkillNewRecommendTalentBaseCfgData;
var SkillNewSpecialSkillDelayBaseCfgData  = /** @class */ (function () {
	function SkillNewSpecialSkillDelayBaseCfgData () {
	}
	SkillNewSpecialSkillDelayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSpecialSkillDelayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSpecialSkillDelayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 SkillNewSpecialSkillDelayBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  延迟毫秒 */
		 SkillNewSpecialSkillDelayBaseCfgData.getDelayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delay;
			}
			return 0;
		};

	return SkillNewSpecialSkillDelayBaseCfgData
}());
	
cfg.SkillNewSpecialSkillDelayBaseCfgData = SkillNewSpecialSkillDelayBaseCfgData;
var SkillNewTalentUpgradeBaseCfgData  = /** @class */ (function () {
	function SkillNewTalentUpgradeBaseCfgData () {
	}
	SkillNewTalentUpgradeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewTalentUpgradeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewTalentUpgradeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  唯一索引 */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewTalentUpgradeBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  等级 */
		 SkillNewTalentUpgradeBaseCfgData.getLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  名称 */
		 SkillNewTalentUpgradeBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  需要道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  遗忘消耗道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelNeedItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delNeedItem;
			}
			return ""
		};
		 /**  遗忘返还道具道具ID_道具数量 */
		 SkillNewTalentUpgradeBaseCfgData.getDelAddItemBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delAddItem;
			}
			return ""
		};
		 /**  增加评分 */
		 SkillNewTalentUpgradeBaseCfgData.getAddScoreBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addScore;
			}
			return 0;
		};

	return SkillNewTalentUpgradeBaseCfgData
}());
	
cfg.SkillNewTalentUpgradeBaseCfgData = SkillNewTalentUpgradeBaseCfgData;
var SkillNewSkillBaseCfgData  = /** @class */ (function () {
	function SkillNewSkillBaseCfgData () {
	}
	SkillNewSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  索引 */
		 SkillNewSkillBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能标号 */
		 SkillNewSkillBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 SkillNewSkillBaseCfgData.getSkillLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能名 */
		 SkillNewSkillBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能描述 */
		 SkillNewSkillBaseCfgData.getDesBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  客户端技能特效类型Administrator:1://普通效果2：//弹道技能打多个目标（子弹分裂）3：//纵向弹道 */
		 SkillNewSkillBaseCfgData.getClientEffectTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.clientEffectType;
			}
			return 0;
		};
		 /**  技能类型1;//被动技能2;//普攻3;//主动技能 */
		 SkillNewSkillBaseCfgData.getSkillTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  攻击类型0 无类型1 物理攻击2 法术攻击 */
		 SkillNewSkillBaseCfgData.getAttackTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  技能顺序(分号)1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getSkillOrderBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillOrder;
			}
			return ""
		};
		 /**  顺序参数1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getOrderParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.orderParam;
			}
			return ""
		};
		 /**  触发类型_emSkillTriggerType类型_概率1;//被攻击触发 2;//额外伤害 3;//使用技能触发(继承技能目标) 参数 技能ID1(0表示所有技能)_技能ID1...4;//回合数触发 参数:回合1_回合2;(2_0表示第二回合后每回合)5;//攻击触发6;//自己buff状态加强 参数:buff类型_万分比7;//每回合开始血量加buff 参数:血量百分比_不低于加buff_低于加buff;8;//使用技能触发(忽略技能目标) 参数:技能ID(0表示所有技能)9;//随机或技能 技能1_技能210;//死亡触发复活11;//队伍暴击 参数:万分比12;//生命触发 生命百分比13;//队伍状态额外伤害 参数:取属性类型_属性万分比_状态1_状态214;//随机与技能 概率1_技能1_概率2_技能215;//击杀目标触发使用上一个技能 参数:攻击力万分比16;//目标属性对比加自身属性 参数:属性类型_低于加属性类型_低于加属性类型万分比__高于加属性类型_高于加属性类型万分比17;//击杀目标触发 参数:技能ID18;//普通攻击触发19;//队伍死亡触发 参数:状态（0无状态）20;//被技能击杀目标,攻击力减少 参数:技能ID_攻击力万分比21;//携带状态敌方死亡 参数:状态ID22;//技能组合(走子技能CD) 参数:技能ID1_技能ID223;//物理攻击触发 24;//法术攻击触发 25;//物理攻击触发连击 参数：伤害降低_控制降低26;//法术攻击触发连击 参数：伤害降低_控制降低27;//物理攻击击杀之后追加普攻28;//物理攻击暴击之后追加普攻29;//复活触发30;//伤害超过目标生命值多少触发 参数：伤害万分比31;//自己使用治疗触发32;//使用额外技能斩击触发 参数:技能ID33;//自己暴击触发 */
		 SkillNewSkillBaseCfgData.getTriggerTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return ""
		};
		 /**  触发参数 */
		 SkillNewSkillBaseCfgData.getTriggerParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerParam;
			}
			return ""
		};
		 /**  回合开始回合_冷却回合 */
		 SkillNewSkillBaseCfgData.getCoolRoundBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolRound;
			}
			return ""
		};
		 /**  目标类型 0;//敌方 1;//友方 2;//自己 */
		 SkillNewSkillBaseCfgData.getTargetTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  范围类型类型_最大目标个数1; //对位单体2; //全体3; //前排4; //中排5; //后排6; //前中排7; //前后排8; //中后排9; //随机横排10; //上列11; //中列12; //下列 13; //随机列 14; //对位列15; //最大血量16; //最小血量17; //攻击最高18; //攻击最低19; //速度最高20; //速度最低21; //防御最高22; //防御最低23; //随机24; //人数最多的一列 */
		 SkillNewSkillBaseCfgData.getRangeTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rangeType;
			}
			return ""
		};
		 /**  优先目标条件_emSkillTarCondition1;//职业 参数 职业类型_emPetJobType2;//状态 参数: 状态1_状态2 */
		 SkillNewSkillBaseCfgData.getTargetConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetCondition;
			}
			return ""
		};
		 /**  掩码_emSkillMaskType1;//是否忽略自己2;//是否继承伤害次数3;//是否选择死亡角色4;//是否不给自己加buff5;//是否继承目标6;//是否延时释放7;//是否无尽试炼连续释放8;//是否延时技能只能放一次9;//是否使用上一次伤害10;//是否使用上一次暴击伤害11;//增加buff下一回合生效12;//优先技能，必定最先释放，无视控制技能 */
		 SkillNewSkillBaseCfgData.getMaskBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mask;
			}
			return ""
		};
		 /**  治疗取伤害记录_属性类型_万分比_额外值_是否死亡(1死亡)_溢出加buff_是否取目标1;//上一次技能伤害2;//上一次队伍暴击伤害 */
		 SkillNewSkillBaseCfgData.getCureBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cure;
			}
			return ""
		};
		 /**  伤害公式是否取自己_属性类型_百分比_段数_无视防御万分比 */
		 SkillNewSkillBaseCfgData.getDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damage;
			}
			return ""
		};
		 /**  1;//职业 职业类型_万分比2;//状态 万分比_状态1_状态2(BuffControlType)3;//正负面效果 效果(_emBuffEffectType)_万分比4;//概率提升 概率万分比_万分比5;//属性低于自身  属性类型_万分比6;//生命值高于   生命万分比_万分比7;//生命值低于   生命万分比_万分比8;//目标属性伤害  属性类型_万分比_限制属性类型_限制万分比9;//普攻触发    万分比10;//目标效果个数   效果(_emBuffEffectType)_万分比11;//损失血量万分比伤害  万分比12;//职业伤害值  职业类型_取目标属性类型_万分比_限制自身属性类型_限制万分比 */
		 SkillNewSkillBaseCfgData.getExtraDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraDamage;
			}
			return ""
		};
		 /**  额外属性加成_emSkillAttrCondition1;//状态或加属性    属性类型_属性值_万分比_状态1(BuffControlType)_状态2 2;//血量高于百分比    百分比_属性类型_属性值_万分比3;//临时加属性     属性类型_属性值_万分比4;//血量低于百分比    百分比_属性类型_属性值_万分比5;//职业加临时数据    职业_属性类型_属性值_万分比6;//最先出手      属性类型1_属性值1_万分比1_属性类型2_属性值2_万分比27;//血量降低x%,属性提高y%  属性类型_血量降低万分比_提高值8;//对方有技能xxx属性提高  属性类型_属性提高值_技能ID_技能ID_ ...9;//对方有技能xxx属性降低  属性类型_属性降低值_技能ID_技能ID_ ...10;//无视防御 无视防御万分比 */
		 SkillNewSkillBaseCfgData.getExtraAddAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddAttr;
			}
			return ""
		};
		 /**  公共条件__emSkillCommonCondition1;//状态增加治疗 万分比_状态ID 2;//血量低于加治疗效果 万分比_加治疗效果万分比3;//驱散增加生命上限伤害 驱散个数_生命上限万分比4;//技能段斩杀  段ID_生命万分比_不超过自身属性_不超过自身属性万分比5;//额外技能目标个数  概率_个数6;//使用上一次总伤害加护盾  万分比7;//使用HP加护盾  HP的万分比8;//状态层数加次数 参数:stateid_buff层数_最大次数9;//限制伤害 最大值_最小值10;//使用上一次治疗量加护盾  万分比11;//伤害均摊 */
		 SkillNewSkillBaseCfgData.getCommonConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.commonCondition;
			}
			return ""
		};
		 /**  给目标加buff条件_emSkillBuffCondition1;//职业 参数 职业类型_emPetJobType_buff额外万分比2;//状态 参数: 状态1_状态23;//死亡4;//暴击5;//属性低于自身  属性类型_buff概率万分比6;//状态提升概率  状态1_buff概率万分比7;//buff随机个数  个数8;//生命值低于万分比 万分比9;//选择职业 参数 职业类型1_职业类型2....10;//buff权重随机个数  个数 */
		 SkillNewSkillBaseCfgData.getAddTarBuffConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuffCondition;
			}
			return ""
		};
		 /**  增加目标buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddTarBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuff;
			}
			return ""
		};
		 /**  给自己加buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddSelfBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfBuff;
			}
			return ""
		};
		 /**  给自身加属性属性类型_值_万分比 */
		 SkillNewSkillBaseCfgData.getAddSelfAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfAttr;
			}
			return ""
		};
		 /**  携带物技能 */
		 SkillNewSkillBaseCfgData.getHorcruxSkillBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcruxSkill;
			}
			return 0;
		};

	return SkillNewSkillBaseCfgData
}());
	
cfg.SkillNewSkillBaseCfgData = SkillNewSkillBaseCfgData;
var SkillNewRaceDamagaBaseCfgData  = /** @class */ (function () {
	function SkillNewRaceDamagaBaseCfgData () {
	}
	SkillNewRaceDamagaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRaceDamagaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRaceDamagaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackRace");
		};
		 /**  攻击方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getAttackRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackRace;
			}
			return 0;
		};
		 /**  防御方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getDefenseRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseRace;
			}
			return 0;
		};
		 /**  伤害万分比 */
		 SkillNewRaceDamagaBaseCfgData.getDamageRateByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};

	return SkillNewRaceDamagaBaseCfgData
}());
	
cfg.SkillNewRaceDamagaBaseCfgData = SkillNewRaceDamagaBaseCfgData;
var SkillNewRecommendTalentBaseCfgData  = /** @class */ (function () {
	function SkillNewRecommendTalentBaseCfgData () {
	}
	SkillNewRecommendTalentBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRecommendTalentBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRecommendTalentBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "jobType");
		};
		 /**  职业 */
		 SkillNewRecommendTalentBaseCfgData.getJobTypeByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.jobType;
			}
			return 0;
		};
		 /**  技能ID */
		 SkillNewRecommendTalentBaseCfgData.getSkillIDByJobType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return SkillNewRecommendTalentBaseCfgData
}());
	
cfg.SkillNewRecommendTalentBaseCfgData = SkillNewRecommendTalentBaseCfgData;
var SkillNewSpecialSkillDelayBaseCfgData  = /** @class */ (function () {
	function SkillNewSpecialSkillDelayBaseCfgData () {
	}
	SkillNewSpecialSkillDelayBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSpecialSkillDelayBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSpecialSkillDelayBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 SkillNewSpecialSkillDelayBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  延迟毫秒 */
		 SkillNewSpecialSkillDelayBaseCfgData.getDelayById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.delay;
			}
			return 0;
		};

	return SkillNewSpecialSkillDelayBaseCfgData
}());
	
cfg.SkillNewSpecialSkillDelayBaseCfgData = SkillNewSpecialSkillDelayBaseCfgData;
var SkillNewSkillBaseCfgData  = /** @class */ (function () {
	function SkillNewSkillBaseCfgData () {
	}
	SkillNewSkillBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewSkillBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewSkillBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "skillIndex");
		};
		 /**  索引 */
		 SkillNewSkillBaseCfgData.getSkillIndexBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillIndex;
			}
			return 0;
		};
		 /**  技能标号 */
		 SkillNewSkillBaseCfgData.getSkillIDBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return 0;
		};
		 /**  技能等级 */
		 SkillNewSkillBaseCfgData.getSkillLevelBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillLevel;
			}
			return 0;
		};
		 /**  技能名 */
		 SkillNewSkillBaseCfgData.getNameBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  技能描述 */
		 SkillNewSkillBaseCfgData.getDesBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  客户端技能特效类型Administrator:1://普通效果2：//弹道技能打多个目标（子弹分裂）3：//纵向弹道 */
		 SkillNewSkillBaseCfgData.getClientEffectTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.clientEffectType;
			}
			return 0;
		};
		 /**  技能类型1;//被动技能2;//普攻3;//主动技能 */
		 SkillNewSkillBaseCfgData.getSkillTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillType;
			}
			return 0;
		};
		 /**  攻击类型0 无类型1 物理攻击2 法术攻击 */
		 SkillNewSkillBaseCfgData.getAttackTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackType;
			}
			return 0;
		};
		 /**  技能顺序(分号)1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getSkillOrderBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillOrder;
			}
			return ""
		};
		 /**  顺序参数1;//伤害2;//治疗3;//给目标加buff4;//给自己加buff5;//驱散   参数:概率_效果类型_个数(0表示所有)6;//反击   参数:概率_取自身属性类型_属性万分比7;//给自己治疗8;//回复上一次伤害生命 参数:万分比9;//删除状态buff 参数:状态ID10;//真实伤害11;//使用上一次伤害12;//优先技能，必定最先释放，无视控制技能，百分比真实伤害 参数：万分比_伤害最大不超过攻击方攻击力的万分比13;//回复上一次伤害生命 参数:万分比14;//反伤  参数：概率_取自身属性类型_属性万分比 15;//反伤  参数：概率_万分比  16;//根据阵营数量加buff 参数 阵营类型1_数量1_bufferid1....(这些是或关系，取一个数量最大的)17;//复制buff 参数 buffer类型_数量_最大层数_是否敌人（0友方1敌方）_数量（0表示全部）_属性类型_排序（0最小，1最大） */
		 SkillNewSkillBaseCfgData.getOrderParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.orderParam;
			}
			return ""
		};
		 /**  触发类型_emSkillTriggerType类型_概率1;//被攻击触发 2;//额外伤害 3;//使用技能触发(继承技能目标) 参数 技能ID1(0表示所有技能)_技能ID1...4;//回合数触发 参数:回合1_回合2;(2_0表示第二回合后每回合)5;//攻击触发6;//自己buff状态加强 参数:buff类型_万分比7;//每回合开始血量加buff 参数:血量百分比_不低于加buff_低于加buff;8;//使用技能触发(忽略技能目标) 参数:技能ID(0表示所有技能)9;//随机或技能 技能1_技能210;//死亡触发复活11;//队伍暴击 参数:万分比12;//生命触发 生命百分比13;//队伍状态额外伤害 参数:取属性类型_属性万分比_状态1_状态214;//随机与技能 概率1_技能1_概率2_技能215;//击杀目标触发使用上一个技能 参数:攻击力万分比16;//目标属性对比加自身属性 参数:属性类型_低于加属性类型_低于加属性类型万分比__高于加属性类型_高于加属性类型万分比17;//击杀目标触发 参数:技能ID18;//普通攻击触发19;//队伍死亡触发 参数:状态（0无状态）20;//被技能击杀目标,攻击力减少 参数:技能ID_攻击力万分比21;//携带状态敌方死亡 参数:状态ID22;//技能组合(走子技能CD) 参数:技能ID1_技能ID223;//物理攻击触发 24;//法术攻击触发 25;//物理攻击触发连击 参数：伤害降低_控制降低26;//法术攻击触发连击 参数：伤害降低_控制降低27;//物理攻击击杀之后追加普攻28;//物理攻击暴击之后追加普攻29;//复活触发30;//伤害超过目标生命值多少触发 参数：伤害万分比31;//自己使用治疗触发32;//使用额外技能斩击触发 参数:技能ID33;//自己暴击触发 */
		 SkillNewSkillBaseCfgData.getTriggerTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return ""
		};
		 /**  触发参数 */
		 SkillNewSkillBaseCfgData.getTriggerParamBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerParam;
			}
			return ""
		};
		 /**  回合开始回合_冷却回合 */
		 SkillNewSkillBaseCfgData.getCoolRoundBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.coolRound;
			}
			return ""
		};
		 /**  目标类型 0;//敌方 1;//友方 2;//自己 */
		 SkillNewSkillBaseCfgData.getTargetTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetType;
			}
			return 0;
		};
		 /**  范围类型类型_最大目标个数1; //对位单体2; //全体3; //前排4; //中排5; //后排6; //前中排7; //前后排8; //中后排9; //随机横排10; //上列11; //中列12; //下列 13; //随机列 14; //对位列15; //最大血量16; //最小血量17; //攻击最高18; //攻击最低19; //速度最高20; //速度最低21; //防御最高22; //防御最低23; //随机24; //人数最多的一列 */
		 SkillNewSkillBaseCfgData.getRangeTypeBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rangeType;
			}
			return ""
		};
		 /**  优先目标条件_emSkillTarCondition1;//职业 参数 职业类型_emPetJobType2;//状态 参数: 状态1_状态2 */
		 SkillNewSkillBaseCfgData.getTargetConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.targetCondition;
			}
			return ""
		};
		 /**  掩码_emSkillMaskType1;//是否忽略自己2;//是否继承伤害次数3;//是否选择死亡角色4;//是否不给自己加buff5;//是否继承目标6;//是否延时释放7;//是否无尽试炼连续释放8;//是否延时技能只能放一次9;//是否使用上一次伤害10;//是否使用上一次暴击伤害11;//增加buff下一回合生效12;//优先技能，必定最先释放，无视控制技能 */
		 SkillNewSkillBaseCfgData.getMaskBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mask;
			}
			return ""
		};
		 /**  治疗取伤害记录_属性类型_万分比_额外值_是否死亡(1死亡)_溢出加buff_是否取目标1;//上一次技能伤害2;//上一次队伍暴击伤害 */
		 SkillNewSkillBaseCfgData.getCureBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cure;
			}
			return ""
		};
		 /**  伤害公式是否取自己_属性类型_百分比_段数_无视防御万分比 */
		 SkillNewSkillBaseCfgData.getDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damage;
			}
			return ""
		};
		 /**  1;//职业 职业类型_万分比2;//状态 万分比_状态1_状态2(BuffControlType)3;//正负面效果 效果(_emBuffEffectType)_万分比4;//概率提升 概率万分比_万分比5;//属性低于自身  属性类型_万分比6;//生命值高于   生命万分比_万分比7;//生命值低于   生命万分比_万分比8;//目标属性伤害  属性类型_万分比_限制属性类型_限制万分比9;//普攻触发    万分比10;//目标效果个数   效果(_emBuffEffectType)_万分比11;//损失血量万分比伤害  万分比12;//职业伤害值  职业类型_取目标属性类型_万分比_限制自身属性类型_限制万分比 */
		 SkillNewSkillBaseCfgData.getExtraDamageBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraDamage;
			}
			return ""
		};
		 /**  额外属性加成_emSkillAttrCondition1;//状态或加属性    属性类型_属性值_万分比_状态1(BuffControlType)_状态2 2;//血量高于百分比    百分比_属性类型_属性值_万分比3;//临时加属性     属性类型_属性值_万分比4;//血量低于百分比    百分比_属性类型_属性值_万分比5;//职业加临时数据    职业_属性类型_属性值_万分比6;//最先出手      属性类型1_属性值1_万分比1_属性类型2_属性值2_万分比27;//血量降低x%,属性提高y%  属性类型_血量降低万分比_提高值8;//对方有技能xxx属性提高  属性类型_属性提高值_技能ID_技能ID_ ...9;//对方有技能xxx属性降低  属性类型_属性降低值_技能ID_技能ID_ ...10;//无视防御 无视防御万分比 */
		 SkillNewSkillBaseCfgData.getExtraAddAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraAddAttr;
			}
			return ""
		};
		 /**  公共条件__emSkillCommonCondition1;//状态增加治疗 万分比_状态ID 2;//血量低于加治疗效果 万分比_加治疗效果万分比3;//驱散增加生命上限伤害 驱散个数_生命上限万分比4;//技能段斩杀  段ID_生命万分比_不超过自身属性_不超过自身属性万分比5;//额外技能目标个数  概率_个数6;//使用上一次总伤害加护盾  万分比7;//使用HP加护盾  HP的万分比8;//状态层数加次数 参数:stateid_buff层数_最大次数9;//限制伤害 最大值_最小值10;//使用上一次治疗量加护盾  万分比11;//伤害均摊 */
		 SkillNewSkillBaseCfgData.getCommonConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.commonCondition;
			}
			return ""
		};
		 /**  给目标加buff条件_emSkillBuffCondition1;//职业 参数 职业类型_emPetJobType_buff额外万分比2;//状态 参数: 状态1_状态23;//死亡4;//暴击5;//属性低于自身  属性类型_buff概率万分比6;//状态提升概率  状态1_buff概率万分比7;//buff随机个数  个数8;//生命值低于万分比 万分比9;//选择职业 参数 职业类型1_职业类型2....10;//buff权重随机个数  个数 */
		 SkillNewSkillBaseCfgData.getAddTarBuffConditionBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuffCondition;
			}
			return ""
		};
		 /**  增加目标buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddTarBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTarBuff;
			}
			return ""
		};
		 /**  给自己加buffbuffid_概率; */
		 SkillNewSkillBaseCfgData.getAddSelfBuffBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfBuff;
			}
			return ""
		};
		 /**  给自身加属性属性类型_值_万分比 */
		 SkillNewSkillBaseCfgData.getAddSelfAttrBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addSelfAttr;
			}
			return ""
		};
		 /**  携带物技能 */
		 SkillNewSkillBaseCfgData.getHorcruxSkillBySkillIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.horcruxSkill;
			}
			return 0;
		};

	return SkillNewSkillBaseCfgData
}());
	
cfg.SkillNewSkillBaseCfgData = SkillNewSkillBaseCfgData;
var SkillNewRaceDamagaBaseCfgData  = /** @class */ (function () {
	function SkillNewRaceDamagaBaseCfgData () {
	}
	SkillNewRaceDamagaBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SkillNewRaceDamagaBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SkillNewRaceDamagaBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "attackRace");
		};
		 /**  攻击方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getAttackRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attackRace;
			}
			return 0;
		};
		 /**  防御方1;//神仙2;//人族3;//魔族 */
		 SkillNewRaceDamagaBaseCfgData.getDefenseRaceByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.defenseRace;
			}
			return 0;
		};
		 /**  伤害万分比 */
		 SkillNewRaceDamagaBaseCfgData.getDamageRateByAttackRace = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.damageRate;
			}
			return 0;
		};

	return SkillNewRaceDamagaBaseCfgData
}());
	
cfg.SkillNewRaceDamagaBaseCfgData = SkillNewRaceDamagaBaseCfgData;
var StrongerQuestionBaseCfgData  = /** @class */ (function () {
	function StrongerQuestionBaseCfgData () {
	}
	StrongerQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerQuestionBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerQuestionBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  Height */
		 StrongerQuestionBaseCfgData.getHeightByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.height;
			}
			return 0;
		};

	return StrongerQuestionBaseCfgData
}());
	
cfg.StrongerQuestionBaseCfgData = StrongerQuestionBaseCfgData;
var StrongerPetCommandBaseCfgData  = /** @class */ (function () {
	function StrongerPetCommandBaseCfgData () {
	}
	StrongerPetCommandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerPetCommandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerPetCommandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerPetCommandBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerPetCommandBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerPetCommandBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  刷怪位置ID_怪物ID_怪物等级 */
		 StrongerPetCommandBaseCfgData.getAddMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addMonster;
			}
			return ""
		};

	return StrongerPetCommandBaseCfgData
}());
	
cfg.StrongerPetCommandBaseCfgData = StrongerPetCommandBaseCfgData;
var StrongerResListTitleBaseCfgData  = /** @class */ (function () {
	function StrongerResListTitleBaseCfgData () {
	}
	StrongerResListTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListTitleBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  道具列表 */
		 StrongerResListTitleBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListTitleBaseCfgData
}());
	
cfg.StrongerResListTitleBaseCfgData = StrongerResListTitleBaseCfgData;
var StrongerBaseCfgData  = /** @class */ (function () {
	function StrongerBaseCfgData () {
	}
	StrongerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  ServerKey */
		 StrongerBaseCfgData.getServerKeyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverKey;
			}
			return ""
		};

	return StrongerBaseCfgData
}());
	
cfg.StrongerBaseCfgData = StrongerBaseCfgData;
var StrongerResListDetailBaseCfgData  = /** @class */ (function () {
	function StrongerResListDetailBaseCfgData () {
	}
	StrongerResListDetailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListDetailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListDetailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListDetailBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  resTitleID */
		 StrongerResListDetailBaseCfgData.getResTitleIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resTitleID;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListDetailBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListDetailBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerResListDetailBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  道具列表 */
		 StrongerResListDetailBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListDetailBaseCfgData
}());
	
cfg.StrongerResListDetailBaseCfgData = StrongerResListDetailBaseCfgData;
var StrongerFunListBaseCfgData  = /** @class */ (function () {
	function StrongerFunListBaseCfgData () {
	}
	StrongerFunListBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerFunListBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerFunListBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  功能ID */
		 StrongerFunListBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  功能名称 */
		 StrongerFunListBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return StrongerFunListBaseCfgData
}());
	
cfg.StrongerFunListBaseCfgData = StrongerFunListBaseCfgData;
var StrongerFunListBaseCfgData  = /** @class */ (function () {
	function StrongerFunListBaseCfgData () {
	}
	StrongerFunListBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerFunListBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerFunListBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  功能ID */
		 StrongerFunListBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  功能名称 */
		 StrongerFunListBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return StrongerFunListBaseCfgData
}());
	
cfg.StrongerFunListBaseCfgData = StrongerFunListBaseCfgData;
var StrongerResListTitleBaseCfgData  = /** @class */ (function () {
	function StrongerResListTitleBaseCfgData () {
	}
	StrongerResListTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListTitleBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  道具列表 */
		 StrongerResListTitleBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListTitleBaseCfgData
}());
	
cfg.StrongerResListTitleBaseCfgData = StrongerResListTitleBaseCfgData;
var StrongerBaseCfgData  = /** @class */ (function () {
	function StrongerBaseCfgData () {
	}
	StrongerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  ServerKey */
		 StrongerBaseCfgData.getServerKeyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverKey;
			}
			return ""
		};

	return StrongerBaseCfgData
}());
	
cfg.StrongerBaseCfgData = StrongerBaseCfgData;
var StrongerResListTitleBaseCfgData  = /** @class */ (function () {
	function StrongerResListTitleBaseCfgData () {
	}
	StrongerResListTitleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListTitleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListTitleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListTitleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListTitleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListTitleBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  道具列表 */
		 StrongerResListTitleBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListTitleBaseCfgData
}());
	
cfg.StrongerResListTitleBaseCfgData = StrongerResListTitleBaseCfgData;
var StrongerResListDetailBaseCfgData  = /** @class */ (function () {
	function StrongerResListDetailBaseCfgData () {
	}
	StrongerResListDetailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListDetailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListDetailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListDetailBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  resTitleID */
		 StrongerResListDetailBaseCfgData.getResTitleIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resTitleID;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListDetailBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListDetailBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerResListDetailBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  道具列表 */
		 StrongerResListDetailBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListDetailBaseCfgData
}());
	
cfg.StrongerResListDetailBaseCfgData = StrongerResListDetailBaseCfgData;
var StrongerBaseCfgData  = /** @class */ (function () {
	function StrongerBaseCfgData () {
	}
	StrongerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  ServerKey */
		 StrongerBaseCfgData.getServerKeyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.serverKey;
			}
			return ""
		};

	return StrongerBaseCfgData
}());
	
cfg.StrongerBaseCfgData = StrongerBaseCfgData;
var StrongerQuestionBaseCfgData  = /** @class */ (function () {
	function StrongerQuestionBaseCfgData () {
	}
	StrongerQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerQuestionBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerQuestionBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  Height */
		 StrongerQuestionBaseCfgData.getHeightByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.height;
			}
			return 0;
		};

	return StrongerQuestionBaseCfgData
}());
	
cfg.StrongerQuestionBaseCfgData = StrongerQuestionBaseCfgData;
var StrongerResListDetailBaseCfgData  = /** @class */ (function () {
	function StrongerResListDetailBaseCfgData () {
	}
	StrongerResListDetailBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerResListDetailBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerResListDetailBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerResListDetailBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  resTitleID */
		 StrongerResListDetailBaseCfgData.getResTitleIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resTitleID;
			}
			return 0;
		};
		 /**  Name */
		 StrongerResListDetailBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerResListDetailBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  UIOpen表对应ID */
		 StrongerResListDetailBaseCfgData.getUIOpenIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenID;
			}
			return 0;
		};
		 /**  道具列表 */
		 StrongerResListDetailBaseCfgData.getItemIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.itemID;
			}
			return 0;
		};

	return StrongerResListDetailBaseCfgData
}());
	
cfg.StrongerResListDetailBaseCfgData = StrongerResListDetailBaseCfgData;
var StrongerPetCommandBaseCfgData  = /** @class */ (function () {
	function StrongerPetCommandBaseCfgData () {
	}
	StrongerPetCommandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerPetCommandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerPetCommandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerPetCommandBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerPetCommandBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerPetCommandBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  刷怪位置ID_怪物ID_怪物等级 */
		 StrongerPetCommandBaseCfgData.getAddMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addMonster;
			}
			return ""
		};

	return StrongerPetCommandBaseCfgData
}());
	
cfg.StrongerPetCommandBaseCfgData = StrongerPetCommandBaseCfgData;
var StrongerPetCommandBaseCfgData  = /** @class */ (function () {
	function StrongerPetCommandBaseCfgData () {
	}
	StrongerPetCommandBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerPetCommandBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerPetCommandBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerPetCommandBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerPetCommandBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerPetCommandBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  刷怪位置ID_怪物ID_怪物等级 */
		 StrongerPetCommandBaseCfgData.getAddMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addMonster;
			}
			return ""
		};

	return StrongerPetCommandBaseCfgData
}());
	
cfg.StrongerPetCommandBaseCfgData = StrongerPetCommandBaseCfgData;
var StrongerQuestionBaseCfgData  = /** @class */ (function () {
	function StrongerQuestionBaseCfgData () {
	}
	StrongerQuestionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerQuestionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerQuestionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 StrongerQuestionBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  Name */
		 StrongerQuestionBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  Des */
		 StrongerQuestionBaseCfgData.getDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.des;
			}
			return ""
		};
		 /**  Height */
		 StrongerQuestionBaseCfgData.getHeightByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.height;
			}
			return 0;
		};

	return StrongerQuestionBaseCfgData
}());
	
cfg.StrongerQuestionBaseCfgData = StrongerQuestionBaseCfgData;
var StrongerFunListBaseCfgData  = /** @class */ (function () {
	function StrongerFunListBaseCfgData () {
	}
	StrongerFunListBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	StrongerFunListBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		StrongerFunListBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  功能ID */
		 StrongerFunListBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  功能名称 */
		 StrongerFunListBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return StrongerFunListBaseCfgData
}());
	
cfg.StrongerFunListBaseCfgData = StrongerFunListBaseCfgData;
var SystemSwitchSystemGroupBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemGroupBaseCfgData () {
	}
	SystemSwitchSystemGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groups");
		};
		 /**  系统ID组合 */
		 SystemSwitchSystemGroupBaseCfgData.getGroupsByGroups = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groups;
			}
			return ""
		};

	return SystemSwitchSystemGroupBaseCfgData
}());
	
cfg.SystemSwitchSystemGroupBaseCfgData = SystemSwitchSystemGroupBaseCfgData;
var SystemSwitchSystemGroupBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemGroupBaseCfgData () {
	}
	SystemSwitchSystemGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groups");
		};
		 /**  系统ID组合 */
		 SystemSwitchSystemGroupBaseCfgData.getGroupsByGroups = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groups;
			}
			return ""
		};

	return SystemSwitchSystemGroupBaseCfgData
}());
	
cfg.SystemSwitchSystemGroupBaseCfgData = SystemSwitchSystemGroupBaseCfgData;
var SystemSwitchSystemSwitchBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemSwitchBaseCfgData () {
	}
	SystemSwitchSystemSwitchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemSwitchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemSwitchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 SystemSwitchSystemSwitchBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排序 */
		 SystemSwitchSystemSwitchBaseCfgData.getSortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sort;
			}
			return 0;
		};
		 /**  功能名称 */
		 SystemSwitchSystemSwitchBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  大类型ID参照枚举_emPC2S_Protocol */
		 SystemSwitchSystemSwitchBaseCfgData.getMainProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProctocalID;
			}
			return ""
		};
		 /**  子类型ID参照主协议对应的子协议分号隔开 */
		 SystemSwitchSystemSwitchBaseCfgData.getSubProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subProctocalID;
			}
			return ""
		};
		 /**  是否无视条件直接开启 */
		 SystemSwitchSystemSwitchBaseCfgData.getNoConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noCondition;
			}
			return 0;
		};
		 /**  等级条件 */
		 SystemSwitchSystemSwitchBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  世界等级 */
		 SystemSwitchSystemSwitchBaseCfgData.getWorldLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldLevel;
			}
			return 0;
		};
		 /**  关卡数 */
		 SystemSwitchSystemSwitchBaseCfgData.getStageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  全局开关 */
		 SystemSwitchSystemSwitchBaseCfgData.getOpenByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.open;
			}
			return 0;
		};
		 /**  功能图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  是否推送功能开启图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getRemindSwitchByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.remindSwitch;
			}
			return 0;
		};
		 /**  登录天数 */
		 SystemSwitchSystemSwitchBaseCfgData.getLoginDaysByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.loginDays;
			}
			return 0;
		};
		 /**  未解锁时提示 */
		 SystemSwitchSystemSwitchBaseCfgData.getUnlockDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDes;
			}
			return ""
		};
		 /**  功能描述 */
		 SystemSwitchSystemSwitchBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  未解锁图标是否显示 */
		 SystemSwitchSystemSwitchBaseCfgData.getShowIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showIcon;
			}
			return 0;
		};
		 /**  开启奖励 */
		 SystemSwitchSystemSwitchBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  功能跳转 */
		 SystemSwitchSystemSwitchBaseCfgData.getUIOpenIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenId;
			}
			return 0;
		};

	return SystemSwitchSystemSwitchBaseCfgData
}());
	
cfg.SystemSwitchSystemSwitchBaseCfgData = SystemSwitchSystemSwitchBaseCfgData;
var SystemSwitchSystemGroupBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemGroupBaseCfgData () {
	}
	SystemSwitchSystemGroupBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemGroupBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemGroupBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groups");
		};
		 /**  系统ID组合 */
		 SystemSwitchSystemGroupBaseCfgData.getGroupsByGroups = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groups;
			}
			return ""
		};

	return SystemSwitchSystemGroupBaseCfgData
}());
	
cfg.SystemSwitchSystemGroupBaseCfgData = SystemSwitchSystemGroupBaseCfgData;
var SystemSwitchSystemSwitchBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemSwitchBaseCfgData () {
	}
	SystemSwitchSystemSwitchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemSwitchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemSwitchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 SystemSwitchSystemSwitchBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排序 */
		 SystemSwitchSystemSwitchBaseCfgData.getSortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sort;
			}
			return 0;
		};
		 /**  功能名称 */
		 SystemSwitchSystemSwitchBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  大类型ID参照枚举_emPC2S_Protocol */
		 SystemSwitchSystemSwitchBaseCfgData.getMainProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProctocalID;
			}
			return ""
		};
		 /**  子类型ID参照主协议对应的子协议分号隔开 */
		 SystemSwitchSystemSwitchBaseCfgData.getSubProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subProctocalID;
			}
			return ""
		};
		 /**  是否无视条件直接开启 */
		 SystemSwitchSystemSwitchBaseCfgData.getNoConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noCondition;
			}
			return 0;
		};
		 /**  等级条件 */
		 SystemSwitchSystemSwitchBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  世界等级 */
		 SystemSwitchSystemSwitchBaseCfgData.getWorldLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldLevel;
			}
			return 0;
		};
		 /**  关卡数 */
		 SystemSwitchSystemSwitchBaseCfgData.getStageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  全局开关 */
		 SystemSwitchSystemSwitchBaseCfgData.getOpenByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.open;
			}
			return 0;
		};
		 /**  功能图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  是否推送功能开启图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getRemindSwitchByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.remindSwitch;
			}
			return 0;
		};
		 /**  登录天数 */
		 SystemSwitchSystemSwitchBaseCfgData.getLoginDaysByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.loginDays;
			}
			return 0;
		};
		 /**  未解锁时提示 */
		 SystemSwitchSystemSwitchBaseCfgData.getUnlockDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDes;
			}
			return ""
		};
		 /**  功能描述 */
		 SystemSwitchSystemSwitchBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  未解锁图标是否显示 */
		 SystemSwitchSystemSwitchBaseCfgData.getShowIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showIcon;
			}
			return 0;
		};
		 /**  开启奖励 */
		 SystemSwitchSystemSwitchBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  功能跳转 */
		 SystemSwitchSystemSwitchBaseCfgData.getUIOpenIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenId;
			}
			return 0;
		};

	return SystemSwitchSystemSwitchBaseCfgData
}());
	
cfg.SystemSwitchSystemSwitchBaseCfgData = SystemSwitchSystemSwitchBaseCfgData;
var SystemSwitchSystemSwitchBaseCfgData  = /** @class */ (function () {
	function SystemSwitchSystemSwitchBaseCfgData () {
	}
	SystemSwitchSystemSwitchBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SystemSwitchSystemSwitchBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SystemSwitchSystemSwitchBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  索引 */
		 SystemSwitchSystemSwitchBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排序 */
		 SystemSwitchSystemSwitchBaseCfgData.getSortByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.sort;
			}
			return 0;
		};
		 /**  功能名称 */
		 SystemSwitchSystemSwitchBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  大类型ID参照枚举_emPC2S_Protocol */
		 SystemSwitchSystemSwitchBaseCfgData.getMainProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainProctocalID;
			}
			return ""
		};
		 /**  子类型ID参照主协议对应的子协议分号隔开 */
		 SystemSwitchSystemSwitchBaseCfgData.getSubProctocalIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subProctocalID;
			}
			return ""
		};
		 /**  是否无视条件直接开启 */
		 SystemSwitchSystemSwitchBaseCfgData.getNoConditionByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.noCondition;
			}
			return 0;
		};
		 /**  等级条件 */
		 SystemSwitchSystemSwitchBaseCfgData.getLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  世界等级 */
		 SystemSwitchSystemSwitchBaseCfgData.getWorldLevelByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.worldLevel;
			}
			return 0;
		};
		 /**  关卡数 */
		 SystemSwitchSystemSwitchBaseCfgData.getStageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  全局开关 */
		 SystemSwitchSystemSwitchBaseCfgData.getOpenByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.open;
			}
			return 0;
		};
		 /**  功能图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.icon;
			}
			return ""
		};
		 /**  是否推送功能开启图标 */
		 SystemSwitchSystemSwitchBaseCfgData.getRemindSwitchByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.remindSwitch;
			}
			return 0;
		};
		 /**  登录天数 */
		 SystemSwitchSystemSwitchBaseCfgData.getLoginDaysByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.loginDays;
			}
			return 0;
		};
		 /**  未解锁时提示 */
		 SystemSwitchSystemSwitchBaseCfgData.getUnlockDesByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.unlockDes;
			}
			return ""
		};
		 /**  功能描述 */
		 SystemSwitchSystemSwitchBaseCfgData.getDescribeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.describe;
			}
			return ""
		};
		 /**  未解锁图标是否显示 */
		 SystemSwitchSystemSwitchBaseCfgData.getShowIconByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showIcon;
			}
			return 0;
		};
		 /**  开启奖励 */
		 SystemSwitchSystemSwitchBaseCfgData.getAddItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  功能跳转 */
		 SystemSwitchSystemSwitchBaseCfgData.getUIOpenIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.uIOpenId;
			}
			return 0;
		};

	return SystemSwitchSystemSwitchBaseCfgData
}());
	
cfg.SystemSwitchSystemSwitchBaseCfgData = SystemSwitchSystemSwitchBaseCfgData;
var TabletBaseCfgData  = /** @class */ (function () {
	function TabletBaseCfgData () {
	}
	TabletBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  晶碑等级 */
		 TabletBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  生命 */
		 TabletBaseCfgData.getHPByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hP;
			}
			return 0;
		};
		 /**  攻击 */
		 TabletBaseCfgData.getATKByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aTK;
			}
			return 0;
		};
		 /**  防御 */
		 TabletBaseCfgData.getDEFByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dEF;
			}
			return 0;
		};
		 /**  升级消耗 */
		 TabletBaseCfgData.getLvUpNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lvUpNeedItem;
			}
			return ""
		};

	return TabletBaseCfgData
}());
	
cfg.TabletBaseCfgData = TabletBaseCfgData;
var TabletStarAdditionBaseCfgData  = /** @class */ (function () {
	function TabletStarAdditionBaseCfgData () {
	}
	TabletStarAdditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletStarAdditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletStarAdditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星数 */
		 TabletStarAdditionBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成万分比 */
		 TabletStarAdditionBaseCfgData.getAdditionByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addition;
			}
			return 0;
		};

	return TabletStarAdditionBaseCfgData
}());
	
cfg.TabletStarAdditionBaseCfgData = TabletStarAdditionBaseCfgData;
var TabletCreationBaseCfgData  = /** @class */ (function () {
	function TabletCreationBaseCfgData () {
	}
	TabletCreationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletCreationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletCreationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  平均星数 */
		 TabletCreationBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  创造消耗 */
		 TabletCreationBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return TabletCreationBaseCfgData
}());
	
cfg.TabletCreationBaseCfgData = TabletCreationBaseCfgData;
var TabletStarAdditionBaseCfgData  = /** @class */ (function () {
	function TabletStarAdditionBaseCfgData () {
	}
	TabletStarAdditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletStarAdditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletStarAdditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星数 */
		 TabletStarAdditionBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成万分比 */
		 TabletStarAdditionBaseCfgData.getAdditionByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addition;
			}
			return 0;
		};

	return TabletStarAdditionBaseCfgData
}());
	
cfg.TabletStarAdditionBaseCfgData = TabletStarAdditionBaseCfgData;
var TabletMagicJuiceBaseCfgData  = /** @class */ (function () {
	function TabletMagicJuiceBaseCfgData () {
	}
	TabletMagicJuiceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletMagicJuiceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletMagicJuiceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  提炼等级 */
		 TabletMagicJuiceBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  转换效率（多少经验1个） */
		 TabletMagicJuiceBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return ""
		};
		 /**  提炼效率（多少秒1个） */
		 TabletMagicJuiceBaseCfgData.getNeedTimeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needTime;
			}
			return 0;
		};

	return TabletMagicJuiceBaseCfgData
}());
	
cfg.TabletMagicJuiceBaseCfgData = TabletMagicJuiceBaseCfgData;
var TabletBaseCfgData  = /** @class */ (function () {
	function TabletBaseCfgData () {
	}
	TabletBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  晶碑等级 */
		 TabletBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  生命 */
		 TabletBaseCfgData.getHPByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hP;
			}
			return 0;
		};
		 /**  攻击 */
		 TabletBaseCfgData.getATKByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aTK;
			}
			return 0;
		};
		 /**  防御 */
		 TabletBaseCfgData.getDEFByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dEF;
			}
			return 0;
		};
		 /**  升级消耗 */
		 TabletBaseCfgData.getLvUpNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lvUpNeedItem;
			}
			return ""
		};

	return TabletBaseCfgData
}());
	
cfg.TabletBaseCfgData = TabletBaseCfgData;
var TabletBaseCfgData  = /** @class */ (function () {
	function TabletBaseCfgData () {
	}
	TabletBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  晶碑等级 */
		 TabletBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  生命 */
		 TabletBaseCfgData.getHPByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hP;
			}
			return 0;
		};
		 /**  攻击 */
		 TabletBaseCfgData.getATKByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.aTK;
			}
			return 0;
		};
		 /**  防御 */
		 TabletBaseCfgData.getDEFByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dEF;
			}
			return 0;
		};
		 /**  升级消耗 */
		 TabletBaseCfgData.getLvUpNeedItemByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.lvUpNeedItem;
			}
			return ""
		};

	return TabletBaseCfgData
}());
	
cfg.TabletBaseCfgData = TabletBaseCfgData;
var TabletConstantsBaseCfgData  = /** @class */ (function () {
	function TabletConstantsBaseCfgData () {
	}
	TabletConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "posCount");
		};
		 /**  阵位数量 */
		 TabletConstantsBaseCfgData.getPosCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.posCount;
			}
			return 0;
		};
		 /**  开启赋能创造星数 */
		 TabletConstantsBaseCfgData.getCreateNeedStarByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createNeedStar;
			}
			return ""
		};
		 /**  赋能创造次数 */
		 TabletConstantsBaseCfgData.getCreateCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createCount;
			}
			return 0;
		};
		 /**  魔液物品ID */
		 TabletConstantsBaseCfgData.getMagicJuiceIDByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.magicJuiceID;
			}
			return 0;
		};

	return TabletConstantsBaseCfgData
}());
	
cfg.TabletConstantsBaseCfgData = TabletConstantsBaseCfgData;
var TabletMagicJuiceBaseCfgData  = /** @class */ (function () {
	function TabletMagicJuiceBaseCfgData () {
	}
	TabletMagicJuiceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletMagicJuiceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletMagicJuiceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  提炼等级 */
		 TabletMagicJuiceBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  转换效率（多少经验1个） */
		 TabletMagicJuiceBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return ""
		};
		 /**  提炼效率（多少秒1个） */
		 TabletMagicJuiceBaseCfgData.getNeedTimeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needTime;
			}
			return 0;
		};

	return TabletMagicJuiceBaseCfgData
}());
	
cfg.TabletMagicJuiceBaseCfgData = TabletMagicJuiceBaseCfgData;
var TabletCreationBaseCfgData  = /** @class */ (function () {
	function TabletCreationBaseCfgData () {
	}
	TabletCreationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletCreationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletCreationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  平均星数 */
		 TabletCreationBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  创造消耗 */
		 TabletCreationBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return TabletCreationBaseCfgData
}());
	
cfg.TabletCreationBaseCfgData = TabletCreationBaseCfgData;
var TabletCreationBaseCfgData  = /** @class */ (function () {
	function TabletCreationBaseCfgData () {
	}
	TabletCreationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletCreationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletCreationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  平均星数 */
		 TabletCreationBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  创造消耗 */
		 TabletCreationBaseCfgData.getNeedItemByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};

	return TabletCreationBaseCfgData
}());
	
cfg.TabletCreationBaseCfgData = TabletCreationBaseCfgData;
var TabletConstantsBaseCfgData  = /** @class */ (function () {
	function TabletConstantsBaseCfgData () {
	}
	TabletConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "posCount");
		};
		 /**  阵位数量 */
		 TabletConstantsBaseCfgData.getPosCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.posCount;
			}
			return 0;
		};
		 /**  开启赋能创造星数 */
		 TabletConstantsBaseCfgData.getCreateNeedStarByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createNeedStar;
			}
			return ""
		};
		 /**  赋能创造次数 */
		 TabletConstantsBaseCfgData.getCreateCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createCount;
			}
			return 0;
		};
		 /**  魔液物品ID */
		 TabletConstantsBaseCfgData.getMagicJuiceIDByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.magicJuiceID;
			}
			return 0;
		};

	return TabletConstantsBaseCfgData
}());
	
cfg.TabletConstantsBaseCfgData = TabletConstantsBaseCfgData;
var TabletConstantsBaseCfgData  = /** @class */ (function () {
	function TabletConstantsBaseCfgData () {
	}
	TabletConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "posCount");
		};
		 /**  阵位数量 */
		 TabletConstantsBaseCfgData.getPosCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.posCount;
			}
			return 0;
		};
		 /**  开启赋能创造星数 */
		 TabletConstantsBaseCfgData.getCreateNeedStarByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createNeedStar;
			}
			return ""
		};
		 /**  赋能创造次数 */
		 TabletConstantsBaseCfgData.getCreateCountByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.createCount;
			}
			return 0;
		};
		 /**  魔液物品ID */
		 TabletConstantsBaseCfgData.getMagicJuiceIDByPosCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.magicJuiceID;
			}
			return 0;
		};

	return TabletConstantsBaseCfgData
}());
	
cfg.TabletConstantsBaseCfgData = TabletConstantsBaseCfgData;
var TabletStarAdditionBaseCfgData  = /** @class */ (function () {
	function TabletStarAdditionBaseCfgData () {
	}
	TabletStarAdditionBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletStarAdditionBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletStarAdditionBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星数 */
		 TabletStarAdditionBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  加成万分比 */
		 TabletStarAdditionBaseCfgData.getAdditionByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addition;
			}
			return 0;
		};

	return TabletStarAdditionBaseCfgData
}());
	
cfg.TabletStarAdditionBaseCfgData = TabletStarAdditionBaseCfgData;
var TabletMagicJuiceBaseCfgData  = /** @class */ (function () {
	function TabletMagicJuiceBaseCfgData () {
	}
	TabletMagicJuiceBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TabletMagicJuiceBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TabletMagicJuiceBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  提炼等级 */
		 TabletMagicJuiceBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  转换效率（多少经验1个） */
		 TabletMagicJuiceBaseCfgData.getNeedExpByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needExp;
			}
			return ""
		};
		 /**  提炼效率（多少秒1个） */
		 TabletMagicJuiceBaseCfgData.getNeedTimeByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needTime;
			}
			return 0;
		};

	return TabletMagicJuiceBaseCfgData
}());
	
cfg.TabletMagicJuiceBaseCfgData = TabletMagicJuiceBaseCfgData;
var TeamCampaignMonsterNewBaseCfgData  = /** @class */ (function () {
	function TeamCampaignMonsterNewBaseCfgData () {
	}
	TeamCampaignMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TeamCampaignMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return TeamCampaignMonsterNewBaseCfgData
}());
	
cfg.TeamCampaignMonsterNewBaseCfgData = TeamCampaignMonsterNewBaseCfgData;
var TeamCampaignFormationBaseCfgData  = /** @class */ (function () {
	function TeamCampaignFormationBaseCfgData () {
	}
	TeamCampaignFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignFormationBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  阵容对应位置(1号位;2号位;3号位) */
		 TeamCampaignFormationBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return ""
		};
		 /**  名称 */
		 TeamCampaignFormationBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return TeamCampaignFormationBaseCfgData
}());
	
cfg.TeamCampaignFormationBaseCfgData = TeamCampaignFormationBaseCfgData;
var TeamCampaignMonsterNewBaseCfgData  = /** @class */ (function () {
	function TeamCampaignMonsterNewBaseCfgData () {
	}
	TeamCampaignMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TeamCampaignMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return TeamCampaignMonsterNewBaseCfgData
}());
	
cfg.TeamCampaignMonsterNewBaseCfgData = TeamCampaignMonsterNewBaseCfgData;
var TeamCampaignFormationBaseCfgData  = /** @class */ (function () {
	function TeamCampaignFormationBaseCfgData () {
	}
	TeamCampaignFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignFormationBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  阵容对应位置(1号位;2号位;3号位) */
		 TeamCampaignFormationBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return ""
		};
		 /**  名称 */
		 TeamCampaignFormationBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return TeamCampaignFormationBaseCfgData
}());
	
cfg.TeamCampaignFormationBaseCfgData = TeamCampaignFormationBaseCfgData;
var TeamCampaignRobotBaseCfgData  = /** @class */ (function () {
	function TeamCampaignRobotBaseCfgData () {
	}
	TeamCampaignRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 TeamCampaignRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return TeamCampaignRobotBaseCfgData
}());
	
cfg.TeamCampaignRobotBaseCfgData = TeamCampaignRobotBaseCfgData;
var TeamCampaignExtraPrizeBaseCfgData  = /** @class */ (function () {
	function TeamCampaignExtraPrizeBaseCfgData () {
	}
	TeamCampaignExtraPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignExtraPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignExtraPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignExtraPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TeamCampaignExtraPrizeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 TeamCampaignExtraPrizeBaseCfgData.getParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};

	return TeamCampaignExtraPrizeBaseCfgData
}());
	
cfg.TeamCampaignExtraPrizeBaseCfgData = TeamCampaignExtraPrizeBaseCfgData;
var TeamCampaignRobotBaseCfgData  = /** @class */ (function () {
	function TeamCampaignRobotBaseCfgData () {
	}
	TeamCampaignRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 TeamCampaignRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return TeamCampaignRobotBaseCfgData
}());
	
cfg.TeamCampaignRobotBaseCfgData = TeamCampaignRobotBaseCfgData;
var TeamCampaignStageBaseCfgData  = /** @class */ (function () {
	function TeamCampaignStageBaseCfgData () {
	}
	TeamCampaignStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 TeamCampaignStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  难度 */
		 TeamCampaignStageBaseCfgData.getDifficultyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficulty;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TeamCampaignStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  固定位置 */
		 TeamCampaignStageBaseCfgData.getFixedPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixedPosition;
			}
			return ""
		};
		 /**  参与条件(条件_参数) */
		 TeamCampaignStageBaseCfgData.getConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  怪物特征 */
		 TeamCampaignStageBaseCfgData.getMonsterDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterDesc;
			}
			return ""
		};
		 /**  显示形象 */
		 TeamCampaignStageBaseCfgData.getShowPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPetId;
			}
			return 0;
		};

	return TeamCampaignStageBaseCfgData
}());
	
cfg.TeamCampaignStageBaseCfgData = TeamCampaignStageBaseCfgData;
var TeamCampaignStageBaseCfgData  = /** @class */ (function () {
	function TeamCampaignStageBaseCfgData () {
	}
	TeamCampaignStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 TeamCampaignStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  难度 */
		 TeamCampaignStageBaseCfgData.getDifficultyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficulty;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TeamCampaignStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  固定位置 */
		 TeamCampaignStageBaseCfgData.getFixedPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixedPosition;
			}
			return ""
		};
		 /**  参与条件(条件_参数) */
		 TeamCampaignStageBaseCfgData.getConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  怪物特征 */
		 TeamCampaignStageBaseCfgData.getMonsterDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterDesc;
			}
			return ""
		};
		 /**  显示形象 */
		 TeamCampaignStageBaseCfgData.getShowPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPetId;
			}
			return 0;
		};

	return TeamCampaignStageBaseCfgData
}());
	
cfg.TeamCampaignStageBaseCfgData = TeamCampaignStageBaseCfgData;
var TeamCampaignExtraPrizeBaseCfgData  = /** @class */ (function () {
	function TeamCampaignExtraPrizeBaseCfgData () {
	}
	TeamCampaignExtraPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignExtraPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignExtraPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignExtraPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TeamCampaignExtraPrizeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 TeamCampaignExtraPrizeBaseCfgData.getParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};

	return TeamCampaignExtraPrizeBaseCfgData
}());
	
cfg.TeamCampaignExtraPrizeBaseCfgData = TeamCampaignExtraPrizeBaseCfgData;
var TeamCampaignExtraPrizeBaseCfgData  = /** @class */ (function () {
	function TeamCampaignExtraPrizeBaseCfgData () {
	}
	TeamCampaignExtraPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignExtraPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignExtraPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignExtraPrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TeamCampaignExtraPrizeBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  参数 */
		 TeamCampaignExtraPrizeBaseCfgData.getParamByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.param;
			}
			return 0;
		};

	return TeamCampaignExtraPrizeBaseCfgData
}());
	
cfg.TeamCampaignExtraPrizeBaseCfgData = TeamCampaignExtraPrizeBaseCfgData;
var TeamCampaignMonsterNewBaseCfgData  = /** @class */ (function () {
	function TeamCampaignMonsterNewBaseCfgData () {
	}
	TeamCampaignMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TeamCampaignMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};

	return TeamCampaignMonsterNewBaseCfgData
}());
	
cfg.TeamCampaignMonsterNewBaseCfgData = TeamCampaignMonsterNewBaseCfgData;
var TeamCampaignFormationBaseCfgData  = /** @class */ (function () {
	function TeamCampaignFormationBaseCfgData () {
	}
	TeamCampaignFormationBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignFormationBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignFormationBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignFormationBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  阵容对应位置(1号位;2号位;3号位) */
		 TeamCampaignFormationBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return ""
		};
		 /**  名称 */
		 TeamCampaignFormationBaseCfgData.getNameByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};

	return TeamCampaignFormationBaseCfgData
}());
	
cfg.TeamCampaignFormationBaseCfgData = TeamCampaignFormationBaseCfgData;
var TeamCampaignStageBaseCfgData  = /** @class */ (function () {
	function TeamCampaignStageBaseCfgData () {
	}
	TeamCampaignStageBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignStageBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignStageBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TeamCampaignStageBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  关卡 */
		 TeamCampaignStageBaseCfgData.getStageByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stage;
			}
			return 0;
		};
		 /**  难度 */
		 TeamCampaignStageBaseCfgData.getDifficultyByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.difficulty;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TeamCampaignStageBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  固定位置 */
		 TeamCampaignStageBaseCfgData.getFixedPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixedPosition;
			}
			return ""
		};
		 /**  参与条件(条件_参数) */
		 TeamCampaignStageBaseCfgData.getConditionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.condition;
			}
			return ""
		};
		 /**  怪物特征 */
		 TeamCampaignStageBaseCfgData.getMonsterDescByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterDesc;
			}
			return ""
		};
		 /**  显示形象 */
		 TeamCampaignStageBaseCfgData.getShowPetIdByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPetId;
			}
			return 0;
		};

	return TeamCampaignStageBaseCfgData
}());
	
cfg.TeamCampaignStageBaseCfgData = TeamCampaignStageBaseCfgData;
var TeamCampaignRobotBaseCfgData  = /** @class */ (function () {
	function TeamCampaignRobotBaseCfgData () {
	}
	TeamCampaignRobotBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TeamCampaignRobotBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TeamCampaignRobotBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "robotID");
		};
		 /**  ID */
		 TeamCampaignRobotBaseCfgData.getRobotIDByRobotID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.robotID;
			}
			return 0;
		};

	return TeamCampaignRobotBaseCfgData
}());
	
cfg.TeamCampaignRobotBaseCfgData = TeamCampaignRobotBaseCfgData;
var TempleLevelInfoBaseCfgData  = /** @class */ (function () {
	function TempleLevelInfoBaseCfgData () {
	}
	TempleLevelInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleLevelInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleLevelInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 TempleLevelInfoBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  伙伴阶数 */
		 TempleLevelInfoBaseCfgData.getPetAdvanceByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petAdvance;
			}
			return 0;
		};
		 /**  伙伴星级 */
		 TempleLevelInfoBaseCfgData.getPetStarByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};

	return TempleLevelInfoBaseCfgData
}());
	
cfg.TempleLevelInfoBaseCfgData = TempleLevelInfoBaseCfgData;
var TempleSMonsterIndexBaseCfgData  = /** @class */ (function () {
	function TempleSMonsterIndexBaseCfgData () {
	}
	TempleSMonsterIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleSMonsterIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleSMonsterIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleSMonsterIndexBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleSMonsterIndexBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  怪物索引 */
		 TempleSMonsterIndexBaseCfgData.getMonsteIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsteIndex;
			}
			return 0;
		};

	return TempleSMonsterIndexBaseCfgData
}());
	
cfg.TempleSMonsterIndexBaseCfgData = TempleSMonsterIndexBaseCfgData;
var TempleBaseCfgData  = /** @class */ (function () {
	function TempleBaseCfgData () {
	}
	TempleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 TempleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 TempleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要竞技场名次 */
		 TempleBaseCfgData.getNeedChallengeRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  称号ID */
		 TempleBaseCfgData.getAddTitleByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TempleBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  附加属性 */
		 TempleBaseCfgData.getAttriByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attri;
			}
			return ""
		};

	return TempleBaseCfgData
}());
	
cfg.TempleBaseCfgData = TempleBaseCfgData;
var TempleLevelInfoBaseCfgData  = /** @class */ (function () {
	function TempleLevelInfoBaseCfgData () {
	}
	TempleLevelInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleLevelInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleLevelInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 TempleLevelInfoBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  伙伴阶数 */
		 TempleLevelInfoBaseCfgData.getPetAdvanceByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petAdvance;
			}
			return 0;
		};
		 /**  伙伴星级 */
		 TempleLevelInfoBaseCfgData.getPetStarByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};

	return TempleLevelInfoBaseCfgData
}());
	
cfg.TempleLevelInfoBaseCfgData = TempleLevelInfoBaseCfgData;
var TempleMonsterNewBaseCfgData  = /** @class */ (function () {
	function TempleMonsterNewBaseCfgData () {
	}
	TempleMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TempleMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TempleMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 TempleMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};
		 /**  Boss序号（好像没用到，之后确认是否删除） */
		 TempleMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};

	return TempleMonsterNewBaseCfgData
}());
	
cfg.TempleMonsterNewBaseCfgData = TempleMonsterNewBaseCfgData;
var TempleMonsterNewBaseCfgData  = /** @class */ (function () {
	function TempleMonsterNewBaseCfgData () {
	}
	TempleMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TempleMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TempleMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 TempleMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};
		 /**  Boss序号（好像没用到，之后确认是否删除） */
		 TempleMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};

	return TempleMonsterNewBaseCfgData
}());
	
cfg.TempleMonsterNewBaseCfgData = TempleMonsterNewBaseCfgData;
var TempleEvolveBaseCfgData  = /** @class */ (function () {
	function TempleEvolveBaseCfgData () {
	}
	TempleEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleEvolveBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleEvolveBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  技能id_等级; */
		 TempleEvolveBaseCfgData.getSkillIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return TempleEvolveBaseCfgData
}());
	
cfg.TempleEvolveBaseCfgData = TempleEvolveBaseCfgData;
var TempleIdCountBaseCfgData  = /** @class */ (function () {
	function TempleIdCountBaseCfgData () {
	}
	TempleIdCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleIdCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleIdCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TempleIdCountBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleIdCountBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return TempleIdCountBaseCfgData
}());
	
cfg.TempleIdCountBaseCfgData = TempleIdCountBaseCfgData;
var TempleEvolveBaseCfgData  = /** @class */ (function () {
	function TempleEvolveBaseCfgData () {
	}
	TempleEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleEvolveBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleEvolveBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  技能id_等级; */
		 TempleEvolveBaseCfgData.getSkillIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return TempleEvolveBaseCfgData
}());
	
cfg.TempleEvolveBaseCfgData = TempleEvolveBaseCfgData;
var TempleBaseCfgData  = /** @class */ (function () {
	function TempleBaseCfgData () {
	}
	TempleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 TempleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 TempleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要竞技场名次 */
		 TempleBaseCfgData.getNeedChallengeRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  称号ID */
		 TempleBaseCfgData.getAddTitleByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TempleBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  附加属性 */
		 TempleBaseCfgData.getAttriByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attri;
			}
			return ""
		};

	return TempleBaseCfgData
}());
	
cfg.TempleBaseCfgData = TempleBaseCfgData;
var TempleLevelInfoBaseCfgData  = /** @class */ (function () {
	function TempleLevelInfoBaseCfgData () {
	}
	TempleLevelInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleLevelInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleLevelInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "level");
		};
		 /**  等级 */
		 TempleLevelInfoBaseCfgData.getLevelByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};
		 /**  伙伴阶数 */
		 TempleLevelInfoBaseCfgData.getPetAdvanceByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petAdvance;
			}
			return 0;
		};
		 /**  伙伴星级 */
		 TempleLevelInfoBaseCfgData.getPetStarByLevel = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.petStar;
			}
			return 0;
		};

	return TempleLevelInfoBaseCfgData
}());
	
cfg.TempleLevelInfoBaseCfgData = TempleLevelInfoBaseCfgData;
var TempleMonsterNewBaseCfgData  = /** @class */ (function () {
	function TempleMonsterNewBaseCfgData () {
	}
	TempleMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TempleMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TempleMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};
		 /**  额外技能(技能ID|技能Lv_技能ID|技能Lv;)分号留空表示这个怪物没有附加技能 */
		 TempleMonsterNewBaseCfgData.getExtraSkillByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.extraSkill;
			}
			return ""
		};
		 /**  Boss序号（好像没用到，之后确认是否删除） */
		 TempleMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};

	return TempleMonsterNewBaseCfgData
}());
	
cfg.TempleMonsterNewBaseCfgData = TempleMonsterNewBaseCfgData;
var TempleIdCountBaseCfgData  = /** @class */ (function () {
	function TempleIdCountBaseCfgData () {
	}
	TempleIdCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleIdCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleIdCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TempleIdCountBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleIdCountBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return TempleIdCountBaseCfgData
}());
	
cfg.TempleIdCountBaseCfgData = TempleIdCountBaseCfgData;
var TempleEvolveBaseCfgData  = /** @class */ (function () {
	function TempleEvolveBaseCfgData () {
	}
	TempleEvolveBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleEvolveBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleEvolveBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleEvolveBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleEvolveBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  技能id_等级; */
		 TempleEvolveBaseCfgData.getSkillIDByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.skillID;
			}
			return ""
		};

	return TempleEvolveBaseCfgData
}());
	
cfg.TempleEvolveBaseCfgData = TempleEvolveBaseCfgData;
var TempleSMonsterIndexBaseCfgData  = /** @class */ (function () {
	function TempleSMonsterIndexBaseCfgData () {
	}
	TempleSMonsterIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleSMonsterIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleSMonsterIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleSMonsterIndexBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleSMonsterIndexBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  怪物索引 */
		 TempleSMonsterIndexBaseCfgData.getMonsteIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsteIndex;
			}
			return 0;
		};

	return TempleSMonsterIndexBaseCfgData
}());
	
cfg.TempleSMonsterIndexBaseCfgData = TempleSMonsterIndexBaseCfgData;
var TempleIdCountBaseCfgData  = /** @class */ (function () {
	function TempleIdCountBaseCfgData () {
	}
	TempleIdCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleIdCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleIdCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TempleIdCountBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleIdCountBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return TempleIdCountBaseCfgData
}());
	
cfg.TempleIdCountBaseCfgData = TempleIdCountBaseCfgData;
var TempleBaseCfgData  = /** @class */ (function () {
	function TempleBaseCfgData () {
	}
	TempleBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  ID */
		 TempleBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  名称 */
		 TempleBaseCfgData.getNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要竞技场名次 */
		 TempleBaseCfgData.getNeedChallengeRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needChallengeRank;
			}
			return 0;
		};
		 /**  称号ID */
		 TempleBaseCfgData.getAddTitleByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TempleBaseCfgData.getMonsterByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  附加属性 */
		 TempleBaseCfgData.getAttriByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.attri;
			}
			return ""
		};

	return TempleBaseCfgData
}());
	
cfg.TempleBaseCfgData = TempleBaseCfgData;
var TempleSMonsterIndexBaseCfgData  = /** @class */ (function () {
	function TempleSMonsterIndexBaseCfgData () {
	}
	TempleSMonsterIndexBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TempleSMonsterIndexBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TempleSMonsterIndexBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型1; //万殿之巅2; //泰坦神耀3; //瀚海星灵 */
		 TempleSMonsterIndexBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  进化次数 */
		 TempleSMonsterIndexBaseCfgData.getCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};
		 /**  怪物索引 */
		 TempleSMonsterIndexBaseCfgData.getMonsteIndexByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsteIndex;
			}
			return 0;
		};

	return TempleSMonsterIndexBaseCfgData
}());
	
cfg.TempleSMonsterIndexBaseCfgData = TempleSMonsterIndexBaseCfgData;
var ToplistBaseCfgData  = /** @class */ (function () {
	function ToplistBaseCfgData () {
	}
	ToplistBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  排行类型 */
		 ToplistBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名字 */
		 ToplistBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  显示排行数 */
		 ToplistBaseCfgData.getShowLineByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showLine;
			}
			return 0;
		};
		 /**  重置次数 */
		 ToplistBaseCfgData.getResetCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetCount;
			}
			return 0;
		};
		 /**  是否为排名比例发放奖励 */
		 ToplistBaseCfgData.getRankRatioRewardByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankRatioReward;
			}
			return 0;
		};

	return ToplistBaseCfgData
}());
	
cfg.ToplistBaseCfgData = ToplistBaseCfgData;
var ToplistRewardBaseCfgData  = /** @class */ (function () {
	function ToplistRewardBaseCfgData () {
	}
	ToplistRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励id */
		 ToplistRewardBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排行类型 */
		 ToplistRewardBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  排名 */
		 ToplistRewardBaseCfgData.getRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 ToplistRewardBaseCfgData.getRewardByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reward;
			}
			return ""
		};
		 /**  限制 */
		 ToplistRewardBaseCfgData.getLimitByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return ToplistRewardBaseCfgData
}());
	
cfg.ToplistRewardBaseCfgData = ToplistRewardBaseCfgData;
var ToplistChargeScoreBaseCfgData  = /** @class */ (function () {
	function ToplistChargeScoreBaseCfgData () {
	}
	ToplistChargeScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistChargeScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistChargeScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "charge");
		};
		 /**  单笔金额 */
		 ToplistChargeScoreBaseCfgData.getChargeByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistChargeScoreBaseCfgData.getScoreByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistChargeScoreBaseCfgData
}());
	
cfg.ToplistChargeScoreBaseCfgData = ToplistChargeScoreBaseCfgData;
var ToplistPieceScoreBaseCfgData  = /** @class */ (function () {
	function ToplistPieceScoreBaseCfgData () {
	}
	ToplistPieceScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistPieceScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistPieceScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistPieceScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistPieceScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistPieceScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistPieceScoreBaseCfgData
}());
	
cfg.ToplistPieceScoreBaseCfgData = ToplistPieceScoreBaseCfgData;
var ToplistBaseCfgData  = /** @class */ (function () {
	function ToplistBaseCfgData () {
	}
	ToplistBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  排行类型 */
		 ToplistBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名字 */
		 ToplistBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  显示排行数 */
		 ToplistBaseCfgData.getShowLineByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showLine;
			}
			return 0;
		};
		 /**  重置次数 */
		 ToplistBaseCfgData.getResetCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetCount;
			}
			return 0;
		};
		 /**  是否为排名比例发放奖励 */
		 ToplistBaseCfgData.getRankRatioRewardByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankRatioReward;
			}
			return 0;
		};

	return ToplistBaseCfgData
}());
	
cfg.ToplistBaseCfgData = ToplistBaseCfgData;
var ToplistHeroScoreBaseCfgData  = /** @class */ (function () {
	function ToplistHeroScoreBaseCfgData () {
	}
	ToplistHeroScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistHeroScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistHeroScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistHeroScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistHeroScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistHeroScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistHeroScoreBaseCfgData
}());
	
cfg.ToplistHeroScoreBaseCfgData = ToplistHeroScoreBaseCfgData;
var ToplistBaseCfgData  = /** @class */ (function () {
	function ToplistBaseCfgData () {
	}
	ToplistBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  排行类型 */
		 ToplistBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  名字 */
		 ToplistBaseCfgData.getNameByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  显示排行数 */
		 ToplistBaseCfgData.getShowLineByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showLine;
			}
			return 0;
		};
		 /**  重置次数 */
		 ToplistBaseCfgData.getResetCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetCount;
			}
			return 0;
		};
		 /**  是否为排名比例发放奖励 */
		 ToplistBaseCfgData.getRankRatioRewardByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankRatioReward;
			}
			return 0;
		};

	return ToplistBaseCfgData
}());
	
cfg.ToplistBaseCfgData = ToplistBaseCfgData;
var ToplistRewardBaseCfgData  = /** @class */ (function () {
	function ToplistRewardBaseCfgData () {
	}
	ToplistRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励id */
		 ToplistRewardBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排行类型 */
		 ToplistRewardBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  排名 */
		 ToplistRewardBaseCfgData.getRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 ToplistRewardBaseCfgData.getRewardByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reward;
			}
			return ""
		};
		 /**  限制 */
		 ToplistRewardBaseCfgData.getLimitByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return ToplistRewardBaseCfgData
}());
	
cfg.ToplistRewardBaseCfgData = ToplistRewardBaseCfgData;
var ToplistUpstarScoreBaseCfgData  = /** @class */ (function () {
	function ToplistUpstarScoreBaseCfgData () {
	}
	ToplistUpstarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistUpstarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistUpstarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistUpstarScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistUpstarScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistUpstarScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistUpstarScoreBaseCfgData
}());
	
cfg.ToplistUpstarScoreBaseCfgData = ToplistUpstarScoreBaseCfgData;
var ToplistPieceScoreBaseCfgData  = /** @class */ (function () {
	function ToplistPieceScoreBaseCfgData () {
	}
	ToplistPieceScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistPieceScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistPieceScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistPieceScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistPieceScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistPieceScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistPieceScoreBaseCfgData
}());
	
cfg.ToplistPieceScoreBaseCfgData = ToplistPieceScoreBaseCfgData;
var ToplistHeroScoreBaseCfgData  = /** @class */ (function () {
	function ToplistHeroScoreBaseCfgData () {
	}
	ToplistHeroScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistHeroScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistHeroScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistHeroScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistHeroScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistHeroScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistHeroScoreBaseCfgData
}());
	
cfg.ToplistHeroScoreBaseCfgData = ToplistHeroScoreBaseCfgData;
var ToplistUpstarScoreBaseCfgData  = /** @class */ (function () {
	function ToplistUpstarScoreBaseCfgData () {
	}
	ToplistUpstarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistUpstarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistUpstarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistUpstarScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistUpstarScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistUpstarScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistUpstarScoreBaseCfgData
}());
	
cfg.ToplistUpstarScoreBaseCfgData = ToplistUpstarScoreBaseCfgData;
var ToplistRewardBaseCfgData  = /** @class */ (function () {
	function ToplistRewardBaseCfgData () {
	}
	ToplistRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  奖励id */
		 ToplistRewardBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  排行类型 */
		 ToplistRewardBaseCfgData.getTypeByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  排名 */
		 ToplistRewardBaseCfgData.getRankByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励 */
		 ToplistRewardBaseCfgData.getRewardByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.reward;
			}
			return ""
		};
		 /**  限制 */
		 ToplistRewardBaseCfgData.getLimitByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limit;
			}
			return 0;
		};

	return ToplistRewardBaseCfgData
}());
	
cfg.ToplistRewardBaseCfgData = ToplistRewardBaseCfgData;
var ToplistChargeScoreBaseCfgData  = /** @class */ (function () {
	function ToplistChargeScoreBaseCfgData () {
	}
	ToplistChargeScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistChargeScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistChargeScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "charge");
		};
		 /**  单笔金额 */
		 ToplistChargeScoreBaseCfgData.getChargeByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistChargeScoreBaseCfgData.getScoreByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistChargeScoreBaseCfgData
}());
	
cfg.ToplistChargeScoreBaseCfgData = ToplistChargeScoreBaseCfgData;
var ToplistUpstarScoreBaseCfgData  = /** @class */ (function () {
	function ToplistUpstarScoreBaseCfgData () {
	}
	ToplistUpstarScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistUpstarScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistUpstarScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistUpstarScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistUpstarScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistUpstarScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistUpstarScoreBaseCfgData
}());
	
cfg.ToplistUpstarScoreBaseCfgData = ToplistUpstarScoreBaseCfgData;
var ToplistChargeScoreBaseCfgData  = /** @class */ (function () {
	function ToplistChargeScoreBaseCfgData () {
	}
	ToplistChargeScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistChargeScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistChargeScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "charge");
		};
		 /**  单笔金额 */
		 ToplistChargeScoreBaseCfgData.getChargeByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.charge;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistChargeScoreBaseCfgData.getScoreByCharge = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistChargeScoreBaseCfgData
}());
	
cfg.ToplistChargeScoreBaseCfgData = ToplistChargeScoreBaseCfgData;
var ToplistHeroScoreBaseCfgData  = /** @class */ (function () {
	function ToplistHeroScoreBaseCfgData () {
	}
	ToplistHeroScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistHeroScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistHeroScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistHeroScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistHeroScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistHeroScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistHeroScoreBaseCfgData
}());
	
cfg.ToplistHeroScoreBaseCfgData = ToplistHeroScoreBaseCfgData;
var ToplistPieceScoreBaseCfgData  = /** @class */ (function () {
	function ToplistPieceScoreBaseCfgData () {
	}
	ToplistPieceScoreBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ToplistPieceScoreBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ToplistPieceScoreBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "star");
		};
		 /**  星 */
		 ToplistPieceScoreBaseCfgData.getStarByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.star;
			}
			return 0;
		};
		 /**  类型 */
		 ToplistPieceScoreBaseCfgData.getTypeByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  积分 */
		 ToplistPieceScoreBaseCfgData.getScoreByStar = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.score;
			}
			return 0;
		};

	return ToplistPieceScoreBaseCfgData
}());
	
cfg.ToplistPieceScoreBaseCfgData = ToplistPieceScoreBaseCfgData;
var TrainConstantsBaseCfgData  = /** @class */ (function () {
	function TrainConstantsBaseCfgData () {
	}
	TrainConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mainPagePrize");
		};
		 /**  主界面玩法奖励 */
		 TrainConstantsBaseCfgData.getMainPagePrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPagePrize;
			}
			return ""
		};
		 /**  首通奖励 */
		 TrainConstantsBaseCfgData.getFirstPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  日常挑战奖励 */
		 TrainConstantsBaseCfgData.getDaylyPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.daylyPrize;
			}
			return ""
		};
		 /**  排行榜奖励 */
		 TrainConstantsBaseCfgData.getRankPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankPrize;
			}
			return ""
		};
		 /**  Buff技能index(分号隔开) */
		 TrainConstantsBaseCfgData.getBuffByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buff;
			}
			return ""
		};
		 /**  购买buff数量 */
		 TrainConstantsBaseCfgData.getBuffCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffCount;
			}
			return 0;
		};
		 /**  购买buff消耗 */
		 TrainConstantsBaseCfgData.getBuffNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffNeedItem;
			}
			return ""
		};
		 /**  buff加成伤害万分比 */
		 TrainConstantsBaseCfgData.getBuffAddDamageByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffAddDamage;
			}
			return 0;
		};
		 /**  购买挑战次数消耗 */
		 TrainConstantsBaseCfgData.getCountNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countNeedItem;
			}
			return ""
		};
		 /**  购买挑战次数 */
		 TrainConstantsBaseCfgData.getBuyCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  免费挑战次数 */
		 TrainConstantsBaseCfgData.getFreeCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  大师挑战入口奖励预览 */
		 TrainConstantsBaseCfgData.getPeakPrizeReviewByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.peakPrizeReview;
			}
			return ""
		};
		 /**  对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.towerShopOpen;
			}
			return 0;
		};
		 /**  大师对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getMasterTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterTowerShopOpen;
			}
			return 0;
		};

	return TrainConstantsBaseCfgData
}());
	
cfg.TrainConstantsBaseCfgData = TrainConstantsBaseCfgData;
var TrainPeakBaseCfgData  = /** @class */ (function () {
	function TrainPeakBaseCfgData () {
	}
	TrainPeakBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainPeakBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainPeakBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "day");
		};
		 /**  天 */
		 TrainPeakBaseCfgData.getDayByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainPeakBaseCfgData.getMonsterByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainPeakBaseCfgData.getPrizeByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};

	return TrainPeakBaseCfgData
}());
	
cfg.TrainPeakBaseCfgData = TrainPeakBaseCfgData;
var TrainMonsterNewBaseCfgData  = /** @class */ (function () {
	function TrainMonsterNewBaseCfgData () {
	}
	TrainMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TrainMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TrainMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return TrainMonsterNewBaseCfgData
}());
	
cfg.TrainMonsterNewBaseCfgData = TrainMonsterNewBaseCfgData;
var TrainEndlessBaseCfgData  = /** @class */ (function () {
	function TrainEndlessBaseCfgData () {
	}
	TrainEndlessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainEndlessBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainEndlessBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  重置的关卡 */
		 TrainEndlessBaseCfgData.getResetStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetStageID;
			}
			return 0;
		};
		 /**  领取关卡数 */
		 TrainEndlessBaseCfgData.getPrizeStageCountByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeStageCount;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainEndlessBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  固定奖励 */
		 TrainEndlessBaseCfgData.getFixPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixPrize;
			}
			return ""
		};

	return TrainEndlessBaseCfgData
}());
	
cfg.TrainEndlessBaseCfgData = TrainEndlessBaseCfgData;
var TrainTowerPrizeBaseCfgData  = /** @class */ (function () {
	function TrainTowerPrizeBaseCfgData () {
	}
	TrainTowerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainTowerPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerPrizeBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainTowerPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainTowerPrizeBaseCfgData
}());
	
cfg.TrainTowerPrizeBaseCfgData = TrainTowerPrizeBaseCfgData;
var TrainTowerPrizeBaseCfgData  = /** @class */ (function () {
	function TrainTowerPrizeBaseCfgData () {
	}
	TrainTowerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainTowerPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerPrizeBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainTowerPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainTowerPrizeBaseCfgData
}());
	
cfg.TrainTowerPrizeBaseCfgData = TrainTowerPrizeBaseCfgData;
var TrainTowerBaseCfgData  = /** @class */ (function () {
	function TrainTowerBaseCfgData () {
	}
	TrainTowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainTowerBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  层数显示 */
		 TrainTowerBaseCfgData.getStageShowByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageShow;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  推荐战力 */
		 TrainTowerBaseCfgData.getRequreFightPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainTowerBaseCfgData.getBossIndexByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainTowerBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 TrainTowerBaseCfgData.getFirstAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddPrize;
			}
			return ""
		};
		 /**  挑战奖励 */
		 TrainTowerBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  文字描述 */
		 TrainTowerBaseCfgData.getDescByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return TrainTowerBaseCfgData
}());
	
cfg.TrainTowerBaseCfgData = TrainTowerBaseCfgData;
var TrainTowerCountBaseCfgData  = /** @class */ (function () {
	function TrainTowerCountBaseCfgData () {
	}
	TrainTowerCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 TrainTowerCountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 TrainTowerCountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要VIP特权 */
		 TrainTowerCountBaseCfgData.getNeedVIPByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return TrainTowerCountBaseCfgData
}());
	
cfg.TrainTowerCountBaseCfgData = TrainTowerCountBaseCfgData;
var TrainEndlessBaseCfgData  = /** @class */ (function () {
	function TrainEndlessBaseCfgData () {
	}
	TrainEndlessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainEndlessBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainEndlessBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  重置的关卡 */
		 TrainEndlessBaseCfgData.getResetStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetStageID;
			}
			return 0;
		};
		 /**  领取关卡数 */
		 TrainEndlessBaseCfgData.getPrizeStageCountByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeStageCount;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainEndlessBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  固定奖励 */
		 TrainEndlessBaseCfgData.getFixPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixPrize;
			}
			return ""
		};

	return TrainEndlessBaseCfgData
}());
	
cfg.TrainEndlessBaseCfgData = TrainEndlessBaseCfgData;
var TrainEndlessPrizeBaseCfgData  = /** @class */ (function () {
	function TrainEndlessPrizeBaseCfgData () {
	}
	TrainEndlessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainEndlessPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainEndlessPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainEndlessPrizeBaseCfgData
}());
	
cfg.TrainEndlessPrizeBaseCfgData = TrainEndlessPrizeBaseCfgData;
var TrainTowerBaseCfgData  = /** @class */ (function () {
	function TrainTowerBaseCfgData () {
	}
	TrainTowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainTowerBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  层数显示 */
		 TrainTowerBaseCfgData.getStageShowByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageShow;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  推荐战力 */
		 TrainTowerBaseCfgData.getRequreFightPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainTowerBaseCfgData.getBossIndexByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainTowerBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 TrainTowerBaseCfgData.getFirstAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddPrize;
			}
			return ""
		};
		 /**  挑战奖励 */
		 TrainTowerBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  文字描述 */
		 TrainTowerBaseCfgData.getDescByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return TrainTowerBaseCfgData
}());
	
cfg.TrainTowerBaseCfgData = TrainTowerBaseCfgData;
var TrainTowerPrizeBaseCfgData  = /** @class */ (function () {
	function TrainTowerPrizeBaseCfgData () {
	}
	TrainTowerPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainTowerPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerPrizeBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainTowerPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainTowerPrizeBaseCfgData
}());
	
cfg.TrainTowerPrizeBaseCfgData = TrainTowerPrizeBaseCfgData;
var TrainTowerBaseCfgData  = /** @class */ (function () {
	function TrainTowerBaseCfgData () {
	}
	TrainTowerBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainTowerBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  层数显示 */
		 TrainTowerBaseCfgData.getStageShowByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageShow;
			}
			return 0;
		};
		 /**  类型 */
		 TrainTowerBaseCfgData.getTypeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  推荐战力 */
		 TrainTowerBaseCfgData.getRequreFightPowerByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.requreFightPower;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainTowerBaseCfgData.getBossIndexByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainTowerBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  首通奖励 */
		 TrainTowerBaseCfgData.getFirstAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstAddPrize;
			}
			return ""
		};
		 /**  挑战奖励 */
		 TrainTowerBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  文字描述 */
		 TrainTowerBaseCfgData.getDescByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};

	return TrainTowerBaseCfgData
}());
	
cfg.TrainTowerBaseCfgData = TrainTowerBaseCfgData;
var TrainTowerCountBaseCfgData  = /** @class */ (function () {
	function TrainTowerCountBaseCfgData () {
	}
	TrainTowerCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 TrainTowerCountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 TrainTowerCountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要VIP特权 */
		 TrainTowerCountBaseCfgData.getNeedVIPByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return TrainTowerCountBaseCfgData
}());
	
cfg.TrainTowerCountBaseCfgData = TrainTowerCountBaseCfgData;
var TrainEndlessPrizeBaseCfgData  = /** @class */ (function () {
	function TrainEndlessPrizeBaseCfgData () {
	}
	TrainEndlessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainEndlessPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainEndlessPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainEndlessPrizeBaseCfgData
}());
	
cfg.TrainEndlessPrizeBaseCfgData = TrainEndlessPrizeBaseCfgData;
var TrainEndlestBuffBaseCfgData  = /** @class */ (function () {
	function TrainEndlestBuffBaseCfgData () {
	}
	TrainEndlestBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlestBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlestBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  Buff组 */
		 TrainEndlestBuffBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  概率 */
		 TrainEndlestBuffBaseCfgData.getRateByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  BuffID */
		 TrainEndlestBuffBaseCfgData.getBuffIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffID;
			}
			return ""
		};

	return TrainEndlestBuffBaseCfgData
}());
	
cfg.TrainEndlestBuffBaseCfgData = TrainEndlestBuffBaseCfgData;
var TrainConstantsBaseCfgData  = /** @class */ (function () {
	function TrainConstantsBaseCfgData () {
	}
	TrainConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mainPagePrize");
		};
		 /**  主界面玩法奖励 */
		 TrainConstantsBaseCfgData.getMainPagePrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPagePrize;
			}
			return ""
		};
		 /**  首通奖励 */
		 TrainConstantsBaseCfgData.getFirstPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  日常挑战奖励 */
		 TrainConstantsBaseCfgData.getDaylyPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.daylyPrize;
			}
			return ""
		};
		 /**  排行榜奖励 */
		 TrainConstantsBaseCfgData.getRankPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankPrize;
			}
			return ""
		};
		 /**  Buff技能index(分号隔开) */
		 TrainConstantsBaseCfgData.getBuffByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buff;
			}
			return ""
		};
		 /**  购买buff数量 */
		 TrainConstantsBaseCfgData.getBuffCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffCount;
			}
			return 0;
		};
		 /**  购买buff消耗 */
		 TrainConstantsBaseCfgData.getBuffNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffNeedItem;
			}
			return ""
		};
		 /**  buff加成伤害万分比 */
		 TrainConstantsBaseCfgData.getBuffAddDamageByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffAddDamage;
			}
			return 0;
		};
		 /**  购买挑战次数消耗 */
		 TrainConstantsBaseCfgData.getCountNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countNeedItem;
			}
			return ""
		};
		 /**  购买挑战次数 */
		 TrainConstantsBaseCfgData.getBuyCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  免费挑战次数 */
		 TrainConstantsBaseCfgData.getFreeCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  大师挑战入口奖励预览 */
		 TrainConstantsBaseCfgData.getPeakPrizeReviewByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.peakPrizeReview;
			}
			return ""
		};
		 /**  对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.towerShopOpen;
			}
			return 0;
		};
		 /**  大师对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getMasterTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterTowerShopOpen;
			}
			return 0;
		};

	return TrainConstantsBaseCfgData
}());
	
cfg.TrainConstantsBaseCfgData = TrainConstantsBaseCfgData;
var TrainPeakBaseCfgData  = /** @class */ (function () {
	function TrainPeakBaseCfgData () {
	}
	TrainPeakBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainPeakBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainPeakBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "day");
		};
		 /**  天 */
		 TrainPeakBaseCfgData.getDayByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainPeakBaseCfgData.getMonsterByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainPeakBaseCfgData.getPrizeByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};

	return TrainPeakBaseCfgData
}());
	
cfg.TrainPeakBaseCfgData = TrainPeakBaseCfgData;
var TrainMonsterNewBaseCfgData  = /** @class */ (function () {
	function TrainMonsterNewBaseCfgData () {
	}
	TrainMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TrainMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TrainMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return TrainMonsterNewBaseCfgData
}());
	
cfg.TrainMonsterNewBaseCfgData = TrainMonsterNewBaseCfgData;
var TrainEndlestBuffBaseCfgData  = /** @class */ (function () {
	function TrainEndlestBuffBaseCfgData () {
	}
	TrainEndlestBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlestBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlestBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  Buff组 */
		 TrainEndlestBuffBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  概率 */
		 TrainEndlestBuffBaseCfgData.getRateByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  BuffID */
		 TrainEndlestBuffBaseCfgData.getBuffIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffID;
			}
			return ""
		};

	return TrainEndlestBuffBaseCfgData
}());
	
cfg.TrainEndlestBuffBaseCfgData = TrainEndlestBuffBaseCfgData;
var TrainMonsterNewBaseCfgData  = /** @class */ (function () {
	function TrainMonsterNewBaseCfgData () {
	}
	TrainMonsterNewBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainMonsterNewBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainMonsterNewBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  关卡Index */
		 TrainMonsterNewBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  Boss序号 */
		 TrainMonsterNewBaseCfgData.getBossIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bossIndex;
			}
			return 0;
		};
		 /**  怪物们(位置_PetID_等级_阶级_星级;) */
		 TrainMonsterNewBaseCfgData.getMonsterInfoByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monsterInfo;
			}
			return ""
		};

	return TrainMonsterNewBaseCfgData
}());
	
cfg.TrainMonsterNewBaseCfgData = TrainMonsterNewBaseCfgData;
var TrainTowerCountBaseCfgData  = /** @class */ (function () {
	function TrainTowerCountBaseCfgData () {
	}
	TrainTowerCountBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainTowerCountBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainTowerCountBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "buyCount");
		};
		 /**  次数 */
		 TrainTowerCountBaseCfgData.getBuyCountByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  需要钻石 */
		 TrainTowerCountBaseCfgData.getNeedDiamondByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needDiamond;
			}
			return 0;
		};
		 /**  需要VIP特权 */
		 TrainTowerCountBaseCfgData.getNeedVIPByBuyCount = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needVIP;
			}
			return 0;
		};

	return TrainTowerCountBaseCfgData
}());
	
cfg.TrainTowerCountBaseCfgData = TrainTowerCountBaseCfgData;
var TrainConstantsBaseCfgData  = /** @class */ (function () {
	function TrainConstantsBaseCfgData () {
	}
	TrainConstantsBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainConstantsBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainConstantsBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "mainPagePrize");
		};
		 /**  主界面玩法奖励 */
		 TrainConstantsBaseCfgData.getMainPagePrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.mainPagePrize;
			}
			return ""
		};
		 /**  首通奖励 */
		 TrainConstantsBaseCfgData.getFirstPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.firstPrize;
			}
			return ""
		};
		 /**  日常挑战奖励 */
		 TrainConstantsBaseCfgData.getDaylyPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.daylyPrize;
			}
			return ""
		};
		 /**  排行榜奖励 */
		 TrainConstantsBaseCfgData.getRankPrizeByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rankPrize;
			}
			return ""
		};
		 /**  Buff技能index(分号隔开) */
		 TrainConstantsBaseCfgData.getBuffByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buff;
			}
			return ""
		};
		 /**  购买buff数量 */
		 TrainConstantsBaseCfgData.getBuffCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffCount;
			}
			return 0;
		};
		 /**  购买buff消耗 */
		 TrainConstantsBaseCfgData.getBuffNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffNeedItem;
			}
			return ""
		};
		 /**  buff加成伤害万分比 */
		 TrainConstantsBaseCfgData.getBuffAddDamageByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffAddDamage;
			}
			return 0;
		};
		 /**  购买挑战次数消耗 */
		 TrainConstantsBaseCfgData.getCountNeedItemByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.countNeedItem;
			}
			return ""
		};
		 /**  购买挑战次数 */
		 TrainConstantsBaseCfgData.getBuyCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buyCount;
			}
			return 0;
		};
		 /**  免费挑战次数 */
		 TrainConstantsBaseCfgData.getFreeCountByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  大师挑战入口奖励预览 */
		 TrainConstantsBaseCfgData.getPeakPrizeReviewByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.peakPrizeReview;
			}
			return ""
		};
		 /**  对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.towerShopOpen;
			}
			return 0;
		};
		 /**  大师对战塔商店开启关卡 */
		 TrainConstantsBaseCfgData.getMasterTowerShopOpenByMainPagePrize = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.masterTowerShopOpen;
			}
			return 0;
		};

	return TrainConstantsBaseCfgData
}());
	
cfg.TrainConstantsBaseCfgData = TrainConstantsBaseCfgData;
var TrainEndlestBuffBaseCfgData  = /** @class */ (function () {
	function TrainEndlestBuffBaseCfgData () {
	}
	TrainEndlestBuffBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlestBuffBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlestBuffBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "groupID");
		};
		 /**  Buff组 */
		 TrainEndlestBuffBaseCfgData.getGroupIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.groupID;
			}
			return 0;
		};
		 /**  概率 */
		 TrainEndlestBuffBaseCfgData.getRateByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rate;
			}
			return 0;
		};
		 /**  BuffID */
		 TrainEndlestBuffBaseCfgData.getBuffIDByGroupID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.buffID;
			}
			return ""
		};

	return TrainEndlestBuffBaseCfgData
}());
	
cfg.TrainEndlestBuffBaseCfgData = TrainEndlestBuffBaseCfgData;
var TrainEndlessPrizeBaseCfgData  = /** @class */ (function () {
	function TrainEndlessPrizeBaseCfgData () {
	}
	TrainEndlessPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡ID */
		 TrainEndlessPrizeBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  关卡奖励道具ID_数量; */
		 TrainEndlessPrizeBaseCfgData.getStagePrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stagePrize;
			}
			return ""
		};

	return TrainEndlessPrizeBaseCfgData
}());
	
cfg.TrainEndlessPrizeBaseCfgData = TrainEndlessPrizeBaseCfgData;
var TrainPeakBaseCfgData  = /** @class */ (function () {
	function TrainPeakBaseCfgData () {
	}
	TrainPeakBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainPeakBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainPeakBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "day");
		};
		 /**  天 */
		 TrainPeakBaseCfgData.getDayByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainPeakBaseCfgData.getMonsterByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainPeakBaseCfgData.getPrizeByDay = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prize;
			}
			return ""
		};

	return TrainPeakBaseCfgData
}());
	
cfg.TrainPeakBaseCfgData = TrainPeakBaseCfgData;
var TrainEndlessBaseCfgData  = /** @class */ (function () {
	function TrainEndlessBaseCfgData () {
	}
	TrainEndlessBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TrainEndlessBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TrainEndlessBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "stageID");
		};
		 /**  关卡 */
		 TrainEndlessBaseCfgData.getStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageID;
			}
			return 0;
		};
		 /**  怪物数据 */
		 TrainEndlessBaseCfgData.getMonsterByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.monster;
			}
			return 0;
		};
		 /**  重置的关卡 */
		 TrainEndlessBaseCfgData.getResetStageIDByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetStageID;
			}
			return 0;
		};
		 /**  领取关卡数 */
		 TrainEndlessBaseCfgData.getPrizeStageCountByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizeStageCount;
			}
			return 0;
		};
		 /**  奖励 */
		 TrainEndlessBaseCfgData.getAddPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addPrize;
			}
			return ""
		};
		 /**  固定奖励 */
		 TrainEndlessBaseCfgData.getFixPrizeByStageID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fixPrize;
			}
			return ""
		};

	return TrainEndlessBaseCfgData
}());
	
cfg.TrainEndlessBaseCfgData = TrainEndlessBaseCfgData;
var TreasureCostBaseCfgData  = /** @class */ (function () {
	function TreasureCostBaseCfgData () {
	}
	TreasureCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 TreasureCostBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗物品 */
		 TreasureCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP */
		 TreasureCostBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return TreasureCostBaseCfgData
}());
	
cfg.TreasureCostBaseCfgData = TreasureCostBaseCfgData;
var TreasureHuntBaseCfgData  = /** @class */ (function () {
	function TreasureHuntBaseCfgData () {
	}
	TreasureHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureHuntBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机组 */
		 TreasureHuntBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  摇中概率 */
		 TreasureHuntBaseCfgData.getRollChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TreasureHuntBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  随机奖励道具(刷新出随机其中一种) */
		 TreasureHuntBaseCfgData.getAddRandItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addRandItem;
			}
			return ""
		};
		 /**  位置(从1开始) */
		 TreasureHuntBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  个数限制(0不限制) */
		 TreasureHuntBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};

	return TreasureHuntBaseCfgData
}());
	
cfg.TreasureHuntBaseCfgData = TreasureHuntBaseCfgData;
var TreasurePoolBaseCfgData  = /** @class */ (function () {
	function TreasurePoolBaseCfgData () {
	}
	TreasurePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasurePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasurePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "group");
		};
		 /**  随机组 */
		 TreasurePoolBaseCfgData.getGroupByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  类型 */
		 TreasurePoolBaseCfgData.getTypeByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  玩家等级(大于等于 当前level，小于下一个level) */
		 TreasurePoolBaseCfgData.getLevelByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};

	return TreasurePoolBaseCfgData
}());
	
cfg.TreasurePoolBaseCfgData = TreasurePoolBaseCfgData;
var TreasureCostBaseCfgData  = /** @class */ (function () {
	function TreasureCostBaseCfgData () {
	}
	TreasureCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 TreasureCostBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗物品 */
		 TreasureCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP */
		 TreasureCostBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return TreasureCostBaseCfgData
}());
	
cfg.TreasureCostBaseCfgData = TreasureCostBaseCfgData;
var TreasureHuntBaseCfgData  = /** @class */ (function () {
	function TreasureHuntBaseCfgData () {
	}
	TreasureHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureHuntBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机组 */
		 TreasureHuntBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  摇中概率 */
		 TreasureHuntBaseCfgData.getRollChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TreasureHuntBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  随机奖励道具(刷新出随机其中一种) */
		 TreasureHuntBaseCfgData.getAddRandItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addRandItem;
			}
			return ""
		};
		 /**  位置(从1开始) */
		 TreasureHuntBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  个数限制(0不限制) */
		 TreasureHuntBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};

	return TreasureHuntBaseCfgData
}());
	
cfg.TreasureHuntBaseCfgData = TreasureHuntBaseCfgData;
var TreasureLuckyRewardBaseCfgData  = /** @class */ (function () {
	function TreasureLuckyRewardBaseCfgData () {
	}
	TreasureLuckyRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureLuckyRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureLuckyRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureLuckyRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureLuckyRewardBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要道具（幸运值） */
		 TreasureLuckyRewardBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 TreasureLuckyRewardBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return TreasureLuckyRewardBaseCfgData
}());
	
cfg.TreasureLuckyRewardBaseCfgData = TreasureLuckyRewardBaseCfgData;
var TreasureCostBaseCfgData  = /** @class */ (function () {
	function TreasureCostBaseCfgData () {
	}
	TreasureCostBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureCostBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureCostBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureCostBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureCostBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  次数 */
		 TreasureCostBaseCfgData.getTimesByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.times;
			}
			return 0;
		};
		 /**  消耗物品 */
		 TreasureCostBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  需要VIP */
		 TreasureCostBaseCfgData.getVIPByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.vIP;
			}
			return 0;
		};

	return TreasureCostBaseCfgData
}());
	
cfg.TreasureCostBaseCfgData = TreasureCostBaseCfgData;
var TreasureHuntTypeBaseCfgData  = /** @class */ (function () {
	function TreasureHuntTypeBaseCfgData () {
	}
	TreasureHuntTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TreasureHuntTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  免费刷新次数 */
		 TreasureHuntTypeBaseCfgData.getFreeCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新需要道具 */
		 TreasureHuntTypeBaseCfgData.getRefreshNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  探宝一次获得道具（幸运值） */
		 TreasureHuntTypeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  轮盘上物品的个数 */
		 TreasureHuntTypeBaseCfgData.getDisplayNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.displayNum;
			}
			return 0;
		};
		 /**  免费刷新重置时间(分钟) */
		 TreasureHuntTypeBaseCfgData.getResetTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetTime;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 TreasureHuntTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  幸运值最大值 */
		 TreasureHuntTypeBaseCfgData.getMaxLuckyItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLuckyItem;
			}
			return 0;
		};

	return TreasureHuntTypeBaseCfgData
}());
	
cfg.TreasureHuntTypeBaseCfgData = TreasureHuntTypeBaseCfgData;
var TreasureHuntBaseCfgData  = /** @class */ (function () {
	function TreasureHuntBaseCfgData () {
	}
	TreasureHuntBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureHuntBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  随机组 */
		 TreasureHuntBaseCfgData.getGroupByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  摇中概率 */
		 TreasureHuntBaseCfgData.getRollChanceByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rollChance;
			}
			return 0;
		};
		 /**  奖励道具 */
		 TreasureHuntBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  随机奖励道具(刷新出随机其中一种) */
		 TreasureHuntBaseCfgData.getAddRandItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addRandItem;
			}
			return ""
		};
		 /**  位置(从1开始) */
		 TreasureHuntBaseCfgData.getPositionByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.position;
			}
			return 0;
		};
		 /**  个数限制(0不限制) */
		 TreasureHuntBaseCfgData.getLimitNumByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.limitNum;
			}
			return 0;
		};

	return TreasureHuntBaseCfgData
}());
	
cfg.TreasureHuntBaseCfgData = TreasureHuntBaseCfgData;
var TreasureHuntTypeBaseCfgData  = /** @class */ (function () {
	function TreasureHuntTypeBaseCfgData () {
	}
	TreasureHuntTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TreasureHuntTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  免费刷新次数 */
		 TreasureHuntTypeBaseCfgData.getFreeCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新需要道具 */
		 TreasureHuntTypeBaseCfgData.getRefreshNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  探宝一次获得道具（幸运值） */
		 TreasureHuntTypeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  轮盘上物品的个数 */
		 TreasureHuntTypeBaseCfgData.getDisplayNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.displayNum;
			}
			return 0;
		};
		 /**  免费刷新重置时间(分钟) */
		 TreasureHuntTypeBaseCfgData.getResetTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetTime;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 TreasureHuntTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  幸运值最大值 */
		 TreasureHuntTypeBaseCfgData.getMaxLuckyItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLuckyItem;
			}
			return 0;
		};

	return TreasureHuntTypeBaseCfgData
}());
	
cfg.TreasureHuntTypeBaseCfgData = TreasureHuntTypeBaseCfgData;
var TreasureLuckyRewardBaseCfgData  = /** @class */ (function () {
	function TreasureLuckyRewardBaseCfgData () {
	}
	TreasureLuckyRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureLuckyRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureLuckyRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureLuckyRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureLuckyRewardBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要道具（幸运值） */
		 TreasureLuckyRewardBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 TreasureLuckyRewardBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return TreasureLuckyRewardBaseCfgData
}());
	
cfg.TreasureLuckyRewardBaseCfgData = TreasureLuckyRewardBaseCfgData;
var TreasureLuckyRewardBaseCfgData  = /** @class */ (function () {
	function TreasureLuckyRewardBaseCfgData () {
	}
	TreasureLuckyRewardBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureLuckyRewardBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureLuckyRewardBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 TreasureLuckyRewardBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  类型 */
		 TreasureLuckyRewardBaseCfgData.getTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  需要道具（幸运值） */
		 TreasureLuckyRewardBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励道具 */
		 TreasureLuckyRewardBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return TreasureLuckyRewardBaseCfgData
}());
	
cfg.TreasureLuckyRewardBaseCfgData = TreasureLuckyRewardBaseCfgData;
var TreasurePoolBaseCfgData  = /** @class */ (function () {
	function TreasurePoolBaseCfgData () {
	}
	TreasurePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasurePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasurePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "group");
		};
		 /**  随机组 */
		 TreasurePoolBaseCfgData.getGroupByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  类型 */
		 TreasurePoolBaseCfgData.getTypeByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  玩家等级(大于等于 当前level，小于下一个level) */
		 TreasurePoolBaseCfgData.getLevelByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};

	return TreasurePoolBaseCfgData
}());
	
cfg.TreasurePoolBaseCfgData = TreasurePoolBaseCfgData;
var TreasurePoolBaseCfgData  = /** @class */ (function () {
	function TreasurePoolBaseCfgData () {
	}
	TreasurePoolBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasurePoolBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasurePoolBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "group");
		};
		 /**  随机组 */
		 TreasurePoolBaseCfgData.getGroupByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.group;
			}
			return 0;
		};
		 /**  类型 */
		 TreasurePoolBaseCfgData.getTypeByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  玩家等级(大于等于 当前level，小于下一个level) */
		 TreasurePoolBaseCfgData.getLevelByGroup = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.level;
			}
			return 0;
		};

	return TreasurePoolBaseCfgData
}());
	
cfg.TreasurePoolBaseCfgData = TreasurePoolBaseCfgData;
var TreasureHuntTypeBaseCfgData  = /** @class */ (function () {
	function TreasureHuntTypeBaseCfgData () {
	}
	TreasureHuntTypeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TreasureHuntTypeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TreasureHuntTypeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 TreasureHuntTypeBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  免费刷新次数 */
		 TreasureHuntTypeBaseCfgData.getFreeCountByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.freeCount;
			}
			return 0;
		};
		 /**  刷新需要道具 */
		 TreasureHuntTypeBaseCfgData.getRefreshNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.refreshNeedItem;
			}
			return ""
		};
		 /**  探宝一次获得道具（幸运值） */
		 TreasureHuntTypeBaseCfgData.getAddItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  轮盘上物品的个数 */
		 TreasureHuntTypeBaseCfgData.getDisplayNumByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.displayNum;
			}
			return 0;
		};
		 /**  免费刷新重置时间(分钟) */
		 TreasureHuntTypeBaseCfgData.getResetTimeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetTime;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 TreasureHuntTypeBaseCfgData.getNeedLevelByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLevel;
			}
			return 0;
		};
		 /**  幸运值最大值 */
		 TreasureHuntTypeBaseCfgData.getMaxLuckyItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxLuckyItem;
			}
			return 0;
		};

	return TreasureHuntTypeBaseCfgData
}());
	
cfg.TreasureHuntTypeBaseCfgData = TreasureHuntTypeBaseCfgData;
var UiconfigUiopenBaseCfgData  = /** @class */ (function () {
	function UiconfigUiopenBaseCfgData () {
	}
	UiconfigUiopenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUiopenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUiopenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUiopenBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  别名 */
		 UiconfigUiopenBaseCfgData.getPanelNotifyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelNotify;
			}
			return ""
		};
		 /**  子页签 */
		 UiconfigUiopenBaseCfgData.getPageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.page;
			}
			return ""
		};
		 /**  功能开关id */
		 UiconfigUiopenBaseCfgData.getSystemSwitchIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 UiconfigUiopenBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};

	return UiconfigUiopenBaseCfgData
}());
	
cfg.UiconfigUiopenBaseCfgData = UiconfigUiopenBaseCfgData;
var UiconfigUiopenBaseCfgData  = /** @class */ (function () {
	function UiconfigUiopenBaseCfgData () {
	}
	UiconfigUiopenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUiopenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUiopenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUiopenBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  别名 */
		 UiconfigUiopenBaseCfgData.getPanelNotifyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelNotify;
			}
			return ""
		};
		 /**  子页签 */
		 UiconfigUiopenBaseCfgData.getPageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.page;
			}
			return ""
		};
		 /**  功能开关id */
		 UiconfigUiopenBaseCfgData.getSystemSwitchIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 UiconfigUiopenBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};

	return UiconfigUiopenBaseCfgData
}());
	
cfg.UiconfigUiopenBaseCfgData = UiconfigUiopenBaseCfgData;
var UiconfigUibgBaseCfgData  = /** @class */ (function () {
	function UiconfigUibgBaseCfgData () {
	}
	UiconfigUibgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUibgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUibgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUibgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  UI事件名称 */
		 UiconfigUibgBaseCfgData.getPanelNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelName;
			}
			return ""
		};
		 /**  背景名称 */
		 UiconfigUibgBaseCfgData.getBGUrlByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGUrl;
			}
			return ""
		};

	return UiconfigUibgBaseCfgData
}());
	
cfg.UiconfigUibgBaseCfgData = UiconfigUibgBaseCfgData;
var UiconfigUibgBaseCfgData  = /** @class */ (function () {
	function UiconfigUibgBaseCfgData () {
	}
	UiconfigUibgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUibgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUibgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUibgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  UI事件名称 */
		 UiconfigUibgBaseCfgData.getPanelNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelName;
			}
			return ""
		};
		 /**  背景名称 */
		 UiconfigUibgBaseCfgData.getBGUrlByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGUrl;
			}
			return ""
		};

	return UiconfigUibgBaseCfgData
}());
	
cfg.UiconfigUibgBaseCfgData = UiconfigUibgBaseCfgData;
var UiconfigUibgBaseCfgData  = /** @class */ (function () {
	function UiconfigUibgBaseCfgData () {
	}
	UiconfigUibgBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUibgBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUibgBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUibgBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  UI事件名称 */
		 UiconfigUibgBaseCfgData.getPanelNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelName;
			}
			return ""
		};
		 /**  背景名称 */
		 UiconfigUibgBaseCfgData.getBGUrlByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.bGUrl;
			}
			return ""
		};

	return UiconfigUibgBaseCfgData
}());
	
cfg.UiconfigUibgBaseCfgData = UiconfigUibgBaseCfgData;
var UiconfigUiopenBaseCfgData  = /** @class */ (function () {
	function UiconfigUiopenBaseCfgData () {
	}
	UiconfigUiopenBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	UiconfigUiopenBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		UiconfigUiopenBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  Index */
		 UiconfigUiopenBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  别名 */
		 UiconfigUiopenBaseCfgData.getPanelNotifyByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.panelNotify;
			}
			return ""
		};
		 /**  子页签 */
		 UiconfigUiopenBaseCfgData.getPageByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.page;
			}
			return ""
		};
		 /**  功能开关id */
		 UiconfigUiopenBaseCfgData.getSystemSwitchIdByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.systemSwitchId;
			}
			return 0;
		};
		 /**  描述 */
		 UiconfigUiopenBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};

	return UiconfigUiopenBaseCfgData
}());
	
cfg.UiconfigUiopenBaseCfgData = UiconfigUiopenBaseCfgData;
var WealResourceFindbackBaseCfgData  = /** @class */ (function () {
	function WealResourceFindbackBaseCfgData () {
	}
	WealResourceFindbackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealResourceFindbackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealResourceFindbackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  资源找回玩法ID:EnmResourceID */
		 WealResourceFindbackBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动名字 */
		 WealResourceFindbackBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};
		 /**  免费折扣 */
		 WealResourceFindbackBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  扣除钻石 */
		 WealResourceFindbackBaseCfgData.getSubItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subItem;
			}
			return 0;
		};
		 /**  计算方式 */
		 WealResourceFindbackBaseCfgData.getFlagByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return WealResourceFindbackBaseCfgData
}());
	
cfg.WealResourceFindbackBaseCfgData = WealResourceFindbackBaseCfgData;
var WealOnlinePrizeBaseCfgData  = /** @class */ (function () {
	function WealOnlinePrizeBaseCfgData () {
	}
	WealOnlinePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealOnlinePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealOnlinePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealOnlinePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  解锁时间（在线的秒数） */
		 WealOnlinePrizeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealOnlinePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return WealOnlinePrizeBaseCfgData
}());
	
cfg.WealOnlinePrizeBaseCfgData = WealOnlinePrizeBaseCfgData;
var WealResourceFindbackBaseCfgData  = /** @class */ (function () {
	function WealResourceFindbackBaseCfgData () {
	}
	WealResourceFindbackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealResourceFindbackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealResourceFindbackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  资源找回玩法ID:EnmResourceID */
		 WealResourceFindbackBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动名字 */
		 WealResourceFindbackBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};
		 /**  免费折扣 */
		 WealResourceFindbackBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  扣除钻石 */
		 WealResourceFindbackBaseCfgData.getSubItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subItem;
			}
			return 0;
		};
		 /**  计算方式 */
		 WealResourceFindbackBaseCfgData.getFlagByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return WealResourceFindbackBaseCfgData
}());
	
cfg.WealResourceFindbackBaseCfgData = WealResourceFindbackBaseCfgData;
var WealSigninBaseCfgData  = /** @class */ (function () {
	function WealSigninBaseCfgData () {
	}
	WealSigninBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealSigninBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealSigninBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "month");
		};
		 /**  月份(0表示通用) */
		 WealSigninBaseCfgData.getMonthByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.month;
			}
			return 0;
		};
		 /**  天数 */
		 WealSigninBaseCfgData.getDayByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealSigninBaseCfgData.getAddItemByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  流光特效 */
		 WealSigninBaseCfgData.getEffByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eff;
			}
			return 0;
		};

	return WealSigninBaseCfgData
}());
	
cfg.WealSigninBaseCfgData = WealSigninBaseCfgData;
var WealGiftBaseCfgData  = /** @class */ (function () {
	function WealGiftBaseCfgData () {
	}
	WealGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  消耗 */
		 WealGiftBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励 */
		 WealGiftBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  循环周期天数 */
		 WealGiftBaseCfgData.getCycleDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleDays;
			}
			return 0;
		};
		 /**  循环索引 */
		 WealGiftBaseCfgData.getCycleIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleIndex;
			}
			return 0;
		};
		 /**  重置周期天数 */
		 WealGiftBaseCfgData.getResetDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetDays;
			}
			return 0;
		};
		 /**  限购个数 */
		 WealGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return WealGiftBaseCfgData
}());
	
cfg.WealGiftBaseCfgData = WealGiftBaseCfgData;
var WealGiftBaseCfgData  = /** @class */ (function () {
	function WealGiftBaseCfgData () {
	}
	WealGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  消耗 */
		 WealGiftBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励 */
		 WealGiftBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  循环周期天数 */
		 WealGiftBaseCfgData.getCycleDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleDays;
			}
			return 0;
		};
		 /**  循环索引 */
		 WealGiftBaseCfgData.getCycleIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleIndex;
			}
			return 0;
		};
		 /**  重置周期天数 */
		 WealGiftBaseCfgData.getResetDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetDays;
			}
			return 0;
		};
		 /**  限购个数 */
		 WealGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return WealGiftBaseCfgData
}());
	
cfg.WealGiftBaseCfgData = WealGiftBaseCfgData;
var WealSigninBaseCfgData  = /** @class */ (function () {
	function WealSigninBaseCfgData () {
	}
	WealSigninBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealSigninBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealSigninBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "month");
		};
		 /**  月份(0表示通用) */
		 WealSigninBaseCfgData.getMonthByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.month;
			}
			return 0;
		};
		 /**  天数 */
		 WealSigninBaseCfgData.getDayByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealSigninBaseCfgData.getAddItemByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  流光特效 */
		 WealSigninBaseCfgData.getEffByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eff;
			}
			return 0;
		};

	return WealSigninBaseCfgData
}());
	
cfg.WealSigninBaseCfgData = WealSigninBaseCfgData;
var WealClickgoldBaseCfgData  = /** @class */ (function () {
	function WealClickgoldBaseCfgData () {
	}
	WealClickgoldBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealClickgoldBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealClickgoldBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 WealClickgoldBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大次数 */
		 WealClickgoldBaseCfgData.getMaxTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxTimes;
			}
			return 0;
		};
		 /**  消耗 */
		 WealClickgoldBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  获得金币公式参数1+参数2*(当前关卡-1）/3参数1_参数2 */
		 WealClickgoldBaseCfgData.getAddGoldBaseByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addGoldBase;
			}
			return ""
		};

	return WealClickgoldBaseCfgData
}());
	
cfg.WealClickgoldBaseCfgData = WealClickgoldBaseCfgData;
var WealClickgoldBaseCfgData  = /** @class */ (function () {
	function WealClickgoldBaseCfgData () {
	}
	WealClickgoldBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealClickgoldBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealClickgoldBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 WealClickgoldBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大次数 */
		 WealClickgoldBaseCfgData.getMaxTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxTimes;
			}
			return 0;
		};
		 /**  消耗 */
		 WealClickgoldBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  获得金币公式参数1+参数2*(当前关卡-1）/3参数1_参数2 */
		 WealClickgoldBaseCfgData.getAddGoldBaseByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addGoldBase;
			}
			return ""
		};

	return WealClickgoldBaseCfgData
}());
	
cfg.WealClickgoldBaseCfgData = WealClickgoldBaseCfgData;
var WealOnlinePrizeBaseCfgData  = /** @class */ (function () {
	function WealOnlinePrizeBaseCfgData () {
	}
	WealOnlinePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealOnlinePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealOnlinePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealOnlinePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  解锁时间（在线的秒数） */
		 WealOnlinePrizeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealOnlinePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return WealOnlinePrizeBaseCfgData
}());
	
cfg.WealOnlinePrizeBaseCfgData = WealOnlinePrizeBaseCfgData;
var WealResourceFindbackBaseCfgData  = /** @class */ (function () {
	function WealResourceFindbackBaseCfgData () {
	}
	WealResourceFindbackBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealResourceFindbackBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealResourceFindbackBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "iD");
		};
		 /**  资源找回玩法ID:EnmResourceID */
		 WealResourceFindbackBaseCfgData.getIDByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.iD;
			}
			return 0;
		};
		 /**  活动名字 */
		 WealResourceFindbackBaseCfgData.getDesNameByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desName;
			}
			return ""
		};
		 /**  免费折扣 */
		 WealResourceFindbackBaseCfgData.getDiscountByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.discount;
			}
			return 0;
		};
		 /**  扣除钻石 */
		 WealResourceFindbackBaseCfgData.getSubItemByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.subItem;
			}
			return 0;
		};
		 /**  计算方式 */
		 WealResourceFindbackBaseCfgData.getFlagByID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.flag;
			}
			return 0;
		};

	return WealResourceFindbackBaseCfgData
}());
	
cfg.WealResourceFindbackBaseCfgData = WealResourceFindbackBaseCfgData;
var WealOnlinePrizeBaseCfgData  = /** @class */ (function () {
	function WealOnlinePrizeBaseCfgData () {
	}
	WealOnlinePrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealOnlinePrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealOnlinePrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealOnlinePrizeBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  解锁时间（在线的秒数） */
		 WealOnlinePrizeBaseCfgData.getTimeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.time;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealOnlinePrizeBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};

	return WealOnlinePrizeBaseCfgData
}());
	
cfg.WealOnlinePrizeBaseCfgData = WealOnlinePrizeBaseCfgData;
var WealClickgoldBaseCfgData  = /** @class */ (function () {
	function WealClickgoldBaseCfgData () {
	}
	WealClickgoldBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealClickgoldBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealClickgoldBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "type");
		};
		 /**  类型 */
		 WealClickgoldBaseCfgData.getTypeByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  最大次数 */
		 WealClickgoldBaseCfgData.getMaxTimesByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxTimes;
			}
			return 0;
		};
		 /**  消耗 */
		 WealClickgoldBaseCfgData.getNeedItemByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  获得金币公式参数1+参数2*(当前关卡-1）/3参数1_参数2 */
		 WealClickgoldBaseCfgData.getAddGoldBaseByType = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addGoldBase;
			}
			return ""
		};

	return WealClickgoldBaseCfgData
}());
	
cfg.WealClickgoldBaseCfgData = WealClickgoldBaseCfgData;
var WealGiftBaseCfgData  = /** @class */ (function () {
	function WealGiftBaseCfgData () {
	}
	WealGiftBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealGiftBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealGiftBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  索引 */
		 WealGiftBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  消耗 */
		 WealGiftBaseCfgData.getNeedItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needItem;
			}
			return ""
		};
		 /**  奖励 */
		 WealGiftBaseCfgData.getAddItemByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  循环周期天数 */
		 WealGiftBaseCfgData.getCycleDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleDays;
			}
			return 0;
		};
		 /**  循环索引 */
		 WealGiftBaseCfgData.getCycleIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.cycleIndex;
			}
			return 0;
		};
		 /**  重置周期天数 */
		 WealGiftBaseCfgData.getResetDaysByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resetDays;
			}
			return 0;
		};
		 /**  限购个数 */
		 WealGiftBaseCfgData.getCountByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.count;
			}
			return 0;
		};

	return WealGiftBaseCfgData
}());
	
cfg.WealGiftBaseCfgData = WealGiftBaseCfgData;
var WealSigninBaseCfgData  = /** @class */ (function () {
	function WealSigninBaseCfgData () {
	}
	WealSigninBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WealSigninBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WealSigninBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "month");
		};
		 /**  月份(0表示通用) */
		 WealSigninBaseCfgData.getMonthByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.month;
			}
			return 0;
		};
		 /**  天数 */
		 WealSigninBaseCfgData.getDayByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.day;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WealSigninBaseCfgData.getAddItemByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  流光特效 */
		 WealSigninBaseCfgData.getEffByMonth = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.eff;
			}
			return 0;
		};

	return WealSigninBaseCfgData
}());
	
cfg.WealSigninBaseCfgData = WealSigninBaseCfgData;
var WeekChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function WeekChampionConstInfoBaseCfgData () {
	}
	WeekChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 WeekChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 WeekChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 WeekChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 WeekChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要跨服天梯排名 */
		 WeekChampionConstInfoBaseCfgData.getNeedLadderRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLadderRank;
			}
			return 0;
		};
		 /**  最少人数 */
		 WeekChampionConstInfoBaseCfgData.getMinPlayerNumByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minPlayerNum;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 WeekChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 WeekChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 WeekChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 WeekChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  战斗回合上限 */
		 WeekChampionConstInfoBaseCfgData.getFightBoutLimitByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightBoutLimit;
			}
			return 0;
		};
		 /**  初始赔率 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 WeekChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 WeekChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 WeekChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 WeekChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 WeekChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 WeekChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};
		 /**  每日点赞上限 */
		 WeekChampionConstInfoBaseCfgData.getDayLikeMaxByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayLikeMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 WeekChampionConstInfoBaseCfgData.getLikeAwardByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAward;
			}
			return ""
		};

	return WeekChampionConstInfoBaseCfgData
}());
	
cfg.WeekChampionConstInfoBaseCfgData = WeekChampionConstInfoBaseCfgData;
var WeekChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function WeekChampionTopPrizeBaseCfgData () {
	}
	WeekChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 WeekChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WeekChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 WeekChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return WeekChampionTopPrizeBaseCfgData
}());
	
cfg.WeekChampionTopPrizeBaseCfgData = WeekChampionTopPrizeBaseCfgData;
var WeekChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function WeekChampionTopPrizeBaseCfgData () {
	}
	WeekChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 WeekChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WeekChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 WeekChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return WeekChampionTopPrizeBaseCfgData
}());
	
cfg.WeekChampionTopPrizeBaseCfgData = WeekChampionTopPrizeBaseCfgData;
var WeekChampionRoundBaseCfgData  = /** @class */ (function () {
	function WeekChampionRoundBaseCfgData () {
	}
	WeekChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 WeekChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 WeekChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 WeekChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return WeekChampionRoundBaseCfgData
}());
	
cfg.WeekChampionRoundBaseCfgData = WeekChampionRoundBaseCfgData;
var WeekChampionTopPrizeBaseCfgData  = /** @class */ (function () {
	function WeekChampionTopPrizeBaseCfgData () {
	}
	WeekChampionTopPrizeBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionTopPrizeBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionTopPrizeBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "rank");
		};
		 /**  排名（上一排名,此名次] */
		 WeekChampionTopPrizeBaseCfgData.getRankByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.rank;
			}
			return 0;
		};
		 /**  奖励道具 */
		 WeekChampionTopPrizeBaseCfgData.getAddItemByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addItem;
			}
			return ""
		};
		 /**  增加称号ID */
		 WeekChampionTopPrizeBaseCfgData.getAddTitleByRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addTitle;
			}
			return 0;
		};

	return WeekChampionTopPrizeBaseCfgData
}());
	
cfg.WeekChampionTopPrizeBaseCfgData = WeekChampionTopPrizeBaseCfgData;
var WeekChampionLadderRankIntegralBaseCfgData  = /** @class */ (function () {
	function WeekChampionLadderRankIntegralBaseCfgData () {
	}
	WeekChampionLadderRankIntegralBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionLadderRankIntegralBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionLadderRankIntegralBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "ladderRank");
		};
		 /**  天梯排名 */
		 WeekChampionLadderRankIntegralBaseCfgData.getLadderRankByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ladderRank;
			}
			return 0;
		};
		 /**  初始积分 */
		 WeekChampionLadderRankIntegralBaseCfgData.getIntegralByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.integral;
			}
			return 0;
		};

	return WeekChampionLadderRankIntegralBaseCfgData
}());
	
cfg.WeekChampionLadderRankIntegralBaseCfgData = WeekChampionLadderRankIntegralBaseCfgData;
var WeekChampionRoundBaseCfgData  = /** @class */ (function () {
	function WeekChampionRoundBaseCfgData () {
	}
	WeekChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 WeekChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 WeekChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 WeekChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return WeekChampionRoundBaseCfgData
}());
	
cfg.WeekChampionRoundBaseCfgData = WeekChampionRoundBaseCfgData;
var WeekChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function WeekChampionConstInfoBaseCfgData () {
	}
	WeekChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 WeekChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 WeekChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 WeekChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 WeekChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要跨服天梯排名 */
		 WeekChampionConstInfoBaseCfgData.getNeedLadderRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLadderRank;
			}
			return 0;
		};
		 /**  最少人数 */
		 WeekChampionConstInfoBaseCfgData.getMinPlayerNumByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minPlayerNum;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 WeekChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 WeekChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 WeekChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 WeekChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  战斗回合上限 */
		 WeekChampionConstInfoBaseCfgData.getFightBoutLimitByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightBoutLimit;
			}
			return 0;
		};
		 /**  初始赔率 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 WeekChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 WeekChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 WeekChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 WeekChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 WeekChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 WeekChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};
		 /**  每日点赞上限 */
		 WeekChampionConstInfoBaseCfgData.getDayLikeMaxByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayLikeMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 WeekChampionConstInfoBaseCfgData.getLikeAwardByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAward;
			}
			return ""
		};

	return WeekChampionConstInfoBaseCfgData
}());
	
cfg.WeekChampionConstInfoBaseCfgData = WeekChampionConstInfoBaseCfgData;
var WeekChampionRoundBaseCfgData  = /** @class */ (function () {
	function WeekChampionRoundBaseCfgData () {
	}
	WeekChampionRoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionRoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionRoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "roundID");
		};
		 /**  回合 */
		 WeekChampionRoundBaseCfgData.getRoundIDByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.roundID;
			}
			return 0;
		};
		 /**  名称 */
		 WeekChampionRoundBaseCfgData.getNameByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  增加战斗积分 */
		 WeekChampionRoundBaseCfgData.getAddFightScoreByRoundID = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.addFightScore;
			}
			return ""
		};

	return WeekChampionRoundBaseCfgData
}());
	
cfg.WeekChampionRoundBaseCfgData = WeekChampionRoundBaseCfgData;
var WeekChampionLadderRankIntegralBaseCfgData  = /** @class */ (function () {
	function WeekChampionLadderRankIntegralBaseCfgData () {
	}
	WeekChampionLadderRankIntegralBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionLadderRankIntegralBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionLadderRankIntegralBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "ladderRank");
		};
		 /**  天梯排名 */
		 WeekChampionLadderRankIntegralBaseCfgData.getLadderRankByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ladderRank;
			}
			return 0;
		};
		 /**  初始积分 */
		 WeekChampionLadderRankIntegralBaseCfgData.getIntegralByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.integral;
			}
			return 0;
		};

	return WeekChampionLadderRankIntegralBaseCfgData
}());
	
cfg.WeekChampionLadderRankIntegralBaseCfgData = WeekChampionLadderRankIntegralBaseCfgData;
var WeekChampionConstInfoBaseCfgData  = /** @class */ (function () {
	function WeekChampionConstInfoBaseCfgData () {
	}
	WeekChampionConstInfoBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionConstInfoBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionConstInfoBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "circle");
		};
		 /**  开启周期 */
		 WeekChampionConstInfoBaseCfgData.getCircleByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circle;
			}
			return 0;
		};
		 /**  开启天数 */
		 WeekChampionConstInfoBaseCfgData.getCircleDaysByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.circleDays;
			}
			return ""
		};
		 /**  匹配时间 */
		 WeekChampionConstInfoBaseCfgData.getMatchTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.matchTime;
			}
			return ""
		};
		 /**  开启时间 */
		 WeekChampionConstInfoBaseCfgData.getOpenTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.openTime;
			}
			return ""
		};
		 /**  需要跨服天梯排名 */
		 WeekChampionConstInfoBaseCfgData.getNeedLadderRankByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needLadderRank;
			}
			return 0;
		};
		 /**  最少人数 */
		 WeekChampionConstInfoBaseCfgData.getMinPlayerNumByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minPlayerNum;
			}
			return 0;
		};
		 /**  需要玩家等级 */
		 WeekChampionConstInfoBaseCfgData.getNeedPlayerLevelByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.needPlayerLevel;
			}
			return 0;
		};
		 /**  准备时间 */
		 WeekChampionConstInfoBaseCfgData.getReadyTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.readyTime;
			}
			return 0;
		};
		 /**  竞猜时间 */
		 WeekChampionConstInfoBaseCfgData.getGuessTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.guessTime;
			}
			return 0;
		};
		 /**  战斗时长 */
		 WeekChampionConstInfoBaseCfgData.getFightTimeByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightTime;
			}
			return 0;
		};
		 /**  战斗回合上限 */
		 WeekChampionConstInfoBaseCfgData.getFightBoutLimitByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fightBoutLimit;
			}
			return 0;
		};
		 /**  初始赔率 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOdds;
			}
			return 0;
		};
		 /**  初始赔率参数 */
		 WeekChampionConstInfoBaseCfgData.getInitOddsParamByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initOddsParam;
			}
			return 0;
		};
		 /**  最大赔率 */
		 WeekChampionConstInfoBaseCfgData.getMaxOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxOdds;
			}
			return 0;
		};
		 /**  最小赔率 */
		 WeekChampionConstInfoBaseCfgData.getMinOddsByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.minOdds;
			}
			return 0;
		};
		 /**  初始竞猜币 */
		 WeekChampionConstInfoBaseCfgData.getInitGuessCoinByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.initGuessCoin;
			}
			return 0;
		};
		 /**  弹幕需要道具 */
		 WeekChampionConstInfoBaseCfgData.getDanmuNeedItemByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.danmuNeedItem;
			}
			return ""
		};
		 /**  奖励预览 */
		 WeekChampionConstInfoBaseCfgData.getPrizePreviewByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.prizePreview;
			}
			return ""
		};
		 /**  弹幕最大条数 */
		 WeekChampionConstInfoBaseCfgData.getMaxDanmuCountByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.maxDanmuCount;
			}
			return 0;
		};
		 /**  每日点赞上限 */
		 WeekChampionConstInfoBaseCfgData.getDayLikeMaxByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dayLikeMax;
			}
			return 0;
		};
		 /**  点赞奖励 */
		 WeekChampionConstInfoBaseCfgData.getLikeAwardByCircle = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.likeAward;
			}
			return ""
		};

	return WeekChampionConstInfoBaseCfgData
}());
	
cfg.WeekChampionConstInfoBaseCfgData = WeekChampionConstInfoBaseCfgData;
var WeekChampionLadderRankIntegralBaseCfgData  = /** @class */ (function () {
	function WeekChampionLadderRankIntegralBaseCfgData () {
	}
	WeekChampionLadderRankIntegralBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	WeekChampionLadderRankIntegralBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		WeekChampionLadderRankIntegralBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "ladderRank");
		};
		 /**  天梯排名 */
		 WeekChampionLadderRankIntegralBaseCfgData.getLadderRankByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.ladderRank;
			}
			return 0;
		};
		 /**  初始积分 */
		 WeekChampionLadderRankIntegralBaseCfgData.getIntegralByLadderRank = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.integral;
			}
			return 0;
		};

	return WeekChampionLadderRankIntegralBaseCfgData
}());
	
cfg.WeekChampionLadderRankIntegralBaseCfgData = WeekChampionLadderRankIntegralBaseCfgData;
var EffectBaseCfgData  = /** @class */ (function () {
	function EffectBaseCfgData () {
	}
	EffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	EffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		EffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  标识符 */
		 EffectBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  帧动画帧数 */
		 EffectBaseCfgData.getEditorFrameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.editorFrame;
			}
			return 0;
		};
		 /**  资源路径 */
		 EffectBaseCfgData.getResPathById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resPath;
			}
			return ""
		};
		 /**  特效缩放 */
		 EffectBaseCfgData.getScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.scale;
			}
			return 0;
		};
		 /**  特效偏移 */
		 EffectBaseCfgData.getOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.off;
			}
			return ""
		};
		 /**  显示位置 */
		 EffectBaseCfgData.getShowPosById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPos;
			}
			return 0;
		};
		 /**  父节点 */
		 EffectBaseCfgData.getFollowById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.follow;
			}
			return 0;
		};

	return EffectBaseCfgData
}());
	
cfg.EffectBaseCfgData = EffectBaseCfgData;
var EffectBaseCfgData  = /** @class */ (function () {
	function EffectBaseCfgData () {
	}
	EffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	EffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		EffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  标识符 */
		 EffectBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  帧动画帧数 */
		 EffectBaseCfgData.getEditorFrameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.editorFrame;
			}
			return 0;
		};
		 /**  资源路径 */
		 EffectBaseCfgData.getResPathById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resPath;
			}
			return ""
		};
		 /**  特效缩放 */
		 EffectBaseCfgData.getScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.scale;
			}
			return 0;
		};
		 /**  特效偏移 */
		 EffectBaseCfgData.getOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.off;
			}
			return ""
		};
		 /**  显示位置 */
		 EffectBaseCfgData.getShowPosById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPos;
			}
			return 0;
		};
		 /**  父节点 */
		 EffectBaseCfgData.getFollowById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.follow;
			}
			return 0;
		};

	return EffectBaseCfgData
}());
	
cfg.EffectBaseCfgData = EffectBaseCfgData;
var EffectBaseCfgData  = /** @class */ (function () {
	function EffectBaseCfgData () {
	}
	EffectBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	EffectBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		EffectBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  标识符 */
		 EffectBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  帧动画帧数 */
		 EffectBaseCfgData.getEditorFrameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.editorFrame;
			}
			return 0;
		};
		 /**  资源路径 */
		 EffectBaseCfgData.getResPathById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resPath;
			}
			return ""
		};
		 /**  特效缩放 */
		 EffectBaseCfgData.getScaleById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.scale;
			}
			return 0;
		};
		 /**  特效偏移 */
		 EffectBaseCfgData.getOffById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.off;
			}
			return ""
		};
		 /**  显示位置 */
		 EffectBaseCfgData.getShowPosById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.showPos;
			}
			return 0;
		};
		 /**  父节点 */
		 EffectBaseCfgData.getFollowById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.follow;
			}
			return 0;
		};

	return EffectBaseCfgData
}());
	
cfg.EffectBaseCfgData = EffectBaseCfgData;
var GuideBaseCfgData  = /** @class */ (function () {
	function GuideBaseCfgData () {
	}
	GuideBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuideBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuideBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GuideBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  步骤描述 */
		 GuideBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  小助手对话 */
		 GuideBaseCfgData.getDialogById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dialog;
			}
			return ""
		};
		 /**  小助手对话时NPC头像 */
		 GuideBaseCfgData.getNpcHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcHead;
			}
			return ""
		};
		 /**  小助手对话时NPC名字 */
		 GuideBaseCfgData.getNpcNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcName;
			}
			return ""
		};
		 /**  小手指文字 */
		 GuideBaseCfgData.getFingerTipsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fingerTips;
			}
			return ""
		};
		 /**  中途暂停等待玩家自由操作 */
		 GuideBaseCfgData.getPauseGuideById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pauseGuide;
			}
			return 0;
		};
		 /**  挂机战斗结束唤醒引导 */
		 GuideBaseCfgData.getHookStageById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookStage;
			}
			return 0;
		};
		 /**  关键步储存 */
		 GuideBaseCfgData.getStageSaveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageSave;
			}
			return 0;
		};

	return GuideBaseCfgData
}());
	
cfg.GuideBaseCfgData = GuideBaseCfgData;
var GuideBaseCfgData  = /** @class */ (function () {
	function GuideBaseCfgData () {
	}
	GuideBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuideBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuideBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GuideBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  步骤描述 */
		 GuideBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  小助手对话 */
		 GuideBaseCfgData.getDialogById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dialog;
			}
			return ""
		};
		 /**  小助手对话时NPC头像 */
		 GuideBaseCfgData.getNpcHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcHead;
			}
			return ""
		};
		 /**  小助手对话时NPC名字 */
		 GuideBaseCfgData.getNpcNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcName;
			}
			return ""
		};
		 /**  小手指文字 */
		 GuideBaseCfgData.getFingerTipsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fingerTips;
			}
			return ""
		};
		 /**  中途暂停等待玩家自由操作 */
		 GuideBaseCfgData.getPauseGuideById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pauseGuide;
			}
			return 0;
		};
		 /**  挂机战斗结束唤醒引导 */
		 GuideBaseCfgData.getHookStageById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookStage;
			}
			return 0;
		};
		 /**  关键步储存 */
		 GuideBaseCfgData.getStageSaveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageSave;
			}
			return 0;
		};

	return GuideBaseCfgData
}());
	
cfg.GuideBaseCfgData = GuideBaseCfgData;
var GuideBaseCfgData  = /** @class */ (function () {
	function GuideBaseCfgData () {
	}
	GuideBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	GuideBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		GuideBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 GuideBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};
		 /**  步骤描述 */
		 GuideBaseCfgData.getDescById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.desc;
			}
			return ""
		};
		 /**  小助手对话 */
		 GuideBaseCfgData.getDialogById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.dialog;
			}
			return ""
		};
		 /**  小助手对话时NPC头像 */
		 GuideBaseCfgData.getNpcHeadById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcHead;
			}
			return ""
		};
		 /**  小助手对话时NPC名字 */
		 GuideBaseCfgData.getNpcNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.npcName;
			}
			return ""
		};
		 /**  小手指文字 */
		 GuideBaseCfgData.getFingerTipsById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.fingerTips;
			}
			return ""
		};
		 /**  中途暂停等待玩家自由操作 */
		 GuideBaseCfgData.getPauseGuideById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.pauseGuide;
			}
			return 0;
		};
		 /**  挂机战斗结束唤醒引导 */
		 GuideBaseCfgData.getHookStageById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.hookStage;
			}
			return 0;
		};
		 /**  关键步储存 */
		 GuideBaseCfgData.getStageSaveById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.stageSave;
			}
			return 0;
		};

	return GuideBaseCfgData
}());
	
cfg.GuideBaseCfgData = GuideBaseCfgData;
var NumberSystemBaseCfgData  = /** @class */ (function () {
	function NumberSystemBaseCfgData () {
	}
	NumberSystemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	NumberSystemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		NumberSystemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 NumberSystemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};

	return NumberSystemBaseCfgData
}());
	
cfg.NumberSystemBaseCfgData = NumberSystemBaseCfgData;
var NumberSystemBaseCfgData  = /** @class */ (function () {
	function NumberSystemBaseCfgData () {
	}
	NumberSystemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	NumberSystemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		NumberSystemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 NumberSystemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};

	return NumberSystemBaseCfgData
}());
	
cfg.NumberSystemBaseCfgData = NumberSystemBaseCfgData;
var NumberSystemBaseCfgData  = /** @class */ (function () {
	function NumberSystemBaseCfgData () {
	}
	NumberSystemBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	NumberSystemBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		NumberSystemBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 NumberSystemBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return 0;
		};

	return NumberSystemBaseCfgData
}());
	
cfg.NumberSystemBaseCfgData = NumberSystemBaseCfgData;
var ResPreloadBaseCfgData  = /** @class */ (function () {
	function ResPreloadBaseCfgData () {
	}
	ResPreloadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResPreloadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResPreloadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  key */
		 ResPreloadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  预加载触发时机类型 */
		 ResPreloadBaseCfgData.getTriggerTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return 0;
		};
		 /**  触发时机对应的进度值 */
		 ResPreloadBaseCfgData.getTriggerStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerStep;
			}
			return 0;
		};
		 /**  预加载资源类型 */
		 ResPreloadBaseCfgData.getResTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resType;
			}
			return 0;
		};
		 /**  资源参数 */
		 ResPreloadBaseCfgData.getResParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resParams;
			}
			return ""
		};

	return ResPreloadBaseCfgData
}());
	
cfg.ResPreloadBaseCfgData = ResPreloadBaseCfgData;
var ResPreloadBaseCfgData  = /** @class */ (function () {
	function ResPreloadBaseCfgData () {
	}
	ResPreloadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResPreloadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResPreloadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  key */
		 ResPreloadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  预加载触发时机类型 */
		 ResPreloadBaseCfgData.getTriggerTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return 0;
		};
		 /**  触发时机对应的进度值 */
		 ResPreloadBaseCfgData.getTriggerStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerStep;
			}
			return 0;
		};
		 /**  预加载资源类型 */
		 ResPreloadBaseCfgData.getResTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resType;
			}
			return 0;
		};
		 /**  资源参数 */
		 ResPreloadBaseCfgData.getResParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resParams;
			}
			return ""
		};

	return ResPreloadBaseCfgData
}());
	
cfg.ResPreloadBaseCfgData = ResPreloadBaseCfgData;
var ResPreloadBaseCfgData  = /** @class */ (function () {
	function ResPreloadBaseCfgData () {
	}
	ResPreloadBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	ResPreloadBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		ResPreloadBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "index");
		};
		 /**  key */
		 ResPreloadBaseCfgData.getIndexByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.index;
			}
			return 0;
		};
		 /**  预加载触发时机类型 */
		 ResPreloadBaseCfgData.getTriggerTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerType;
			}
			return 0;
		};
		 /**  触发时机对应的进度值 */
		 ResPreloadBaseCfgData.getTriggerStepByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.triggerStep;
			}
			return 0;
		};
		 /**  预加载资源类型 */
		 ResPreloadBaseCfgData.getResTypeByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resType;
			}
			return 0;
		};
		 /**  资源参数 */
		 ResPreloadBaseCfgData.getResParamsByIndex = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.resParams;
			}
			return ""
		};

	return ResPreloadBaseCfgData
}());
	
cfg.ResPreloadBaseCfgData = ResPreloadBaseCfgData;
var SoundBaseCfgData  = /** @class */ (function () {
	function SoundBaseCfgData () {
	}
	SoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id（音效英文名） */
		 SoundBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  类型（几首循环播放） */
		 SoundBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  间隔一段时间再循环（毫秒） */
		 SoundBaseCfgData.getDurationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  音效资源名字（不用填路径） */
		 SoundBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  是否循环播放 */
		 SoundBaseCfgData.getIsLoopById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isLoop;
			}
			return 0;
		};
		 /**  背景音效 */
		 SoundBaseCfgData.getIsBGById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBG;
			}
			return 0;
		};
		 /**  音量大小 */
		 SoundBaseCfgData.getVolumeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.volume;
			}
			return 0;
		};

	return SoundBaseCfgData
}());
	
cfg.SoundBaseCfgData = SoundBaseCfgData;
var SoundBaseCfgData  = /** @class */ (function () {
	function SoundBaseCfgData () {
	}
	SoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id（音效英文名） */
		 SoundBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  类型（几首循环播放） */
		 SoundBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  间隔一段时间再循环（毫秒） */
		 SoundBaseCfgData.getDurationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  音效资源名字（不用填路径） */
		 SoundBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  是否循环播放 */
		 SoundBaseCfgData.getIsLoopById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isLoop;
			}
			return 0;
		};
		 /**  背景音效 */
		 SoundBaseCfgData.getIsBGById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBG;
			}
			return 0;
		};
		 /**  音量大小 */
		 SoundBaseCfgData.getVolumeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.volume;
			}
			return 0;
		};

	return SoundBaseCfgData
}());
	
cfg.SoundBaseCfgData = SoundBaseCfgData;
var SoundBaseCfgData  = /** @class */ (function () {
	function SoundBaseCfgData () {
	}
	SoundBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	SoundBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		SoundBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id（音效英文名） */
		 SoundBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  类型（几首循环播放） */
		 SoundBaseCfgData.getTypeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.type;
			}
			return 0;
		};
		 /**  间隔一段时间再循环（毫秒） */
		 SoundBaseCfgData.getDurationById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.duration;
			}
			return 0;
		};
		 /**  音效资源名字（不用填路径） */
		 SoundBaseCfgData.getNameById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.name;
			}
			return ""
		};
		 /**  是否循环播放 */
		 SoundBaseCfgData.getIsLoopById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isLoop;
			}
			return 0;
		};
		 /**  背景音效 */
		 SoundBaseCfgData.getIsBGById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.isBG;
			}
			return 0;
		};
		 /**  音量大小 */
		 SoundBaseCfgData.getVolumeById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.volume;
			}
			return 0;
		};

	return SoundBaseCfgData
}());
	
cfg.SoundBaseCfgData = SoundBaseCfgData;
var TextConfigBaseCfgData  = /** @class */ (function () {
	function TextConfigBaseCfgData () {
	}
	TextConfigBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TextConfigBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TextConfigBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 TextConfigBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  简体中文(正式配置值不能出现) */
		 TextConfigBaseCfgData.getChineseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chinese;
			}
			return ""
		};

	return TextConfigBaseCfgData
}());
	
cfg.TextConfigBaseCfgData = TextConfigBaseCfgData;
var TextConfigBaseCfgData  = /** @class */ (function () {
	function TextConfigBaseCfgData () {
	}
	TextConfigBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TextConfigBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TextConfigBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 TextConfigBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  简体中文(正式配置值不能出现) */
		 TextConfigBaseCfgData.getChineseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chinese;
			}
			return ""
		};

	return TextConfigBaseCfgData
}());
	
cfg.TextConfigBaseCfgData = TextConfigBaseCfgData;
var TextConfigBaseCfgData  = /** @class */ (function () {
	function TextConfigBaseCfgData () {
	}
	TextConfigBaseCfgData.getInfo = function (value) {
		return this._dataDic[value];
	};
	TextConfigBaseCfgData.getFirstInfo = function () {
		if (this._dataArr && this._dataArr.length > 0) {
			return this._dataArr[0];
		}
	};
		TextConfigBaseCfgData.setup = function (dataArr)
		{
			this._dataArr = dataArr;
			this._dataDic = cfg.TemplateUtil.converArrToDictionary(dataArr, "id");
		};
		 /**  id */
		 TextConfigBaseCfgData.getIdById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.id;
			}
			return ""
		};
		 /**  简体中文(正式配置值不能出现) */
		 TextConfigBaseCfgData.getChineseById = function (value)
		{
			 var info  = this.getInfo(value);
			if(info)
			{
				return info.chinese;
			}
			return ""
		};

	return TextConfigBaseCfgData
}());
	
cfg.TextConfigBaseCfgData = TextConfigBaseCfgData;})(cfg || (cfg = {}));